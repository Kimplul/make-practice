!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
ADJ_ESTERROR	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define ADJ_ESTERROR	/;"	d
ADJ_FREQUENCY	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define ADJ_FREQUENCY	/;"	d
ADJ_MAXERROR	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define ADJ_MAXERROR	/;"	d
ADJ_MICRO	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define ADJ_MICRO	/;"	d
ADJ_NANO	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define ADJ_NANO	/;"	d
ADJ_OFFSET	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define ADJ_OFFSET	/;"	d
ADJ_OFFSET_SINGLESHOT	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define ADJ_OFFSET_SINGLESHOT	/;"	d
ADJ_OFFSET_SS_READ	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define ADJ_OFFSET_SS_READ	/;"	d
ADJ_SETOFFSET	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define ADJ_SETOFFSET	/;"	d
ADJ_STATUS	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define ADJ_STATUS	/;"	d
ADJ_TAI	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define ADJ_TAI	/;"	d
ADJ_TICK	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define ADJ_TICK	/;"	d
ADJ_TIMECONST	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define ADJ_TIMECONST	/;"	d
BIG_ENDIAN	/usr/include/endian.h	/^# define BIG_ENDIAN	/;"	d
BUFSIZ	/usr/include/stdio.h	/^#define BUFSIZ /;"	d
BYTE_ORDER	/usr/include/endian.h	/^# define BYTE_ORDER	/;"	d
CLK_TCK	/usr/include/x86_64-linux-gnu/bits/time.h	/^# define CLK_TCK /;"	d
CLOCKS_PER_SEC	/usr/include/x86_64-linux-gnu/bits/time.h	/^#define CLOCKS_PER_SEC /;"	d
CLOCK_BOOTTIME	/usr/include/x86_64-linux-gnu/bits/time.h	/^# define CLOCK_BOOTTIME	/;"	d
CLOCK_BOOTTIME_ALARM	/usr/include/x86_64-linux-gnu/bits/time.h	/^# define CLOCK_BOOTTIME_ALARM	/;"	d
CLOCK_MONOTONIC	/usr/include/x86_64-linux-gnu/bits/time.h	/^# define CLOCK_MONOTONIC	/;"	d
CLOCK_MONOTONIC_COARSE	/usr/include/x86_64-linux-gnu/bits/time.h	/^# define CLOCK_MONOTONIC_COARSE	/;"	d
CLOCK_MONOTONIC_RAW	/usr/include/x86_64-linux-gnu/bits/time.h	/^# define CLOCK_MONOTONIC_RAW	/;"	d
CLOCK_PROCESS_CPUTIME_ID	/usr/include/x86_64-linux-gnu/bits/time.h	/^# define CLOCK_PROCESS_CPUTIME_ID	/;"	d
CLOCK_REALTIME	/usr/include/x86_64-linux-gnu/bits/time.h	/^# define CLOCK_REALTIME	/;"	d
CLOCK_REALTIME_ALARM	/usr/include/x86_64-linux-gnu/bits/time.h	/^# define CLOCK_REALTIME_ALARM	/;"	d
CLOCK_REALTIME_COARSE	/usr/include/x86_64-linux-gnu/bits/time.h	/^# define CLOCK_REALTIME_COARSE	/;"	d
CLOCK_TAI	/usr/include/x86_64-linux-gnu/bits/time.h	/^# define CLOCK_TAI	/;"	d
CLOCK_THREAD_CPUTIME_ID	/usr/include/x86_64-linux-gnu/bits/time.h	/^# define CLOCK_THREAD_CPUTIME_ID	/;"	d
CLONE_CHILD_CLEARTID	/usr/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_CHILD_CLEARTID /;"	d
CLONE_CHILD_SETTID	/usr/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_CHILD_SETTID /;"	d
CLONE_DETACHED	/usr/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_DETACHED /;"	d
CLONE_FILES	/usr/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_FILES /;"	d
CLONE_FS	/usr/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_FS /;"	d
CLONE_IO	/usr/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_IO	/;"	d
CLONE_NEWCGROUP	/usr/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_NEWCGROUP /;"	d
CLONE_NEWIPC	/usr/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_NEWIPC	/;"	d
CLONE_NEWNET	/usr/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_NEWNET	/;"	d
CLONE_NEWNS	/usr/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_NEWNS /;"	d
CLONE_NEWPID	/usr/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_NEWPID	/;"	d
CLONE_NEWUSER	/usr/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_NEWUSER	/;"	d
CLONE_NEWUTS	/usr/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_NEWUTS	/;"	d
CLONE_PARENT	/usr/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_PARENT /;"	d
CLONE_PARENT_SETTID	/usr/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_PARENT_SETTID /;"	d
CLONE_PIDFD	/usr/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_PIDFD /;"	d
CLONE_PTRACE	/usr/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_PTRACE /;"	d
CLONE_SETTLS	/usr/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_SETTLS /;"	d
CLONE_SIGHAND	/usr/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_SIGHAND /;"	d
CLONE_SYSVSEM	/usr/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_SYSVSEM /;"	d
CLONE_THREAD	/usr/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_THREAD /;"	d
CLONE_UNTRACED	/usr/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_UNTRACED /;"	d
CLONE_VFORK	/usr/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_VFORK /;"	d
CLONE_VM	/usr/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_VM /;"	d
CODE1	src/code1/code1.h	/^#define CODE1$/;"	d
CODE2	src/code2/code2.h	/^#define CODE2$/;"	d
CPU_ALLOC	/usr/include/sched.h	/^# define CPU_ALLOC(/;"	d	signature:(count)
CPU_ALLOC_SIZE	/usr/include/sched.h	/^# define CPU_ALLOC_SIZE(/;"	d	signature:(count)
CPU_AND	/usr/include/sched.h	/^# define CPU_AND(/;"	d	signature:(destset,srcset1,srcset2)
CPU_AND_S	/usr/include/sched.h	/^# define CPU_AND_S(/;"	d	signature:(setsize,destset,srcset1,srcset2)
CPU_CLR	/usr/include/sched.h	/^# define CPU_CLR(/;"	d	signature:(cpu,cpusetp)
CPU_CLR_S	/usr/include/sched.h	/^# define CPU_CLR_S(/;"	d	signature:(cpu,setsize,cpusetp)
CPU_COUNT	/usr/include/sched.h	/^# define CPU_COUNT(/;"	d	signature:(cpusetp)
CPU_COUNT_S	/usr/include/sched.h	/^# define CPU_COUNT_S(/;"	d	signature:(setsize,cpusetp)
CPU_EQUAL	/usr/include/sched.h	/^# define CPU_EQUAL(/;"	d	signature:(cpusetp1,cpusetp2)
CPU_EQUAL_S	/usr/include/sched.h	/^# define CPU_EQUAL_S(/;"	d	signature:(setsize,cpusetp1,cpusetp2)
CPU_FREE	/usr/include/sched.h	/^# define CPU_FREE(/;"	d	signature:(cpuset)
CPU_ISSET	/usr/include/sched.h	/^# define CPU_ISSET(/;"	d	signature:(cpu,cpusetp)
CPU_ISSET_S	/usr/include/sched.h	/^# define CPU_ISSET_S(/;"	d	signature:(cpu,setsize,cpusetp)
CPU_OR	/usr/include/sched.h	/^# define CPU_OR(/;"	d	signature:(destset,srcset1,srcset2)
CPU_OR_S	/usr/include/sched.h	/^# define CPU_OR_S(/;"	d	signature:(setsize,destset,srcset1,srcset2)
CPU_SET	/usr/include/sched.h	/^# define CPU_SET(/;"	d	signature:(cpu,cpusetp)
CPU_SETSIZE	/usr/include/sched.h	/^# define CPU_SETSIZE /;"	d
CPU_SET_S	/usr/include/sched.h	/^# define CPU_SET_S(/;"	d	signature:(cpu,setsize,cpusetp)
CPU_XOR	/usr/include/sched.h	/^# define CPU_XOR(/;"	d	signature:(destset,srcset1,srcset2)
CPU_XOR_S	/usr/include/sched.h	/^# define CPU_XOR_S(/;"	d	signature:(setsize,destset,srcset1,srcset2)
CPU_ZERO	/usr/include/sched.h	/^# define CPU_ZERO(/;"	d	signature:(cpusetp)
CPU_ZERO_S	/usr/include/sched.h	/^# define CPU_ZERO_S(/;"	d	signature:(setsize,cpusetp)
CSIGNAL	/usr/include/x86_64-linux-gnu/bits/sched.h	/^# define CSIGNAL /;"	d
E2BIG	/usr/include/asm-generic/errno-base.h	/^#define	E2BIG	/;"	d
EACCES	/usr/include/asm-generic/errno-base.h	/^#define	EACCES	/;"	d
EADDRINUSE	/usr/include/asm-generic/errno.h	/^#define	EADDRINUSE	/;"	d
EADDRNOTAVAIL	/usr/include/asm-generic/errno.h	/^#define	EADDRNOTAVAIL	/;"	d
EADV	/usr/include/asm-generic/errno.h	/^#define	EADV	/;"	d
EAFNOSUPPORT	/usr/include/asm-generic/errno.h	/^#define	EAFNOSUPPORT	/;"	d
EAGAIN	/usr/include/asm-generic/errno-base.h	/^#define	EAGAIN	/;"	d
EALREADY	/usr/include/asm-generic/errno.h	/^#define	EALREADY	/;"	d
EBADE	/usr/include/asm-generic/errno.h	/^#define	EBADE	/;"	d
EBADF	/usr/include/asm-generic/errno-base.h	/^#define	EBADF	/;"	d
EBADFD	/usr/include/asm-generic/errno.h	/^#define	EBADFD	/;"	d
EBADMSG	/usr/include/asm-generic/errno.h	/^#define	EBADMSG	/;"	d
EBADR	/usr/include/asm-generic/errno.h	/^#define	EBADR	/;"	d
EBADRQC	/usr/include/asm-generic/errno.h	/^#define	EBADRQC	/;"	d
EBADSLT	/usr/include/asm-generic/errno.h	/^#define	EBADSLT	/;"	d
EBFONT	/usr/include/asm-generic/errno.h	/^#define	EBFONT	/;"	d
EBUSY	/usr/include/asm-generic/errno-base.h	/^#define	EBUSY	/;"	d
ECANCELED	/usr/include/asm-generic/errno.h	/^#define	ECANCELED	/;"	d
ECANCELED	/usr/include/x86_64-linux-gnu/bits/errno.h	/^#  define ECANCELED	/;"	d
ECHILD	/usr/include/asm-generic/errno-base.h	/^#define	ECHILD	/;"	d
ECHRNG	/usr/include/asm-generic/errno.h	/^#define	ECHRNG	/;"	d
ECOMM	/usr/include/asm-generic/errno.h	/^#define	ECOMM	/;"	d
ECONNABORTED	/usr/include/asm-generic/errno.h	/^#define	ECONNABORTED	/;"	d
ECONNREFUSED	/usr/include/asm-generic/errno.h	/^#define	ECONNREFUSED	/;"	d
ECONNRESET	/usr/include/asm-generic/errno.h	/^#define	ECONNRESET	/;"	d
EDEADLK	/usr/include/asm-generic/errno.h	/^#define	EDEADLK	/;"	d
EDEADLOCK	/usr/include/asm-generic/errno.h	/^#define	EDEADLOCK	/;"	d
EDESTADDRREQ	/usr/include/asm-generic/errno.h	/^#define	EDESTADDRREQ	/;"	d
EDOM	/usr/include/asm-generic/errno-base.h	/^#define	EDOM	/;"	d
EDOTDOT	/usr/include/asm-generic/errno.h	/^#define	EDOTDOT	/;"	d
EDQUOT	/usr/include/asm-generic/errno.h	/^#define	EDQUOT	/;"	d
EEXIST	/usr/include/asm-generic/errno-base.h	/^#define	EEXIST	/;"	d
EFAULT	/usr/include/asm-generic/errno-base.h	/^#define	EFAULT	/;"	d
EFBIG	/usr/include/asm-generic/errno-base.h	/^#define	EFBIG	/;"	d
EHOSTDOWN	/usr/include/asm-generic/errno.h	/^#define	EHOSTDOWN	/;"	d
EHOSTUNREACH	/usr/include/asm-generic/errno.h	/^#define	EHOSTUNREACH	/;"	d
EHWPOISON	/usr/include/asm-generic/errno.h	/^#define EHWPOISON	/;"	d
EHWPOISON	/usr/include/x86_64-linux-gnu/bits/errno.h	/^#  define EHWPOISON	/;"	d
EIDRM	/usr/include/asm-generic/errno.h	/^#define	EIDRM	/;"	d
EILSEQ	/usr/include/asm-generic/errno.h	/^#define	EILSEQ	/;"	d
EINPROGRESS	/usr/include/asm-generic/errno.h	/^#define	EINPROGRESS	/;"	d
EINTR	/usr/include/asm-generic/errno-base.h	/^#define	EINTR	/;"	d
EINVAL	/usr/include/asm-generic/errno-base.h	/^#define	EINVAL	/;"	d
EIO	/usr/include/asm-generic/errno-base.h	/^#define	EIO	/;"	d
EISCONN	/usr/include/asm-generic/errno.h	/^#define	EISCONN	/;"	d
EISDIR	/usr/include/asm-generic/errno-base.h	/^#define	EISDIR	/;"	d
EISNAM	/usr/include/asm-generic/errno.h	/^#define	EISNAM	/;"	d
EKEYEXPIRED	/usr/include/asm-generic/errno.h	/^#define	EKEYEXPIRED	/;"	d
EKEYREJECTED	/usr/include/asm-generic/errno.h	/^#define	EKEYREJECTED	/;"	d
EKEYREVOKED	/usr/include/asm-generic/errno.h	/^#define	EKEYREVOKED	/;"	d
EL2HLT	/usr/include/asm-generic/errno.h	/^#define	EL2HLT	/;"	d
EL2NSYNC	/usr/include/asm-generic/errno.h	/^#define	EL2NSYNC	/;"	d
EL3HLT	/usr/include/asm-generic/errno.h	/^#define	EL3HLT	/;"	d
EL3RST	/usr/include/asm-generic/errno.h	/^#define	EL3RST	/;"	d
ELIBACC	/usr/include/asm-generic/errno.h	/^#define	ELIBACC	/;"	d
ELIBBAD	/usr/include/asm-generic/errno.h	/^#define	ELIBBAD	/;"	d
ELIBEXEC	/usr/include/asm-generic/errno.h	/^#define	ELIBEXEC	/;"	d
ELIBMAX	/usr/include/asm-generic/errno.h	/^#define	ELIBMAX	/;"	d
ELIBSCN	/usr/include/asm-generic/errno.h	/^#define	ELIBSCN	/;"	d
ELNRNG	/usr/include/asm-generic/errno.h	/^#define	ELNRNG	/;"	d
ELOOP	/usr/include/asm-generic/errno.h	/^#define	ELOOP	/;"	d
EMEDIUMTYPE	/usr/include/asm-generic/errno.h	/^#define	EMEDIUMTYPE	/;"	d
EMFILE	/usr/include/asm-generic/errno-base.h	/^#define	EMFILE	/;"	d
EMLINK	/usr/include/asm-generic/errno-base.h	/^#define	EMLINK	/;"	d
EMSGSIZE	/usr/include/asm-generic/errno.h	/^#define	EMSGSIZE	/;"	d
EMULTIHOP	/usr/include/asm-generic/errno.h	/^#define	EMULTIHOP	/;"	d
ENAMETOOLONG	/usr/include/asm-generic/errno.h	/^#define	ENAMETOOLONG	/;"	d
ENAVAIL	/usr/include/asm-generic/errno.h	/^#define	ENAVAIL	/;"	d
ENETDOWN	/usr/include/asm-generic/errno.h	/^#define	ENETDOWN	/;"	d
ENETRESET	/usr/include/asm-generic/errno.h	/^#define	ENETRESET	/;"	d
ENETUNREACH	/usr/include/asm-generic/errno.h	/^#define	ENETUNREACH	/;"	d
ENFILE	/usr/include/asm-generic/errno-base.h	/^#define	ENFILE	/;"	d
ENOANO	/usr/include/asm-generic/errno.h	/^#define	ENOANO	/;"	d
ENOBUFS	/usr/include/asm-generic/errno.h	/^#define	ENOBUFS	/;"	d
ENOCSI	/usr/include/asm-generic/errno.h	/^#define	ENOCSI	/;"	d
ENODATA	/usr/include/asm-generic/errno.h	/^#define	ENODATA	/;"	d
ENODEV	/usr/include/asm-generic/errno-base.h	/^#define	ENODEV	/;"	d
ENOENT	/usr/include/asm-generic/errno-base.h	/^#define	ENOENT	/;"	d
ENOEXEC	/usr/include/asm-generic/errno-base.h	/^#define	ENOEXEC	/;"	d
ENOKEY	/usr/include/asm-generic/errno.h	/^#define	ENOKEY	/;"	d
ENOLCK	/usr/include/asm-generic/errno.h	/^#define	ENOLCK	/;"	d
ENOLINK	/usr/include/asm-generic/errno.h	/^#define	ENOLINK	/;"	d
ENOMEDIUM	/usr/include/asm-generic/errno.h	/^#define	ENOMEDIUM	/;"	d
ENOMEM	/usr/include/asm-generic/errno-base.h	/^#define	ENOMEM	/;"	d
ENOMSG	/usr/include/asm-generic/errno.h	/^#define	ENOMSG	/;"	d
ENONET	/usr/include/asm-generic/errno.h	/^#define	ENONET	/;"	d
ENOPKG	/usr/include/asm-generic/errno.h	/^#define	ENOPKG	/;"	d
ENOPROTOOPT	/usr/include/asm-generic/errno.h	/^#define	ENOPROTOOPT	/;"	d
ENOSPC	/usr/include/asm-generic/errno-base.h	/^#define	ENOSPC	/;"	d
ENOSR	/usr/include/asm-generic/errno.h	/^#define	ENOSR	/;"	d
ENOSTR	/usr/include/asm-generic/errno.h	/^#define	ENOSTR	/;"	d
ENOSYS	/usr/include/asm-generic/errno.h	/^#define	ENOSYS	/;"	d
ENOTBLK	/usr/include/asm-generic/errno-base.h	/^#define	ENOTBLK	/;"	d
ENOTCONN	/usr/include/asm-generic/errno.h	/^#define	ENOTCONN	/;"	d
ENOTDIR	/usr/include/asm-generic/errno-base.h	/^#define	ENOTDIR	/;"	d
ENOTEMPTY	/usr/include/asm-generic/errno.h	/^#define	ENOTEMPTY	/;"	d
ENOTNAM	/usr/include/asm-generic/errno.h	/^#define	ENOTNAM	/;"	d
ENOTRECOVERABLE	/usr/include/asm-generic/errno.h	/^#define	ENOTRECOVERABLE	/;"	d
ENOTRECOVERABLE	/usr/include/x86_64-linux-gnu/bits/errno.h	/^#  define ENOTRECOVERABLE	/;"	d
ENOTSOCK	/usr/include/asm-generic/errno.h	/^#define	ENOTSOCK	/;"	d
ENOTSUP	/usr/include/x86_64-linux-gnu/bits/errno.h	/^#  define ENOTSUP	/;"	d
ENOTTY	/usr/include/asm-generic/errno-base.h	/^#define	ENOTTY	/;"	d
ENOTUNIQ	/usr/include/asm-generic/errno.h	/^#define	ENOTUNIQ	/;"	d
ENXIO	/usr/include/asm-generic/errno-base.h	/^#define	ENXIO	/;"	d
EOF	/usr/include/stdio.h	/^#define EOF /;"	d
EOPNOTSUPP	/usr/include/asm-generic/errno.h	/^#define	EOPNOTSUPP	/;"	d
EOVERFLOW	/usr/include/asm-generic/errno.h	/^#define	EOVERFLOW	/;"	d
EOWNERDEAD	/usr/include/asm-generic/errno.h	/^#define	EOWNERDEAD	/;"	d
EOWNERDEAD	/usr/include/x86_64-linux-gnu/bits/errno.h	/^#  define EOWNERDEAD	/;"	d
EPERM	/usr/include/asm-generic/errno-base.h	/^#define	EPERM	/;"	d
EPFNOSUPPORT	/usr/include/asm-generic/errno.h	/^#define	EPFNOSUPPORT	/;"	d
EPIPE	/usr/include/asm-generic/errno-base.h	/^#define	EPIPE	/;"	d
EPROTO	/usr/include/asm-generic/errno.h	/^#define	EPROTO	/;"	d
EPROTONOSUPPORT	/usr/include/asm-generic/errno.h	/^#define	EPROTONOSUPPORT	/;"	d
EPROTOTYPE	/usr/include/asm-generic/errno.h	/^#define	EPROTOTYPE	/;"	d
ERANGE	/usr/include/asm-generic/errno-base.h	/^#define	ERANGE	/;"	d
EREMCHG	/usr/include/asm-generic/errno.h	/^#define	EREMCHG	/;"	d
EREMOTE	/usr/include/asm-generic/errno.h	/^#define	EREMOTE	/;"	d
EREMOTEIO	/usr/include/asm-generic/errno.h	/^#define	EREMOTEIO	/;"	d
ERESTART	/usr/include/asm-generic/errno.h	/^#define	ERESTART	/;"	d
ERFKILL	/usr/include/asm-generic/errno.h	/^#define ERFKILL	/;"	d
ERFKILL	/usr/include/x86_64-linux-gnu/bits/errno.h	/^#  define ERFKILL	/;"	d
EROFS	/usr/include/asm-generic/errno-base.h	/^#define	EROFS	/;"	d
ESHUTDOWN	/usr/include/asm-generic/errno.h	/^#define	ESHUTDOWN	/;"	d
ESOCKTNOSUPPORT	/usr/include/asm-generic/errno.h	/^#define	ESOCKTNOSUPPORT	/;"	d
ESPIPE	/usr/include/asm-generic/errno-base.h	/^#define	ESPIPE	/;"	d
ESRCH	/usr/include/asm-generic/errno-base.h	/^#define	ESRCH	/;"	d
ESRMNT	/usr/include/asm-generic/errno.h	/^#define	ESRMNT	/;"	d
ESTALE	/usr/include/asm-generic/errno.h	/^#define	ESTALE	/;"	d
ESTRPIPE	/usr/include/asm-generic/errno.h	/^#define	ESTRPIPE	/;"	d
ETIME	/usr/include/asm-generic/errno.h	/^#define	ETIME	/;"	d
ETIMEDOUT	/usr/include/asm-generic/errno.h	/^#define	ETIMEDOUT	/;"	d
ETOOMANYREFS	/usr/include/asm-generic/errno.h	/^#define	ETOOMANYREFS	/;"	d
ETXTBSY	/usr/include/asm-generic/errno-base.h	/^#define	ETXTBSY	/;"	d
EUCLEAN	/usr/include/asm-generic/errno.h	/^#define	EUCLEAN	/;"	d
EUNATCH	/usr/include/asm-generic/errno.h	/^#define	EUNATCH	/;"	d
EUSERS	/usr/include/asm-generic/errno.h	/^#define	EUSERS	/;"	d
EWOULDBLOCK	/usr/include/asm-generic/errno.h	/^#define	EWOULDBLOCK	/;"	d
EXDEV	/usr/include/asm-generic/errno-base.h	/^#define	EXDEV	/;"	d
EXFULL	/usr/include/asm-generic/errno.h	/^#define	EXFULL	/;"	d
EXIT_FAILURE	/usr/include/stdlib.h	/^#define	EXIT_FAILURE	/;"	d
EXIT_SUCCESS	/usr/include/stdlib.h	/^#define	EXIT_SUCCESS	/;"	d
FD_CLR	/usr/include/x86_64-linux-gnu/sys/select.h	/^#define	FD_CLR(/;"	d	signature:(fd,fdsetp)
FD_ISSET	/usr/include/x86_64-linux-gnu/sys/select.h	/^#define	FD_ISSET(/;"	d	signature:(fd,fdsetp)
FD_SET	/usr/include/x86_64-linux-gnu/sys/select.h	/^#define	FD_SET(/;"	d	signature:(fd,fdsetp)
FD_SETSIZE	/usr/include/x86_64-linux-gnu/sys/select.h	/^#define	FD_SETSIZE	/;"	d
FD_ZERO	/usr/include/x86_64-linux-gnu/sys/select.h	/^#define	FD_ZERO(/;"	d	signature:(fdsetp)
FILE	/usr/include/x86_64-linux-gnu/bits/types/FILE.h	/^typedef struct _IO_FILE FILE;$/;"	t	typeref:struct:_IO_FILE
FILENAME_MAX	/usr/include/x86_64-linux-gnu/bits/stdio_lim.h	/^#define FILENAME_MAX /;"	d
FOPEN_MAX	/usr/include/x86_64-linux-gnu/bits/stdio_lim.h	/^#define FOPEN_MAX /;"	d
INT16_C	/usr/include/stdint.h	/^# define INT16_C(/;"	d	signature:(c)
INT16_MAX	/usr/include/stdint.h	/^# define INT16_MAX	/;"	d
INT16_MIN	/usr/include/stdint.h	/^# define INT16_MIN	/;"	d
INT16_WIDTH	/usr/include/stdint.h	/^# define INT16_WIDTH /;"	d
INT32_C	/usr/include/stdint.h	/^# define INT32_C(/;"	d	signature:(c)
INT32_MAX	/usr/include/stdint.h	/^# define INT32_MAX	/;"	d
INT32_MIN	/usr/include/stdint.h	/^# define INT32_MIN	/;"	d
INT32_WIDTH	/usr/include/stdint.h	/^# define INT32_WIDTH /;"	d
INT64_C	/usr/include/stdint.h	/^#  define INT64_C(/;"	d	signature:(c)
INT64_MAX	/usr/include/stdint.h	/^# define INT64_MAX	/;"	d
INT64_MIN	/usr/include/stdint.h	/^# define INT64_MIN	/;"	d
INT64_WIDTH	/usr/include/stdint.h	/^# define INT64_WIDTH /;"	d
INT8_C	/usr/include/stdint.h	/^# define INT8_C(/;"	d	signature:(c)
INT8_MAX	/usr/include/stdint.h	/^# define INT8_MAX	/;"	d
INT8_MIN	/usr/include/stdint.h	/^# define INT8_MIN	/;"	d
INT8_WIDTH	/usr/include/stdint.h	/^# define INT8_WIDTH /;"	d
INTMAX_C	/usr/include/stdint.h	/^#  define INTMAX_C(/;"	d	signature:(c)
INTMAX_MAX	/usr/include/stdint.h	/^# define INTMAX_MAX	/;"	d
INTMAX_MIN	/usr/include/stdint.h	/^# define INTMAX_MIN	/;"	d
INTMAX_WIDTH	/usr/include/stdint.h	/^# define INTMAX_WIDTH /;"	d
INTPTR_MAX	/usr/include/stdint.h	/^#  define INTPTR_MAX	/;"	d
INTPTR_MIN	/usr/include/stdint.h	/^#  define INTPTR_MIN	/;"	d
INTPTR_WIDTH	/usr/include/stdint.h	/^# define INTPTR_WIDTH /;"	d
INT_FAST16_MAX	/usr/include/stdint.h	/^#  define INT_FAST16_MAX	/;"	d
INT_FAST16_MIN	/usr/include/stdint.h	/^#  define INT_FAST16_MIN	/;"	d
INT_FAST16_WIDTH	/usr/include/stdint.h	/^# define INT_FAST16_WIDTH /;"	d
INT_FAST32_MAX	/usr/include/stdint.h	/^#  define INT_FAST32_MAX	/;"	d
INT_FAST32_MIN	/usr/include/stdint.h	/^#  define INT_FAST32_MIN	/;"	d
INT_FAST32_WIDTH	/usr/include/stdint.h	/^# define INT_FAST32_WIDTH /;"	d
INT_FAST64_MAX	/usr/include/stdint.h	/^# define INT_FAST64_MAX	/;"	d
INT_FAST64_MIN	/usr/include/stdint.h	/^# define INT_FAST64_MIN	/;"	d
INT_FAST64_WIDTH	/usr/include/stdint.h	/^# define INT_FAST64_WIDTH /;"	d
INT_FAST8_MAX	/usr/include/stdint.h	/^# define INT_FAST8_MAX	/;"	d
INT_FAST8_MIN	/usr/include/stdint.h	/^# define INT_FAST8_MIN	/;"	d
INT_FAST8_WIDTH	/usr/include/stdint.h	/^# define INT_FAST8_WIDTH /;"	d
INT_LEAST16_MAX	/usr/include/stdint.h	/^# define INT_LEAST16_MAX	/;"	d
INT_LEAST16_MIN	/usr/include/stdint.h	/^# define INT_LEAST16_MIN	/;"	d
INT_LEAST16_WIDTH	/usr/include/stdint.h	/^# define INT_LEAST16_WIDTH /;"	d
INT_LEAST32_MAX	/usr/include/stdint.h	/^# define INT_LEAST32_MAX	/;"	d
INT_LEAST32_MIN	/usr/include/stdint.h	/^# define INT_LEAST32_MIN	/;"	d
INT_LEAST32_WIDTH	/usr/include/stdint.h	/^# define INT_LEAST32_WIDTH /;"	d
INT_LEAST64_MAX	/usr/include/stdint.h	/^# define INT_LEAST64_MAX	/;"	d
INT_LEAST64_MIN	/usr/include/stdint.h	/^# define INT_LEAST64_MIN	/;"	d
INT_LEAST64_WIDTH	/usr/include/stdint.h	/^# define INT_LEAST64_WIDTH /;"	d
INT_LEAST8_MAX	/usr/include/stdint.h	/^# define INT_LEAST8_MAX	/;"	d
INT_LEAST8_MIN	/usr/include/stdint.h	/^# define INT_LEAST8_MIN	/;"	d
INT_LEAST8_WIDTH	/usr/include/stdint.h	/^# define INT_LEAST8_WIDTH /;"	d
Init	/usr/include/c++/10/bits/ios_base.h	/^      Init();$/;"	p	class:std::ios_base::Init	access:public	signature:()
Init	/usr/include/c++/10/bits/ios_base.h	/^      Init(const Init&) = default;$/;"	p	class:std::ios_base::Init	access:public	signature:(const Init &)
Init	/usr/include/c++/10/bits/ios_base.h	/^    class Init$/;"	c	class:std::ios_base	access:public
LC_ADDRESS	/usr/include/locale.h	/^#define LC_ADDRESS	/;"	d
LC_ADDRESS_MASK	/usr/include/locale.h	/^# define LC_ADDRESS_MASK	/;"	d
LC_ALL	/usr/include/locale.h	/^#define	LC_ALL	/;"	d
LC_ALL_MASK	/usr/include/locale.h	/^# define LC_ALL_MASK	/;"	d
LC_COLLATE	/usr/include/locale.h	/^#define LC_COLLATE /;"	d
LC_COLLATE_MASK	/usr/include/locale.h	/^# define LC_COLLATE_MASK	/;"	d
LC_CTYPE	/usr/include/locale.h	/^#define LC_CTYPE /;"	d
LC_CTYPE_MASK	/usr/include/locale.h	/^# define LC_CTYPE_MASK	/;"	d
LC_GLOBAL_LOCALE	/usr/include/locale.h	/^# define LC_GLOBAL_LOCALE	/;"	d
LC_IDENTIFICATION	/usr/include/locale.h	/^#define LC_IDENTIFICATION /;"	d
LC_IDENTIFICATION_MASK	/usr/include/locale.h	/^# define LC_IDENTIFICATION_MASK	/;"	d
LC_MEASUREMENT	/usr/include/locale.h	/^#define LC_MEASUREMENT	/;"	d
LC_MEASUREMENT_MASK	/usr/include/locale.h	/^# define LC_MEASUREMENT_MASK	/;"	d
LC_MESSAGES	/usr/include/locale.h	/^#define LC_MESSAGES /;"	d
LC_MESSAGES_MASK	/usr/include/locale.h	/^# define LC_MESSAGES_MASK	/;"	d
LC_MONETARY	/usr/include/locale.h	/^#define LC_MONETARY /;"	d
LC_MONETARY_MASK	/usr/include/locale.h	/^# define LC_MONETARY_MASK	/;"	d
LC_NAME	/usr/include/locale.h	/^#define LC_NAME	/;"	d
LC_NAME_MASK	/usr/include/locale.h	/^# define LC_NAME_MASK	/;"	d
LC_NUMERIC	/usr/include/locale.h	/^#define LC_NUMERIC /;"	d
LC_NUMERIC_MASK	/usr/include/locale.h	/^# define LC_NUMERIC_MASK	/;"	d
LC_PAPER	/usr/include/locale.h	/^#define LC_PAPER	/;"	d
LC_PAPER_MASK	/usr/include/locale.h	/^# define LC_PAPER_MASK	/;"	d
LC_TELEPHONE	/usr/include/locale.h	/^#define LC_TELEPHONE	/;"	d
LC_TELEPHONE_MASK	/usr/include/locale.h	/^# define LC_TELEPHONE_MASK	/;"	d
LC_TIME	/usr/include/locale.h	/^#define LC_TIME /;"	d
LC_TIME_MASK	/usr/include/locale.h	/^# define LC_TIME_MASK	/;"	d
LIB	src/lib.h	/^#define LIB$/;"	d
LITTLE_ENDIAN	/usr/include/endian.h	/^# define LITTLE_ENDIAN	/;"	d
LT_OBJDIR	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define LT_OBJDIR /;"	d
L_ctermid	/usr/include/x86_64-linux-gnu/bits/stdio_lim.h	/^# define L_ctermid /;"	d
L_cuserid	/usr/include/x86_64-linux-gnu/bits/stdio_lim.h	/^#  define L_cuserid /;"	d
L_tmpnam	/usr/include/x86_64-linux-gnu/bits/stdio_lim.h	/^#define L_tmpnam /;"	d
MB_CUR_MAX	/usr/include/stdlib.h	/^#define	MB_CUR_MAX	/;"	d
MOD_CLKA	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define MOD_CLKA	/;"	d
MOD_CLKB	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define MOD_CLKB	/;"	d
MOD_ESTERROR	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define MOD_ESTERROR	/;"	d
MOD_FREQUENCY	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define MOD_FREQUENCY	/;"	d
MOD_MAXERROR	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define MOD_MAXERROR	/;"	d
MOD_MICRO	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define MOD_MICRO	/;"	d
MOD_NANO	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define MOD_NANO	/;"	d
MOD_OFFSET	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define MOD_OFFSET	/;"	d
MOD_STATUS	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define MOD_STATUS	/;"	d
MOD_TAI	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define MOD_TAI	/;"	d
MOD_TIMECONST	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define MOD_TIMECONST	/;"	d
NFDBITS	/usr/include/x86_64-linux-gnu/sys/select.h	/^# define NFDBITS	/;"	d
NULL	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define NULL /;"	d
PDP_ENDIAN	/usr/include/endian.h	/^# define PDP_ENDIAN	/;"	d
PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP	/usr/include/pthread.h	/^# define PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP /;"	d
PTHREAD_BARRIER_SERIAL_THREAD	/usr/include/pthread.h	/^# define PTHREAD_BARRIER_SERIAL_THREAD /;"	d
PTHREAD_CANCELED	/usr/include/pthread.h	/^#define PTHREAD_CANCELED /;"	d
PTHREAD_CANCEL_ASYNCHRONOUS	/usr/include/pthread.h	/^  PTHREAD_CANCEL_ASYNCHRONOUS$/;"	e	enum:__anon4eb2adee0a03	access:public
PTHREAD_CANCEL_ASYNCHRONOUS	/usr/include/pthread.h	/^#define PTHREAD_CANCEL_ASYNCHRONOUS	/;"	d
PTHREAD_CANCEL_DEFERRED	/usr/include/pthread.h	/^  PTHREAD_CANCEL_DEFERRED,$/;"	e	enum:__anon4eb2adee0a03	access:public
PTHREAD_CANCEL_DEFERRED	/usr/include/pthread.h	/^#define PTHREAD_CANCEL_DEFERRED	/;"	d
PTHREAD_CANCEL_DISABLE	/usr/include/pthread.h	/^  PTHREAD_CANCEL_DISABLE$/;"	e	enum:__anon4eb2adee0903	access:public
PTHREAD_CANCEL_DISABLE	/usr/include/pthread.h	/^#define PTHREAD_CANCEL_DISABLE /;"	d
PTHREAD_CANCEL_ENABLE	/usr/include/pthread.h	/^  PTHREAD_CANCEL_ENABLE,$/;"	e	enum:__anon4eb2adee0903	access:public
PTHREAD_CANCEL_ENABLE	/usr/include/pthread.h	/^#define PTHREAD_CANCEL_ENABLE /;"	d
PTHREAD_COND_INITIALIZER	/usr/include/pthread.h	/^#define PTHREAD_COND_INITIALIZER /;"	d
PTHREAD_CREATE_DETACHED	/usr/include/pthread.h	/^  PTHREAD_CREATE_DETACHED$/;"	e	enum:__anon4eb2adee0103	access:public
PTHREAD_CREATE_DETACHED	/usr/include/pthread.h	/^#define PTHREAD_CREATE_DETACHED	/;"	d
PTHREAD_CREATE_JOINABLE	/usr/include/pthread.h	/^  PTHREAD_CREATE_JOINABLE,$/;"	e	enum:__anon4eb2adee0103	access:public
PTHREAD_CREATE_JOINABLE	/usr/include/pthread.h	/^#define PTHREAD_CREATE_JOINABLE	/;"	d
PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP	/usr/include/pthread.h	/^# define PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP /;"	d
PTHREAD_EXPLICIT_SCHED	/usr/include/pthread.h	/^  PTHREAD_EXPLICIT_SCHED$/;"	e	enum:__anon4eb2adee0603	access:public
PTHREAD_EXPLICIT_SCHED	/usr/include/pthread.h	/^#define PTHREAD_EXPLICIT_SCHED /;"	d
PTHREAD_INHERIT_SCHED	/usr/include/pthread.h	/^  PTHREAD_INHERIT_SCHED,$/;"	e	enum:__anon4eb2adee0603	access:public
PTHREAD_INHERIT_SCHED	/usr/include/pthread.h	/^#define PTHREAD_INHERIT_SCHED /;"	d
PTHREAD_MUTEX_ADAPTIVE_NP	/usr/include/pthread.h	/^  PTHREAD_MUTEX_ADAPTIVE_NP$/;"	e	enum:__anon4eb2adee0203	access:public
PTHREAD_MUTEX_DEFAULT	/usr/include/pthread.h	/^  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL$/;"	e	enum:__anon4eb2adee0203	access:public
PTHREAD_MUTEX_ERRORCHECK	/usr/include/pthread.h	/^  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,$/;"	e	enum:__anon4eb2adee0203	access:public
PTHREAD_MUTEX_ERRORCHECK_NP	/usr/include/pthread.h	/^  PTHREAD_MUTEX_ERRORCHECK_NP,$/;"	e	enum:__anon4eb2adee0203	access:public
PTHREAD_MUTEX_FAST_NP	/usr/include/pthread.h	/^  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP$/;"	e	enum:__anon4eb2adee0203	access:public
PTHREAD_MUTEX_INITIALIZER	/usr/include/pthread.h	/^#define PTHREAD_MUTEX_INITIALIZER /;"	d
PTHREAD_MUTEX_NORMAL	/usr/include/pthread.h	/^  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,$/;"	e	enum:__anon4eb2adee0203	access:public
PTHREAD_MUTEX_RECURSIVE	/usr/include/pthread.h	/^  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,$/;"	e	enum:__anon4eb2adee0203	access:public
PTHREAD_MUTEX_RECURSIVE_NP	/usr/include/pthread.h	/^  PTHREAD_MUTEX_RECURSIVE_NP,$/;"	e	enum:__anon4eb2adee0203	access:public
PTHREAD_MUTEX_ROBUST	/usr/include/pthread.h	/^  PTHREAD_MUTEX_ROBUST,$/;"	e	enum:__anon4eb2adee0303	access:public
PTHREAD_MUTEX_ROBUST_NP	/usr/include/pthread.h	/^  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST$/;"	e	enum:__anon4eb2adee0303	access:public
PTHREAD_MUTEX_STALLED	/usr/include/pthread.h	/^  PTHREAD_MUTEX_STALLED,$/;"	e	enum:__anon4eb2adee0303	access:public
PTHREAD_MUTEX_STALLED_NP	/usr/include/pthread.h	/^  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,$/;"	e	enum:__anon4eb2adee0303	access:public
PTHREAD_MUTEX_TIMED_NP	/usr/include/pthread.h	/^  PTHREAD_MUTEX_TIMED_NP,$/;"	e	enum:__anon4eb2adee0203	access:public
PTHREAD_ONCE_INIT	/usr/include/pthread.h	/^#define PTHREAD_ONCE_INIT /;"	d
PTHREAD_PRIO_INHERIT	/usr/include/pthread.h	/^  PTHREAD_PRIO_INHERIT,$/;"	e	enum:__anon4eb2adee0403	access:public
PTHREAD_PRIO_NONE	/usr/include/pthread.h	/^  PTHREAD_PRIO_NONE,$/;"	e	enum:__anon4eb2adee0403	access:public
PTHREAD_PRIO_PROTECT	/usr/include/pthread.h	/^  PTHREAD_PRIO_PROTECT$/;"	e	enum:__anon4eb2adee0403	access:public
PTHREAD_PROCESS_PRIVATE	/usr/include/pthread.h	/^  PTHREAD_PROCESS_PRIVATE,$/;"	e	enum:__anon4eb2adee0803	access:public
PTHREAD_PROCESS_PRIVATE	/usr/include/pthread.h	/^#define PTHREAD_PROCESS_PRIVATE /;"	d
PTHREAD_PROCESS_SHARED	/usr/include/pthread.h	/^  PTHREAD_PROCESS_SHARED$/;"	e	enum:__anon4eb2adee0803	access:public
PTHREAD_PROCESS_SHARED	/usr/include/pthread.h	/^#define PTHREAD_PROCESS_SHARED /;"	d
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP	/usr/include/pthread.h	/^# define PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP /;"	d
PTHREAD_RWLOCK_DEFAULT_NP	/usr/include/pthread.h	/^  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP$/;"	e	enum:__anon4eb2adee0503	access:public
PTHREAD_RWLOCK_INITIALIZER	/usr/include/pthread.h	/^# define PTHREAD_RWLOCK_INITIALIZER /;"	d
PTHREAD_RWLOCK_PREFER_READER_NP	/usr/include/pthread.h	/^  PTHREAD_RWLOCK_PREFER_READER_NP,$/;"	e	enum:__anon4eb2adee0503	access:public
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP	/usr/include/pthread.h	/^  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,$/;"	e	enum:__anon4eb2adee0503	access:public
PTHREAD_RWLOCK_PREFER_WRITER_NP	/usr/include/pthread.h	/^  PTHREAD_RWLOCK_PREFER_WRITER_NP,$/;"	e	enum:__anon4eb2adee0503	access:public
PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP	/usr/include/pthread.h	/^#  define PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP /;"	d
PTHREAD_SCOPE_PROCESS	/usr/include/pthread.h	/^  PTHREAD_SCOPE_PROCESS$/;"	e	enum:__anon4eb2adee0703	access:public
PTHREAD_SCOPE_PROCESS	/usr/include/pthread.h	/^#define PTHREAD_SCOPE_PROCESS /;"	d
PTHREAD_SCOPE_SYSTEM	/usr/include/pthread.h	/^  PTHREAD_SCOPE_SYSTEM,$/;"	e	enum:__anon4eb2adee0703	access:public
PTHREAD_SCOPE_SYSTEM	/usr/include/pthread.h	/^#define PTHREAD_SCOPE_SYSTEM /;"	d
PTRDIFF_MAX	/usr/include/stdint.h	/^#   define PTRDIFF_MAX	/;"	d
PTRDIFF_MAX	/usr/include/stdint.h	/^#  define PTRDIFF_MAX	/;"	d
PTRDIFF_MIN	/usr/include/stdint.h	/^#   define PTRDIFF_MIN	/;"	d
PTRDIFF_MIN	/usr/include/stdint.h	/^#  define PTRDIFF_MIN	/;"	d
PTRDIFF_WIDTH	/usr/include/stdint.h	/^# define PTRDIFF_WIDTH /;"	d
P_ALL	/usr/include/x86_64-linux-gnu/bits/waitflags.h	/^  P_ALL,		\/* Wait for any child.  *\/$/;"	e	enum:__anonf56fd07b0103	access:public
P_PGID	/usr/include/x86_64-linux-gnu/bits/waitflags.h	/^  P_PGID		\/* Wait for members of process group.  *\/$/;"	e	enum:__anonf56fd07b0103	access:public
P_PID	/usr/include/x86_64-linux-gnu/bits/waitflags.h	/^  P_PID,		\/* Wait for specified process.  *\/$/;"	e	enum:__anonf56fd07b0103	access:public
P_tmpdir	/usr/include/stdio.h	/^# define P_tmpdir	/;"	d
RAND_MAX	/usr/include/stdlib.h	/^#define	RAND_MAX	/;"	d
RENAME_EXCHANGE	/usr/include/stdio.h	/^# define RENAME_EXCHANGE /;"	d
RENAME_NOREPLACE	/usr/include/stdio.h	/^# define RENAME_NOREPLACE /;"	d
RENAME_WHITEOUT	/usr/include/stdio.h	/^# define RENAME_WHITEOUT /;"	d
SCHED_BATCH	/usr/include/x86_64-linux-gnu/bits/sched.h	/^# define SCHED_BATCH	/;"	d
SCHED_DEADLINE	/usr/include/x86_64-linux-gnu/bits/sched.h	/^# define SCHED_DEADLINE	/;"	d
SCHED_FIFO	/usr/include/x86_64-linux-gnu/bits/sched.h	/^#define SCHED_FIFO	/;"	d
SCHED_IDLE	/usr/include/x86_64-linux-gnu/bits/sched.h	/^# define SCHED_IDLE	/;"	d
SCHED_ISO	/usr/include/x86_64-linux-gnu/bits/sched.h	/^# define SCHED_ISO	/;"	d
SCHED_OTHER	/usr/include/x86_64-linux-gnu/bits/sched.h	/^#define SCHED_OTHER	/;"	d
SCHED_RESET_ON_FORK	/usr/include/x86_64-linux-gnu/bits/sched.h	/^# define SCHED_RESET_ON_FORK	/;"	d
SCHED_RR	/usr/include/x86_64-linux-gnu/bits/sched.h	/^#define SCHED_RR	/;"	d
SEEK_CUR	/usr/include/stdio.h	/^#define SEEK_CUR	/;"	d
SEEK_DATA	/usr/include/stdio.h	/^# define SEEK_DATA	/;"	d
SEEK_END	/usr/include/stdio.h	/^#define SEEK_END	/;"	d
SEEK_HOLE	/usr/include/stdio.h	/^# define SEEK_HOLE	/;"	d
SEEK_SET	/usr/include/stdio.h	/^#define SEEK_SET	/;"	d
SIG_ATOMIC_MAX	/usr/include/stdint.h	/^# define SIG_ATOMIC_MAX	/;"	d
SIG_ATOMIC_MIN	/usr/include/stdint.h	/^# define SIG_ATOMIC_MIN	/;"	d
SIG_ATOMIC_WIDTH	/usr/include/stdint.h	/^# define SIG_ATOMIC_WIDTH /;"	d
SIZE_MAX	/usr/include/stdint.h	/^#   define SIZE_MAX	/;"	d
SIZE_MAX	/usr/include/stdint.h	/^#  define SIZE_MAX	/;"	d
SIZE_WIDTH	/usr/include/stdint.h	/^# define SIZE_WIDTH /;"	d
STA_CLK	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define STA_CLK	/;"	d
STA_CLOCKERR	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define STA_CLOCKERR	/;"	d
STA_DEL	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define STA_DEL	/;"	d
STA_FLL	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define STA_FLL	/;"	d
STA_FREQHOLD	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define STA_FREQHOLD	/;"	d
STA_INS	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define STA_INS	/;"	d
STA_MODE	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define STA_MODE	/;"	d
STA_NANO	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define STA_NANO	/;"	d
STA_PLL	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define STA_PLL	/;"	d
STA_PPSERROR	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define STA_PPSERROR	/;"	d
STA_PPSFREQ	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define STA_PPSFREQ	/;"	d
STA_PPSJITTER	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define STA_PPSJITTER	/;"	d
STA_PPSSIGNAL	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define STA_PPSSIGNAL	/;"	d
STA_PPSTIME	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define STA_PPSTIME	/;"	d
STA_PPSWANDER	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define STA_PPSWANDER	/;"	d
STA_RONLY	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define STA_RONLY /;"	d
STA_UNSYNC	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define STA_UNSYNC	/;"	d
STDC_HEADERS	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define STDC_HEADERS /;"	d
TIMER_ABSTIME	/usr/include/x86_64-linux-gnu/bits/time.h	/^# define TIMER_ABSTIME	/;"	d
TIME_UTC	/usr/include/time.h	/^# define TIME_UTC /;"	d
TMP_MAX	/usr/include/x86_64-linux-gnu/bits/stdio_lim.h	/^#define TMP_MAX /;"	d
UINT16_C	/usr/include/stdint.h	/^# define UINT16_C(/;"	d	signature:(c)
UINT16_MAX	/usr/include/stdint.h	/^# define UINT16_MAX	/;"	d
UINT16_WIDTH	/usr/include/stdint.h	/^# define UINT16_WIDTH /;"	d
UINT32_C	/usr/include/stdint.h	/^# define UINT32_C(/;"	d	signature:(c)
UINT32_MAX	/usr/include/stdint.h	/^# define UINT32_MAX	/;"	d
UINT32_WIDTH	/usr/include/stdint.h	/^# define UINT32_WIDTH /;"	d
UINT64_C	/usr/include/stdint.h	/^#  define UINT64_C(/;"	d	signature:(c)
UINT64_MAX	/usr/include/stdint.h	/^# define UINT64_MAX	/;"	d
UINT64_WIDTH	/usr/include/stdint.h	/^# define UINT64_WIDTH /;"	d
UINT8_C	/usr/include/stdint.h	/^# define UINT8_C(/;"	d	signature:(c)
UINT8_MAX	/usr/include/stdint.h	/^# define UINT8_MAX	/;"	d
UINT8_WIDTH	/usr/include/stdint.h	/^# define UINT8_WIDTH /;"	d
UINTMAX_C	/usr/include/stdint.h	/^#  define UINTMAX_C(/;"	d	signature:(c)
UINTMAX_MAX	/usr/include/stdint.h	/^# define UINTMAX_MAX	/;"	d
UINTMAX_WIDTH	/usr/include/stdint.h	/^# define UINTMAX_WIDTH /;"	d
UINTPTR_MAX	/usr/include/stdint.h	/^#  define UINTPTR_MAX	/;"	d
UINTPTR_WIDTH	/usr/include/stdint.h	/^# define UINTPTR_WIDTH /;"	d
UINT_FAST16_MAX	/usr/include/stdint.h	/^#  define UINT_FAST16_MAX	/;"	d
UINT_FAST16_WIDTH	/usr/include/stdint.h	/^# define UINT_FAST16_WIDTH /;"	d
UINT_FAST32_MAX	/usr/include/stdint.h	/^#  define UINT_FAST32_MAX	/;"	d
UINT_FAST32_WIDTH	/usr/include/stdint.h	/^# define UINT_FAST32_WIDTH /;"	d
UINT_FAST64_MAX	/usr/include/stdint.h	/^# define UINT_FAST64_MAX	/;"	d
UINT_FAST64_WIDTH	/usr/include/stdint.h	/^# define UINT_FAST64_WIDTH /;"	d
UINT_FAST8_MAX	/usr/include/stdint.h	/^# define UINT_FAST8_MAX	/;"	d
UINT_FAST8_WIDTH	/usr/include/stdint.h	/^# define UINT_FAST8_WIDTH /;"	d
UINT_LEAST16_MAX	/usr/include/stdint.h	/^# define UINT_LEAST16_MAX	/;"	d
UINT_LEAST16_WIDTH	/usr/include/stdint.h	/^# define UINT_LEAST16_WIDTH /;"	d
UINT_LEAST32_MAX	/usr/include/stdint.h	/^# define UINT_LEAST32_MAX	/;"	d
UINT_LEAST32_WIDTH	/usr/include/stdint.h	/^# define UINT_LEAST32_WIDTH /;"	d
UINT_LEAST64_MAX	/usr/include/stdint.h	/^# define UINT_LEAST64_MAX	/;"	d
UINT_LEAST64_WIDTH	/usr/include/stdint.h	/^# define UINT_LEAST64_WIDTH /;"	d
UINT_LEAST8_MAX	/usr/include/stdint.h	/^# define UINT_LEAST8_MAX	/;"	d
UINT_LEAST8_WIDTH	/usr/include/stdint.h	/^# define UINT_LEAST8_WIDTH /;"	d
WCHAR_MAX	/usr/include/stdint.h	/^#  define WCHAR_MAX	/;"	d
WCHAR_MAX	/usr/include/wchar.h	/^# define WCHAR_MAX /;"	d
WCHAR_MIN	/usr/include/stdint.h	/^#  define WCHAR_MIN	/;"	d
WCHAR_MIN	/usr/include/wchar.h	/^# define WCHAR_MIN /;"	d
WCHAR_WIDTH	/usr/include/stdint.h	/^# define WCHAR_WIDTH /;"	d
WCONTINUED	/usr/include/x86_64-linux-gnu/bits/waitflags.h	/^# define WCONTINUED	/;"	d
WEOF	/usr/include/wchar.h	/^# define WEOF /;"	d
WEOF	/usr/include/wctype.h	/^# define WEOF /;"	d
WEXITED	/usr/include/x86_64-linux-gnu/bits/waitflags.h	/^# define WEXITED	/;"	d
WEXITSTATUS	/usr/include/stdlib.h	/^# define WEXITSTATUS(/;"	d	signature:(status)
WIFCONTINUED	/usr/include/stdlib.h	/^#  define WIFCONTINUED(/;"	d	signature:(status)
WIFEXITED	/usr/include/stdlib.h	/^# define WIFEXITED(/;"	d	signature:(status)
WIFSIGNALED	/usr/include/stdlib.h	/^# define WIFSIGNALED(/;"	d	signature:(status)
WIFSTOPPED	/usr/include/stdlib.h	/^# define WIFSTOPPED(/;"	d	signature:(status)
WINT_MAX	/usr/include/stdint.h	/^# define WINT_MAX	/;"	d
WINT_MIN	/usr/include/stdint.h	/^# define WINT_MIN	/;"	d
WINT_WIDTH	/usr/include/stdint.h	/^# define WINT_WIDTH /;"	d
WNOHANG	/usr/include/x86_64-linux-gnu/bits/waitflags.h	/^#define	WNOHANG	/;"	d
WNOWAIT	/usr/include/x86_64-linux-gnu/bits/waitflags.h	/^# define WNOWAIT	/;"	d
WSTOPPED	/usr/include/x86_64-linux-gnu/bits/waitflags.h	/^# define WSTOPPED	/;"	d
WSTOPSIG	/usr/include/stdlib.h	/^# define WSTOPSIG(/;"	d	signature:(status)
WTERMSIG	/usr/include/stdlib.h	/^# define WTERMSIG(/;"	d	signature:(status)
WUNTRACED	/usr/include/x86_64-linux-gnu/bits/waitflags.h	/^#define	WUNTRACED	/;"	d
Why	src/main.cpp	/^class Why{$/;"	c	file:
Why::wew	src/main.cpp	/^        int wew;$/;"	m	class:Why	typeref:typename:int	file:	access:private
Why::woooow	src/main.cpp	/^        void woooow(){};$/;"	f	class:Why	typeref:typename:void	file:	access:public	signature:()
_ALLOCATOR_H	/usr/include/c++/10/bits/allocator.h	/^#define _ALLOCATOR_H /;"	d
_ALLOCA_H	/usr/include/alloca.h	/^#define	_ALLOCA_H	/;"	d
_ALLOC_TRAITS_H	/usr/include/c++/10/bits/alloc_traits.h	/^#define _ALLOC_TRAITS_H /;"	d
_ANSI_STDARG_H_	/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h	/^#define _ANSI_STDARG_H_$/;"	d
_ANSI_STDDEF_H	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _ANSI_STDDEF_H$/;"	d
_ASM_GENERIC_ERRNO_BASE_H	/usr/include/asm-generic/errno-base.h	/^#define _ASM_GENERIC_ERRNO_BASE_H$/;"	d
_ASM_GENERIC_ERRNO_H	/usr/include/asm-generic/errno.h	/^#define _ASM_GENERIC_ERRNO_H$/;"	d
_ATFILE_SOURCE	/usr/include/features.h	/^# define _ATFILE_SOURCE	/;"	d
_Alloc_hider	/usr/include/c++/10/bits/basic_string.h	/^	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())$/;"	f	struct:std::basic_string::_Alloc_hider	access:public	signature:(pointer __dat,const _Alloc & __a=_Alloc ())
_Alloc_hider	/usr/include/c++/10/bits/basic_string.h	/^      struct _Alloc_hider : allocator_type \/\/ TODO check __is_final$/;"	s	class:std::basic_string	inherits:allocator_type	access:private
_Alloc_traits	/usr/include/c++/10/bits/basic_string.h	/^      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;$/;"	t	class:std::basic_string	typeref:typename:__gnu_cxx::__alloc_traits<_Char_alloc_type>	access:private
_Alloc_traits	/usr/include/c++/10/bits/basic_string.h	/^      using _Alloc_traits = allocator_traits<_Alloc>;$/;"	t	function:std::operator +	typeref:typename:allocator_traits<_Alloc>
_Arg1_type	/usr/include/c++/10/backward/binders.h	/^      typedef typename _Operation::first_argument_type _Arg1_type;$/;"	t	function:std::bind1st	typeref:typename:_Operation::first_argument_type
_Arg2_type	/usr/include/c++/10/backward/binders.h	/^      typedef typename _Operation::second_argument_type _Arg2_type;$/;"	t	function:std::bind2nd	typeref:typename:_Operation::second_argument_type
_Atomic_word	/usr/include/x86_64-linux-gnu/c++/10/bits/atomic_word.h	/^typedef int _Atomic_word;$/;"	t	typeref:typename:int
_BACKWARD_BINDERS_H	/usr/include/c++/10/backward/binders.h	/^#define _BACKWARD_BINDERS_H /;"	d
_BASIC_IOS_H	/usr/include/c++/10/bits/basic_ios.h	/^#define _BASIC_IOS_H /;"	d
_BASIC_STRING_H	/usr/include/c++/10/bits/basic_string.h	/^#define _BASIC_STRING_H /;"	d
_BITS_BYTESWAP_H	/usr/include/x86_64-linux-gnu/bits/byteswap.h	/^#define _BITS_BYTESWAP_H /;"	d
_BITS_CPU_SET_H	/usr/include/x86_64-linux-gnu/bits/cpu-set.h	/^#define _BITS_CPU_SET_H /;"	d
_BITS_ENDIANNESS_H	/usr/include/x86_64-linux-gnu/bits/endianness.h	/^#define _BITS_ENDIANNESS_H /;"	d
_BITS_ENDIAN_H	/usr/include/x86_64-linux-gnu/bits/endian.h	/^#define _BITS_ENDIAN_H /;"	d
_BITS_ERRNO_H	/usr/include/x86_64-linux-gnu/bits/errno.h	/^#define _BITS_ERRNO_H /;"	d
_BITS_FLOATN_COMMON_H	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#define _BITS_FLOATN_COMMON_H$/;"	d
_BITS_FLOATN_H	/usr/include/x86_64-linux-gnu/bits/floatn.h	/^#define _BITS_FLOATN_H$/;"	d
_BITS_LOCALE_H	/usr/include/x86_64-linux-gnu/bits/locale.h	/^#define _BITS_LOCALE_H	/;"	d
_BITS_PTHREADTYPES_ARCH_H	/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^#define _BITS_PTHREADTYPES_ARCH_H	/;"	d
_BITS_PTHREADTYPES_COMMON_H	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^# define _BITS_PTHREADTYPES_COMMON_H	/;"	d
_BITS_SCHED_H	/usr/include/x86_64-linux-gnu/bits/sched.h	/^#define _BITS_SCHED_H /;"	d
_BITS_SETJMP_H	/usr/include/x86_64-linux-gnu/bits/setjmp.h	/^#define _BITS_SETJMP_H /;"	d
_BITS_STDINT_INTN_H	/usr/include/x86_64-linux-gnu/bits/stdint-intn.h	/^#define _BITS_STDINT_INTN_H	/;"	d
_BITS_STDINT_UINTN_H	/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h	/^#define _BITS_STDINT_UINTN_H	/;"	d
_BITS_STDIO_LIM_H	/usr/include/x86_64-linux-gnu/bits/stdio_lim.h	/^#define _BITS_STDIO_LIM_H /;"	d
_BITS_TIME64_H	/usr/include/x86_64-linux-gnu/bits/time64.h	/^#define	_BITS_TIME64_H	/;"	d
_BITS_TIMEX_H	/usr/include/x86_64-linux-gnu/bits/timex.h	/^#define	_BITS_TIMEX_H	/;"	d
_BITS_TIME_H	/usr/include/x86_64-linux-gnu/bits/time.h	/^#define _BITS_TIME_H	/;"	d
_BITS_TYPESIZES_H	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^#define	_BITS_TYPESIZES_H	/;"	d
_BITS_TYPES_H	/usr/include/x86_64-linux-gnu/bits/types.h	/^#define	_BITS_TYPES_H	/;"	d
_BITS_TYPES_LOCALE_T_H	/usr/include/x86_64-linux-gnu/bits/types/locale_t.h	/^#define _BITS_TYPES_LOCALE_T_H /;"	d
_BITS_TYPES_STRUCT_SCHED_PARAM	/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h	/^#define _BITS_TYPES_STRUCT_SCHED_PARAM /;"	d
_BITS_TYPES___LOCALE_T_H	/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h	/^#define _BITS_TYPES___LOCALE_T_H /;"	d
_BITS_UINTN_IDENTITY_H	/usr/include/x86_64-linux-gnu/bits/uintn-identity.h	/^#define _BITS_UINTN_IDENTITY_H /;"	d
_BITS_WCHAR_H	/usr/include/x86_64-linux-gnu/bits/wchar.h	/^#define _BITS_WCHAR_H	/;"	d
_BITS_WCTYPE_WCHAR_H	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^#define _BITS_WCTYPE_WCHAR_H /;"	d
_BSD_PTRDIFF_T_	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _BSD_PTRDIFF_T_$/;"	d
_BSD_RUNE_T_DEFINED_	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _BSD_RUNE_T_DEFINED_	/;"	d
_BSD_SIZE_T_	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _BSD_SIZE_T_$/;"	d
_BSD_SIZE_T_DEFINED_	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _BSD_SIZE_T_DEFINED_	/;"	d
_BSD_WCHAR_T_	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _BSD_WCHAR_T_$/;"	d
_BSD_WCHAR_T_DEFINED_	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _BSD_WCHAR_T_DEFINED_$/;"	d
_Base	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef is_base_of<random_access_iterator_tag, _Cat> _Base;$/;"	t	struct:std::__is_random_access_iter	typeref:typename:is_base_of<random_access_iterator_tag,_Cat>	access:public
_Base_type	/usr/include/c++/10/ext/alloc_traits.h	/^    typedef std::allocator_traits<_Alloc>           _Base_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:std::allocator_traits<_Alloc>	access:public
_Begin	/usr/include/c++/10/bits/range_access.h	/^    struct _Begin$/;"	s	namespace:std::ranges::__cust_access
_CBegin	/usr/include/c++/10/bits/range_access.h	/^    struct _CBegin$/;"	s	namespace:std::ranges::__cust_access
_CData	/usr/include/c++/10/bits/range_access.h	/^    struct _CData$/;"	s	namespace:std::ranges::__cust_access
_CEnd	/usr/include/c++/10/bits/range_access.h	/^    struct _CEnd$/;"	s	namespace:std::ranges::__cust_access
_CHAR_TRAITS_H	/usr/include/c++/10/bits/char_traits.h	/^#define _CHAR_TRAITS_H /;"	d
_CIter	/usr/include/c++/10/bits/stl_iterator.h	/^	  using _CIter = common_iterator<_Iter, _Sent>;$/;"	t	struct:std::iterator_traits::__ptr	typeref:typename:common_iterator<_Iter,_Sent>	access:public
_CONCEPT_CHECK_H	/usr/include/c++/10/bits/concept_check.h	/^#define _CONCEPT_CHECK_H /;"	d
_CPP_TYPE_TRAITS_H	/usr/include/c++/10/bits/cpp_type_traits.h	/^#define _CPP_TYPE_TRAITS_H /;"	d
_CRBegin	/usr/include/c++/10/bits/range_access.h	/^    struct _CRBegin$/;"	s	namespace:std::ranges::__cust_access
_CREnd	/usr/include/c++/10/bits/range_access.h	/^    struct _CREnd$/;"	s	namespace:std::ranges::__cust_access
_CTYPE_H	/usr/include/ctype.h	/^#define	_CTYPE_H	/;"	d
_CXXABI_FORCED_H	/usr/include/c++/10/bits/cxxabi_forced.h	/^#define _CXXABI_FORCED_H /;"	d
_CXXABI_INIT_EXCEPTION_H	/usr/include/c++/10/bits/cxxabi_init_exception.h	/^#define _CXXABI_INIT_EXCEPTION_H /;"	d
_Callback_list	/usr/include/c++/10/bits/ios_base.h	/^      _Callback_list(ios_base::event_callback __fn, int __index,$/;"	f	struct:std::ios_base::_Callback_list	access:public	signature:(ios_base::event_callback __fn,int __index,_Callback_list * __cb)
_Callback_list	/usr/include/c++/10/bits/ios_base.h	/^    struct _Callback_list$/;"	s	class:std::ios_base	access:protected
_Cat	/usr/include/c++/10/bits/char_traits.h	/^	    using _Cat = typename _ChTraits::comparison_category;$/;"	t	function:std::__detail::__char_traits_cmp_cat	typeref:typename:_ChTraits::comparison_category
_Cat	/usr/include/c++/10/bits/stl_algobase.h	/^      using _Cat = decltype(__comp(*__first1, *__first2));$/;"	t	function:std::lexicographical_compare_three_way
_Cat1	/usr/include/c++/10/bits/stl_algobase.h	/^      using _Cat1 = typename iterator_traits<_II1>::iterator_category;$/;"	t	function:std::__equal4	typeref:typename:iterator_traits<_II1>::iterator_category
_Cat2	/usr/include/c++/10/bits/stl_algobase.h	/^      using _Cat2 = typename iterator_traits<_II2>::iterator_category;$/;"	t	function:std::__equal4	typeref:typename:iterator_traits<_II2>::iterator_category
_Category	/usr/include/c++/10/bits/stl_algobase.h	/^      typedef typename iterator_traits<_BI1>::iterator_category _Category;$/;"	t	function:std::__copy_move_backward_a2	typeref:typename:iterator_traits<_BI1>::iterator_category
_Category	/usr/include/c++/10/bits/stl_algobase.h	/^      typedef typename iterator_traits<_II>::iterator_category _Category;$/;"	t	function:std::__copy_move_a2	typeref:typename:iterator_traits<_II>::iterator_category
_Category1	/usr/include/c++/10/bits/stl_algobase.h	/^      typedef typename iterator_traits<_II1>::iterator_category _Category1;$/;"	t	function:std::__lexicographical_compare_impl	typeref:typename:iterator_traits<_II1>::iterator_category
_Category2	/usr/include/c++/10/bits/stl_algobase.h	/^      typedef typename iterator_traits<_II2>::iterator_category _Category2;$/;"	t	function:std::__lexicographical_compare_impl	typeref:typename:iterator_traits<_II2>::iterator_category
_Char_alloc_type	/usr/include/c++/10/bits/basic_string.h	/^	rebind<_CharT>::other _Char_alloc_type;$/;"	t	class:std::basic_string	typeref:typename:__gnu_cxx::__alloc_traits<_Alloc>::template rebind<_CharT>::other	access:private
_Char_types	/usr/include/c++/10/bits/char_traits.h	/^    struct _Char_types$/;"	s	namespace:__gnu_cxx
_Construct	/usr/include/c++/10/bits/stl_construct.h	/^    _Construct(_T1* __p, const _T2& __value)$/;"	f	namespace:std	typeref:typename:void	signature:(_T1 * __p,const _T2 & __value)
_Construct	/usr/include/c++/10/bits/stl_construct.h	/^    _Construct(_Tp* __p, _Args&&... __args)$/;"	f	namespace:std	typeref:typename:void	signature:(_Tp * __p,_Args &&...__args)
_Construct_novalue	/usr/include/c++/10/bits/stl_construct.h	/^    _Construct_novalue(_T1* __p)$/;"	f	namespace:std	typeref:typename:void	signature:(_T1 * __p)
_ConstructiblePair	/usr/include/c++/10/bits/stl_pair.h	/^      static constexpr bool _ConstructiblePair()$/;"	f	struct:std::_PCC	typeref:typename:bool	access:public	signature:()
_CopyConstructible	/usr/include/c++/10/bits/nested_exception.h	/^      using _CopyConstructible$/;"	t	function:std::throw_with_nested	typeref:typename:__and_<is_copy_constructible<_Up>,is_move_constructible<_Up>>
_CopyMovePair	/usr/include/c++/10/bits/stl_pair.h	/^      static constexpr bool _CopyMovePair()$/;"	f	struct:std::_PCC	typeref:typename:bool	access:public	signature:()
_Cxx_hashtable_define_trivial_hash	/usr/include/c++/10/bits/functional_hash.h	/^#define _Cxx_hashtable_define_trivial_hash(/;"	d	signature:(_Tp)
_DEFAULT_SOURCE	/usr/include/features.h	/^# define _DEFAULT_SOURCE	/;"	d
_Data	/usr/include/c++/10/bits/range_access.h	/^    struct _Data$/;"	s	namespace:std::ranges::__cust_access
_Destroy	/usr/include/c++/10/bits/alloc_traits.h	/^    _Destroy(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,_Allocator & __alloc)
_Destroy	/usr/include/c++/10/bits/alloc_traits.h	/^    _Destroy(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,allocator<_Tp> &)
_Destroy	/usr/include/c++/10/bits/stl_construct.h	/^    _Destroy(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_ForwardIterator __first,_ForwardIterator __last)
_Destroy	/usr/include/c++/10/bits/stl_construct.h	/^    _Destroy(_ForwardIterator __first, _ForwardIterator __last);$/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_ForwardIterator __first,_ForwardIterator __last)
_Destroy	/usr/include/c++/10/bits/stl_construct.h	/^    _Destroy(_Tp* __pointer)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR void	signature:(_Tp * __pointer)
_Destroy_aux	/usr/include/c++/10/bits/stl_construct.h	/^    struct _Destroy_aux$/;"	s	namespace:std
_Destroy_aux	/usr/include/c++/10/bits/stl_construct.h	/^    struct _Destroy_aux<true>$/;"	s	namespace:std
_Destroy_n	/usr/include/c++/10/bits/stl_construct.h	/^    _Destroy_n(_ForwardIterator __first, _Size __count)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_ForwardIterator __first,_Size __count)
_Destroy_n_aux	/usr/include/c++/10/bits/stl_construct.h	/^    struct _Destroy_n_aux$/;"	s	namespace:std
_Destroy_n_aux	/usr/include/c++/10/bits/stl_construct.h	/^    struct _Destroy_n_aux<true>$/;"	s	namespace:std
_Diff	/usr/include/c++/10/bits/alloc_traits.h	/^	struct _Diff$/;"	s	struct:std::allocator_traits	access:private
_Diff	/usr/include/c++/10/bits/alloc_traits.h	/^	struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>$/;"	s	struct:std::allocator_traits	access:private
_Distance	/usr/include/c++/10/bits/stl_algobase.h	/^	  typedef typename iterator_traits<_II>::difference_type _Distance;$/;"	t	function:std::__copy_move::__copy_m	typeref:typename:iterator_traits<_II>::difference_type
_DistanceType	/usr/include/c++/10/bits/stl_algobase.h	/^	_DistanceType;$/;"	t	function:std::__lower_bound	typeref:typename:iterator_traits<_ForwardIterator>::difference_type
_ENDIAN_H	/usr/include/endian.h	/^#define	_ENDIAN_H	/;"	d
_ERRNO_H	/usr/include/errno.h	/^#define	_ERRNO_H /;"	d
_EXCEPTION_DEFINES_H	/usr/include/c++/10/bits/exception_defines.h	/^#define _EXCEPTION_DEFINES_H /;"	d
_EXCEPTION_PTR_H	/usr/include/c++/10/bits/exception_ptr.h	/^#define _EXCEPTION_PTR_H$/;"	d
_EXT_ALLOC_TRAITS_H	/usr/include/c++/10/ext/alloc_traits.h	/^#define _EXT_ALLOC_TRAITS_H /;"	d
_EXT_NUMERIC_TRAITS	/usr/include/c++/10/ext/numeric_traits.h	/^#define _EXT_NUMERIC_TRAITS /;"	d
_EXT_TYPE_TRAITS	/usr/include/c++/10/ext/type_traits.h	/^#define _EXT_TYPE_TRAITS /;"	d
_Empty	/usr/include/c++/10/bits/range_access.h	/^    struct _Empty$/;"	s	namespace:std::ranges::__cust_access
_End	/usr/include/c++/10/bits/range_access.h	/^    struct _End$/;"	s	namespace:std::ranges::__cust_access
_Exit	/usr/include/stdlib.h	/^extern void _Exit (int __status) __THROW __attribute__ ((__noreturn__));$/;"	p	typeref:typename:void	signature:(int __status)
_FEATURES_H	/usr/include/features.h	/^#define	_FEATURES_H	/;"	d
_FUNCTEXCEPT_H	/usr/include/c++/10/bits/functexcept.h	/^#define _FUNCTEXCEPT_H /;"	d
_FUNCTIONAL_HASH_H	/usr/include/c++/10/bits/functional_hash.h	/^#define _FUNCTIONAL_HASH_H /;"	d
_Float128	/usr/include/x86_64-linux-gnu/bits/floatn.h	/^typedef __float128 _Float128;$/;"	t	typeref:typename:__float128
_Float16	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^typedef float _Float16 __attribute__ ((__mode__ (__HF__)));$/;"	t	typeref:typename:float
_Float32	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^typedef float _Float32;$/;"	t	typeref:typename:float
_Float32x	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^typedef double _Float32x;$/;"	t	typeref:typename:double
_Float64	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^typedef double _Float64;$/;"	t	typeref:typename:double
_Float64	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^typedef long double _Float64;$/;"	t	typeref:typename:long double
_Float64x	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^typedef _Float128 _Float64x;$/;"	t	typeref:typename:_Float128
_Float64x	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^typedef long double _Float64x;$/;"	t	typeref:typename:long double
_Fnv_hash_bytes	/usr/include/c++/10/bits/hash_bytes.h	/^  _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);$/;"	p	namespace:std	typeref:typename:size_t	signature:(const void * __ptr,size_t __len,size_t __seed)
_Fnv_hash_impl	/usr/include/c++/10/bits/functional_hash.h	/^  struct _Fnv_hash_impl$/;"	s	namespace:std
_GCC_MAX_ALIGN_T	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _GCC_MAX_ALIGN_T$/;"	d
_GCC_PTRDIFF_T	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _GCC_PTRDIFF_T$/;"	d
_GCC_SIZE_T	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _GCC_SIZE_T$/;"	d
_GCC_WCHAR_T	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _GCC_WCHAR_T$/;"	d
_GCC_WRAP_STDINT_H	/usr/lib/gcc/x86_64-linux-gnu/10/include/stdint.h	/^#define _GCC_WRAP_STDINT_H$/;"	d
_GLIBCXX11_USE_C99_COMPLEX	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX11_USE_C99_COMPLEX /;"	d
_GLIBCXX11_USE_C99_MATH	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX11_USE_C99_MATH /;"	d
_GLIBCXX11_USE_C99_STDIO	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX11_USE_C99_STDIO /;"	d
_GLIBCXX11_USE_C99_STDLIB	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX11_USE_C99_STDLIB /;"	d
_GLIBCXX11_USE_C99_WCHAR	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX11_USE_C99_WCHAR /;"	d
_GLIBCXX14_CONSTEXPR	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#  define _GLIBCXX14_CONSTEXPR /;"	d
_GLIBCXX14_CONSTEXPR	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#  define _GLIBCXX14_CONSTEXPR$/;"	d
_GLIBCXX17_CONSTEXPR	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#  define _GLIBCXX17_CONSTEXPR /;"	d
_GLIBCXX17_CONSTEXPR	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#  define _GLIBCXX17_CONSTEXPR$/;"	d
_GLIBCXX17_DEPRECATED	/usr/include/c++/10/bits/functional_hash.h	/^      typedef _Arg      argument_type _GLIBCXX17_DEPRECATED;$/;"	t	struct:std::__hash_base	typeref:typename:_Arg argument_type	access:public
_GLIBCXX17_DEPRECATED	/usr/include/c++/10/bits/functional_hash.h	/^      typedef _Result     result_type _GLIBCXX17_DEPRECATED;$/;"	t	struct:std::__hash_base	typeref:typename:_Result result_type	access:public
_GLIBCXX17_DEPRECATED	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX17_DEPRECATED /;"	d
_GLIBCXX17_DEPRECATED	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX17_DEPRECATED$/;"	d
_GLIBCXX17_INLINE	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#  define _GLIBCXX17_INLINE /;"	d
_GLIBCXX17_INLINE	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#  define _GLIBCXX17_INLINE$/;"	d
_GLIBCXX20_CONSTEXPR	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#  define _GLIBCXX20_CONSTEXPR /;"	d
_GLIBCXX20_CONSTEXPR	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#  define _GLIBCXX20_CONSTEXPR$/;"	d
_GLIBCXX20_DEPRECATED	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX20_DEPRECATED(/;"	d	signature:(MSG)
_GLIBCXX98_USE_C99_COMPLEX	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX98_USE_C99_COMPLEX /;"	d
_GLIBCXX98_USE_C99_MATH	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX98_USE_C99_MATH /;"	d
_GLIBCXX98_USE_C99_STDIO	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX98_USE_C99_STDIO /;"	d
_GLIBCXX98_USE_C99_STDLIB	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX98_USE_C99_STDLIB /;"	d
_GLIBCXX98_USE_C99_WCHAR	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX98_USE_C99_WCHAR /;"	d
_GLIBCXX_ABI_TAG_CXX11	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_ABI_TAG_CXX11 /;"	d
_GLIBCXX_ALWAYS_INLINE	/usr/include/c++/10/bits/char_traits.h	/^# define _GLIBCXX_ALWAYS_INLINE /;"	d
_GLIBCXX_ASSERTIONS	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_ASSERTIONS /;"	d
_GLIBCXX_ATOMICITY_H	/usr/include/c++/10/ext/atomicity.h	/^#define _GLIBCXX_ATOMICITY_H	/;"	d
_GLIBCXX_ATOMIC_BUILTINS	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_ATOMIC_BUILTINS /;"	d
_GLIBCXX_ATOMIC_WORD_H	/usr/include/x86_64-linux-gnu/c++/10/bits/atomic_word.h	/^#define _GLIBCXX_ATOMIC_WORD_H	/;"	d
_GLIBCXX_BEGIN_EXTERN_C	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_BEGIN_EXTERN_C /;"	d
_GLIBCXX_BEGIN_EXTERN_C	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_BEGIN_EXTERN_C$/;"	d
_GLIBCXX_BEGIN_NAMESPACE_ALGO	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_BEGIN_NAMESPACE_ALGO /;"	d
_GLIBCXX_BEGIN_NAMESPACE_ALGO	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_BEGIN_NAMESPACE_ALGO$/;"	d
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_BEGIN_NAMESPACE_CONTAINER /;"	d
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_BEGIN_NAMESPACE_CONTAINER$/;"	d
_GLIBCXX_BEGIN_NAMESPACE_CXX11	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_BEGIN_NAMESPACE_CXX11 /;"	d
_GLIBCXX_BEGIN_NAMESPACE_CXX11	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_BEGIN_NAMESPACE_CXX11$/;"	d
_GLIBCXX_BEGIN_NAMESPACE_LDBL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_BEGIN_NAMESPACE_LDBL /;"	d
_GLIBCXX_BEGIN_NAMESPACE_LDBL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_BEGIN_NAMESPACE_LDBL$/;"	d
_GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_BEGIN_NAMESPACE_LDBL_OR_CXX11 /;"	d
_GLIBCXX_BEGIN_NAMESPACE_VERSION	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_BEGIN_NAMESPACE_VERSION /;"	d
_GLIBCXX_BEGIN_NAMESPACE_VERSION	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_BEGIN_NAMESPACE_VERSION$/;"	d
_GLIBCXX_BITS_STD_ABS_H	/usr/include/c++/10/bits/std_abs.h	/^#define _GLIBCXX_BITS_STD_ABS_H$/;"	d
_GLIBCXX_BUILTIN_IS_SAME_AS	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#  define _GLIBCXX_BUILTIN_IS_SAME_AS(/;"	d	signature:(T,U)
_GLIBCXX_BUILTIN_IS_SAME_AS	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_BUILTIN_IS_SAME_AS(/;"	d	signature:(T,U)
_GLIBCXX_CDTOR_CALLABI	/usr/include/c++/10/bits/cxxabi_init_exception.h	/^#define _GLIBCXX_CDTOR_CALLABI$/;"	d
_GLIBCXX_CHARCONV_H	/usr/include/c++/10/bits/charconv.h	/^#define _GLIBCXX_CHARCONV_H /;"	d
_GLIBCXX_CONST	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_CONST /;"	d
_GLIBCXX_CONSTEXPR	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#  define _GLIBCXX_CONSTEXPR /;"	d
_GLIBCXX_CONSTEXPR	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#  define _GLIBCXX_CONSTEXPR$/;"	d
_GLIBCXX_CPU_DEFINES	/usr/include/x86_64-linux-gnu/c++/10/bits/cpu_defines.h	/^#define _GLIBCXX_CPU_DEFINES /;"	d
_GLIBCXX_CXX_ALLOCATOR_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++allocator.h	/^#define _GLIBCXX_CXX_ALLOCATOR_H /;"	d
_GLIBCXX_CXX_CONFIG_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_CXX_CONFIG_H /;"	d
_GLIBCXX_CXX_LOCALE_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++locale.h	/^#define _GLIBCXX_CXX_LOCALE_H /;"	d
_GLIBCXX_C_LOCALE_GNU	/usr/include/x86_64-linux-gnu/c++/10/bits/c++locale.h	/^#define _GLIBCXX_C_LOCALE_GNU /;"	d
_GLIBCXX_DARWIN_USE_64_BIT_INODE	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_DARWIN_USE_64_BIT_INODE /;"	d
_GLIBCXX_DEBUG_ASSERT	/usr/include/c++/10/debug/assertions.h	/^# define _GLIBCXX_DEBUG_ASSERT(/;"	d	signature:(_Condition)
_GLIBCXX_DEBUG_ASSERTIONS_H	/usr/include/c++/10/debug/assertions.h	/^#define _GLIBCXX_DEBUG_ASSERTIONS_H /;"	d
_GLIBCXX_DEBUG_MACRO_SWITCH_H	/usr/include/c++/10/debug/debug.h	/^#define _GLIBCXX_DEBUG_MACRO_SWITCH_H /;"	d
_GLIBCXX_DEBUG_ONLY	/usr/include/c++/10/debug/assertions.h	/^# define _GLIBCXX_DEBUG_ONLY(/;"	d	signature:(_Statement)
_GLIBCXX_DEBUG_PEDASSERT	/usr/include/c++/10/debug/assertions.h	/^#  define _GLIBCXX_DEBUG_PEDASSERT(/;"	d	signature:(_Condition)
_GLIBCXX_DEBUG_PEDASSERT	/usr/include/c++/10/debug/assertions.h	/^# define _GLIBCXX_DEBUG_PEDASSERT(/;"	d	signature:(_Condition)
_GLIBCXX_DEFAULT_ABI_TAG	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_DEFAULT_ABI_TAG /;"	d
_GLIBCXX_DEFAULT_ABI_TAG	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_DEFAULT_ABI_TAG$/;"	d
_GLIBCXX_DEPRECATED	/usr/include/c++/10/backward/binders.h	/^    } _GLIBCXX_DEPRECATED;$/;"	v	namespace:std	typeref:class:std::binder1st
_GLIBCXX_DEPRECATED	/usr/include/c++/10/backward/binders.h	/^    } _GLIBCXX_DEPRECATED;$/;"	v	namespace:std	typeref:class:std::binder2nd
_GLIBCXX_DEPRECATED	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_DEPRECATED /;"	d
_GLIBCXX_DEPRECATED	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_DEPRECATED$/;"	d
_GLIBCXX_DEPRECATED_SUGGEST	/usr/include/c++/10/bits/ios_base.h	/^      _GLIBCXX_DEPRECATED_SUGGEST("std::iostate");$/;"	t	class:std::ios_base	typeref:typename:int io_state ()("std::iostate")	access:public
_GLIBCXX_DEPRECATED_SUGGEST	/usr/include/c++/10/bits/ios_base.h	/^      _GLIBCXX_DEPRECATED_SUGGEST("std::openmode");$/;"	t	class:std::ios_base	typeref:typename:int open_mode ()("std::openmode")	access:public
_GLIBCXX_DEPRECATED_SUGGEST	/usr/include/c++/10/bits/ios_base.h	/^      _GLIBCXX_DEPRECATED_SUGGEST("std::seekdir");$/;"	t	class:std::ios_base	typeref:typename:int seek_dir ()("std::seekdir")	access:public
_GLIBCXX_DEPRECATED_SUGGEST	/usr/include/c++/10/bits/ios_base.h	/^      _GLIBCXX_DEPRECATED_SUGGEST("std::streamoff");$/;"	t	class:std::ios_base	typeref:typename:std::streamoff streamoff ()("std::streamoff")	access:public
_GLIBCXX_DEPRECATED_SUGGEST	/usr/include/c++/10/bits/ios_base.h	/^      _GLIBCXX_DEPRECATED_SUGGEST("std::streampos");$/;"	t	class:std::ios_base	typeref:typename:std::streampos streampos ()("std::streampos")	access:public
_GLIBCXX_DEPRECATED_SUGGEST	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_DEPRECATED_SUGGEST(/;"	d	signature:(ALT)
_GLIBCXX_END_EXTERN_C	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_END_EXTERN_C /;"	d
_GLIBCXX_END_EXTERN_C	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_END_EXTERN_C$/;"	d
_GLIBCXX_END_NAMESPACE_ALGO	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_END_NAMESPACE_ALGO /;"	d
_GLIBCXX_END_NAMESPACE_ALGO	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_END_NAMESPACE_ALGO$/;"	d
_GLIBCXX_END_NAMESPACE_CONTAINER	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_END_NAMESPACE_CONTAINER /;"	d
_GLIBCXX_END_NAMESPACE_CONTAINER	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_END_NAMESPACE_CONTAINER$/;"	d
_GLIBCXX_END_NAMESPACE_CXX11	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_END_NAMESPACE_CXX11 /;"	d
_GLIBCXX_END_NAMESPACE_CXX11	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_END_NAMESPACE_CXX11$/;"	d
_GLIBCXX_END_NAMESPACE_LDBL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_END_NAMESPACE_LDBL /;"	d
_GLIBCXX_END_NAMESPACE_LDBL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_END_NAMESPACE_LDBL$/;"	d
_GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_END_NAMESPACE_LDBL_OR_CXX11 /;"	d
_GLIBCXX_END_NAMESPACE_VERSION	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_END_NAMESPACE_VERSION /;"	d
_GLIBCXX_END_NAMESPACE_VERSION	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_END_NAMESPACE_VERSION$/;"	d
_GLIBCXX_ERROR_CONSTANTS	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^#define _GLIBCXX_ERROR_CONSTANTS /;"	d
_GLIBCXX_EXTERN_TEMPLATE	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_EXTERN_TEMPLATE /;"	d
_GLIBCXX_FAST_MATH	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_FAST_MATH /;"	d
_GLIBCXX_FORWARD	/usr/include/c++/10/bits/move.h	/^#define _GLIBCXX_FORWARD(/;"	d	signature:(_Tp,__val)
_GLIBCXX_FULLY_DYNAMIC_STRING	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_FULLY_DYNAMIC_STRING /;"	d
_GLIBCXX_GCC_GTHR_H	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr.h	/^#define _GLIBCXX_GCC_GTHR_H$/;"	d
_GLIBCXX_GCC_GTHR_POSIX_H	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^#define _GLIBCXX_GCC_GTHR_POSIX_H$/;"	d
_GLIBCXX_GTHREAD_USE_WEAK	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr.h	/^#define _GLIBCXX_GTHREAD_USE_WEAK /;"	d
_GLIBCXX_HAS_GTHREADS	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAS_GTHREADS /;"	d
_GLIBCXX_HAVE_ACOSF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_ACOSF /;"	d
_GLIBCXX_HAVE_ACOSF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_ACOSF /;"	d
_GLIBCXX_HAVE_ACOSL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_ACOSL /;"	d
_GLIBCXX_HAVE_ACOSL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_ACOSL /;"	d
_GLIBCXX_HAVE_ALIGNED_ALLOC	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_ALIGNED_ALLOC /;"	d
_GLIBCXX_HAVE_ARPA_INET_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_ARPA_INET_H /;"	d
_GLIBCXX_HAVE_ASINF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_ASINF /;"	d
_GLIBCXX_HAVE_ASINF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_ASINF /;"	d
_GLIBCXX_HAVE_ASINL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_ASINL /;"	d
_GLIBCXX_HAVE_ASINL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_ASINL /;"	d
_GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE /;"	d
_GLIBCXX_HAVE_ATAN2F	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_ATAN2F /;"	d
_GLIBCXX_HAVE_ATAN2F	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_ATAN2F /;"	d
_GLIBCXX_HAVE_ATAN2L	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_ATAN2L /;"	d
_GLIBCXX_HAVE_ATAN2L	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_ATAN2L /;"	d
_GLIBCXX_HAVE_ATANF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_ATANF /;"	d
_GLIBCXX_HAVE_ATANF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_ATANF /;"	d
_GLIBCXX_HAVE_ATANL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_ATANL /;"	d
_GLIBCXX_HAVE_ATANL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_ATANL /;"	d
_GLIBCXX_HAVE_ATOMIC_LOCK_POLICY	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY /;"	d
_GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY /;"	d
_GLIBCXX_HAVE_AT_QUICK_EXIT	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_AT_QUICK_EXIT /;"	d
_GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#  define _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP /;"	d
_GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP /;"	d
_GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#  define _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE /;"	d
_GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE /;"	d
_GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#  define _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED /;"	d
_GLIBCXX_HAVE_BUILTIN_LAUNDER	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#  define _GLIBCXX_HAVE_BUILTIN_LAUNDER /;"	d
_GLIBCXX_HAVE_BUILTIN_LAUNDER	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_BUILTIN_LAUNDER /;"	d
_GLIBCXX_HAVE_CDTOR_CALLABI	/usr/include/c++/10/bits/cxxabi_init_exception.h	/^#define _GLIBCXX_HAVE_CDTOR_CALLABI /;"	d
_GLIBCXX_HAVE_CEILF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_CEILF /;"	d
_GLIBCXX_HAVE_CEILF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_CEILF /;"	d
_GLIBCXX_HAVE_CEILL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_CEILL /;"	d
_GLIBCXX_HAVE_CEILL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_CEILL /;"	d
_GLIBCXX_HAVE_COMPLEX_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_COMPLEX_H /;"	d
_GLIBCXX_HAVE_COSF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_COSF /;"	d
_GLIBCXX_HAVE_COSF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_COSF /;"	d
_GLIBCXX_HAVE_COSHF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_COSHF /;"	d
_GLIBCXX_HAVE_COSHF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_COSHF /;"	d
_GLIBCXX_HAVE_COSHL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_COSHL /;"	d
_GLIBCXX_HAVE_COSHL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_COSHL /;"	d
_GLIBCXX_HAVE_COSL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_COSL /;"	d
_GLIBCXX_HAVE_COSL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_COSL /;"	d
_GLIBCXX_HAVE_DIRENT_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_DIRENT_H /;"	d
_GLIBCXX_HAVE_DLFCN_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_DLFCN_H /;"	d
_GLIBCXX_HAVE_EBADMSG	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_EBADMSG /;"	d
_GLIBCXX_HAVE_ECANCELED	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_ECANCELED /;"	d
_GLIBCXX_HAVE_ECHILD	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_ECHILD /;"	d
_GLIBCXX_HAVE_EIDRM	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_EIDRM /;"	d
_GLIBCXX_HAVE_ENDIAN_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_ENDIAN_H /;"	d
_GLIBCXX_HAVE_ENODATA	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_ENODATA /;"	d
_GLIBCXX_HAVE_ENOLINK	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_ENOLINK /;"	d
_GLIBCXX_HAVE_ENOSPC	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_ENOSPC /;"	d
_GLIBCXX_HAVE_ENOSR	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_ENOSR /;"	d
_GLIBCXX_HAVE_ENOSTR	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_ENOSTR /;"	d
_GLIBCXX_HAVE_ENOTRECOVERABLE	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_ENOTRECOVERABLE /;"	d
_GLIBCXX_HAVE_ENOTSUP	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_ENOTSUP /;"	d
_GLIBCXX_HAVE_EOVERFLOW	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_EOVERFLOW /;"	d
_GLIBCXX_HAVE_EOWNERDEAD	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_EOWNERDEAD /;"	d
_GLIBCXX_HAVE_EPERM	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_EPERM /;"	d
_GLIBCXX_HAVE_EPROTO	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_EPROTO /;"	d
_GLIBCXX_HAVE_ETIME	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_ETIME /;"	d
_GLIBCXX_HAVE_ETIMEDOUT	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_ETIMEDOUT /;"	d
_GLIBCXX_HAVE_ETXTBSY	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_ETXTBSY /;"	d
_GLIBCXX_HAVE_EWOULDBLOCK	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_EWOULDBLOCK /;"	d
_GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46 /;"	d
_GLIBCXX_HAVE_EXECINFO_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_EXECINFO_H /;"	d
_GLIBCXX_HAVE_EXPF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_EXPF /;"	d
_GLIBCXX_HAVE_EXPF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_EXPF /;"	d
_GLIBCXX_HAVE_EXPL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_EXPL /;"	d
_GLIBCXX_HAVE_EXPL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_EXPL /;"	d
_GLIBCXX_HAVE_FABSF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_FABSF /;"	d
_GLIBCXX_HAVE_FABSF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_FABSF /;"	d
_GLIBCXX_HAVE_FABSL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_FABSL /;"	d
_GLIBCXX_HAVE_FABSL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_FABSL /;"	d
_GLIBCXX_HAVE_FCNTL_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_FCNTL_H /;"	d
_GLIBCXX_HAVE_FENV_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_FENV_H /;"	d
_GLIBCXX_HAVE_FINITE	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_FINITE /;"	d
_GLIBCXX_HAVE_FINITE	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_FINITE /;"	d
_GLIBCXX_HAVE_FINITEF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_FINITEF /;"	d
_GLIBCXX_HAVE_FINITEF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_FINITEF /;"	d
_GLIBCXX_HAVE_FINITEL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_FINITEL /;"	d
_GLIBCXX_HAVE_FINITEL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_FINITEL /;"	d
_GLIBCXX_HAVE_FLOAT_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_FLOAT_H /;"	d
_GLIBCXX_HAVE_FLOORF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_FLOORF /;"	d
_GLIBCXX_HAVE_FLOORF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_FLOORF /;"	d
_GLIBCXX_HAVE_FLOORL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_FLOORL /;"	d
_GLIBCXX_HAVE_FLOORL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_FLOORL /;"	d
_GLIBCXX_HAVE_FMODF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_FMODF /;"	d
_GLIBCXX_HAVE_FMODF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_FMODF /;"	d
_GLIBCXX_HAVE_FMODL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_FMODL /;"	d
_GLIBCXX_HAVE_FMODL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_FMODL /;"	d
_GLIBCXX_HAVE_FPCLASS	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_FPCLASS /;"	d
_GLIBCXX_HAVE_FREXPF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_FREXPF /;"	d
_GLIBCXX_HAVE_FREXPF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_FREXPF /;"	d
_GLIBCXX_HAVE_FREXPL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_FREXPL /;"	d
_GLIBCXX_HAVE_FREXPL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_FREXPL /;"	d
_GLIBCXX_HAVE_GETIPINFO	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_GETIPINFO /;"	d
_GLIBCXX_HAVE_GETS	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_GETS /;"	d
_GLIBCXX_HAVE_HYPOT	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_HYPOT /;"	d
_GLIBCXX_HAVE_HYPOT	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_HYPOT /;"	d
_GLIBCXX_HAVE_HYPOTF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_HYPOTF /;"	d
_GLIBCXX_HAVE_HYPOTF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_HYPOTF /;"	d
_GLIBCXX_HAVE_HYPOTL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_HYPOTL /;"	d
_GLIBCXX_HAVE_HYPOTL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_HYPOTL /;"	d
_GLIBCXX_HAVE_ICONV	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_ICONV /;"	d
_GLIBCXX_HAVE_INT64_T	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_INT64_T /;"	d
_GLIBCXX_HAVE_INT64_T_LONG	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_INT64_T_LONG /;"	d
_GLIBCXX_HAVE_INTTYPES_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_INTTYPES_H /;"	d
_GLIBCXX_HAVE_ISINF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_ISINF /;"	d
_GLIBCXX_HAVE_ISINFF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_ISINFF /;"	d
_GLIBCXX_HAVE_ISINFF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_ISINFF /;"	d
_GLIBCXX_HAVE_ISINFL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_ISINFL /;"	d
_GLIBCXX_HAVE_ISINFL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_ISINFL /;"	d
_GLIBCXX_HAVE_ISNAN	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_ISNAN /;"	d
_GLIBCXX_HAVE_ISNANF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_ISNANF /;"	d
_GLIBCXX_HAVE_ISNANF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_ISNANF /;"	d
_GLIBCXX_HAVE_ISNANL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_ISNANL /;"	d
_GLIBCXX_HAVE_ISNANL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_ISNANL /;"	d
_GLIBCXX_HAVE_ISWBLANK	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_ISWBLANK /;"	d
_GLIBCXX_HAVE_LC_MESSAGES	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_LC_MESSAGES /;"	d
_GLIBCXX_HAVE_LDEXPF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_LDEXPF /;"	d
_GLIBCXX_HAVE_LDEXPF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_LDEXPF /;"	d
_GLIBCXX_HAVE_LDEXPL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_LDEXPL /;"	d
_GLIBCXX_HAVE_LDEXPL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_LDEXPL /;"	d
_GLIBCXX_HAVE_LIBINTL_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_LIBINTL_H /;"	d
_GLIBCXX_HAVE_LIMIT_AS	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_LIMIT_AS /;"	d
_GLIBCXX_HAVE_LIMIT_DATA	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_LIMIT_DATA /;"	d
_GLIBCXX_HAVE_LIMIT_FSIZE	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_LIMIT_FSIZE /;"	d
_GLIBCXX_HAVE_LIMIT_RSS	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_LIMIT_RSS /;"	d
_GLIBCXX_HAVE_LIMIT_VMEM	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_LIMIT_VMEM /;"	d
_GLIBCXX_HAVE_LINK	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_LINK /;"	d
_GLIBCXX_HAVE_LINUX_FUTEX	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_LINUX_FUTEX /;"	d
_GLIBCXX_HAVE_LINUX_RANDOM_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_LINUX_RANDOM_H /;"	d
_GLIBCXX_HAVE_LINUX_TYPES_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_LINUX_TYPES_H /;"	d
_GLIBCXX_HAVE_LOCALE_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_LOCALE_H /;"	d
_GLIBCXX_HAVE_LOG10F	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_LOG10F /;"	d
_GLIBCXX_HAVE_LOG10F	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_LOG10F /;"	d
_GLIBCXX_HAVE_LOG10L	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_LOG10L /;"	d
_GLIBCXX_HAVE_LOG10L	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_LOG10L /;"	d
_GLIBCXX_HAVE_LOGF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_LOGF /;"	d
_GLIBCXX_HAVE_LOGF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_LOGF /;"	d
_GLIBCXX_HAVE_LOGL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_LOGL /;"	d
_GLIBCXX_HAVE_LOGL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_LOGL /;"	d
_GLIBCXX_HAVE_MBSTATE_T	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_MBSTATE_T /;"	d
_GLIBCXX_HAVE_MEMALIGN	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_MEMALIGN /;"	d
_GLIBCXX_HAVE_MEMORY_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_MEMORY_H /;"	d
_GLIBCXX_HAVE_MODF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_MODF /;"	d
_GLIBCXX_HAVE_MODF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_MODF /;"	d
_GLIBCXX_HAVE_MODFF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_MODFF /;"	d
_GLIBCXX_HAVE_MODFF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_MODFF /;"	d
_GLIBCXX_HAVE_MODFL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_MODFL /;"	d
_GLIBCXX_HAVE_MODFL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_MODFL /;"	d
_GLIBCXX_HAVE_NETDB_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_NETDB_H /;"	d
_GLIBCXX_HAVE_NETINET_IN_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_NETINET_IN_H /;"	d
_GLIBCXX_HAVE_NETINET_TCP_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_NETINET_TCP_H /;"	d
_GLIBCXX_HAVE_POLL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_POLL /;"	d
_GLIBCXX_HAVE_POLL_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_POLL_H /;"	d
_GLIBCXX_HAVE_POSIX_MEMALIGN	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_POSIX_MEMALIGN /;"	d
_GLIBCXX_HAVE_POWF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_POWF /;"	d
_GLIBCXX_HAVE_POWF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_POWF /;"	d
_GLIBCXX_HAVE_POWL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_POWL /;"	d
_GLIBCXX_HAVE_POWL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_POWL /;"	d
_GLIBCXX_HAVE_QFPCLASS	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_QFPCLASS /;"	d
_GLIBCXX_HAVE_QUICK_EXIT	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_QUICK_EXIT /;"	d
_GLIBCXX_HAVE_READLINK	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_READLINK /;"	d
_GLIBCXX_HAVE_SETENV	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_SETENV /;"	d
_GLIBCXX_HAVE_SINCOS	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_SINCOS /;"	d
_GLIBCXX_HAVE_SINCOS	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_SINCOS /;"	d
_GLIBCXX_HAVE_SINCOSF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_SINCOSF /;"	d
_GLIBCXX_HAVE_SINCOSF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_SINCOSF /;"	d
_GLIBCXX_HAVE_SINCOSL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_SINCOSL /;"	d
_GLIBCXX_HAVE_SINCOSL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_SINCOSL /;"	d
_GLIBCXX_HAVE_SINF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_SINF /;"	d
_GLIBCXX_HAVE_SINF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_SINF /;"	d
_GLIBCXX_HAVE_SINHF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_SINHF /;"	d
_GLIBCXX_HAVE_SINHF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_SINHF /;"	d
_GLIBCXX_HAVE_SINHL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_SINHL /;"	d
_GLIBCXX_HAVE_SINHL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_SINHL /;"	d
_GLIBCXX_HAVE_SINL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_SINL /;"	d
_GLIBCXX_HAVE_SINL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_SINL /;"	d
_GLIBCXX_HAVE_SOCKATMARK	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_SOCKATMARK /;"	d
_GLIBCXX_HAVE_SQRTF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_SQRTF /;"	d
_GLIBCXX_HAVE_SQRTF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_SQRTF /;"	d
_GLIBCXX_HAVE_SQRTL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_SQRTL /;"	d
_GLIBCXX_HAVE_SQRTL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_SQRTL /;"	d
_GLIBCXX_HAVE_STDALIGN_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_STDALIGN_H /;"	d
_GLIBCXX_HAVE_STDBOOL_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_STDBOOL_H /;"	d
_GLIBCXX_HAVE_STDINT_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_STDINT_H /;"	d
_GLIBCXX_HAVE_STDLIB_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_STDLIB_H /;"	d
_GLIBCXX_HAVE_STRERROR_L	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_STRERROR_L /;"	d
_GLIBCXX_HAVE_STRERROR_R	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_STRERROR_R /;"	d
_GLIBCXX_HAVE_STRINGS_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_STRINGS_H /;"	d
_GLIBCXX_HAVE_STRING_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_STRING_H /;"	d
_GLIBCXX_HAVE_STRTOF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_STRTOF /;"	d
_GLIBCXX_HAVE_STRTOF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_STRTOF /;"	d
_GLIBCXX_HAVE_STRTOLD	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_STRTOLD /;"	d
_GLIBCXX_HAVE_STRTOLD	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_STRTOLD /;"	d
_GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE /;"	d
_GLIBCXX_HAVE_STRXFRM_L	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_STRXFRM_L /;"	d
_GLIBCXX_HAVE_SYMLINK	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_SYMLINK /;"	d
_GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT /;"	d
_GLIBCXX_HAVE_SYS_IOCTL_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_SYS_IOCTL_H /;"	d
_GLIBCXX_HAVE_SYS_IPC_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_SYS_IPC_H /;"	d
_GLIBCXX_HAVE_SYS_PARAM_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_SYS_PARAM_H /;"	d
_GLIBCXX_HAVE_SYS_RESOURCE_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_SYS_RESOURCE_H /;"	d
_GLIBCXX_HAVE_SYS_SDT_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_SYS_SDT_H /;"	d
_GLIBCXX_HAVE_SYS_SEM_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_SYS_SEM_H /;"	d
_GLIBCXX_HAVE_SYS_SOCKET_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_SYS_SOCKET_H /;"	d
_GLIBCXX_HAVE_SYS_STATVFS_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_SYS_STATVFS_H /;"	d
_GLIBCXX_HAVE_SYS_STAT_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_SYS_STAT_H /;"	d
_GLIBCXX_HAVE_SYS_SYSINFO_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_SYS_SYSINFO_H /;"	d
_GLIBCXX_HAVE_SYS_TIME_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_SYS_TIME_H /;"	d
_GLIBCXX_HAVE_SYS_TYPES_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_SYS_TYPES_H /;"	d
_GLIBCXX_HAVE_SYS_UIO_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_SYS_UIO_H /;"	d
_GLIBCXX_HAVE_S_ISREG	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_S_ISREG /;"	d
_GLIBCXX_HAVE_TANF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_TANF /;"	d
_GLIBCXX_HAVE_TANF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_TANF /;"	d
_GLIBCXX_HAVE_TANHF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_TANHF /;"	d
_GLIBCXX_HAVE_TANHF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_TANHF /;"	d
_GLIBCXX_HAVE_TANHL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_TANHL /;"	d
_GLIBCXX_HAVE_TANHL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_TANHL /;"	d
_GLIBCXX_HAVE_TANL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_HAVE_TANL /;"	d
_GLIBCXX_HAVE_TANL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_TANL /;"	d
_GLIBCXX_HAVE_TGMATH_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_TGMATH_H /;"	d
_GLIBCXX_HAVE_TIMESPEC_GET	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_TIMESPEC_GET /;"	d
_GLIBCXX_HAVE_TLS	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_TLS /;"	d
_GLIBCXX_HAVE_TRUNCATE	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_TRUNCATE /;"	d
_GLIBCXX_HAVE_UCHAR_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_UCHAR_H /;"	d
_GLIBCXX_HAVE_UNISTD_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_UNISTD_H /;"	d
_GLIBCXX_HAVE_UTIME_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_UTIME_H /;"	d
_GLIBCXX_HAVE_VFWSCANF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_VFWSCANF /;"	d
_GLIBCXX_HAVE_VSWSCANF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_VSWSCANF /;"	d
_GLIBCXX_HAVE_VWSCANF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_VWSCANF /;"	d
_GLIBCXX_HAVE_WCHAR_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_WCHAR_H /;"	d
_GLIBCXX_HAVE_WCSTOF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_WCSTOF /;"	d
_GLIBCXX_HAVE_WCTYPE_H	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_WCTYPE_H /;"	d
_GLIBCXX_HAVE_WRITEV	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE_WRITEV /;"	d
_GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL /;"	d
_GLIBCXX_HOSTED	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_HOSTED /;"	d
_GLIBCXX_ICONV_CONST	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_ICONV_CONST /;"	d
_GLIBCXX_INCLUDE_NEXT_C_HEADERS	/usr/include/c++/10/bits/std_abs.h	/^#define _GLIBCXX_INCLUDE_NEXT_C_HEADERS$/;"	d
_GLIBCXX_INLINE_VERSION	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_INLINE_VERSION /;"	d
_GLIBCXX_INT_N_TRAITS	/usr/include/c++/10/ext/numeric_traits.h	/^#define _GLIBCXX_INT_N_TRAITS(/;"	d	signature:(T,WIDTH)
_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR	/usr/include/c++/10/bits/stl_iterator.h	/^#define _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(/;"	d	signature:(_Iter)
_GLIBCXX_MAKE_MOVE_ITERATOR	/usr/include/c++/10/bits/stl_iterator.h	/^#define _GLIBCXX_MAKE_MOVE_ITERATOR(/;"	d	signature:(_Iter)
_GLIBCXX_MANGLE_SIZE_T	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_MANGLE_SIZE_T /;"	d
_GLIBCXX_MOVE	/usr/include/c++/10/bits/move.h	/^#define _GLIBCXX_MOVE(/;"	d	signature:(__val)
_GLIBCXX_MOVE3	/usr/include/c++/10/bits/stl_algobase.h	/^#define _GLIBCXX_MOVE3(/;"	d	signature:(_Tp,_Up,_Vp)
_GLIBCXX_MOVE_BACKWARD3	/usr/include/c++/10/bits/stl_algobase.h	/^#define _GLIBCXX_MOVE_BACKWARD3(/;"	d	signature:(_Tp,_Up,_Vp)
_GLIBCXX_NAMESPACE_CXX11	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_NAMESPACE_CXX11 /;"	d
_GLIBCXX_NAMESPACE_CXX11	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_NAMESPACE_CXX11$/;"	d
_GLIBCXX_NAMESPACE_LDBL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_NAMESPACE_LDBL /;"	d
_GLIBCXX_NAMESPACE_LDBL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_NAMESPACE_LDBL$/;"	d
_GLIBCXX_NAMESPACE_LDBL_OR_CXX11	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_NAMESPACE_LDBL_OR_CXX11 /;"	d
_GLIBCXX_NATIVE_THREAD_ID	/usr/include/x86_64-linux-gnu/c++/10/bits/os_defines.h	/^# define _GLIBCXX_NATIVE_THREAD_ID /;"	d
_GLIBCXX_NESTED_EXCEPTION_H	/usr/include/c++/10/bits/nested_exception.h	/^#define _GLIBCXX_NESTED_EXCEPTION_H /;"	d
_GLIBCXX_NODISCARD	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_NODISCARD /;"	d
_GLIBCXX_NODISCARD	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_NODISCARD$/;"	d
_GLIBCXX_NOEXCEPT	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#  define _GLIBCXX_NOEXCEPT /;"	d
_GLIBCXX_NOEXCEPT	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#  define _GLIBCXX_NOEXCEPT$/;"	d
_GLIBCXX_NOEXCEPT_IF	/usr/include/c++/10/bits/basic_string.h	/^      _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Alloc>::value)$/;"	f	class:std::basic_string	typeref:typename:basic_string ()	access:public	signature:(is_nothrow_default_constructible<_Alloc>::value)
_GLIBCXX_NOEXCEPT_IF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#  define _GLIBCXX_NOEXCEPT_IF(/;"	d	signature:(...)
_GLIBCXX_NOEXCEPT_PARM	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_NOEXCEPT_PARM /;"	d
_GLIBCXX_NOEXCEPT_PARM	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_NOEXCEPT_PARM$/;"	d
_GLIBCXX_NOEXCEPT_QUAL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_NOEXCEPT_QUAL /;"	d
_GLIBCXX_NOEXCEPT_QUAL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_NOEXCEPT_QUAL$/;"	d
_GLIBCXX_NORETURN	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_NORETURN /;"	d
_GLIBCXX_NOTHROW	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#  define _GLIBCXX_NOTHROW /;"	d
_GLIBCXX_NOTHROW	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_NOTHROW /;"	d
_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC	/usr/include/x86_64-linux-gnu/c++/10/bits/os_defines.h	/^#define _GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC /;"	d
_GLIBCXX_NUM_CATEGORIES	/usr/include/x86_64-linux-gnu/c++/10/bits/c++locale.h	/^#define _GLIBCXX_NUM_CATEGORIES /;"	d
_GLIBCXX_NUM_CXX11_FACETS	/usr/include/c++/10/bits/locale_facets.h	/^# define  _GLIBCXX_NUM_CXX11_FACETS /;"	d
_GLIBCXX_NUM_FACETS	/usr/include/c++/10/bits/locale_facets.h	/^# define  _GLIBCXX_NUM_FACETS /;"	d
_GLIBCXX_NUM_UNICODE_FACETS	/usr/include/c++/10/bits/locale_facets.h	/^# define _GLIBCXX_NUM_UNICODE_FACETS /;"	d
_GLIBCXX_OS_DEFINES	/usr/include/x86_64-linux-gnu/c++/10/bits/os_defines.h	/^#define _GLIBCXX_OS_DEFINES /;"	d
_GLIBCXX_PACKAGE_BUGREPORT	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_PACKAGE_BUGREPORT /;"	d
_GLIBCXX_PACKAGE_NAME	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_PACKAGE_NAME /;"	d
_GLIBCXX_PACKAGE_STRING	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_PACKAGE_STRING /;"	d
_GLIBCXX_PACKAGE_TARNAME	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_PACKAGE_TARNAME /;"	d
_GLIBCXX_PACKAGE_URL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_PACKAGE_URL /;"	d
_GLIBCXX_PACKAGE__GLIBCXX_VERSION	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_PACKAGE__GLIBCXX_VERSION /;"	d
_GLIBCXX_POSTYPES_H	/usr/include/c++/10/bits/postypes.h	/^#define _GLIBCXX_POSTYPES_H /;"	d
_GLIBCXX_PREDEFINED_OPS_H	/usr/include/c++/10/bits/predefined_ops.h	/^#define _GLIBCXX_PREDEFINED_OPS_H	/;"	d
_GLIBCXX_PSEUDO_VISIBILITY	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_PSEUDO_VISIBILITY(/;"	d	signature:(V)
_GLIBCXX_PURE	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_PURE /;"	d
_GLIBCXX_RANGE_ACCESS_H	/usr/include/c++/10/bits/range_access.h	/^#define _GLIBCXX_RANGE_ACCESS_H /;"	d
_GLIBCXX_READ_MEM_BARRIER	/usr/include/c++/10/ext/atomicity.h	/^#define _GLIBCXX_READ_MEM_BARRIER /;"	d
_GLIBCXX_READ_MEM_BARRIER	/usr/include/x86_64-linux-gnu/c++/10/bits/atomic_word.h	/^#define _GLIBCXX_READ_MEM_BARRIER /;"	d
_GLIBCXX_RELEASE	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_RELEASE /;"	d
_GLIBCXX_RES_LIMITS	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_RES_LIMITS /;"	d
_GLIBCXX_SANITIZE_STD_ALLOCATOR	/usr/include/x86_64-linux-gnu/c++/10/bits/c++allocator.h	/^# define _GLIBCXX_SANITIZE_STD_ALLOCATOR /;"	d
_GLIBCXX_STDIO_EOF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_STDIO_EOF /;"	d
_GLIBCXX_STDIO_SEEK_CUR	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_STDIO_SEEK_CUR /;"	d
_GLIBCXX_STDIO_SEEK_END	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_STDIO_SEEK_END /;"	d
_GLIBCXX_STD_A	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_STD_A /;"	d
_GLIBCXX_STD_C	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_STD_C /;"	d
_GLIBCXX_SYMVER	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_SYMVER /;"	d
_GLIBCXX_SYMVER_GNU	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_SYMVER_GNU /;"	d
_GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define  _GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER(/;"	d	signature:(A)
_GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define  _GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE(/;"	d	signature:(A)
_GLIBCXX_THROW	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#  define _GLIBCXX_THROW(/;"	d	signature:(_EXC)
_GLIBCXX_THROW_OR_ABORT	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#  define _GLIBCXX_THROW_OR_ABORT(/;"	d	signature:(_EXC)
_GLIBCXX_TXN_SAFE	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_TXN_SAFE /;"	d
_GLIBCXX_TXN_SAFE	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_TXN_SAFE$/;"	d
_GLIBCXX_TXN_SAFE_DYN	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_TXN_SAFE_DYN /;"	d
_GLIBCXX_TXN_SAFE_DYN	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_TXN_SAFE_DYN$/;"	d
_GLIBCXX_USE_ALLOCATOR_NEW	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_USE_ALLOCATOR_NEW /;"	d
_GLIBCXX_USE_C11_UCHAR_CXX11	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_C11_UCHAR_CXX11 /;"	d
_GLIBCXX_USE_C99	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_C99 /;"	d
_GLIBCXX_USE_C99_COMPLEX	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_USE_C99_COMPLEX /;"	d
_GLIBCXX_USE_C99_COMPLEX_TR1	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_C99_COMPLEX_TR1 /;"	d
_GLIBCXX_USE_C99_CTYPE_TR1	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_C99_CTYPE_TR1 /;"	d
_GLIBCXX_USE_C99_FENV_TR1	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_C99_FENV_TR1 /;"	d
_GLIBCXX_USE_C99_INTTYPES_TR1	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_C99_INTTYPES_TR1 /;"	d
_GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1 /;"	d
_GLIBCXX_USE_C99_MATH	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#  define _GLIBCXX_USE_C99_MATH /;"	d
_GLIBCXX_USE_C99_MATH_TR1	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_C99_MATH_TR1 /;"	d
_GLIBCXX_USE_C99_STDINT_TR1	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_C99_STDINT_TR1 /;"	d
_GLIBCXX_USE_C99_STDIO	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_USE_C99_STDIO /;"	d
_GLIBCXX_USE_C99_STDLIB	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_USE_C99_STDLIB /;"	d
_GLIBCXX_USE_C99_WCHAR	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_USE_C99_WCHAR /;"	d
_GLIBCXX_USE_CHAR8_T	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#  define _GLIBCXX_USE_CHAR8_T /;"	d
_GLIBCXX_USE_CLOCK_MONOTONIC	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_CLOCK_MONOTONIC /;"	d
_GLIBCXX_USE_CLOCK_REALTIME	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_CLOCK_REALTIME /;"	d
_GLIBCXX_USE_CONSTEXPR	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#  define _GLIBCXX_USE_CONSTEXPR /;"	d
_GLIBCXX_USE_CXX11_ABI	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_USE_CXX11_ABI /;"	d
_GLIBCXX_USE_DECIMAL_FLOAT	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_DECIMAL_FLOAT /;"	d
_GLIBCXX_USE_DEPRECATED	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_USE_DEPRECATED /;"	d
_GLIBCXX_USE_DEV_RANDOM	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_DEV_RANDOM /;"	d
_GLIBCXX_USE_DUAL_ABI	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_USE_DUAL_ABI /;"	d
_GLIBCXX_USE_FCHMOD	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_FCHMOD /;"	d
_GLIBCXX_USE_FCHMODAT	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_FCHMODAT /;"	d
_GLIBCXX_USE_FLOAT128	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_FLOAT128 /;"	d
_GLIBCXX_USE_GETTIMEOFDAY	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_GETTIMEOFDAY /;"	d
_GLIBCXX_USE_GET_NPROCS	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_GET_NPROCS /;"	d
_GLIBCXX_USE_INT128	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_INT128 /;"	d
_GLIBCXX_USE_LFS	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_LFS /;"	d
_GLIBCXX_USE_LONG_LONG	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_LONG_LONG /;"	d
_GLIBCXX_USE_LSTAT	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_LSTAT /;"	d
_GLIBCXX_USE_NANOSLEEP	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_NANOSLEEP /;"	d
_GLIBCXX_USE_NLS	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_NLS /;"	d
_GLIBCXX_USE_NOEXCEPT	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#  define _GLIBCXX_USE_NOEXCEPT /;"	d
_GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT /;"	d
_GLIBCXX_USE_PTHREAD_MUTEX_CLOCKLOCK	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_PTHREAD_MUTEX_CLOCKLOCK /;"	d
_GLIBCXX_USE_PTHREAD_RWLOCK_CLOCKLOCK	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_PTHREAD_RWLOCK_CLOCKLOCK /;"	d
_GLIBCXX_USE_PTHREAD_RWLOCK_T	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_PTHREAD_RWLOCK_T /;"	d
_GLIBCXX_USE_RANDOM_TR1	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_RANDOM_TR1 /;"	d
_GLIBCXX_USE_REALPATH	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_REALPATH /;"	d
_GLIBCXX_USE_SCHED_YIELD	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_SCHED_YIELD /;"	d
_GLIBCXX_USE_SC_NPROCESSORS_ONLN	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_SC_NPROCESSORS_ONLN /;"	d
_GLIBCXX_USE_SENDFILE	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_SENDFILE /;"	d
_GLIBCXX_USE_STD_SPEC_FUNCS	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_USE_STD_SPEC_FUNCS /;"	d
_GLIBCXX_USE_ST_MTIM	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_ST_MTIM /;"	d
_GLIBCXX_USE_TBB_PAR_BACKEND	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#  define _GLIBCXX_USE_TBB_PAR_BACKEND /;"	d
_GLIBCXX_USE_TMPNAM	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_TMPNAM /;"	d
_GLIBCXX_USE_UTIME	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_UTIME /;"	d
_GLIBCXX_USE_UTIMENSAT	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_UTIMENSAT /;"	d
_GLIBCXX_USE_WCHAR_T	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_USE_WCHAR_T /;"	d
_GLIBCXX_USE_WEAK_REF	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_USE_WEAK_REF /;"	d
_GLIBCXX_VERBOSE	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_VERBOSE /;"	d
_GLIBCXX_VISIBILITY	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_VISIBILITY(/;"	d	signature:(V)
_GLIBCXX_WEAK_DEFINITION	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _GLIBCXX_WEAK_DEFINITION$/;"	d
_GLIBCXX_WRITE_MEM_BARRIER	/usr/include/c++/10/ext/atomicity.h	/^#define _GLIBCXX_WRITE_MEM_BARRIER /;"	d
_GLIBCXX_WRITE_MEM_BARRIER	/usr/include/x86_64-linux-gnu/c++/10/bits/atomic_word.h	/^#define _GLIBCXX_WRITE_MEM_BARRIER /;"	d
_GLIBCXX_X86_RDRAND	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_X86_RDRAND /;"	d
_GLIBCXX_X86_RDSEED	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GLIBCXX_X86_RDSEED /;"	d
_GTHREAD_USE_MUTEX_TIMEDLOCK	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define _GTHREAD_USE_MUTEX_TIMEDLOCK /;"	d
_GTHREAD_USE_MUTEX_TIMEDLOCK	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^#  define _GTHREAD_USE_MUTEX_TIMEDLOCK /;"	d
_GXX_NULLPTR_T	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _GXX_NULLPTR_T$/;"	d
_G_fpos64_t	/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h	/^typedef struct _G_fpos64_t$/;"	s
_G_fpos64_t::__pos	/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h	/^  __off64_t __pos;$/;"	m	struct:_G_fpos64_t	typeref:typename:__off64_t	access:public
_G_fpos64_t::__state	/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h	/^  __mbstate_t __state;$/;"	m	struct:_G_fpos64_t	typeref:typename:__mbstate_t	access:public
_G_fpos_t	/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h	/^typedef struct _G_fpos_t$/;"	s
_G_fpos_t::__pos	/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h	/^  __off_t __pos;$/;"	m	struct:_G_fpos_t	typeref:typename:__off_t	access:public
_G_fpos_t::__state	/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h	/^  __mbstate_t __state;$/;"	m	struct:_G_fpos_t	typeref:typename:__mbstate_t	access:public
_HASH_BYTES_H	/usr/include/c++/10/bits/hash_bytes.h	/^#define _HASH_BYTES_H /;"	d
_Hash_bytes	/usr/include/c++/10/bits/hash_bytes.h	/^  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);$/;"	p	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION size_t	signature:(const void * __ptr,size_t __len,size_t __seed)
_Hash_impl	/usr/include/c++/10/bits/functional_hash.h	/^  struct _Hash_impl$/;"	s	namespace:std
_IMove	/usr/include/c++/10/bits/iterator_concepts.h	/^      struct _IMove$/;"	s	namespace:std::ranges::__cust_imove
_IOFBF	/usr/include/stdio.h	/^#define _IOFBF /;"	d
_IOLBF	/usr/include/stdio.h	/^#define _IOLBF /;"	d
_IONBF	/usr/include/stdio.h	/^#define _IONBF /;"	d
_IOS_BASE_H	/usr/include/c++/10/bits/ios_base.h	/^#define _IOS_BASE_H /;"	d
_IO_EOF_SEEN	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^#define _IO_EOF_SEEN /;"	d
_IO_ERR_SEEN	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^#define _IO_ERR_SEEN /;"	d
_IO_FILE	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^struct _IO_FILE$/;"	s
_IO_FILE::_IO_backup_base	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_backup_base;  \/* Pointer to first valid character of backup area *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_FILE::_IO_buf_base	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_buf_base;	\/* Start of reserve area. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_FILE::_IO_buf_end	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_buf_end;	\/* End of reserve area. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_FILE::_IO_read_base	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_read_base;	\/* Start of putback+get area. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_FILE::_IO_read_end	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_read_end;	\/* End of get area. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_FILE::_IO_read_ptr	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_read_ptr;	\/* Current read pointer *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_FILE::_IO_save_base	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_save_base; \/* Pointer to start of non-current get area. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_FILE::_IO_save_end	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_save_end; \/* Pointer to end of non-current get area. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_FILE::_IO_write_base	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_write_base;	\/* Start of put area. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_FILE::_IO_write_end	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_write_end;	\/* End of put area. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_FILE::_IO_write_ptr	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_write_ptr;	\/* Current put pointer. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_FILE::_chain	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  struct _IO_FILE *_chain;$/;"	m	struct:_IO_FILE	typeref:struct:_IO_FILE *	access:public
_IO_FILE::_cur_column	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  unsigned short _cur_column;$/;"	m	struct:_IO_FILE	typeref:typename:unsigned short	access:public
_IO_FILE::_fileno	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  int _fileno;$/;"	m	struct:_IO_FILE	typeref:typename:int	access:public
_IO_FILE::_flags	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  int _flags;		\/* High-order word is _IO_MAGIC; rest is flags. *\/$/;"	m	struct:_IO_FILE	typeref:typename:int	access:public
_IO_FILE::_flags2	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  int _flags2;$/;"	m	struct:_IO_FILE	typeref:typename:int	access:public
_IO_FILE::_lock	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  _IO_lock_t *_lock;$/;"	m	struct:_IO_FILE	typeref:typename:_IO_lock_t *	access:public
_IO_FILE::_markers	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  struct _IO_marker *_markers;$/;"	m	struct:_IO_FILE	typeref:struct:_IO_marker *	access:public
_IO_FILE::_old_offset	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  __off_t _old_offset; \/* This used to be _offset but it's too small.  *\/$/;"	m	struct:_IO_FILE	typeref:typename:__off_t	access:public
_IO_FILE::_shortbuf	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char _shortbuf[1];$/;"	m	struct:_IO_FILE	typeref:typename:char[1]	access:public
_IO_FILE::_vtable_offset	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  signed char _vtable_offset;$/;"	m	struct:_IO_FILE	typeref:typename:signed char	access:public
_IO_FILE_complete	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^struct _IO_FILE_complete$/;"	s
_IO_FILE_complete::__pad5	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  size_t __pad5;$/;"	m	struct:_IO_FILE_complete	typeref:typename:size_t	access:public
_IO_FILE_complete::_codecvt	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  struct _IO_codecvt *_codecvt;$/;"	m	struct:_IO_FILE_complete	typeref:struct:_IO_codecvt *	access:public
_IO_FILE_complete::_file	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  struct _IO_FILE _file;$/;"	m	struct:_IO_FILE_complete	typeref:struct:_IO_FILE	access:public
_IO_FILE_complete::_freeres_buf	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  void *_freeres_buf;$/;"	m	struct:_IO_FILE_complete	typeref:typename:void *	access:public
_IO_FILE_complete::_freeres_list	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  struct _IO_FILE *_freeres_list;$/;"	m	struct:_IO_FILE_complete	typeref:struct:_IO_FILE *	access:public
_IO_FILE_complete::_mode	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  int _mode;$/;"	m	struct:_IO_FILE_complete	typeref:typename:int	access:public
_IO_FILE_complete::_offset	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  __off64_t _offset;$/;"	m	struct:_IO_FILE_complete	typeref:typename:__off64_t	access:public
_IO_FILE_complete::_unused2	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];$/;"	m	struct:_IO_FILE_complete	typeref:typename:char[]	access:public
_IO_FILE_complete::_wide_data	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  struct _IO_wide_data *_wide_data;$/;"	m	struct:_IO_FILE_complete	typeref:struct:_IO_wide_data *	access:public
_IO_USER_LOCK	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^#define _IO_USER_LOCK /;"	d
_IO_backup_base	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_backup_base;  \/* Pointer to first valid character of backup area *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_buf_base	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_buf_base;	\/* Start of reserve area. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_buf_end	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_buf_end;	\/* End of reserve area. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_cookie_io_functions_t	/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h	/^typedef struct _IO_cookie_io_functions_t$/;"	s
_IO_cookie_io_functions_t::close	/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h	/^  cookie_close_function_t *close;	\/* Close file.  *\/$/;"	m	struct:_IO_cookie_io_functions_t	typeref:typename:cookie_close_function_t *	access:public
_IO_cookie_io_functions_t::read	/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h	/^  cookie_read_function_t *read;		\/* Read bytes.  *\/$/;"	m	struct:_IO_cookie_io_functions_t	typeref:typename:cookie_read_function_t *	access:public
_IO_cookie_io_functions_t::seek	/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h	/^  cookie_seek_function_t *seek;		\/* Seek\/tell file position.  *\/$/;"	m	struct:_IO_cookie_io_functions_t	typeref:typename:cookie_seek_function_t *	access:public
_IO_cookie_io_functions_t::write	/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h	/^  cookie_write_function_t *write;	\/* Write bytes.  *\/$/;"	m	struct:_IO_cookie_io_functions_t	typeref:typename:cookie_write_function_t *	access:public
_IO_lock_t	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^typedef void _IO_lock_t;$/;"	t	typeref:typename:void
_IO_read_base	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_read_base;	\/* Start of putback+get area. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_read_end	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_read_end;	\/* End of get area. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_read_ptr	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_read_ptr;	\/* Current read pointer *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_save_base	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_save_base; \/* Pointer to start of non-current get area. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_save_end	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_save_end; \/* Pointer to end of non-current get area. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_write_base	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_write_base;	\/* Start of put area. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_write_end	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_write_end;	\/* End of put area. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_write_ptr	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_write_ptr;	\/* Current put pointer. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_ISOC11_SOURCE	/usr/include/features.h	/^# define _ISOC11_SOURCE	/;"	d
_ISOC2X_SOURCE	/usr/include/features.h	/^# define _ISOC2X_SOURCE	/;"	d
_ISOC95_SOURCE	/usr/include/features.h	/^# define _ISOC95_SOURCE	/;"	d
_ISOC99_SOURCE	/usr/include/features.h	/^# define _ISOC99_SOURCE	/;"	d
_ISalnum	/usr/include/ctype.h	/^  _ISalnum = _ISbit (11)	\/* Alphanumeric.  *\/$/;"	e	enum:__anon0ab14d0b0103	access:public
_ISalpha	/usr/include/ctype.h	/^  _ISalpha = _ISbit (2),	\/* Alphabetic.  *\/$/;"	e	enum:__anon0ab14d0b0103	access:public
_ISbit	/usr/include/ctype.h	/^#  define _ISbit(/;"	d	signature:(bit)
_ISblank	/usr/include/ctype.h	/^  _ISblank = _ISbit (8),	\/* Blank (usually SPC and TAB).  *\/$/;"	e	enum:__anon0ab14d0b0103	access:public
_IScntrl	/usr/include/ctype.h	/^  _IScntrl = _ISbit (9),	\/* Control character.  *\/$/;"	e	enum:__anon0ab14d0b0103	access:public
_ISdigit	/usr/include/ctype.h	/^  _ISdigit = _ISbit (3),	\/* Numeric.  *\/$/;"	e	enum:__anon0ab14d0b0103	access:public
_ISgraph	/usr/include/ctype.h	/^  _ISgraph = _ISbit (7),	\/* Graphical.  *\/$/;"	e	enum:__anon0ab14d0b0103	access:public
_ISlower	/usr/include/ctype.h	/^  _ISlower = _ISbit (1),	\/* lowercase.  *\/$/;"	e	enum:__anon0ab14d0b0103	access:public
_ISprint	/usr/include/ctype.h	/^  _ISprint = _ISbit (6),	\/* Printing.  *\/$/;"	e	enum:__anon0ab14d0b0103	access:public
_ISpunct	/usr/include/ctype.h	/^  _ISpunct = _ISbit (10),	\/* Punctuation.  *\/$/;"	e	enum:__anon0ab14d0b0103	access:public
_ISspace	/usr/include/ctype.h	/^  _ISspace = _ISbit (5),	\/* Whitespace.  *\/$/;"	e	enum:__anon0ab14d0b0103	access:public
_ISupper	/usr/include/ctype.h	/^  _ISupper = _ISbit (0),	\/* UPPERCASE.  *\/$/;"	e	enum:__anon0ab14d0b0103	access:public
_ISwalnum	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  _ISwalnum = _ISwbit (__ISwalnum)	\/* Alphanumeric.  *\/$/;"	e	enum:__anon23701d770103	access:public
_ISwalpha	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  _ISwalpha = _ISwbit (__ISwalpha),	\/* Alphabetic.  *\/$/;"	e	enum:__anon23701d770103	access:public
_ISwbit	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^#   define _ISwbit(/;"	d	signature:(bit)
_ISwblank	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  _ISwblank = _ISwbit (__ISwblank),	\/* Blank (usually SPC and TAB).  *\/$/;"	e	enum:__anon23701d770103	access:public
_ISwcntrl	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  _ISwcntrl = _ISwbit (__ISwcntrl),	\/* Control character.  *\/$/;"	e	enum:__anon23701d770103	access:public
_ISwdigit	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  _ISwdigit = _ISwbit (__ISwdigit),	\/* Numeric.  *\/$/;"	e	enum:__anon23701d770103	access:public
_ISwgraph	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  _ISwgraph = _ISwbit (__ISwgraph),	\/* Graphical.  *\/$/;"	e	enum:__anon23701d770103	access:public
_ISwlower	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  _ISwlower = _ISwbit (__ISwlower),	\/* lowercase.  *\/$/;"	e	enum:__anon23701d770103	access:public
_ISwprint	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  _ISwprint = _ISwbit (__ISwprint),	\/* Printing.  *\/$/;"	e	enum:__anon23701d770103	access:public
_ISwpunct	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  _ISwpunct = _ISwbit (__ISwpunct),	\/* Punctuation.  *\/$/;"	e	enum:__anon23701d770103	access:public
_ISwspace	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  _ISwspace = _ISwbit (__ISwspace),	\/* Whitespace.  *\/$/;"	e	enum:__anon23701d770103	access:public
_ISwupper	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  _ISwupper = _ISwbit (__ISwupper),	\/* UPPERCASE.  *\/$/;"	e	enum:__anon23701d770103	access:public
_ISwxdigit	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  _ISwxdigit = _ISwbit (__ISwxdigit),	\/* Hexadecimal numeric.  *\/$/;"	e	enum:__anon23701d770103	access:public
_ISxdigit	/usr/include/ctype.h	/^  _ISxdigit = _ISbit (4),	\/* Hexadecimal numeric.  *\/$/;"	e	enum:__anon0ab14d0b0103	access:public
_ITERATOR_CONCEPTS_H	/usr/include/c++/10/bits/iterator_concepts.h	/^#define _ITERATOR_CONCEPTS_H /;"	d
_Identity	/usr/include/c++/10/bits/stl_function.h	/^    struct _Identity$/;"	s	namespace:std	inherits:unary_function<_Tp,_Tp>
_Identity	/usr/include/c++/10/bits/stl_function.h	/^  template<typename _Tp> struct _Identity<const _Tp> : _Identity<_Tp> { };$/;"	s	namespace:std	inherits:_Identity<_Tp>
_If_sv	/usr/include/c++/10/bits/basic_string.h	/^	using _If_sv = enable_if_t<$/;"	t	class:std::basic_string	access:private
_Impl	/usr/include/c++/10/bits/locale_classes.h	/^    _Impl(const _Impl&);  \/\/ Not defined.$/;"	p	class:std::locale::_Impl	access:private	signature:(const _Impl &)
_Impl	/usr/include/c++/10/bits/locale_classes.h	/^    _Impl(const _Impl&, size_t);$/;"	p	class:std::locale::_Impl	access:private	signature:(const _Impl &,size_t)
_Impl	/usr/include/c++/10/bits/locale_classes.h	/^    _Impl(const char*, size_t);$/;"	p	class:std::locale::_Impl	access:private	signature:(const char *,size_t)
_Impl	/usr/include/c++/10/bits/locale_classes.h	/^    _Impl(size_t) throw();$/;"	p	class:std::locale::_Impl	access:private	signature:(size_t)
_Impl	/usr/include/c++/10/bits/locale_classes.h	/^  class locale::_Impl$/;"	c	class:std::locale
_ImplicitlyConvertiblePair	/usr/include/c++/10/bits/stl_pair.h	/^      static constexpr bool _ImplicitlyConvertiblePair()$/;"	f	struct:std::_PCC	typeref:typename:bool	access:public	signature:()
_ImplicitlyMoveConvertiblePair	/usr/include/c++/10/bits/stl_pair.h	/^      static constexpr bool _ImplicitlyMoveConvertiblePair()$/;"	f	struct:std::_PCC	typeref:typename:bool	access:public	signature:()
_Integral	/usr/include/c++/10/bits/basic_string.h	/^	  typedef typename std::__is_integer<_InIterator>::__type _Integral;$/;"	t	function:std::basic_string::_M_construct	typeref:typename:std::__is_integer<_InIterator>::__type
_Integral	/usr/include/c++/10/bits/basic_string.h	/^	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;$/;"	t	function:std::basic_string::replace	typeref:typename:std::__is_integer<_InputIterator>::__type
_Ios_Fmtflags	/usr/include/c++/10/bits/ios_base.h	/^  enum _Ios_Fmtflags $/;"	g	namespace:std
_Ios_Iostate	/usr/include/c++/10/bits/ios_base.h	/^  enum _Ios_Iostate$/;"	g	namespace:std
_Ios_Openmode	/usr/include/c++/10/bits/ios_base.h	/^  enum _Ios_Openmode $/;"	g	namespace:std
_Ios_Seekdir	/usr/include/c++/10/bits/ios_base.h	/^  enum _Ios_Seekdir $/;"	g	namespace:std
_It	/usr/include/c++/10/bits/range_access.h	/^		  using _It = decltype(_Begin{}(std::declval<_Tp&>()));$/;"	t	function:std::ranges::__cust_access::_REnd::_S_noexcept
_It	/usr/include/c++/10/bits/range_access.h	/^		  using _It = decltype(_End{}(std::declval<_Tp&>()));$/;"	t	function:std::ranges::__cust_access::_RBegin::_S_noexcept
_Iter	/usr/include/c++/10/bits/stl_iterator.h	/^      using _Iter = std::__detail::__range_iter_t<_Container>;$/;"	t	class:std::insert_iterator	typeref:typename:std::__detail::__range_iter_t<_Container>	access:private
_IterSwap	/usr/include/c++/10/bits/iterator_concepts.h	/^    struct _IterSwap$/;"	s	namespace:std::ranges::__cust_iswap
_Iter_comp_iter	/usr/include/c++/10/bits/predefined_ops.h	/^      _Iter_comp_iter(_Compare __comp)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_iter	typeref:typename:_GLIBCXX14_CONSTEXPR	access:public	signature:(_Compare __comp)
_Iter_comp_iter	/usr/include/c++/10/bits/predefined_ops.h	/^    struct _Iter_comp_iter$/;"	s	namespace:__gnu_cxx::__ops
_Iter_comp_to_iter	/usr/include/c++/10/bits/predefined_ops.h	/^      _Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_to_iter	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Compare __comp,_Iterator1 __it1)
_Iter_comp_to_iter	/usr/include/c++/10/bits/predefined_ops.h	/^    struct _Iter_comp_to_iter$/;"	s	namespace:__gnu_cxx::__ops
_Iter_comp_to_val	/usr/include/c++/10/bits/predefined_ops.h	/^      _Iter_comp_to_val(_Compare __comp, _Value& __value)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_to_val	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Compare __comp,_Value & __value)
_Iter_comp_to_val	/usr/include/c++/10/bits/predefined_ops.h	/^    struct _Iter_comp_to_val$/;"	s	namespace:__gnu_cxx::__ops
_Iter_comp_val	/usr/include/c++/10/bits/predefined_ops.h	/^      _Iter_comp_val(_Compare __comp)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_val	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Compare __comp)
_Iter_comp_val	/usr/include/c++/10/bits/predefined_ops.h	/^      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_val	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Iter_comp_iter<_Compare> && __comp)
_Iter_comp_val	/usr/include/c++/10/bits/predefined_ops.h	/^      _Iter_comp_val(const _Iter_comp_iter<_Compare>& __comp)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_val	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const _Iter_comp_iter<_Compare> & __comp)
_Iter_comp_val	/usr/include/c++/10/bits/predefined_ops.h	/^    struct _Iter_comp_val$/;"	s	namespace:__gnu_cxx::__ops
_Iter_equal_to_iter	/usr/include/c++/10/bits/predefined_ops.h	/^  struct _Iter_equal_to_iter$/;"	s	namespace:__gnu_cxx::__ops
_Iter_equal_to_val	/usr/include/c++/10/bits/predefined_ops.h	/^  struct _Iter_equal_to_val$/;"	s	namespace:__gnu_cxx::__ops
_Iter_equals_iter	/usr/include/c++/10/bits/predefined_ops.h	/^      _Iter_equals_iter(_Iterator1 __it1)$/;"	f	struct:__gnu_cxx::__ops::_Iter_equals_iter	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Iterator1 __it1)
_Iter_equals_iter	/usr/include/c++/10/bits/predefined_ops.h	/^    struct _Iter_equals_iter$/;"	s	namespace:__gnu_cxx::__ops
_Iter_equals_val	/usr/include/c++/10/bits/predefined_ops.h	/^      _Iter_equals_val(_Value& __value)$/;"	f	struct:__gnu_cxx::__ops::_Iter_equals_val	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Value & __value)
_Iter_equals_val	/usr/include/c++/10/bits/predefined_ops.h	/^    struct _Iter_equals_val$/;"	s	namespace:__gnu_cxx::__ops
_Iter_less_iter	/usr/include/c++/10/bits/predefined_ops.h	/^  struct _Iter_less_iter$/;"	s	namespace:__gnu_cxx::__ops
_Iter_less_val	/usr/include/c++/10/bits/predefined_ops.h	/^    _Iter_less_val(_Iter_less_iter) { }$/;"	f	struct:__gnu_cxx::__ops::_Iter_less_val	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Iter_less_iter)
_Iter_less_val	/usr/include/c++/10/bits/predefined_ops.h	/^    constexpr _Iter_less_val() = default;$/;"	p	struct:__gnu_cxx::__ops::_Iter_less_val	access:public	signature:()
_Iter_less_val	/usr/include/c++/10/bits/predefined_ops.h	/^  struct _Iter_less_val$/;"	s	namespace:__gnu_cxx::__ops
_Iter_negate	/usr/include/c++/10/bits/predefined_ops.h	/^      _Iter_negate(_Predicate __pred)$/;"	f	struct:__gnu_cxx::__ops::_Iter_negate	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Predicate __pred)
_Iter_negate	/usr/include/c++/10/bits/predefined_ops.h	/^    struct _Iter_negate$/;"	s	namespace:__gnu_cxx::__ops
_Iter_pred	/usr/include/c++/10/bits/predefined_ops.h	/^      _Iter_pred(_Predicate __pred)$/;"	f	struct:__gnu_cxx::__ops::_Iter_pred	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Predicate __pred)
_Iter_pred	/usr/include/c++/10/bits/predefined_ops.h	/^    struct _Iter_pred$/;"	s	namespace:__gnu_cxx::__ops
_LARGEFILE64_SOURCE	/usr/include/features.h	/^# define _LARGEFILE64_SOURCE	/;"	d
_LARGEFILE_SOURCE	/usr/include/features.h	/^#  define _LARGEFILE_SOURCE	/;"	d
_LOCALE_CLASSES_H	/usr/include/c++/10/bits/locale_classes.h	/^#define _LOCALE_CLASSES_H /;"	d
_LOCALE_FACETS_H	/usr/include/c++/10/bits/locale_facets.h	/^#define _LOCALE_FACETS_H /;"	d
_LOCALE_FWD_H	/usr/include/c++/10/bits/localefwd.h	/^#define _LOCALE_FWD_H /;"	d
_LOCALE_H	/usr/include/locale.h	/^#define	_LOCALE_H	/;"	d
_MEMORYFWD_H	/usr/include/c++/10/bits/memoryfwd.h	/^#define _MEMORYFWD_H /;"	d
_MOVE_H	/usr/include/c++/10/bits/move.h	/^#define _MOVE_H /;"	d
_M_add_reference	/usr/include/c++/10/bits/ios_base.h	/^      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }$/;"	f	struct:std::ios_base::_Callback_list	typeref:typename:void	access:public	signature:()
_M_add_reference	/usr/include/c++/10/bits/locale_classes.h	/^    _M_add_reference() const throw()$/;"	f	class:std::locale::facet	typeref:typename:void	access:private	signature:() const
_M_add_reference	/usr/include/c++/10/bits/locale_classes.h	/^    _M_add_reference() throw()$/;"	f	class:std::locale::_Impl	typeref:typename:void	access:private	signature:()
_M_addref	/usr/include/c++/10/bits/exception_ptr.h	/^      void _M_addref() _GLIBCXX_USE_NOEXCEPT;$/;"	p	class:std::__exception_ptr::exception_ptr	typeref:typename:void	access:private	signature:()
_M_allocated	/usr/include/c++/10/bits/locale_facets.h	/^      bool				_M_allocated;$/;"	m	struct:std::__numpunct_cache	typeref:typename:bool	access:public
_M_allocated_capacity	/usr/include/c++/10/bits/basic_string.h	/^	size_type        _M_allocated_capacity;$/;"	m	union:std::basic_string::__anon048e8697020a	typeref:typename:size_type	access:public
_M_append	/usr/include/c++/10/bits/basic_string.h	/^      _M_append(const _CharT* __s, size_type __n);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:private	signature:(const _CharT * __s,size_type __n)
_M_assign	/usr/include/c++/10/bits/basic_string.h	/^      _M_assign(const basic_string&);$/;"	p	class:std::basic_string	typeref:typename:void	access:private	signature:(const basic_string &)
_M_at_eof	/usr/include/c++/10/bits/streambuf_iterator.h	/^      _M_at_eof() const$/;"	f	class:std::istreambuf_iterator	typeref:typename:bool	access:private	signature:() const
_M_atoms_in	/usr/include/c++/10/bits/locale_facets.h	/^      _CharT				_M_atoms_in[__num_base::_S_iend];$/;"	m	struct:std::__numpunct_cache	typeref:typename:_CharT[]	access:public
_M_atoms_out	/usr/include/c++/10/bits/locale_facets.h	/^      _CharT				_M_atoms_out[__num_base::_S_oend];$/;"	m	struct:std::__numpunct_cache	typeref:typename:_CharT[]	access:public
_M_bit	/usr/include/c++/10/bits/locale_facets.h	/^      mask                      _M_bit[16];$/;"	m	class:std::ctype	typeref:typename:mask[16]	access:protected
_M_c	/usr/include/c++/10/bits/streambuf_iterator.h	/^      int_type			_M_c;$/;"	m	class:std::istreambuf_iterator	typeref:typename:int_type	access:private
_M_c_locale_collate	/usr/include/c++/10/bits/locale_classes.h	/^      __c_locale			_M_c_locale_collate;$/;"	m	class:std::collate	typeref:typename:__c_locale	access:protected
_M_c_locale_ctype	/usr/include/c++/10/bits/locale_facets.h	/^      __c_locale		_M_c_locale_ctype;$/;"	m	class:std::ctype	typeref:typename:__c_locale	access:protected
_M_cache	/usr/include/c++/10/bits/locale_facets.h	/^      _M_cache(const locale& __loc);$/;"	p	struct:std::__numpunct_cache	typeref:typename:void	access:public	signature:(const locale & __loc)
_M_cache_locale	/usr/include/c++/10/bits/basic_ios.h	/^      _M_cache_locale(const locale& __loc);$/;"	p	class:std::basic_ios	typeref:typename:void	access:protected	signature:(const locale & __loc)
_M_caches	/usr/include/c++/10/bits/locale_classes.h	/^    const facet**			_M_caches;$/;"	m	class:std::locale::_Impl	typeref:typename:const facet **	access:private
_M_call_callbacks	/usr/include/c++/10/bits/ios_base.h	/^    _M_call_callbacks(event __ev) throw();$/;"	p	class:std::ios_base	typeref:typename:void	access:protected	signature:(event __ev)
_M_callbacks	/usr/include/c++/10/bits/ios_base.h	/^     _Callback_list*	_M_callbacks;$/;"	m	class:std::ios_base	typeref:typename:_Callback_list *	access:protected
_M_capacity	/usr/include/c++/10/bits/basic_string.h	/^      _M_capacity(size_type __capacity)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(size_type __capacity)
_M_cat	/usr/include/c++/10/bits/ios_base.h	/^	const void*	_M_cat;$/;"	m	struct:std::ios_base::system_error::error_code	typeref:typename:const void *	access:private
_M_check	/usr/include/c++/10/bits/basic_string.h	/^      _M_check(size_type __pos, const char* __s) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:private	signature:(size_type __pos,const char * __s) const
_M_check_length	/usr/include/c++/10/bits/basic_string.h	/^      _M_check_length(size_type __n1, size_type __n2, const char* __s) const$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(size_type __n1,size_type __n2,const char * __s) const
_M_check_same_name	/usr/include/c++/10/bits/locale_classes.h	/^    _M_check_same_name()$/;"	f	class:std::locale::_Impl	typeref:typename:bool	access:private	signature:()
_M_coalesce	/usr/include/c++/10/bits/locale_classes.h	/^    _M_coalesce(const locale& __base, const locale& __add, category __cat);$/;"	p	class:std::locale	typeref:typename:void	access:private	signature:(const locale & __base,const locale & __add,category __cat)
_M_code	/usr/include/c++/10/bits/ios_base.h	/^      } _M_code;$/;"	m	struct:std::ios_base::system_error	typeref:struct:std::ios_base::system_error::error_code	access:public
_M_comp	/usr/include/c++/10/bits/predefined_ops.h	/^      _Compare _M_comp;$/;"	m	struct:__gnu_cxx::__ops::_Iter_comp_iter	typeref:typename:_Compare	access:public
_M_comp	/usr/include/c++/10/bits/predefined_ops.h	/^      _Compare _M_comp;$/;"	m	struct:__gnu_cxx::__ops::_Iter_comp_to_iter	typeref:typename:_Compare	access:public
_M_comp	/usr/include/c++/10/bits/predefined_ops.h	/^      _Compare _M_comp;$/;"	m	struct:__gnu_cxx::__ops::_Iter_comp_to_val	typeref:typename:_Compare	access:public
_M_comp	/usr/include/c++/10/bits/predefined_ops.h	/^      _Compare _M_comp;$/;"	m	struct:__gnu_cxx::__ops::_Iter_comp_val	typeref:typename:_Compare	access:public
_M_comp	/usr/include/c++/10/bits/predefined_ops.h	/^      _Compare _M_comp;$/;"	m	struct:__gnu_cxx::__ops::_Val_comp_iter	typeref:typename:_Compare	access:public
_M_compare	/usr/include/c++/10/bits/locale_classes.h	/^      _M_compare(const _CharT*, const _CharT*) const throw();$/;"	p	class:std::collate	typeref:typename:int	access:public	signature:(const _CharT *,const _CharT *) const
_M_compare	/usr/include/c++/10/bits/locale_classes.h	/^    collate<char>::_M_compare(const char*, const char*) const throw();$/;"	p	class:std::collate	typeref:typename:int	signature:(const char *,const char *) const
_M_compare	/usr/include/c++/10/bits/locale_classes.h	/^    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw();$/;"	p	class:std::collate	typeref:typename:int	signature:(const wchar_t *,const wchar_t *) const
_M_construct	/usr/include/c++/10/bits/basic_string.h	/^        _M_construct(_FwdIterator __beg, _FwdIterator __end,$/;"	p	class:std::basic_string	typeref:typename:void	access:private	signature:(_FwdIterator __beg,_FwdIterator __end,std::forward_iterator_tag)
_M_construct	/usr/include/c++/10/bits/basic_string.h	/^        _M_construct(_InIterator __beg, _InIterator __end)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_InIterator __beg,_InIterator __end)
_M_construct	/usr/include/c++/10/bits/basic_string.h	/^        _M_construct(_InIterator __beg, _InIterator __end,$/;"	p	class:std::basic_string	typeref:typename:void	access:private	signature:(_InIterator __beg,_InIterator __end,std::input_iterator_tag)
_M_construct	/usr/include/c++/10/bits/basic_string.h	/^      _M_construct(size_type __req, _CharT __c);$/;"	p	class:std::basic_string	typeref:typename:void	access:private	signature:(size_type __req,_CharT __c)
_M_construct_aux	/usr/include/c++/10/bits/basic_string.h	/^        _M_construct_aux(_InIterator __beg, _InIterator __end,$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_InIterator __beg,_InIterator __end,std::__false_type)
_M_construct_aux	/usr/include/c++/10/bits/basic_string.h	/^        _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_Integer __beg,_Integer __end,std::__true_type)
_M_construct_aux_2	/usr/include/c++/10/bits/basic_string.h	/^      _M_construct_aux_2(size_type __req, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(size_type __req,_CharT __c)
_M_convert_to_wmask	/usr/include/c++/10/bits/locale_facets.h	/^      _M_convert_to_wmask(const mask __m) const throw();$/;"	p	class:std::ctype	typeref:typename:__wmask_type	access:protected	signature:(const mask __m) const
_M_cow_shim	/usr/include/c++/10/bits/locale_classes.h	/^    const facet* _M_cow_shim(const id*) const;$/;"	p	class:std::locale::facet	typeref:typename:const facet *	access:private	signature:(const id *) const
_M_create	/usr/include/c++/10/bits/basic_string.h	/^      _M_create(size_type&, size_type);$/;"	p	class:std::basic_string	typeref:typename:pointer	access:private	signature:(size_type &,size_type)
_M_ctype	/usr/include/c++/10/bits/basic_ios.h	/^      const __ctype_type*                            _M_ctype;$/;"	m	class:std::basic_ios	typeref:typename:const __ctype_type *	access:protected
_M_current	/usr/include/c++/10/bits/stl_iterator.h	/^      _It _M_current = _It();$/;"	m	class:std::counted_iterator	typeref:typename:_It	access:private
_M_current	/usr/include/c++/10/bits/stl_iterator.h	/^      _Iterator _M_current;$/;"	m	class:__gnu_cxx::__normal_iterator	typeref:typename:_Iterator	access:protected
_M_current	/usr/include/c++/10/bits/stl_iterator.h	/^      _Iterator _M_current;$/;"	m	class:std::move_iterator	typeref:typename:_Iterator	access:private
_M_data	/usr/include/c++/10/bits/basic_string.h	/^      _M_data() const$/;"	f	class:std::basic_string	typeref:typename:pointer	access:private	signature:() const
_M_data	/usr/include/c++/10/bits/basic_string.h	/^      _M_data(pointer __p)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(pointer __p)
_M_data	/usr/include/c++/10/bits/locale_facets.h	/^      __cache_type*			_M_data;$/;"	m	class:std::numpunct	typeref:typename:__cache_type *	access:protected
_M_dataplus	/usr/include/c++/10/bits/basic_string.h	/^      _Alloc_hider	_M_dataplus;$/;"	m	class:std::basic_string	typeref:typename:_Alloc_hider	access:private
_M_decimal_point	/usr/include/c++/10/bits/locale_facets.h	/^      _CharT				_M_decimal_point;$/;"	m	struct:std::__numpunct_cache	typeref:typename:_CharT	access:public
_M_del	/usr/include/c++/10/bits/locale_facets.h	/^      bool			_M_del;$/;"	m	class:std::ctype	typeref:typename:bool	access:protected
_M_destroy	/usr/include/c++/10/bits/basic_string.h	/^      _M_destroy(size_type __size) throw()$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(size_type __size)
_M_disjunct	/usr/include/c++/10/bits/basic_string.h	/^      _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:bool	access:private	signature:(const _CharT * __s) const
_M_dispose	/usr/include/c++/10/bits/basic_string.h	/^      _M_dispose()$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:()
_M_dispose_callbacks	/usr/include/c++/10/bits/ios_base.h	/^    _M_dispose_callbacks(void) throw();$/;"	p	class:std::ios_base	typeref:typename:void	access:protected	signature:(void)
_M_erase	/usr/include/c++/10/bits/basic_string.h	/^      _M_erase(size_type __pos, size_type __n);$/;"	p	class:std::basic_string	typeref:typename:void	access:private	signature:(size_type __pos,size_type __n)
_M_exception	/usr/include/c++/10/bits/ios_base.h	/^    iostate		_M_exception;$/;"	m	class:std::ios_base	typeref:typename:iostate	access:protected
_M_exception_object	/usr/include/c++/10/bits/exception_ptr.h	/^      void* _M_exception_object;$/;"	m	class:std::__exception_ptr::exception_ptr	typeref:typename:void *	access:private
_M_extract_float	/usr/include/c++/10/bits/locale_facets.h	/^      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,$/;"	p	class:std::num_get	typeref:typename:_GLIBCXX_DEFAULT_ABI_TAG iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,string &) const
_M_extract_int	/usr/include/c++/10/bits/locale_facets.h	/^	_M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,$/;"	p	class:std::num_get	typeref:typename:_GLIBCXX_DEFAULT_ABI_TAG iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,_ValueT &) const
_M_facets	/usr/include/c++/10/bits/locale_classes.h	/^    const facet**			_M_facets;$/;"	m	class:std::locale::_Impl	typeref:typename:const facet **	access:private
_M_facets_size	/usr/include/c++/10/bits/locale_classes.h	/^    size_t				_M_facets_size;$/;"	m	class:std::locale::_Impl	typeref:typename:size_t	access:private
_M_failed	/usr/include/c++/10/bits/streambuf_iterator.h	/^      bool		_M_failed;$/;"	m	class:std::ostreambuf_iterator	typeref:typename:bool	access:private
_M_falsename	/usr/include/c++/10/bits/locale_facets.h	/^      const _CharT*			_M_falsename;$/;"	m	struct:std::__numpunct_cache	typeref:typename:const _CharT *	access:public
_M_falsename_size	/usr/include/c++/10/bits/locale_facets.h	/^      size_t                            _M_falsename_size;$/;"	m	struct:std::__numpunct_cache	typeref:typename:size_t	access:public
_M_fill	/usr/include/c++/10/bits/basic_ios.h	/^      mutable char_type                              _M_fill;$/;"	m	class:std::basic_ios	typeref:typename:char_type	access:protected
_M_fill_init	/usr/include/c++/10/bits/basic_ios.h	/^      mutable bool                                   _M_fill_init;$/;"	m	class:std::basic_ios	typeref:typename:bool	access:protected
_M_find	/usr/include/c++/10/bits/locale_facets.h	/^	_M_find(const _CharT2*, size_t __len, _CharT2 __c) const$/;"	f	class:std::num_get	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT2>::__value,int>::__type	access:protected	signature:(const _CharT2 *,size_t __len,_CharT2 __c) const
_M_flags	/usr/include/c++/10/bits/ios_base.h	/^    fmtflags		_M_flags;$/;"	m	class:std::ios_base	typeref:typename:fmtflags	access:protected
_M_fn	/usr/include/c++/10/bits/ios_base.h	/^      ios_base::event_callback	_M_fn;$/;"	m	struct:std::ios_base::_Callback_list	typeref:typename:ios_base::event_callback	access:public
_M_get	/usr/include/c++/10/bits/exception_ptr.h	/^      void *_M_get() const _GLIBCXX_NOEXCEPT __attribute__ ((__pure__));$/;"	p	class:std::__exception_ptr::exception_ptr	typeref:typename:void *	access:private	signature:() const
_M_get	/usr/include/c++/10/bits/streambuf_iterator.h	/^      _M_get() const$/;"	f	class:std::istreambuf_iterator	typeref:typename:int_type	access:private	signature:() const
_M_get_allocator	/usr/include/c++/10/bits/basic_string.h	/^      _M_get_allocator() const$/;"	f	class:std::basic_string	typeref:typename:const allocator_type &	access:private	signature:() const
_M_get_allocator	/usr/include/c++/10/bits/basic_string.h	/^      _M_get_allocator()$/;"	f	class:std::basic_string	typeref:typename:allocator_type &	access:private	signature:()
_M_getloc	/usr/include/c++/10/bits/ios_base.h	/^    _M_getloc() const$/;"	f	class:std::ios_base	typeref:typename:const locale &	access:public	signature:() const
_M_group_float	/usr/include/c++/10/bits/locale_facets.h	/^      _M_group_float(const char* __grouping, size_t __grouping_size,$/;"	p	class:std::num_put	typeref:typename:void	access:protected	signature:(const char * __grouping,size_t __grouping_size,char_type __sep,const char_type * __p,char_type * __new,char_type * __cs,int & __len) const
_M_group_int	/usr/include/c++/10/bits/locale_facets.h	/^      _M_group_int(const char* __grouping, size_t __grouping_size,$/;"	p	class:std::num_put	typeref:typename:void	access:protected	signature:(const char * __grouping,size_t __grouping_size,char_type __sep,ios_base & __io,char_type * __new,char_type * __cs,int & __len) const
_M_grouping	/usr/include/c++/10/bits/locale_facets.h	/^      const char*			_M_grouping;$/;"	m	struct:std::__numpunct_cache	typeref:typename:const char *	access:public
_M_grouping_size	/usr/include/c++/10/bits/locale_facets.h	/^      size_t                            _M_grouping_size;$/;"	m	struct:std::__numpunct_cache	typeref:typename:size_t	access:public
_M_grow_words	/usr/include/c++/10/bits/ios_base.h	/^    _M_grow_words(int __index, bool __iword);$/;"	p	class:std::ios_base	typeref:typename:_Words &	access:protected	signature:(int __index,bool __iword)
_M_has_value	/usr/include/c++/10/bits/stl_iterator.h	/^    bool _M_has_value() const noexcept { return _M_index < 2; }$/;"	f	class:std::common_iterator	typeref:typename:bool	access:private	signature:() const
_M_id	/usr/include/c++/10/bits/locale_classes.h	/^    _M_id() const throw();$/;"	p	class:std::locale::id	typeref:typename:size_t	access:public	signature:() const
_M_impl	/usr/include/c++/10/bits/locale_classes.h	/^    _Impl*		_M_impl;$/;"	m	class:std::locale	typeref:typename:_Impl *	access:private
_M_index	/usr/include/c++/10/bits/ios_base.h	/^      int			_M_index;$/;"	m	struct:std::ios_base::_Callback_list	typeref:typename:int	access:public
_M_index	/usr/include/c++/10/bits/locale_classes.h	/^    mutable size_t		_M_index;$/;"	m	class:std::locale::id	typeref:typename:size_t	access:private
_M_index	/usr/include/c++/10/bits/stl_iterator.h	/^    unsigned char _M_index; \/\/ 0==_M_it, 1==_M_sent, 2==valueless$/;"	m	class:std::common_iterator	typeref:typename:unsigned char	access:private
_M_init	/usr/include/c++/10/bits/ios_base.h	/^    _M_init() throw();$/;"	p	class:std::ios_base	typeref:typename:void	access:protected	signature:()
_M_init_extra	/usr/include/c++/10/bits/locale_classes.h	/^    void _M_init_extra(facet**);$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(facet **)
_M_init_extra	/usr/include/c++/10/bits/locale_classes.h	/^    void _M_init_extra(void*, void*, const char*, const char*);$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(void *,void *,const char *,const char *)
_M_init_facet	/usr/include/c++/10/bits/locale_classes.h	/^      _M_init_facet(_Facet* __facet)$/;"	f	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(_Facet * __facet)
_M_init_facet_unchecked	/usr/include/c++/10/bits/locale_classes.h	/^      _M_init_facet_unchecked(_Facet* __facet)$/;"	f	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(_Facet * __facet)
_M_initialize_ctype	/usr/include/c++/10/bits/locale_facets.h	/^      _M_initialize_ctype() throw();$/;"	p	class:std::ctype	typeref:typename:void	access:protected	signature:()
_M_initialize_numpunct	/usr/include/c++/10/bits/locale_facets.h	/^      _M_initialize_numpunct(__c_locale __cloc = 0);$/;"	p	class:std::numpunct	typeref:typename:void	access:protected	signature:(__c_locale __cloc=0)
_M_initialize_numpunct	/usr/include/c++/10/bits/locale_facets.h	/^    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);$/;"	p	class:std::numpunct	typeref:typename:void	signature:(__c_locale __cloc)
_M_initialize_numpunct	/usr/include/c++/10/bits/locale_facets.h	/^    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);$/;"	p	class:std::numpunct	typeref:typename:void	signature:(__c_locale __cloc)
_M_insert_float	/usr/include/c++/10/bits/locale_facets.h	/^	_M_insert_float(iter_type, ios_base& __io, char_type __fill,$/;"	p	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base & __io,char_type __fill,char __mod,_ValueT __v) const
_M_insert_int	/usr/include/c++/10/bits/locale_facets.h	/^	_M_insert_int(iter_type, ios_base& __io, char_type __fill,$/;"	p	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base & __io,char_type __fill,_ValueT __v) const
_M_install_cache	/usr/include/c++/10/bits/locale_classes.h	/^    _M_install_cache(const facet*, size_t);$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const facet *,size_t)
_M_install_facet	/usr/include/c++/10/bits/locale_classes.h	/^    _M_install_facet(const locale::id*, const facet*);$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const locale::id *,const facet *)
_M_ios_locale	/usr/include/c++/10/bits/ios_base.h	/^    locale		_M_ios_locale;$/;"	m	class:std::ios_base	typeref:typename:locale	access:protected
_M_is_local	/usr/include/c++/10/bits/basic_string.h	/^      _M_is_local() const$/;"	f	class:std::basic_string	typeref:typename:bool	access:private	signature:() const
_M_it	/usr/include/c++/10/bits/stl_iterator.h	/^      _It _M_it;$/;"	m	union:std::common_iterator::__anon45a010bb010a	typeref:typename:_It	access:public
_M_it1	/usr/include/c++/10/bits/predefined_ops.h	/^      _Iterator1 _M_it1;$/;"	m	struct:__gnu_cxx::__ops::_Iter_comp_to_iter	typeref:typename:_Iterator1	access:public
_M_it1	/usr/include/c++/10/bits/predefined_ops.h	/^      _Iterator1 _M_it1;$/;"	m	struct:__gnu_cxx::__ops::_Iter_equals_iter	typeref:typename:_Iterator1	access:public
_M_iword	/usr/include/c++/10/bits/ios_base.h	/^      long	_M_iword;$/;"	m	struct:std::ios_base::_Words	typeref:typename:long	access:public
_M_keep	/usr/include/c++/10/bits/stl_iterator.h	/^      iter_value_t<_It> _M_keep;$/;"	m	class:std::common_iterator::_Proxy	typeref:typename:iter_value_t<_It>	access:private
_M_last	/usr/include/c++/10/bits/stl_iterator.h	/^      _Sent _M_last;$/;"	m	class:std::move_sentinel	typeref:typename:_Sent	access:private
_M_length	/usr/include/c++/10/bits/basic_string.h	/^      _M_length(size_type __length)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(size_type __length)
_M_length	/usr/include/c++/10/bits/stl_iterator.h	/^      iter_difference_t<_It> _M_length = 0;$/;"	m	class:std::counted_iterator	typeref:typename:iter_difference_t<_It>	access:private
_M_limit	/usr/include/c++/10/bits/basic_string.h	/^      _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:private	signature:(size_type __pos,size_type __off) const
_M_local_buf	/usr/include/c++/10/bits/basic_string.h	/^	_CharT           _M_local_buf[_S_local_capacity + 1];$/;"	m	union:std::basic_string::__anon048e8697020a	typeref:typename:_CharT[]	access:public
_M_local_data	/usr/include/c++/10/bits/basic_string.h	/^      _M_local_data() const$/;"	f	class:std::basic_string	typeref:typename:const_pointer	access:private	signature:() const
_M_local_data	/usr/include/c++/10/bits/basic_string.h	/^      _M_local_data()$/;"	f	class:std::basic_string	typeref:typename:pointer	access:private	signature:()
_M_local_word	/usr/include/c++/10/bits/ios_base.h	/^    _Words		_M_local_word[_S_local_word_size];$/;"	m	class:std::ios_base	typeref:typename:_Words[]	access:protected
_M_max_size	/usr/include/c++/10/ext/new_allocator.h	/^      _M_max_size() const _GLIBCXX_USE_NOEXCEPT$/;"	f	class:__gnu_cxx::new_allocator	typeref:typename:_GLIBCXX_CONSTEXPR size_type	access:private	signature:() const
_M_min	/usr/include/c++/10/bits/stl_algobase.h	/^	_Tp _M_min;$/;"	m	struct:std::__min_cmp::_Res	typeref:typename:_Tp	access:public
_M_move	/usr/include/c++/10/bits/ios_base.h	/^    _M_move(ios_base&) noexcept;$/;"	p	class:std::ios_base	typeref:typename:void	access:protected	signature:(ios_base &)
_M_mutate	/usr/include/c++/10/bits/basic_string.h	/^      _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,$/;"	p	class:std::basic_string	typeref:typename:void	access:private	signature:(size_type __pos,size_type __len1,const _CharT * __s,size_type __len2)
_M_names	/usr/include/c++/10/bits/locale_classes.h	/^    char**				_M_names;$/;"	m	class:std::locale::_Impl	typeref:typename:char **	access:private
_M_narrow	/usr/include/c++/10/bits/locale_facets.h	/^      char                      _M_narrow[128];$/;"	m	class:std::ctype	typeref:typename:char[128]	access:protected
_M_narrow	/usr/include/c++/10/bits/locale_facets.h	/^      mutable char		_M_narrow[1 + static_cast<unsigned char>(-1)];$/;"	m	class:std::ctype	typeref:typename:char[]	access:protected
_M_narrow_init	/usr/include/c++/10/bits/locale_facets.h	/^      void _M_narrow_init() const;$/;"	p	class:std::ctype	typeref:typename:void	access:private	signature:() const
_M_narrow_ok	/usr/include/c++/10/bits/locale_facets.h	/^      bool                      _M_narrow_ok;$/;"	m	class:std::ctype	typeref:typename:bool	access:protected
_M_narrow_ok	/usr/include/c++/10/bits/locale_facets.h	/^      mutable char		_M_narrow_ok;	\/\/ 0 uninitialized, 1 init,$/;"	m	class:std::ctype	typeref:typename:char	access:protected
_M_next	/usr/include/c++/10/bits/ios_base.h	/^      _Callback_list*		_M_next;$/;"	m	struct:std::ios_base::_Callback_list	typeref:typename:_Callback_list *	access:public
_M_num_get	/usr/include/c++/10/bits/basic_ios.h	/^      const __num_get_type*                          _M_num_get;$/;"	m	class:std::basic_ios	typeref:typename:const __num_get_type *	access:protected
_M_num_put	/usr/include/c++/10/bits/basic_ios.h	/^      const __num_put_type*                          _M_num_put;$/;"	m	class:std::basic_ios	typeref:typename:const __num_put_type *	access:protected
_M_off	/usr/include/c++/10/bits/postypes.h	/^      streamoff	                _M_off;$/;"	m	class:std::fpos	typeref:typename:streamoff	access:private
_M_p	/usr/include/c++/10/bits/basic_string.h	/^	pointer _M_p; \/\/ The actual data.$/;"	m	struct:std::basic_string::_Alloc_hider	typeref:typename:pointer	access:public
_M_pad	/usr/include/c++/10/bits/locale_facets.h	/^      _M_pad(char_type __fill, streamsize __w, ios_base& __io,$/;"	p	class:std::num_put	typeref:typename:void	access:protected	signature:(char_type __fill,streamsize __w,ios_base & __io,char_type * __new,const char_type * __cs,int & __len) const
_M_precision	/usr/include/c++/10/bits/ios_base.h	/^    streamsize		_M_precision;$/;"	m	class:std::ios_base	typeref:typename:streamsize	access:protected
_M_pred	/usr/include/c++/10/bits/predefined_ops.h	/^      _Predicate _M_pred;$/;"	m	struct:__gnu_cxx::__ops::_Iter_negate	typeref:typename:_Predicate	access:public
_M_pred	/usr/include/c++/10/bits/predefined_ops.h	/^      _Predicate _M_pred;$/;"	m	struct:__gnu_cxx::__ops::_Iter_pred	typeref:typename:_Predicate	access:public
_M_pred	/usr/include/c++/10/bits/stl_function.h	/^      _Predicate _M_pred;$/;"	m	class:std::binary_negate	typeref:typename:_Predicate	access:protected
_M_pred	/usr/include/c++/10/bits/stl_function.h	/^      _Predicate _M_pred;$/;"	m	class:std::unary_negate	typeref:typename:_Predicate	access:protected
_M_ptr	/usr/include/c++/10/bits/nested_exception.h	/^    exception_ptr _M_ptr;$/;"	m	class:std::nested_exception	typeref:typename:exception_ptr	access:private
_M_ptr	/usr/include/c++/10/bits/stl_function.h	/^      _Result (*_M_ptr)(_Arg);$/;"	m	class:std::pointer_to_unary_function	typeref:typename:_Result (*)(_Arg)	access:protected
_M_ptr	/usr/include/c++/10/bits/stl_function.h	/^      _Result (*_M_ptr)(_Arg1, _Arg2);$/;"	m	class:std::pointer_to_binary_function	typeref:typename:_Result (*)(_Arg1,_Arg2)	access:protected
_M_put	/usr/include/c++/10/bits/streambuf_iterator.h	/^      _M_put(const _CharT* __ws, streamsize __len)$/;"	f	class:std::ostreambuf_iterator	typeref:typename:ostreambuf_iterator &	access:public	signature:(const _CharT * __ws,streamsize __len)
_M_pword	/usr/include/c++/10/bits/ios_base.h	/^      void*	_M_pword;$/;"	m	struct:std::ios_base::_Words	typeref:typename:void *	access:public
_M_refcount	/usr/include/c++/10/bits/ios_base.h	/^      _Atomic_word		_M_refcount;  \/\/ 0 means one reference.$/;"	m	struct:std::ios_base::_Callback_list	typeref:typename:_Atomic_word	access:public
_M_refcount	/usr/include/c++/10/bits/locale_classes.h	/^    _Atomic_word			_M_refcount;$/;"	m	class:std::locale::_Impl	typeref:typename:_Atomic_word	access:private
_M_refcount	/usr/include/c++/10/bits/locale_classes.h	/^    mutable _Atomic_word		_M_refcount;$/;"	m	class:std::locale::facet	typeref:typename:_Atomic_word	access:private
_M_release	/usr/include/c++/10/bits/exception_ptr.h	/^      void _M_release() _GLIBCXX_USE_NOEXCEPT;$/;"	p	class:std::__exception_ptr::exception_ptr	typeref:typename:void	access:private	signature:()
_M_remove_reference	/usr/include/c++/10/bits/ios_base.h	/^      _M_remove_reference() $/;"	f	struct:std::ios_base::_Callback_list	typeref:typename:int	access:public	signature:()
_M_remove_reference	/usr/include/c++/10/bits/locale_classes.h	/^    _M_remove_reference() const throw()$/;"	f	class:std::locale::facet	typeref:typename:void	access:private	signature:() const
_M_remove_reference	/usr/include/c++/10/bits/locale_classes.h	/^    _M_remove_reference() throw()$/;"	f	class:std::locale::_Impl	typeref:typename:void	access:private	signature:()
_M_replace	/usr/include/c++/10/bits/basic_string.h	/^      _M_replace(size_type __pos, size_type __len1, const _CharT* __s,$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:private	signature:(size_type __pos,size_type __len1,const _CharT * __s,const size_type __len2)
_M_replace_aux	/usr/include/c++/10/bits/basic_string.h	/^      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:private	signature:(size_type __pos1,size_type __n1,size_type __n2,_CharT __c)
_M_replace_categories	/usr/include/c++/10/bits/locale_classes.h	/^    _M_replace_categories(const _Impl*, category);$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const _Impl *,category)
_M_replace_category	/usr/include/c++/10/bits/locale_classes.h	/^    _M_replace_category(const _Impl*, const locale::id* const*);$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const _Impl *,const locale::id * const *)
_M_replace_dispatch	/usr/include/c++/10/bits/basic_string.h	/^	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:private	signature:(const_iterator __i1,const_iterator __i2,_Integer __n,_Integer __val,__true_type)
_M_replace_dispatch	/usr/include/c++/10/bits/basic_string.h	/^	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:private	signature:(const_iterator __i1,const_iterator __i2,_InputIterator __k1,_InputIterator __k2,__false_type)
_M_replace_facet	/usr/include/c++/10/bits/locale_classes.h	/^    _M_replace_facet(const _Impl*, const locale::id*);$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const _Impl *,const locale::id *)
_M_safe_bool_dummy	/usr/include/c++/10/bits/exception_ptr.h	/^      void _M_safe_bool_dummy() _GLIBCXX_USE_NOEXCEPT$/;"	p	class:std::__exception_ptr::exception_ptr	typeref:typename:void	access:public	signature:()
_M_sbuf	/usr/include/c++/10/bits/streambuf_iterator.h	/^      mutable streambuf_type*	_M_sbuf;$/;"	m	class:std::istreambuf_iterator	typeref:typename:streambuf_type *	access:private
_M_sbuf	/usr/include/c++/10/bits/streambuf_iterator.h	/^      streambuf_type*	_M_sbuf;$/;"	m	class:std::ostreambuf_iterator	typeref:typename:streambuf_type *	access:private
_M_sent	/usr/include/c++/10/bits/stl_iterator.h	/^      _Sent _M_sent;$/;"	m	union:std::common_iterator::__anon45a010bb010a	typeref:typename:_Sent	access:public
_M_set_length	/usr/include/c++/10/bits/basic_string.h	/^      _M_set_length(size_type __n)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(size_type __n)
_M_setstate	/usr/include/c++/10/bits/basic_ios.h	/^      _M_setstate(iostate __state)$/;"	f	class:std::basic_ios	typeref:typename:void	access:public	signature:(iostate __state)
_M_sso_shim	/usr/include/c++/10/bits/locale_classes.h	/^    const facet* _M_sso_shim(const id*) const;$/;"	p	class:std::locale::facet	typeref:typename:const facet *	access:private	signature:(const id *) const
_M_state	/usr/include/c++/10/bits/postypes.h	/^      _StateT			_M_state;$/;"	m	class:std::fpos	typeref:typename:_StateT	access:private
_M_streambuf	/usr/include/c++/10/bits/basic_ios.h	/^      basic_streambuf<_CharT, _Traits>*              _M_streambuf;$/;"	m	class:std::basic_ios	typeref:typename:basic_streambuf<_CharT,_Traits> *	access:protected
_M_streambuf_state	/usr/include/c++/10/bits/ios_base.h	/^    iostate		_M_streambuf_state;$/;"	m	class:std::ios_base	typeref:typename:iostate	access:protected
_M_string_length	/usr/include/c++/10/bits/basic_string.h	/^      size_type		_M_string_length;$/;"	m	class:std::basic_string	typeref:typename:size_type	access:private
_M_sv	/usr/include/c++/10/bits/basic_string.h	/^	__sv_type _M_sv;$/;"	m	struct:std::basic_string::__sv_wrapper	typeref:typename:__sv_type	access:public
_M_swap	/usr/include/c++/10/bits/ios_base.h	/^    _M_swap(ios_base& __rhs) noexcept;$/;"	p	class:std::ios_base	typeref:typename:void	access:protected	signature:(ios_base & __rhs)
_M_table	/usr/include/c++/10/bits/locale_facets.h	/^      const mask*		_M_table;$/;"	m	class:std::ctype	typeref:typename:const mask *	access:protected
_M_thousands_sep	/usr/include/c++/10/bits/locale_facets.h	/^      _CharT				_M_thousands_sep;$/;"	m	struct:std::__numpunct_cache	typeref:typename:_CharT	access:public
_M_tie	/usr/include/c++/10/bits/basic_ios.h	/^      basic_ostream<_CharT, _Traits>*                _M_tie;$/;"	m	class:std::basic_ios	typeref:typename:basic_ostream<_CharT,_Traits> *	access:protected
_M_tolower	/usr/include/c++/10/bits/locale_facets.h	/^      __to_type			_M_tolower;$/;"	m	class:std::ctype	typeref:typename:__to_type	access:protected
_M_toupper	/usr/include/c++/10/bits/locale_facets.h	/^      __to_type			_M_toupper;$/;"	m	class:std::ctype	typeref:typename:__to_type	access:protected
_M_transform	/usr/include/c++/10/bits/locale_classes.h	/^      _M_transform(_CharT*, const _CharT*, size_t) const throw();$/;"	p	class:std::collate	typeref:typename:size_t	access:public	signature:(_CharT *,const _CharT *,size_t) const
_M_transform	/usr/include/c++/10/bits/locale_classes.h	/^    collate<char>::_M_transform(char*, const char*, size_t) const throw();$/;"	p	class:std::collate	typeref:typename:size_t	signature:(char *,const char *,size_t) const
_M_transform	/usr/include/c++/10/bits/locale_classes.h	/^    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw();$/;"	p	class:std::collate	typeref:typename:size_t	signature:(wchar_t *,const wchar_t *,size_t) const
_M_truename	/usr/include/c++/10/bits/locale_facets.h	/^      const _CharT*			_M_truename;$/;"	m	struct:std::__numpunct_cache	typeref:typename:const _CharT *	access:public
_M_truename_size	/usr/include/c++/10/bits/locale_facets.h	/^      size_t                            _M_truename_size;$/;"	m	struct:std::__numpunct_cache	typeref:typename:size_t	access:public
_M_use_grouping	/usr/include/c++/10/bits/locale_facets.h	/^      bool				_M_use_grouping;$/;"	m	struct:std::__numpunct_cache	typeref:typename:bool	access:public
_M_value	/usr/include/c++/10/bits/ios_base.h	/^	int		_M_value;$/;"	m	struct:std::ios_base::system_error::error_code	typeref:typename:int	access:private
_M_value	/usr/include/c++/10/bits/predefined_ops.h	/^      _Value& _M_value;$/;"	m	struct:__gnu_cxx::__ops::_Iter_comp_to_val	typeref:typename:_Value &	access:public
_M_value	/usr/include/c++/10/bits/predefined_ops.h	/^      _Value& _M_value;$/;"	m	struct:__gnu_cxx::__ops::_Iter_equals_val	typeref:typename:_Value &	access:public
_M_valueless	/usr/include/c++/10/bits/stl_iterator.h	/^      unsigned char _M_valueless;$/;"	m	union:std::common_iterator::__anon45a010bb010a	typeref:typename:unsigned char	access:public
_M_widen	/usr/include/c++/10/bits/locale_facets.h	/^      mutable char		_M_widen[1 + static_cast<unsigned char>(-1)];$/;"	m	class:std::ctype	typeref:typename:char[]	access:protected
_M_widen	/usr/include/c++/10/bits/locale_facets.h	/^      wint_t                    _M_widen[1 + static_cast<unsigned char>(-1)];$/;"	m	class:std::ctype	typeref:typename:wint_t[]	access:protected
_M_widen_init	/usr/include/c++/10/bits/locale_facets.h	/^      void _M_widen_init() const;$/;"	p	class:std::ctype	typeref:typename:void	access:private	signature:() const
_M_widen_ok	/usr/include/c++/10/bits/locale_facets.h	/^      mutable char		_M_widen_ok;$/;"	m	class:std::ctype	typeref:typename:char	access:protected
_M_width	/usr/include/c++/10/bits/ios_base.h	/^    streamsize		_M_width;$/;"	m	class:std::ios_base	typeref:typename:streamsize	access:protected
_M_wmask	/usr/include/c++/10/bits/locale_facets.h	/^      __wmask_type              _M_wmask[16];$/;"	m	class:std::ctype	typeref:typename:__wmask_type[16]	access:protected
_M_word	/usr/include/c++/10/bits/ios_base.h	/^    _Words*		_M_word;$/;"	m	class:std::ios_base	typeref:typename:_Words *	access:protected
_M_word_size	/usr/include/c++/10/bits/ios_base.h	/^    int			_M_word_size;$/;"	m	class:std::ios_base	typeref:typename:int	access:protected
_M_word_zero	/usr/include/c++/10/bits/ios_base.h	/^    _Words		_M_word_zero;$/;"	m	class:std::ios_base	typeref:typename:_Words	access:protected
_MoveConstructiblePair	/usr/include/c++/10/bits/stl_pair.h	/^      static constexpr bool _MoveConstructiblePair()$/;"	f	struct:std::_PCC	typeref:typename:bool	access:public	signature:()
_MoveCopyPair	/usr/include/c++/10/bits/stl_pair.h	/^      static constexpr bool _MoveCopyPair()$/;"	f	struct:std::_PCC	typeref:typename:bool	access:public	signature:()
_NEW_ALLOCATOR_H	/usr/include/c++/10/ext/new_allocator.h	/^#define _NEW_ALLOCATOR_H /;"	d
_Nested_exception	/usr/include/c++/10/bits/nested_exception.h	/^      explicit _Nested_exception(_Except&& __ex)$/;"	f	struct:std::_Nested_exception	access:public	signature:(_Except && __ex)
_Nested_exception	/usr/include/c++/10/bits/nested_exception.h	/^      explicit _Nested_exception(const _Except& __ex)$/;"	f	struct:std::_Nested_exception	access:public	signature:(const _Except & __ex)
_Nested_exception	/usr/include/c++/10/bits/nested_exception.h	/^    struct _Nested_exception : public _Except, public nested_exception$/;"	s	namespace:std	inherits:_Except,nested_exception
_Never_valueless_alt	/usr/include/c++/10/bits/basic_string.h	/^      struct _Never_valueless_alt<std::basic_string<_Tp, _Traits, _Alloc>>$/;"	s	namespace:std::__detail::__variant	inherits:__and_<is_nothrow_move_constructible<std::basic_string<_Tp,_Traits,_Alloc>>,is_nothrow_move_assignable<std::basic_string<_Tp,_Traits,_Alloc>>>::type
_Noreturn	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define _Noreturn /;"	d
_Noreturn	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define _Noreturn$/;"	d
_OSTREAM_INSERT_H	/usr/include/c++/10/bits/ostream_insert.h	/^#define _OSTREAM_INSERT_H /;"	d
_PCC	/usr/include/c++/10/bits/stl_pair.h	/^    struct _PCC$/;"	s	namespace:std
_PCC	/usr/include/c++/10/bits/stl_pair.h	/^    struct _PCC<false, _T1, _T2>$/;"	s	namespace:std
_PCCFP	/usr/include/c++/10/bits/stl_pair.h	/^        using _PCCFP = _PCC<!is_same<_T1, _U1>::value$/;"	t	struct:std::pair	typeref:typename:_PCC<!is_same<_T1,_U1>::value||!is_same<_T2,_U2> _T2>	access:public
_PCCP	/usr/include/c++/10/bits/stl_pair.h	/^      using _PCCP = _PCC<true, _T1, _T2>;$/;"	t	struct:std::pair	typeref:typename:_PCC<true,_T1,_T2>	access:public
_POSIX_C_SOURCE	/usr/include/features.h	/^#  define _POSIX_C_SOURCE	/;"	d
_POSIX_C_SOURCE	/usr/include/features.h	/^# define _POSIX_C_SOURCE	/;"	d
_POSIX_C_SOURCE	/usr/include/features.h	/^# define _POSIX_C_SOURCE /;"	d
_POSIX_SOURCE	/usr/include/features.h	/^# define _POSIX_SOURCE	/;"	d
_POSIX_SOURCE	/usr/include/features.h	/^# define _POSIX_SOURCE /;"	d
_PSTL_ASSERT	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _PSTL_ASSERT(/;"	d	signature:(_Condition)
_PSTL_ASSERT_MSG	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define _PSTL_ASSERT_MSG(/;"	d	signature:(_Condition,_Message)
_PSTL_PAR_BACKEND_SERIAL	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#  define _PSTL_PAR_BACKEND_SERIAL$/;"	d
_PSTL_PAR_BACKEND_TBB	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#  define _PSTL_PAR_BACKEND_TBB$/;"	d
_PTHREAD_H	/usr/include/pthread.h	/^#define _PTHREAD_H	/;"	d
_PTRDIFF_T	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _PTRDIFF_T$/;"	d
_PTRDIFF_T_	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _PTRDIFF_T_$/;"	d
_PTRDIFF_T_DECLARED	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _PTRDIFF_T_DECLARED$/;"	d
_PTR_TRAITS_H	/usr/include/c++/10/bits/ptr_traits.h	/^#define _PTR_TRAITS_H /;"	d
_Proxy	/usr/include/c++/10/bits/stl_iterator.h	/^      _Proxy(iter_reference_t<_It>&& __x)$/;"	f	class:std::common_iterator::_Proxy	access:private	signature:(iter_reference_t<_It> && __x)
_Proxy	/usr/include/c++/10/bits/stl_iterator.h	/^    class _Proxy$/;"	c	class:std::common_iterator	access:private
_Ptr	/usr/include/c++/10/bits/alloc_traits.h	/^	struct _Ptr$/;"	s	struct:std::allocator_traits	access:private
_Ptr	/usr/include/c++/10/bits/alloc_traits.h	/^	struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>$/;"	s	struct:std::allocator_traits	access:private
_RAIters	/usr/include/c++/10/bits/stl_algobase.h	/^      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;$/;"	t	function:std::__equal4	typeref:typename:__and_<is_same<_Cat1,_RATag>,is_same<_Cat2,_RATag>>
_RANGE_CMP_H	/usr/include/c++/10/bits/range_cmp.h	/^#define _RANGE_CMP_H /;"	d
_RATag	/usr/include/c++/10/bits/stl_algobase.h	/^      using _RATag = random_access_iterator_tag;$/;"	t	function:std::__equal4	typeref:typename:random_access_iterator_tag
_RBegin	/usr/include/c++/10/bits/range_access.h	/^    struct _RBegin$/;"	s	namespace:std::ranges::__cust_access
_REnd	/usr/include/c++/10/bits/range_access.h	/^    struct _REnd$/;"	s	namespace:std::ranges::__cust_access
_RUNE_T_DECLARED	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _RUNE_T_DECLARED$/;"	d
_RWLOCK_INTERNAL_H	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^#define _RWLOCK_INTERNAL_H$/;"	d
_ReferenceType1	/usr/include/c++/10/bits/stl_algobase.h	/^	_ReferenceType1;$/;"	t	function:std::iter_swap	typeref:typename:iterator_traits<_ForwardIterator1>::reference
_ReferenceType2	/usr/include/c++/10/bits/stl_algobase.h	/^	_ReferenceType2;$/;"	t	function:std::iter_swap	typeref:typename:iterator_traits<_ForwardIterator2>::reference
_RequireAllocator	/usr/include/c++/10/bits/alloc_traits.h	/^    using _RequireAllocator$/;"	t	namespace:std	typeref:typename:enable_if<__is_allocator<_Alloc>::value,_Alloc>::type
_RequireInputIter	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^    using _RequireInputIter =$/;"	t	namespace:std	typeref:typename:__enable_if_t<is_convertible<__iterator_category_t<_InIter>,input_iterator_tag>::value>
_RequireNotAllocator	/usr/include/c++/10/bits/alloc_traits.h	/^    using _RequireNotAllocator$/;"	t	namespace:std	typeref:typename:enable_if<!__is_allocator<_Alloc> _Alloc>::type
_Res	/usr/include/c++/10/bits/stl_algobase.h	/^      struct _Res {$/;"	s	function:std::__min_cmp
_Ret	/usr/include/c++/10/bits/stl_function.h	/^      _Ret (_Tp::*_M_f)() const;$/;"	p	class:std::const_mem_fun_ref_t	access:private	signature:(_Tp::* _M_f)
_Ret	/usr/include/c++/10/bits/stl_function.h	/^      _Ret (_Tp::*_M_f)() const;$/;"	p	class:std::const_mem_fun_t	access:private	signature:(_Tp::* _M_f)
_Ret	/usr/include/c++/10/bits/stl_function.h	/^      _Ret (_Tp::*_M_f)();$/;"	p	class:std::mem_fun_ref_t	access:private	signature:(_Tp::* _M_f)
_Ret	/usr/include/c++/10/bits/stl_function.h	/^      _Ret (_Tp::*_M_f)();$/;"	p	class:std::mem_fun_t	access:private	signature:(_Tp::* _M_f)
_Ret	/usr/include/c++/10/bits/stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg) const;$/;"	p	class:std::const_mem_fun1_ref_t	access:private	signature:(_Tp::* _M_f)
_Ret	/usr/include/c++/10/bits/stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg) const;$/;"	p	class:std::const_mem_fun1_t	access:private	signature:(_Tp::* _M_f)
_Ret	/usr/include/c++/10/bits/stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg);$/;"	p	class:std::mem_fun1_ref_t	access:private	signature:(_Tp::* _M_f)
_Ret	/usr/include/c++/10/bits/stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg);$/;"	p	class:std::mem_fun1_t	access:private	signature:(_Tp::* _M_f)
_SCHED_H	/usr/include/sched.h	/^#define	_SCHED_H	/;"	d
_SIGSET_NWORDS	/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h	/^#define _SIGSET_NWORDS /;"	d
_SIZET_	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _SIZET_$/;"	d
_SIZE_T	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _SIZE_T$/;"	d
_SIZE_T_	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _SIZE_T_$/;"	d
_SIZE_T_DECLARED	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _SIZE_T_DECLARED	/;"	d
_SIZE_T_DEFINED	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _SIZE_T_DEFINED$/;"	d
_SIZE_T_DEFINED_	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _SIZE_T_DEFINED_$/;"	d
_SSize	/usr/include/c++/10/bits/range_access.h	/^    struct _SSize$/;"	s	namespace:std::ranges::__cust_access
_STDARG_H	/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h	/^#define _STDARG_H$/;"	d
_STDC_PREDEF_H	/usr/include/stdc-predef.h	/^#define	_STDC_PREDEF_H	/;"	d
_STDDEF_H	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _STDDEF_H$/;"	d
_STDDEF_H_	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _STDDEF_H_$/;"	d
_STDINT_H	/usr/include/stdint.h	/^#define _STDINT_H	/;"	d
_STDIO_H	/usr/include/stdio.h	/^#define _STDIO_H	/;"	d
_STDLIB_H	/usr/include/stdlib.h	/^#define	_STDLIB_H	/;"	d
_STL_ALGOBASE_H	/usr/include/c++/10/bits/stl_algobase.h	/^#define _STL_ALGOBASE_H /;"	d
_STL_CONSTRUCT_H	/usr/include/c++/10/bits/stl_construct.h	/^#define _STL_CONSTRUCT_H /;"	d
_STL_FUNCTION_H	/usr/include/c++/10/bits/stl_function.h	/^#define _STL_FUNCTION_H /;"	d
_STL_ITERATOR_BASE_FUNCS_H	/usr/include/c++/10/bits/stl_iterator_base_funcs.h	/^#define _STL_ITERATOR_BASE_FUNCS_H /;"	d
_STL_ITERATOR_BASE_TYPES_H	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^#define _STL_ITERATOR_BASE_TYPES_H /;"	d
_STL_ITERATOR_H	/usr/include/c++/10/bits/stl_iterator.h	/^#define _STL_ITERATOR_H /;"	d
_STL_PAIR_H	/usr/include/c++/10/bits/stl_pair.h	/^#define _STL_PAIR_H /;"	d
_STREAMBUF_ITERATOR_H	/usr/include/c++/10/bits/streambuf_iterator.h	/^#define _STREAMBUF_ITERATOR_H /;"	d
_STRINGFWD_H	/usr/include/c++/10/bits/stringfwd.h	/^#define _STRINGFWD_H /;"	d
_STRING_CONVERSIONS_H	/usr/include/c++/10/ext/string_conversions.h	/^#define _STRING_CONVERSIONS_H /;"	d
_STRUCT_TIMESPEC	/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h	/^#define _STRUCT_TIMESPEC /;"	d
_SYS_CDEFS_H	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#define	_SYS_CDEFS_H	/;"	d
_SYS_SELECT_H	/usr/include/x86_64-linux-gnu/sys/select.h	/^#define _SYS_SELECT_H	/;"	d
_SYS_SIZE_T_H	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _SYS_SIZE_T_H$/;"	d
_SYS_TYPES_H	/usr/include/x86_64-linux-gnu/sys/types.h	/^#define	_SYS_TYPES_H	/;"	d
_S_adjustfield	/usr/include/c++/10/bits/ios_base.h	/^      _S_adjustfield 	= _S_left | _S_right | _S_internal,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_allocate	/usr/include/c++/10/bits/alloc_traits.h	/^	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)$/;"	f	struct:std::allocator_traits	typeref:typename:decltype (__a.allocate (__n,__hint))	access:private	signature:(_Alloc2 & __a,size_type __n,const_void_pointer __hint,int)
_S_allocate	/usr/include/c++/10/bits/alloc_traits.h	/^	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)$/;"	f	struct:std::allocator_traits	typeref:typename:pointer	access:private	signature:(_Alloc2 & __a,size_type __n,const_void_pointer,...)
_S_always_equal	/usr/include/c++/10/ext/alloc_traits.h	/^    static constexpr bool _S_always_equal()$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:bool	access:public	signature:()
_S_app	/usr/include/c++/10/bits/ios_base.h	/^      _S_app 		= 1L << 0,$/;"	e	enum:std::_Ios_Openmode	access:public
_S_assign	/usr/include/c++/10/bits/basic_string.h	/^      _S_assign(_CharT* __d, size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __d,size_type __n,_CharT __c)
_S_ate	/usr/include/c++/10/bits/ios_base.h	/^      _S_ate 		= 1L << 1,$/;"	e	enum:std::_Ios_Openmode	access:public
_S_atoms_in	/usr/include/c++/10/bits/locale_facets.h	/^    static const char* _S_atoms_in;$/;"	m	class:std::__num_base	typeref:typename:const char *	access:public
_S_atoms_out	/usr/include/c++/10/bits/locale_facets.h	/^    static const char* _S_atoms_out;$/;"	m	class:std::__num_base	typeref:typename:const char *	access:public
_S_badbit	/usr/include/c++/10/bits/ios_base.h	/^      _S_badbit 		= 1L << 0,$/;"	e	enum:std::_Ios_Iostate	access:public
_S_basefield	/usr/include/c++/10/bits/ios_base.h	/^      _S_basefield 	= _S_dec | _S_oct | _S_hex,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_beg	/usr/include/c++/10/bits/ios_base.h	/^      _S_beg = 0,$/;"	e	enum:std::_Ios_Seekdir	access:public
_S_bin	/usr/include/c++/10/bits/ios_base.h	/^      _S_bin 		= 1L << 2,$/;"	e	enum:std::_Ios_Openmode	access:public
_S_boolalpha	/usr/include/c++/10/bits/ios_base.h	/^      _S_boolalpha 	= 1L << 0,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_c_locale	/usr/include/c++/10/bits/locale_classes.h	/^    static __c_locale                   _S_c_locale;$/;"	m	class:std::locale::facet	typeref:typename:__c_locale	access:private
_S_c_name	/usr/include/c++/10/bits/locale_classes.h	/^    static const char			_S_c_name[2];$/;"	m	class:std::locale::facet	typeref:typename:const char[2]	access:private
_S_categories	/usr/include/c++/10/bits/locale_classes.h	/^    static const char* const* const _S_categories;$/;"	m	class:std::locale	typeref:typename:const char * const * const	access:private
_S_categories_size	/usr/include/c++/10/bits/locale_classes.h	/^    enum { _S_categories_size = 6 + _GLIBCXX_NUM_CATEGORIES };$/;"	e	enum:std::locale::__anon823239bc0103	access:public
_S_classic	/usr/include/c++/10/bits/locale_classes.h	/^    static _Impl*       _S_classic;$/;"	m	class:std::locale	typeref:typename:_Impl *	access:private
_S_clone_c_locale	/usr/include/c++/10/bits/locale_classes.h	/^    _S_clone_c_locale(__c_locale& __cloc) throw();$/;"	p	class:std::locale::facet	typeref:typename:__c_locale	access:protected	signature:(__c_locale & __cloc)
_S_cmp	/usr/include/c++/10/bits/stl_function.h	/^	_S_cmp(_Tp&& __t, _Up&& __u, false_type)$/;"	f	struct:std::greater	typeref:typename:decltype (auto)	access:private	signature:(_Tp && __t,_Up && __u,false_type)
_S_cmp	/usr/include/c++/10/bits/stl_function.h	/^	_S_cmp(_Tp&& __t, _Up&& __u, false_type)$/;"	f	struct:std::greater_equal	typeref:typename:decltype (auto)	access:private	signature:(_Tp && __t,_Up && __u,false_type)
_S_cmp	/usr/include/c++/10/bits/stl_function.h	/^	_S_cmp(_Tp&& __t, _Up&& __u, false_type)$/;"	f	struct:std::less	typeref:typename:decltype (auto)	access:private	signature:(_Tp && __t,_Up && __u,false_type)
_S_cmp	/usr/include/c++/10/bits/stl_function.h	/^	_S_cmp(_Tp&& __t, _Up&& __u, false_type)$/;"	f	struct:std::less_equal	typeref:typename:decltype (auto)	access:private	signature:(_Tp && __t,_Up && __u,false_type)
_S_cmp	/usr/include/c++/10/bits/stl_function.h	/^	_S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept$/;"	f	struct:std::greater	typeref:typename:bool	access:private	signature:(_Tp && __t,_Up && __u,true_type)
_S_cmp	/usr/include/c++/10/bits/stl_function.h	/^	_S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept$/;"	f	struct:std::greater_equal	typeref:typename:bool	access:private	signature:(_Tp && __t,_Up && __u,true_type)
_S_cmp	/usr/include/c++/10/bits/stl_function.h	/^	_S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept$/;"	f	struct:std::less	typeref:typename:bool	access:private	signature:(_Tp && __t,_Up && __u,true_type)
_S_cmp	/usr/include/c++/10/bits/stl_function.h	/^	_S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept$/;"	f	struct:std::less_equal	typeref:typename:bool	access:private	signature:(_Tp && __t,_Up && __u,true_type)
_S_compare	/usr/include/c++/10/bits/basic_string.h	/^      _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:int	access:private	signature:(size_type __n1,size_type __n2)
_S_construct	/usr/include/c++/10/bits/alloc_traits.h	/^	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX14_CONSTEXPR _Require<__has_construct<_Tp,_Args...>>	access:private	signature:(_Alloc & __a,_Tp * __p,_Args &&...__args)
_S_construct	/usr/include/c++/10/bits/alloc_traits.h	/^	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX14_CONSTEXPR _Require<__and_<__not_<__has_construct<_Tp,_Args...>>,is_constructible<_Tp,_Args...>>>	access:private	signature:(_Alloc &,_Tp * __p,_Args &&...__args)
_S_copy	/usr/include/c++/10/bits/basic_string.h	/^      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __d,const _CharT * __s,size_type __n)
_S_copy_chars	/usr/include/c++/10/bits/basic_string.h	/^        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __p,_Iterator __k1,_Iterator __k2)
_S_copy_chars	/usr/include/c++/10/bits/basic_string.h	/^      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __p,_CharT * __k1,_CharT * __k2)
_S_copy_chars	/usr/include/c++/10/bits/basic_string.h	/^      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __p,const _CharT * __k1,const _CharT * __k2)
_S_copy_chars	/usr/include/c++/10/bits/basic_string.h	/^      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __p,const_iterator __k1,const_iterator __k2)
_S_copy_chars	/usr/include/c++/10/bits/basic_string.h	/^      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __p,iterator __k1,iterator __k2)
_S_create_c_locale	/usr/include/c++/10/bits/locale_classes.h	/^    _S_create_c_locale(__c_locale& __cloc, const char* __s,$/;"	p	class:std::locale::facet	typeref:typename:void	access:protected	signature:(__c_locale & __cloc,const char * __s,__c_locale __old=0)
_S_cur	/usr/include/c++/10/bits/ios_base.h	/^      _S_cur = _GLIBCXX_STDIO_SEEK_CUR,$/;"	e	enum:std::_Ios_Seekdir	access:public
_S_dec	/usr/include/c++/10/bits/ios_base.h	/^      _S_dec 		= 1L << 1,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_destroy	/usr/include/c++/10/bits/alloc_traits.h	/^	_S_destroy(_Alloc2& __a, _Tp* __p, int)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:private	signature:(_Alloc2 & __a,_Tp * __p,int)
_S_destroy	/usr/include/c++/10/bits/alloc_traits.h	/^	_S_destroy(_Alloc2&, _Tp* __p, ...)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX14_CONSTEXPR void	access:private	signature:(_Alloc2 &,_Tp * __p,...)
_S_destroy_c_locale	/usr/include/c++/10/bits/locale_classes.h	/^    _S_destroy_c_locale(__c_locale& __cloc);$/;"	p	class:std::locale::facet	typeref:typename:void	access:protected	signature:(__c_locale & __cloc)
_S_do_it	/usr/include/c++/10/bits/allocator.h	/^      _S_do_it(_Alloc& __one, _Alloc& __two) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::__alloc_swap	typeref:typename:void	access:public	signature:(_Alloc & __one,_Alloc & __two)
_S_do_it	/usr/include/c++/10/bits/allocator.h	/^      _S_do_it(_Tp& __c) noexcept$/;"	f	struct:std::__shrink_to_fit_aux	typeref:typename:bool	access:public	signature:(_Tp & __c)
_S_do_it	/usr/include/c++/10/bits/allocator.h	/^      _S_do_it(const _Alloc& __one, const _Alloc& __two)$/;"	f	struct:std::__alloc_neq	typeref:typename:bool	access:public	signature:(const _Alloc & __one,const _Alloc & __two)
_S_do_it	/usr/include/c++/10/bits/allocator.h	/^      _S_do_it(const _Alloc&, const _Alloc&)$/;"	f	struct:std::__alloc_neq	typeref:typename:bool	access:public	signature:(const _Alloc &,const _Alloc &)
_S_do_it	/usr/include/c++/10/bits/allocator.h	/^    { static bool _S_do_it(_Tp&) noexcept { return false; } };$/;"	f	struct:std::__shrink_to_fit_aux	typeref:typename:bool	access:public	signature:(_Tp &)
_S_do_it	/usr/include/c++/10/bits/allocator.h	/^    { static void _S_do_it(_Alloc&, _Alloc&) _GLIBCXX_NOEXCEPT { } };$/;"	f	struct:std::__alloc_swap	typeref:typename:void	access:public	signature:(_Alloc &,_Alloc &)
_S_end	/usr/include/c++/10/bits/ios_base.h	/^      _S_end = _GLIBCXX_STDIO_SEEK_END,$/;"	e	enum:std::_Ios_Seekdir	access:public
_S_eofbit	/usr/include/c++/10/bits/ios_base.h	/^      _S_eofbit 		= 1L << 1,$/;"	e	enum:std::_Ios_Iostate	access:public
_S_facet_categories	/usr/include/c++/10/bits/locale_classes.h	/^    static const locale::id* const* const _S_facet_categories[];$/;"	m	class:std::locale::_Impl	typeref:typename:const locale::id * const * const[]	access:private
_S_failbit	/usr/include/c++/10/bits/ios_base.h	/^      _S_failbit		= 1L << 2,$/;"	e	enum:std::_Ios_Iostate	access:public
_S_fixed	/usr/include/c++/10/bits/ios_base.h	/^      _S_fixed 		= 1L << 2,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_floatfield	/usr/include/c++/10/bits/ios_base.h	/^      _S_floatfield 	= _S_scientific | _S_fixed,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_format_float	/usr/include/c++/10/bits/locale_facets.h	/^    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw();$/;"	p	class:std::__num_base	typeref:typename:void	access:public	signature:(const ios_base & __io,char * __fptr,char __mod)
_S_get_c_locale	/usr/include/c++/10/bits/locale_classes.h	/^    _S_get_c_locale();$/;"	p	class:std::locale::facet	typeref:typename:__c_locale	access:protected	signature:()
_S_get_c_name	/usr/include/c++/10/bits/locale_classes.h	/^    _S_get_c_name() throw();$/;"	p	class:std::locale::facet	typeref:typename:_GLIBCXX_CONST const char *	access:protected	signature:()
_S_global	/usr/include/c++/10/bits/locale_classes.h	/^    static _Impl*	_S_global;$/;"	m	class:std::locale	typeref:typename:_Impl *	access:private
_S_goodbit	/usr/include/c++/10/bits/ios_base.h	/^      _S_goodbit 		= 0,$/;"	e	enum:std::_Ios_Iostate	access:public
_S_hex	/usr/include/c++/10/bits/ios_base.h	/^      _S_hex 		= 1L << 3,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_iE	/usr/include/c++/10/bits/locale_facets.h	/^      _S_iE = _S_izero + 20,$/;"	e	enum:std::__num_base::__anon4f18faa40203	access:public
_S_iX	/usr/include/c++/10/bits/locale_facets.h	/^      _S_iX,$/;"	e	enum:std::__num_base::__anon4f18faa40203	access:public
_S_id_collate	/usr/include/c++/10/bits/locale_classes.h	/^    static const locale::id* const	_S_id_collate[];$/;"	m	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
_S_id_ctype	/usr/include/c++/10/bits/locale_classes.h	/^    static const locale::id* const	_S_id_ctype[];$/;"	m	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
_S_id_messages	/usr/include/c++/10/bits/locale_classes.h	/^    static const locale::id* const	_S_id_messages[];$/;"	m	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
_S_id_monetary	/usr/include/c++/10/bits/locale_classes.h	/^    static const locale::id* const	_S_id_monetary[];$/;"	m	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
_S_id_numeric	/usr/include/c++/10/bits/locale_classes.h	/^    static const locale::id* const	_S_id_numeric[];$/;"	m	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
_S_id_time	/usr/include/c++/10/bits/locale_classes.h	/^    static const locale::id* const	_S_id_time[];$/;"	m	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
_S_ie	/usr/include/c++/10/bits/locale_facets.h	/^      _S_ie = _S_izero + 14,$/;"	e	enum:std::__num_base::__anon4f18faa40203	access:public
_S_iend	/usr/include/c++/10/bits/locale_facets.h	/^      _S_iend = 26$/;"	e	enum:std::__num_base::__anon4f18faa40203	access:public
_S_iminus	/usr/include/c++/10/bits/locale_facets.h	/^      _S_iminus,$/;"	e	enum:std::__num_base::__anon4f18faa40203	access:public
_S_in	/usr/include/c++/10/bits/ios_base.h	/^      _S_in 		= 1L << 3,$/;"	e	enum:std::_Ios_Openmode	access:public
_S_initialize	/usr/include/c++/10/bits/locale_classes.h	/^    _S_initialize();$/;"	p	class:std::locale	typeref:typename:void	access:private	signature:()
_S_initialize_once	/usr/include/c++/10/bits/locale_classes.h	/^    _S_initialize_once() throw();$/;"	p	class:std::locale	typeref:typename:void	access:private	signature:()
_S_initialize_once	/usr/include/c++/10/bits/locale_classes.h	/^    _S_initialize_once();$/;"	p	class:std::locale::facet	typeref:typename:void	access:private	signature:()
_S_internal	/usr/include/c++/10/bits/ios_base.h	/^      _S_internal 	= 1L << 4,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_ios_fmtflags_end	/usr/include/c++/10/bits/ios_base.h	/^      _S_ios_fmtflags_end = 1L << 16,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_ios_fmtflags_max	/usr/include/c++/10/bits/ios_base.h	/^      _S_ios_fmtflags_max = __INT_MAX__,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_ios_fmtflags_min	/usr/include/c++/10/bits/ios_base.h	/^      _S_ios_fmtflags_min = ~__INT_MAX__$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_ios_iostate_end	/usr/include/c++/10/bits/ios_base.h	/^      _S_ios_iostate_end = 1L << 16,$/;"	e	enum:std::_Ios_Iostate	access:public
_S_ios_iostate_max	/usr/include/c++/10/bits/ios_base.h	/^      _S_ios_iostate_max = __INT_MAX__,$/;"	e	enum:std::_Ios_Iostate	access:public
_S_ios_iostate_min	/usr/include/c++/10/bits/ios_base.h	/^      _S_ios_iostate_min = ~__INT_MAX__$/;"	e	enum:std::_Ios_Iostate	access:public
_S_ios_openmode_end	/usr/include/c++/10/bits/ios_base.h	/^      _S_ios_openmode_end = 1L << 16,$/;"	e	enum:std::_Ios_Openmode	access:public
_S_ios_openmode_max	/usr/include/c++/10/bits/ios_base.h	/^      _S_ios_openmode_max = __INT_MAX__,$/;"	e	enum:std::_Ios_Openmode	access:public
_S_ios_openmode_min	/usr/include/c++/10/bits/ios_base.h	/^      _S_ios_openmode_min = ~__INT_MAX__$/;"	e	enum:std::_Ios_Openmode	access:public
_S_ios_seekdir_end	/usr/include/c++/10/bits/ios_base.h	/^      _S_ios_seekdir_end = 1L << 16 $/;"	e	enum:std::_Ios_Seekdir	access:public
_S_iplus	/usr/include/c++/10/bits/locale_facets.h	/^      _S_iplus,$/;"	e	enum:std::__num_base::__anon4f18faa40203	access:public
_S_is_eof	/usr/include/c++/10/bits/streambuf_iterator.h	/^      _S_is_eof(int_type __c)$/;"	f	class:std::istreambuf_iterator	typeref:typename:bool	access:private	signature:(int_type __c)
_S_ix	/usr/include/c++/10/bits/locale_facets.h	/^      _S_ix,$/;"	e	enum:std::__num_base::__anon4f18faa40203	access:public
_S_izero	/usr/include/c++/10/bits/locale_facets.h	/^      _S_izero,$/;"	e	enum:std::__num_base::__anon4f18faa40203	access:public
_S_lc_ctype_c_locale	/usr/include/c++/10/bits/locale_classes.h	/^    _S_lc_ctype_c_locale(__c_locale __cloc, const char* __s);$/;"	p	class:std::locale::facet	typeref:typename:__c_locale	access:protected	signature:(__c_locale __cloc,const char * __s)
_S_left	/usr/include/c++/10/bits/ios_base.h	/^      _S_left 		= 1L << 5,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_local_capacity	/usr/include/c++/10/bits/basic_string.h	/^      enum { _S_local_capacity = 15 \/ sizeof(_CharT) };$/;"	e	enum:std::basic_string::__anon048e86970103	access:public
_S_local_word_size	/usr/include/c++/10/bits/ios_base.h	/^    enum { _S_local_word_size = 8 };$/;"	e	enum:std::ios_base::__anon5e0da8a40103	access:public
_S_max_size	/usr/include/c++/10/bits/alloc_traits.h	/^	_S_max_size(_Alloc2& __a, int)$/;"	f	struct:std::allocator_traits	typeref:typename:decltype (__a.max_size ())	access:private	signature:(_Alloc2 & __a,int)
_S_max_size	/usr/include/c++/10/bits/alloc_traits.h	/^	_S_max_size(_Alloc2&, ...)$/;"	f	struct:std::allocator_traits	typeref:typename:size_type	access:private	signature:(_Alloc2 &,...)
_S_move	/usr/include/c++/10/bits/basic_string.h	/^      _S_move(_CharT* __d, const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __d,const _CharT * __s,size_type __n)
_S_noexcept	/usr/include/c++/10/bits/iterator_concepts.h	/^	  _S_noexcept()$/;"	f	struct:std::ranges::__cust_imove::_IMove	typeref:typename:bool	access:private	signature:()
_S_noexcept	/usr/include/c++/10/bits/iterator_concepts.h	/^	_S_noexcept()$/;"	f	struct:std::ranges::__cust_iswap::_IterSwap	typeref:typename:bool	access:private	signature:()
_S_noexcept	/usr/include/c++/10/bits/range_access.h	/^	_S_noexcept()$/;"	f	struct:std::ranges::__cust_access::_Begin	typeref:typename:bool	access:private	signature:()
_S_noexcept	/usr/include/c++/10/bits/range_access.h	/^	_S_noexcept()$/;"	f	struct:std::ranges::__cust_access::_Data	typeref:typename:bool	access:private	signature:()
_S_noexcept	/usr/include/c++/10/bits/range_access.h	/^	_S_noexcept()$/;"	f	struct:std::ranges::__cust_access::_Empty	typeref:typename:bool	access:private	signature:()
_S_noexcept	/usr/include/c++/10/bits/range_access.h	/^	_S_noexcept()$/;"	f	struct:std::ranges::__cust_access::_End	typeref:typename:bool	access:private	signature:()
_S_noexcept	/usr/include/c++/10/bits/range_access.h	/^	_S_noexcept()$/;"	f	struct:std::ranges::__cust_access::_RBegin	typeref:typename:bool	access:private	signature:()
_S_noexcept	/usr/include/c++/10/bits/range_access.h	/^	_S_noexcept()$/;"	f	struct:std::ranges::__cust_access::_REnd	typeref:typename:bool	access:private	signature:()
_S_noexcept	/usr/include/c++/10/bits/range_access.h	/^	_S_noexcept()$/;"	f	struct:std::ranges::__cust_access::_Size	typeref:typename:bool	access:private	signature:()
_S_noexcept	/usr/include/c++/10/bits/stl_iterator.h	/^      _S_noexcept()$/;"	f	class:std::common_iterator	typeref:typename:bool	access:private	signature:()
_S_noexcept1	/usr/include/c++/10/bits/stl_iterator.h	/^      _S_noexcept1()$/;"	f	class:std::common_iterator	typeref:typename:bool	access:private	signature:()
_S_normalize_category	/usr/include/c++/10/bits/locale_classes.h	/^    _S_normalize_category(category);$/;"	p	class:std::locale	typeref:typename:category	access:private	signature:(category)
_S_nothrow_move	/usr/include/c++/10/ext/alloc_traits.h	/^    static constexpr bool _S_nothrow_move()$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:bool	access:public	signature:()
_S_oE	/usr/include/c++/10/bits/locale_facets.h	/^	_S_oE = _S_oudigits + 14, \/\/ For scientific notation, 'E'$/;"	e	enum:std::__num_base::__anon4f18faa40103	access:public
_S_oX	/usr/include/c++/10/bits/locale_facets.h	/^	_S_oX,$/;"	e	enum:std::__num_base::__anon4f18faa40103	access:public
_S_oct	/usr/include/c++/10/bits/ios_base.h	/^      _S_oct 		= 1L << 6,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_odigits	/usr/include/c++/10/bits/locale_facets.h	/^	_S_odigits,$/;"	e	enum:std::__num_base::__anon4f18faa40103	access:public
_S_odigits_end	/usr/include/c++/10/bits/locale_facets.h	/^	_S_odigits_end = _S_odigits + 16,$/;"	e	enum:std::__num_base::__anon4f18faa40103	access:public
_S_oe	/usr/include/c++/10/bits/locale_facets.h	/^	_S_oe = _S_odigits + 14,  \/\/ For scientific notation, 'e'$/;"	e	enum:std::__num_base::__anon4f18faa40103	access:public
_S_oend	/usr/include/c++/10/bits/locale_facets.h	/^	_S_oend = _S_oudigits_end$/;"	e	enum:std::__num_base::__anon4f18faa40103	access:public
_S_ominus	/usr/include/c++/10/bits/locale_facets.h	/^	_S_ominus,$/;"	e	enum:std::__num_base::__anon4f18faa40103	access:public
_S_on_swap	/usr/include/c++/10/ext/alloc_traits.h	/^    static _GLIBCXX14_CONSTEXPR void _S_on_swap(_Alloc& __a, _Alloc& __b)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:_GLIBCXX14_CONSTEXPR void	access:public	signature:(_Alloc & __a,_Alloc & __b)
_S_on_swap	/usr/include/c++/10/ext/alloc_traits.h	/^    static void _S_on_swap(_Alloc& __a, _Alloc& __b)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:void	access:public	signature:(_Alloc & __a,_Alloc & __b)
_S_once	/usr/include/c++/10/bits/locale_classes.h	/^    static __gthread_once_t		_S_once;$/;"	m	class:std::locale::facet	typeref:typename:__gthread_once_t	access:private
_S_once	/usr/include/c++/10/bits/locale_classes.h	/^    static __gthread_once_t _S_once;$/;"	m	class:std::locale	typeref:typename:__gthread_once_t	access:private
_S_oplus	/usr/include/c++/10/bits/locale_facets.h	/^	_S_oplus,$/;"	e	enum:std::__num_base::__anon4f18faa40103	access:public
_S_oudigits	/usr/include/c++/10/bits/locale_facets.h	/^	_S_oudigits = _S_odigits_end,$/;"	e	enum:std::__num_base::__anon4f18faa40103	access:public
_S_oudigits_end	/usr/include/c++/10/bits/locale_facets.h	/^	_S_oudigits_end = _S_oudigits + 16,$/;"	e	enum:std::__num_base::__anon4f18faa40103	access:public
_S_out	/usr/include/c++/10/bits/ios_base.h	/^      _S_out 		= 1L << 4,$/;"	e	enum:std::_Ios_Openmode	access:public
_S_ox	/usr/include/c++/10/bits/locale_facets.h	/^	_S_ox,$/;"	e	enum:std::__num_base::__anon4f18faa40103	access:public
_S_pad	/usr/include/c++/10/bits/locale_facets.h	/^      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,$/;"	p	struct:std::__pad	typeref:typename:void	access:public	signature:(ios_base & __io,_CharT __fill,_CharT * __news,const _CharT * __olds,streamsize __newlen,streamsize __oldlen)
_S_propagate_on_copy_assign	/usr/include/c++/10/ext/alloc_traits.h	/^    static constexpr bool _S_propagate_on_copy_assign()$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:bool	access:public	signature:()
_S_propagate_on_move_assign	/usr/include/c++/10/ext/alloc_traits.h	/^    static constexpr bool _S_propagate_on_move_assign()$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:bool	access:public	signature:()
_S_propagate_on_swap	/usr/include/c++/10/ext/alloc_traits.h	/^    static constexpr bool _S_propagate_on_swap()$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:bool	access:public	signature:()
_S_refcount	/usr/include/c++/10/bits/ios_base.h	/^      static _Atomic_word	_S_refcount;$/;"	m	class:std::ios_base::Init	typeref:typename:_Atomic_word	access:private
_S_refcount	/usr/include/c++/10/bits/locale_classes.h	/^    static _Atomic_word		_S_refcount;$/;"	m	class:std::locale::id	typeref:typename:_Atomic_word	access:private
_S_right	/usr/include/c++/10/bits/ios_base.h	/^      _S_right 		= 1L << 7,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_scientific	/usr/include/c++/10/bits/ios_base.h	/^      _S_scientific 	= 1L << 8,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_select	/usr/include/c++/10/bits/alloc_traits.h	/^	_S_select(_Alloc2& __a, ...)$/;"	f	struct:std::allocator_traits	typeref:typename:_Alloc2	access:private	signature:(_Alloc2 & __a,...)
_S_select	/usr/include/c++/10/bits/alloc_traits.h	/^	_S_select(_Alloc2& __a, int)$/;"	f	struct:std::allocator_traits	typeref:typename:decltype (__a.select_on_container_copy_construction ())	access:private	signature:(_Alloc2 & __a,int)
_S_select_on_copy	/usr/include/c++/10/ext/alloc_traits.h	/^    static const _Alloc& _S_select_on_copy(const _Alloc& __a) { return __a; }$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:const _Alloc &	access:public	signature:(const _Alloc & __a)
_S_select_on_copy	/usr/include/c++/10/ext/alloc_traits.h	/^    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc	access:public	signature:(const _Alloc & __a)
_S_showbase	/usr/include/c++/10/bits/ios_base.h	/^      _S_showbase 	= 1L << 9,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_showpoint	/usr/include/c++/10/bits/ios_base.h	/^      _S_showpoint 	= 1L << 10,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_showpos	/usr/include/c++/10/bits/ios_base.h	/^      _S_showpos 	= 1L << 11,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_skipws	/usr/include/c++/10/bits/ios_base.h	/^      _S_skipws 	= 1L << 12,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_synced_with_stdio	/usr/include/c++/10/bits/ios_base.h	/^      static bool		_S_synced_with_stdio;$/;"	m	class:std::ios_base::Init	typeref:typename:bool	access:private
_S_to_pointer	/usr/include/c++/10/bits/stl_iterator.h	/^	_S_to_pointer(_Tp __t)$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR pointer	access:private	signature:(_Tp __t)
_S_to_pointer	/usr/include/c++/10/bits/stl_iterator.h	/^	_S_to_pointer(_Tp* __p)$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR _Tp *	access:private	signature:(_Tp * __p)
_S_to_string_view	/usr/include/c++/10/bits/basic_string.h	/^      _S_to_string_view(__sv_type __svt) noexcept$/;"	f	class:std::basic_string	typeref:typename:__sv_type	access:private	signature:(__sv_type __svt)
_S_trunc	/usr/include/c++/10/bits/ios_base.h	/^      _S_trunc 		= 1L << 5,$/;"	e	enum:std::_Ios_Openmode	access:public
_S_twinned_facets	/usr/include/c++/10/bits/locale_classes.h	/^    static const id* const _S_twinned_facets[];$/;"	m	class:std::locale	typeref:typename:const id * const[]	access:private
_S_unitbuf	/usr/include/c++/10/bits/ios_base.h	/^      _S_unitbuf 	= 1L << 13,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_uppercase	/usr/include/c++/10/bits/ios_base.h	/^      _S_uppercase 	= 1L << 14,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_Select1st	/usr/include/c++/10/bits/stl_function.h	/^    struct _Select1st$/;"	s	namespace:std	inherits:unary_function<_Pair,typename_Pair::first_type>
_Select2nd	/usr/include/c++/10/bits/stl_function.h	/^    struct _Select2nd$/;"	s	namespace:std	inherits:unary_function<_Pair,typename_Pair::second_type>
_Size	/usr/include/c++/10/bits/alloc_traits.h	/^	struct _Size : make_unsigned<_DiffT> { };$/;"	s	struct:std::allocator_traits	inherits:make_unsigned<_DiffT>	access:private
_Size	/usr/include/c++/10/bits/alloc_traits.h	/^	struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>$/;"	s	struct:std::allocator_traits	access:private
_Size	/usr/include/c++/10/bits/range_access.h	/^    struct _Size$/;"	s	namespace:std::ranges::__cust_access
_Static_assert	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define _Static_assert(/;"	d	signature:(expr,diagnostic)
_T1	/usr/include/c++/10/bits/stl_pair.h	/^			    _T1, _T2>;$/;"	t	struct:std::pair	typeref:typename:_PCC<!is_same<_T1,_U1>::value||!is_same<_T2,_U2>	access:public
_THREAD_MUTEX_INTERNAL_H	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^#define _THREAD_MUTEX_INTERNAL_H /;"	d
_THREAD_SHARED_TYPES_H	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^#define _THREAD_SHARED_TYPES_H /;"	d
_TIME_H	/usr/include/time.h	/^#define _TIME_H	/;"	d
_T_PTRDIFF	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _T_PTRDIFF$/;"	d
_T_PTRDIFF_	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _T_PTRDIFF_$/;"	d
_T_SIZE	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _T_SIZE$/;"	d
_T_SIZE_	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _T_SIZE_$/;"	d
_T_WCHAR	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _T_WCHAR$/;"	d
_T_WCHAR_	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _T_WCHAR_$/;"	d
_Tag	/usr/include/c++/10/bits/basic_string.h	/^          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;$/;"	t	function:std::basic_string::_M_construct_aux	typeref:typename:iterator_traits<_InIterator>::iterator_category
_UNDEF__STDC_CONSTANT_MACROS	/usr/include/c++/10/bits/postypes.h	/^# define _UNDEF__STDC_CONSTANT_MACROS$/;"	d
_UNDEF__STDC_LIMIT_MACROS	/usr/include/c++/10/bits/postypes.h	/^# define _UNDEF__STDC_LIMIT_MACROS$/;"	d
_Up	/usr/include/c++/10/bits/nested_exception.h	/^      using _Up = typename decay<_Tp>::type;$/;"	t	function:std::throw_with_nested	typeref:typename:decay<_Tp>::type
_Up	/usr/include/c++/10/bits/nested_exception.h	/^      using _Up = typename remove_reference<_Tp>::type;$/;"	t	function:std::__throw_with_nested_impl	typeref:typename:remove_reference<_Tp>::type
_Up	/usr/include/c++/10/bits/range_access.h	/^	      using _Up = remove_all_extents_t<remove_reference_t<_Tp>>;$/;"	t	struct:std::ranges::__cust_access::_Begin	typeref:typename:remove_all_extents_t<remove_reference_t<_Tp>>	access:public
_VA_LIST	/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h	/^#define _VA_LIST /;"	d
_VA_LIST	/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h	/^#define _VA_LIST$/;"	d
_VA_LIST_	/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h	/^#define _VA_LIST_$/;"	d
_VA_LIST_DEFINED	/usr/include/stdio.h	/^#   define _VA_LIST_DEFINED$/;"	d
_VA_LIST_DEFINED	/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h	/^#define _VA_LIST_DEFINED$/;"	d
_VA_LIST_T_H	/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h	/^#define _VA_LIST_T_H$/;"	d
_Val_comp_iter	/usr/include/c++/10/bits/predefined_ops.h	/^      _Val_comp_iter(_Compare __comp)$/;"	f	struct:__gnu_cxx::__ops::_Val_comp_iter	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Compare __comp)
_Val_comp_iter	/usr/include/c++/10/bits/predefined_ops.h	/^      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)$/;"	f	struct:__gnu_cxx::__ops::_Val_comp_iter	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Iter_comp_iter<_Compare> && __comp)
_Val_comp_iter	/usr/include/c++/10/bits/predefined_ops.h	/^      _Val_comp_iter(const _Iter_comp_iter<_Compare>& __comp)$/;"	f	struct:__gnu_cxx::__ops::_Val_comp_iter	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const _Iter_comp_iter<_Compare> & __comp)
_Val_comp_iter	/usr/include/c++/10/bits/predefined_ops.h	/^    struct _Val_comp_iter$/;"	s	namespace:__gnu_cxx::__ops
_Val_less_iter	/usr/include/c++/10/bits/predefined_ops.h	/^    _Val_less_iter(_Iter_less_iter) { }$/;"	f	struct:__gnu_cxx::__ops::_Val_less_iter	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Iter_less_iter)
_Val_less_iter	/usr/include/c++/10/bits/predefined_ops.h	/^    constexpr _Val_less_iter() = default;$/;"	p	struct:__gnu_cxx::__ops::_Val_less_iter	access:public	signature:()
_Val_less_iter	/usr/include/c++/10/bits/predefined_ops.h	/^  struct _Val_less_iter$/;"	s	namespace:__gnu_cxx::__ops
_ValueType1	/usr/include/c++/10/bits/stl_algobase.h	/^	    _ValueType1;$/;"	t	function:std::__iter_swap::iter_swap	typeref:typename:iterator_traits<_ForwardIterator1>::value_type
_ValueType1	/usr/include/c++/10/bits/stl_algobase.h	/^	_ValueType1;$/;"	t	function:std::iter_swap	typeref:typename:iterator_traits<_ForwardIterator1>::value_type
_ValueType1	/usr/include/c++/10/bits/stl_algobase.h	/^      typedef typename iterator_traits<_II1>::value_type _ValueType1;$/;"	t	function:std::__equal_aux1	typeref:typename:iterator_traits<_II1>::value_type
_ValueType1	/usr/include/c++/10/bits/stl_algobase.h	/^      typedef typename iterator_traits<_II1>::value_type _ValueType1;$/;"	t	function:std::__lexicographical_compare_aux	typeref:typename:iterator_traits<_II1>::value_type
_ValueType1	/usr/include/c++/10/bits/stl_algobase.h	/^      typedef typename iterator_traits<_II1>::value_type _ValueType1;$/;"	t	function:std::lexicographical_compare	typeref:typename:iterator_traits<_II1>::value_type
_ValueType2	/usr/include/c++/10/bits/stl_algobase.h	/^	_ValueType2;$/;"	t	function:std::iter_swap	typeref:typename:iterator_traits<_ForwardIterator2>::value_type
_ValueType2	/usr/include/c++/10/bits/stl_algobase.h	/^      typedef typename iterator_traits<_II2>::value_type _ValueType2;$/;"	t	function:std::__lexicographical_compare_aux	typeref:typename:iterator_traits<_II2>::value_type
_ValueType2	/usr/include/c++/10/bits/stl_algobase.h	/^      typedef typename iterator_traits<_II2>::value_type _ValueType2;$/;"	t	function:std::lexicographical_compare	typeref:typename:iterator_traits<_II2>::value_type
_Value_type	/usr/include/c++/10/bits/stl_construct.h	/^                       _Value_type;$/;"	t	function:std::_Destroy	typeref:typename:iterator_traits<_ForwardIterator>::value_type
_Value_type	/usr/include/c++/10/bits/stl_construct.h	/^                       _Value_type;$/;"	t	function:std::_Destroy_n	typeref:typename:iterator_traits<_ForwardIterator>::value_type
_WCHAR_H	/usr/include/wchar.h	/^#define _WCHAR_H /;"	d
_WCHAR_T	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _WCHAR_T$/;"	d
_WCHAR_T_	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _WCHAR_T_$/;"	d
_WCHAR_T_DECLARED	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _WCHAR_T_DECLARED$/;"	d
_WCHAR_T_DEFINED	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _WCHAR_T_DEFINED$/;"	d
_WCHAR_T_DEFINED_	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _WCHAR_T_DEFINED_$/;"	d
_WCHAR_T_H	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _WCHAR_T_H$/;"	d
_WCTYPE_H	/usr/include/wctype.h	/^#define _WCTYPE_H /;"	d
_WINT_T	/usr/include/x86_64-linux-gnu/bits/types/wint_t.h	/^#define _WINT_T /;"	d
_WINT_T	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define _WINT_T$/;"	d
_Words	/usr/include/c++/10/bits/ios_base.h	/^      _Words() : _M_pword(0), _M_iword(0) { }$/;"	f	struct:std::ios_base::_Words	access:public	signature:()
_Words	/usr/include/c++/10/bits/ios_base.h	/^    struct _Words$/;"	s	class:std::ios_base	access:protected
_XOPEN_SOURCE	/usr/include/features.h	/^# define _XOPEN_SOURCE	/;"	d
_XOPEN_SOURCE_EXTENDED	/usr/include/features.h	/^# define _XOPEN_SOURCE_EXTENDED	/;"	d
__ASMNAME	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __ASMNAME(/;"	d	signature:(cname)
__ASMNAME2	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __ASMNAME2(/;"	d	signature:(prefix,cname)
__BEGIN_DECLS	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __BEGIN_DECLS	/;"	d
__BEGIN_DECLS	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __BEGIN_DECLS$/;"	d
__BIG_ENDIAN	/usr/include/x86_64-linux-gnu/bits/endian.h	/^#define	__BIG_ENDIAN	/;"	d
__BIT_TYPES_DEFINED__	/usr/include/x86_64-linux-gnu/sys/types.h	/^#define __BIT_TYPES_DEFINED__	/;"	d
__BLKCNT64_T_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __BLKCNT64_T_TYPE	/;"	d
__BLKCNT_T_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __BLKCNT_T_TYPE	/;"	d
__BLKSIZE_T_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __BLKSIZE_T_TYPE	/;"	d
__BYTE_ORDER	/usr/include/x86_64-linux-gnu/bits/endianness.h	/^#define __BYTE_ORDER /;"	d
__CFLOAT128	/usr/include/x86_64-linux-gnu/bits/floatn.h	/^#   define __CFLOAT128 /;"	d
__CFLOAT128X	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __CFLOAT128X /;"	d
__CFLOAT16	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __CFLOAT16 /;"	d
__CFLOAT32	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __CFLOAT32 /;"	d
__CFLOAT32X	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __CFLOAT32X /;"	d
__CFLOAT64	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#    define __CFLOAT64 /;"	d
__CFLOAT64	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __CFLOAT64 /;"	d
__CFLOAT64X	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#    define __CFLOAT64X /;"	d
__CFLOAT64X	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __CFLOAT64X /;"	d
__CLOCKID_T_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __CLOCKID_T_TYPE	/;"	d
__CLOCK_T_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __CLOCK_T_TYPE	/;"	d
__COMPAR_FN_T	/usr/include/stdlib.h	/^# define __COMPAR_FN_T$/;"	d
__CONCAT	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#define __CONCAT(/;"	d	signature:(x,y)
__CORRECT_ISO_CPP_WCHAR_H_PROTO	/usr/include/wchar.h	/^# define __CORRECT_ISO_CPP_WCHAR_H_PROTO$/;"	d
__CPUELT	/usr/include/x86_64-linux-gnu/bits/cpu-set.h	/^#define __CPUELT(/;"	d	signature:(cpu)
__CPUMASK	/usr/include/x86_64-linux-gnu/bits/cpu-set.h	/^#define __CPUMASK(/;"	d	signature:(cpu)
__CPU_ALLOC	/usr/include/x86_64-linux-gnu/bits/cpu-set.h	/^#define __CPU_ALLOC(/;"	d	signature:(count)
__CPU_ALLOC_SIZE	/usr/include/x86_64-linux-gnu/bits/cpu-set.h	/^#define __CPU_ALLOC_SIZE(/;"	d	signature:(count)
__CPU_CLR_S	/usr/include/x86_64-linux-gnu/bits/cpu-set.h	/^#define __CPU_CLR_S(/;"	d	signature:(cpu,setsize,cpusetp)
__CPU_COUNT_S	/usr/include/x86_64-linux-gnu/bits/cpu-set.h	/^#define __CPU_COUNT_S(/;"	d	signature:(setsize,cpusetp)
__CPU_EQUAL_S	/usr/include/x86_64-linux-gnu/bits/cpu-set.h	/^# define __CPU_EQUAL_S(/;"	d	signature:(setsize,cpusetp1,cpusetp2)
__CPU_FREE	/usr/include/x86_64-linux-gnu/bits/cpu-set.h	/^#define __CPU_FREE(/;"	d	signature:(cpuset)
__CPU_ISSET_S	/usr/include/x86_64-linux-gnu/bits/cpu-set.h	/^#define __CPU_ISSET_S(/;"	d	signature:(cpu,setsize,cpusetp)
__CPU_MASK_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __CPU_MASK_TYPE /;"	d
__CPU_OP_S	/usr/include/x86_64-linux-gnu/bits/cpu-set.h	/^#define __CPU_OP_S(/;"	d	signature:(setsize,destset,srcset1,srcset2,op)
__CPU_SETSIZE	/usr/include/x86_64-linux-gnu/bits/cpu-set.h	/^#define __CPU_SETSIZE	/;"	d
__CPU_SET_S	/usr/include/x86_64-linux-gnu/bits/cpu-set.h	/^#define __CPU_SET_S(/;"	d	signature:(cpu,setsize,cpusetp)
__CPU_ZERO_S	/usr/include/x86_64-linux-gnu/bits/cpu-set.h	/^# define __CPU_ZERO_S(/;"	d	signature:(setsize,cpusetp)
__DADDR_T_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __DADDR_T_TYPE	/;"	d
__DEV_T_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __DEV_T_TYPE	/;"	d
__END_DECLS	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __END_DECLS	/;"	d
__END_DECLS	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __END_DECLS$/;"	d
__ENUM_IDTYPE_T	/usr/include/x86_64-linux-gnu/bits/waitflags.h	/^# define __ENUM_IDTYPE_T /;"	d
__EXCEPTION_H	/usr/include/c++/10/bits/exception.h	/^#define __EXCEPTION_H /;"	d
__FDS_BITS	/usr/include/x86_64-linux-gnu/sys/select.h	/^# define __FDS_BITS(/;"	d	signature:(set)
__FD_CLR	/usr/include/x86_64-linux-gnu/bits/select.h	/^#define __FD_CLR(/;"	d	signature:(d,set)
__FD_ELT	/usr/include/x86_64-linux-gnu/sys/select.h	/^#define	__FD_ELT(/;"	d	signature:(d)
__FD_ISSET	/usr/include/x86_64-linux-gnu/bits/select.h	/^#define __FD_ISSET(/;"	d	signature:(d,set)
__FD_MASK	/usr/include/x86_64-linux-gnu/sys/select.h	/^#define	__FD_MASK(/;"	d	signature:(d)
__FD_SET	/usr/include/x86_64-linux-gnu/bits/select.h	/^#define __FD_SET(/;"	d	signature:(d,set)
__FD_SETSIZE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __FD_SETSIZE	/;"	d
__FD_ZERO	/usr/include/x86_64-linux-gnu/bits/select.h	/^# define __FD_ZERO(/;"	d	signature:(fdsp)
__FD_ZERO	/usr/include/x86_64-linux-gnu/bits/select.h	/^# define __FD_ZERO(/;"	d	signature:(set)
__FD_ZERO_STOS	/usr/include/x86_64-linux-gnu/bits/select.h	/^#  define __FD_ZERO_STOS /;"	d
__FILE	/usr/include/x86_64-linux-gnu/bits/types/__FILE.h	/^typedef struct _IO_FILE __FILE;$/;"	t	typeref:struct:_IO_FILE
__FILE_defined	/usr/include/x86_64-linux-gnu/bits/types/FILE.h	/^#define __FILE_defined /;"	d
__FLOAT_WORD_ORDER	/usr/include/x86_64-linux-gnu/bits/endian.h	/^# define __FLOAT_WORD_ORDER /;"	d
__FSBLKCNT64_T_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __FSBLKCNT64_T_TYPE	/;"	d
__FSBLKCNT_T_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __FSBLKCNT_T_TYPE	/;"	d
__FSFILCNT64_T_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __FSFILCNT64_T_TYPE	/;"	d
__FSFILCNT_T_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __FSFILCNT_T_TYPE	/;"	d
__FSID_T_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __FSID_T_TYPE	/;"	d
__FSWORD_T_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^# define __FSWORD_T_TYPE	/;"	d
__GID_T_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __GID_T_TYPE	/;"	d
__GLIBCXX__	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define __GLIBCXX__ /;"	d
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION	/usr/include/stdint.h	/^#define __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION$/;"	d
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION	/usr/include/stdio.h	/^#define __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION$/;"	d
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION	/usr/include/stdlib.h	/^#define __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION$/;"	d
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION	/usr/include/wchar.h	/^#define __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION$/;"	d
__GLIBC_MINOR__	/usr/include/features.h	/^#define	__GLIBC_MINOR__	/;"	d
__GLIBC_PREREQ	/usr/include/features.h	/^#define __GLIBC_PREREQ(/;"	d	signature:(maj,min)
__GLIBC_USE	/usr/include/features.h	/^#define __GLIBC_USE(/;"	d	signature:(F)
__GLIBC_USE_DEPRECATED_GETS	/usr/include/features.h	/^# define __GLIBC_USE_DEPRECATED_GETS /;"	d
__GLIBC_USE_DEPRECATED_SCANF	/usr/include/features.h	/^# define __GLIBC_USE_DEPRECATED_SCANF /;"	d
__GLIBC_USE_IEC_60559_BFP_EXT	/usr/include/x86_64-linux-gnu/bits/libc-header-start.h	/^# define __GLIBC_USE_IEC_60559_BFP_EXT /;"	d
__GLIBC_USE_IEC_60559_BFP_EXT_C2X	/usr/include/x86_64-linux-gnu/bits/libc-header-start.h	/^# define __GLIBC_USE_IEC_60559_BFP_EXT_C2X /;"	d
__GLIBC_USE_IEC_60559_FUNCS_EXT	/usr/include/x86_64-linux-gnu/bits/libc-header-start.h	/^# define __GLIBC_USE_IEC_60559_FUNCS_EXT /;"	d
__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X	/usr/include/x86_64-linux-gnu/bits/libc-header-start.h	/^# define __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X /;"	d
__GLIBC_USE_IEC_60559_TYPES_EXT	/usr/include/x86_64-linux-gnu/bits/libc-header-start.h	/^# define __GLIBC_USE_IEC_60559_TYPES_EXT /;"	d
__GLIBC_USE_ISOC2X	/usr/include/features.h	/^# define __GLIBC_USE_ISOC2X	/;"	d
__GLIBC_USE_LIB_EXT2	/usr/include/x86_64-linux-gnu/bits/libc-header-start.h	/^# define __GLIBC_USE_LIB_EXT2 /;"	d
__GLIBC__	/usr/include/features.h	/^#define	__GLIBC__	/;"	d
__GNUC_PREREQ	/usr/include/features.h	/^# define __GNUC_PREREQ(/;"	d	signature:(maj,min)
__GNUC_VA_LIST	/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h	/^#define __GNUC_VA_LIST$/;"	d
__GNU_LIBRARY__	/usr/include/features.h	/^#define __GNU_LIBRARY__ /;"	d
__GTHREADS	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^#define __GTHREADS /;"	d
__GTHREADS_CXX0X	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^#define __GTHREADS_CXX0X /;"	d
__GTHREAD_COND_INIT	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^#define __GTHREAD_COND_INIT /;"	d
__GTHREAD_COND_INIT_FUNCTION	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^# define __GTHREAD_COND_INIT_FUNCTION /;"	d
__GTHREAD_HAS_COND	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^#define __GTHREAD_HAS_COND	/;"	d
__GTHREAD_MUTEX_INIT	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^#define __GTHREAD_MUTEX_INIT /;"	d
__GTHREAD_MUTEX_INIT_FUNCTION	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^#define __GTHREAD_MUTEX_INIT_FUNCTION /;"	d
__GTHREAD_ONCE_INIT	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^#define __GTHREAD_ONCE_INIT /;"	d
__GTHREAD_RECURSIVE_MUTEX_INIT	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^#define __GTHREAD_RECURSIVE_MUTEX_INIT /;"	d
__GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^# define __GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION /;"	d
__GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^#define __GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION /;"	d
__GTHREAD_TIME_INIT	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^#define __GTHREAD_TIME_INIT /;"	d
__HAVE_DISTINCT_FLOAT128	/usr/include/x86_64-linux-gnu/bits/floatn.h	/^# define __HAVE_DISTINCT_FLOAT128 /;"	d
__HAVE_DISTINCT_FLOAT128X	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#define __HAVE_DISTINCT_FLOAT128X /;"	d
__HAVE_DISTINCT_FLOAT16	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#define __HAVE_DISTINCT_FLOAT16 /;"	d
__HAVE_DISTINCT_FLOAT32	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#define __HAVE_DISTINCT_FLOAT32 /;"	d
__HAVE_DISTINCT_FLOAT32X	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#define __HAVE_DISTINCT_FLOAT32X /;"	d
__HAVE_DISTINCT_FLOAT64	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#define __HAVE_DISTINCT_FLOAT64 /;"	d
__HAVE_DISTINCT_FLOAT64X	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#define __HAVE_DISTINCT_FLOAT64X /;"	d
__HAVE_FLOAT128	/usr/include/x86_64-linux-gnu/bits/floatn.h	/^# define __HAVE_FLOAT128 /;"	d
__HAVE_FLOAT128X	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#define __HAVE_FLOAT128X /;"	d
__HAVE_FLOAT128_UNLIKE_LDBL	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#define __HAVE_FLOAT128_UNLIKE_LDBL /;"	d
__HAVE_FLOAT16	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#define __HAVE_FLOAT16 /;"	d
__HAVE_FLOAT32	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#define __HAVE_FLOAT32 /;"	d
__HAVE_FLOAT32X	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#define __HAVE_FLOAT32X /;"	d
__HAVE_FLOAT64	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#define __HAVE_FLOAT64 /;"	d
__HAVE_FLOAT64X	/usr/include/x86_64-linux-gnu/bits/floatn.h	/^#define __HAVE_FLOAT64X /;"	d
__HAVE_FLOAT64X_LONG_DOUBLE	/usr/include/x86_64-linux-gnu/bits/floatn.h	/^#define __HAVE_FLOAT64X_LONG_DOUBLE /;"	d
__HAVE_FLOATN_NOT_TYPEDEF	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^# define __HAVE_FLOATN_NOT_TYPEDEF /;"	d
__HAVE_GENERIC_SELECTION	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __HAVE_GENERIC_SELECTION /;"	d
__ID_T_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __ID_T_TYPE	/;"	d
__INO64_T_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __INO64_T_TYPE	/;"	d
__INO_T_MATCHES_INO64_T	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^# define __INO_T_MATCHES_INO64_T	/;"	d
__INO_T_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __INO_T_TYPE	/;"	d
__INT64_C	/usr/include/stdint.h	/^#  define __INT64_C(/;"	d	signature:(c)
__INT_N	/usr/include/c++/10/bits/cpp_type_traits.h	/^#define __INT_N(/;"	d	signature:(TYPE)
__INT_WCHAR_T_H	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define __INT_WCHAR_T_H$/;"	d
__ISwalnum	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  __ISwalnum = 11,			\/* Alphanumeric.  *\/$/;"	e	enum:__anon23701d770103	access:public
__ISwalpha	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  __ISwalpha = 2,			\/* Alphabetic.  *\/$/;"	e	enum:__anon23701d770103	access:public
__ISwblank	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  __ISwblank = 8,			\/* Blank (usually SPC and TAB).  *\/$/;"	e	enum:__anon23701d770103	access:public
__ISwcntrl	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  __ISwcntrl = 9,			\/* Control character.  *\/$/;"	e	enum:__anon23701d770103	access:public
__ISwdigit	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  __ISwdigit = 3,			\/* Numeric.  *\/$/;"	e	enum:__anon23701d770103	access:public
__ISwgraph	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  __ISwgraph = 7,			\/* Graphical.  *\/$/;"	e	enum:__anon23701d770103	access:public
__ISwlower	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  __ISwlower = 1,			\/* lowercase.  *\/$/;"	e	enum:__anon23701d770103	access:public
__ISwprint	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  __ISwprint = 6,			\/* Printing.  *\/$/;"	e	enum:__anon23701d770103	access:public
__ISwpunct	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  __ISwpunct = 10,			\/* Punctuation.  *\/$/;"	e	enum:__anon23701d770103	access:public
__ISwspace	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  __ISwspace = 5,			\/* Whitespace.  *\/$/;"	e	enum:__anon23701d770103	access:public
__ISwupper	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  __ISwupper = 0,			\/* UPPERCASE.  *\/$/;"	e	enum:__anon23701d770103	access:public
__ISwxdigit	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  __ISwxdigit = 4,			\/* Hexadecimal numeric.  *\/$/;"	e	enum:__anon23701d770103	access:public
__KERNEL_STRICT_NAMES	/usr/include/features.h	/^# define __KERNEL_STRICT_NAMES$/;"	d
__KEY_T_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __KEY_T_TYPE	/;"	d
__LC_ADDRESS	/usr/include/x86_64-linux-gnu/bits/locale.h	/^#define __LC_ADDRESS	/;"	d
__LC_ALL	/usr/include/x86_64-linux-gnu/bits/locale.h	/^#define __LC_ALL	/;"	d
__LC_COLLATE	/usr/include/x86_64-linux-gnu/bits/locale.h	/^#define __LC_COLLATE	/;"	d
__LC_CTYPE	/usr/include/x86_64-linux-gnu/bits/locale.h	/^#define __LC_CTYPE	/;"	d
__LC_IDENTIFICATION	/usr/include/x86_64-linux-gnu/bits/locale.h	/^#define __LC_IDENTIFICATION	/;"	d
__LC_MEASUREMENT	/usr/include/x86_64-linux-gnu/bits/locale.h	/^#define __LC_MEASUREMENT	/;"	d
__LC_MESSAGES	/usr/include/x86_64-linux-gnu/bits/locale.h	/^#define __LC_MESSAGES	/;"	d
__LC_MONETARY	/usr/include/x86_64-linux-gnu/bits/locale.h	/^#define __LC_MONETARY	/;"	d
__LC_NAME	/usr/include/x86_64-linux-gnu/bits/locale.h	/^#define __LC_NAME	/;"	d
__LC_NUMERIC	/usr/include/x86_64-linux-gnu/bits/locale.h	/^#define __LC_NUMERIC	/;"	d
__LC_PAPER	/usr/include/x86_64-linux-gnu/bits/locale.h	/^#define __LC_PAPER	/;"	d
__LC_TELEPHONE	/usr/include/x86_64-linux-gnu/bits/locale.h	/^#define __LC_TELEPHONE	/;"	d
__LC_TIME	/usr/include/x86_64-linux-gnu/bits/locale.h	/^#define __LC_TIME	/;"	d
__LDBL_COMPAT	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __LDBL_COMPAT /;"	d
__LDBL_REDIR	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __LDBL_REDIR(/;"	d	signature:(name,proto)
__LDBL_REDIR	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __LDBL_REDIR(/;"	d	signature:(name,proto)
__LDBL_REDIR1	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __LDBL_REDIR1(/;"	d	signature:(name,proto,alias)
__LDBL_REDIR1	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __LDBL_REDIR1(/;"	d	signature:(name,proto,alias)
__LDBL_REDIR1_DECL	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __LDBL_REDIR1_DECL(/;"	d	signature:(name,alias)
__LDBL_REDIR1_NTH	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __LDBL_REDIR1_NTH(/;"	d	signature:(name,proto,alias)
__LDBL_REDIR1_NTH	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __LDBL_REDIR1_NTH(/;"	d	signature:(name,proto,alias)
__LDBL_REDIR_DECL	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __LDBL_REDIR_DECL(/;"	d	signature:(name)
__LDBL_REDIR_DECL	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __LDBL_REDIR_DECL(/;"	d	signature:(name)
__LDBL_REDIR_NTH	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __LDBL_REDIR_NTH(/;"	d	signature:(name,proto)
__LDBL_REDIR_NTH	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __LDBL_REDIR_NTH(/;"	d	signature:(name,proto)
__LEAF	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __LEAF /;"	d
__LEAF	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __LEAF$/;"	d
__LEAF_ATTR	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __LEAF_ATTR /;"	d
__LEAF_ATTR	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __LEAF_ATTR$/;"	d
__LITTLE_ENDIAN	/usr/include/x86_64-linux-gnu/bits/endian.h	/^#define	__LITTLE_ENDIAN	/;"	d
__LOCK_ALIGNMENT	/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^#define __LOCK_ALIGNMENT$/;"	d
__LONG_DOUBLE_USES_FLOAT128	/usr/include/x86_64-linux-gnu/bits/long-double.h	/^#define __LONG_DOUBLE_USES_FLOAT128 /;"	d
__LONG_LONG_PAIR	/usr/include/x86_64-linux-gnu/bits/endian.h	/^# define __LONG_LONG_PAIR(/;"	d	signature:(HI,LO)
__MODE_T_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __MODE_T_TYPE	/;"	d
__N	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define __N(/;"	d	signature:(msgid)
__NCPUBITS	/usr/include/x86_64-linux-gnu/bits/cpu-set.h	/^#define __NCPUBITS	/;"	d
__NFDBITS	/usr/include/x86_64-linux-gnu/sys/select.h	/^#define __NFDBITS	/;"	d
__NLINK_T_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^# define __NLINK_T_TYPE	/;"	d
__NO_CTYPE	/usr/include/x86_64-linux-gnu/c++/10/bits/os_defines.h	/^#define __NO_CTYPE /;"	d
__NTH	/usr/include/ctype.h	/^__NTH (toupper (int __c))$/;"	f	typeref:typename:__extern_inline int	signature:(toupper (int __c))
__NTH	/usr/include/pthread.h	/^__NTH (pthread_equal (pthread_t __thread1, pthread_t __thread2))$/;"	f	typeref:typename:__extern_inline int	signature:(pthread_equal (pthread_t __thread1,pthread_t __thread2))
__NTH	/usr/include/stdlib.h	/^__NTH (atoi (const char *__nptr))$/;"	f	typeref:typename:__extern_inline int	signature:(atoi (const char * __nptr))
__NTH	/usr/include/stdlib.h	/^__NTH (atol (const char *__nptr))$/;"	f	typeref:typename:__extern_inline long int	signature:(atol (const char * __nptr))
__NTH	/usr/include/stdlib.h	/^__NTH (atoll (const char *__nptr))$/;"	f	typeref:typename:__extension__ __extern_inline long long int	signature:(atoll (const char * __nptr))
__NTH	/usr/include/wchar.h	/^__NTH (btowc (int __c))$/;"	f	typeref:typename:__extern_inline wint_t	signature:(btowc (int __c))
__NTH	/usr/include/wchar.h	/^__NTH (mbrlen (const char *__restrict __s, size_t __n,$/;"	f	typeref:typename:__extern_inline size_t	signature:(mbrlen (const char * __restrict __s,size_t __n,mbstate_t * __restrict __ps))
__NTH	/usr/include/wchar.h	/^__NTH (wctob (wint_t __wc))$/;"	f	typeref:typename:__extern_inline int	signature:(wctob (wint_t __wc))
__NTH	/usr/include/x86_64-linux-gnu/bits/stdlib-float.h	/^__NTH (atof (const char *__nptr))$/;"	f	typeref:typename:__extern_inline double	signature:(atof (const char * __nptr))
__NTH	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#   define __NTH(/;"	d	signature:(fct)
__NTH	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __NTH(/;"	d	signature:(fct)
__NTH	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __NTH(/;"	d	signature:(fct)
__NTHNL	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#   define __NTHNL(/;"	d	signature:(fct)
__NTHNL	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __NTHNL(/;"	d	signature:(fct)
__OFF64_T_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __OFF64_T_TYPE	/;"	d
__OFF_T_MATCHES_OFF64_T	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^# define __OFF_T_MATCHES_OFF64_T	/;"	d
__OFF_T_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __OFF_T_TYPE	/;"	d
__ONCE_ALIGNMENT	/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^#define __ONCE_ALIGNMENT$/;"	d
__P	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#define __P(/;"	d	signature:(args)
__PDP_ENDIAN	/usr/include/x86_64-linux-gnu/bits/endian.h	/^#define	__PDP_ENDIAN	/;"	d
__PID_T_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __PID_T_TYPE	/;"	d
__PMT	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#define __PMT(/;"	d	signature:(args)
__PTHREAD_MUTEX_HAVE_PREV	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^# define __PTHREAD_MUTEX_HAVE_PREV /;"	d
__PTHREAD_MUTEX_INITIALIZER	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^# define __PTHREAD_MUTEX_INITIALIZER(/;"	d	signature:(__kind)
__PTHREAD_RWLOCK_ELISION_EXTRA	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^#  define __PTHREAD_RWLOCK_ELISION_EXTRA /;"	d
__PTHREAD_RWLOCK_INITIALIZER	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^# define __PTHREAD_RWLOCK_INITIALIZER(/;"	d	signature:(__flags)
__PTRDIFF_T	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define __PTRDIFF_T$/;"	d
__PTRDIFF_TYPE__	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define __PTRDIFF_TYPE__ /;"	d
__REDIRECT	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __REDIRECT(/;"	d	signature:(name,proto,alias)
__REDIRECT_LDBL	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __REDIRECT_LDBL(/;"	d	signature:(name,proto,alias)
__REDIRECT_NTH	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __REDIRECT_NTH(/;"	d	signature:(name,proto,alias)
__REDIRECT_NTHNL	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __REDIRECT_NTHNL(/;"	d	signature:(name,proto,alias)
__REDIRECT_NTH_LDBL	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __REDIRECT_NTH_LDBL(/;"	d	signature:(name,proto,alias)
__RLIM64_T_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __RLIM64_T_TYPE	/;"	d
__RLIM_T_MATCHES_RLIM64_T	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^# define __RLIM_T_MATCHES_RLIM64_T	/;"	d
__RLIM_T_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __RLIM_T_TYPE	/;"	d
__S16_TYPE	/usr/include/x86_64-linux-gnu/bits/types.h	/^#define	__S16_TYPE	/;"	d
__S32_TYPE	/usr/include/x86_64-linux-gnu/bits/types.h	/^#define	__S32_TYPE	/;"	d
__S64_TYPE	/usr/include/x86_64-linux-gnu/bits/types.h	/^# define __S64_TYPE	/;"	d
__SIZEOF_PTHREAD_ATTR_T	/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^#  define __SIZEOF_PTHREAD_ATTR_T /;"	d
__SIZEOF_PTHREAD_ATTR_T	/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^# define __SIZEOF_PTHREAD_ATTR_T /;"	d
__SIZEOF_PTHREAD_BARRIERATTR_T	/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^#define __SIZEOF_PTHREAD_BARRIERATTR_T /;"	d
__SIZEOF_PTHREAD_BARRIER_T	/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^#  define __SIZEOF_PTHREAD_BARRIER_T /;"	d
__SIZEOF_PTHREAD_BARRIER_T	/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^# define __SIZEOF_PTHREAD_BARRIER_T /;"	d
__SIZEOF_PTHREAD_CONDATTR_T	/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^#define __SIZEOF_PTHREAD_CONDATTR_T /;"	d
__SIZEOF_PTHREAD_COND_T	/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^#define __SIZEOF_PTHREAD_COND_T /;"	d
__SIZEOF_PTHREAD_MUTEXATTR_T	/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^#define __SIZEOF_PTHREAD_MUTEXATTR_T /;"	d
__SIZEOF_PTHREAD_MUTEX_T	/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^#  define __SIZEOF_PTHREAD_MUTEX_T /;"	d
__SIZEOF_PTHREAD_MUTEX_T	/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^# define __SIZEOF_PTHREAD_MUTEX_T /;"	d
__SIZEOF_PTHREAD_RWLOCKATTR_T	/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^#define __SIZEOF_PTHREAD_RWLOCKATTR_T /;"	d
__SIZEOF_PTHREAD_RWLOCK_T	/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^#  define __SIZEOF_PTHREAD_RWLOCK_T /;"	d
__SIZEOF_PTHREAD_RWLOCK_T	/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^# define __SIZEOF_PTHREAD_RWLOCK_T /;"	d
__SIZE_T	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define __SIZE_T$/;"	d
__SIZE_TYPE__	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define __SIZE_TYPE__ /;"	d
__SIZE_T__	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define __SIZE_T__	/;"	d
__SLONG32_TYPE	/usr/include/x86_64-linux-gnu/bits/types.h	/^# define __SLONG32_TYPE	/;"	d
__SLONGWORD_TYPE	/usr/include/x86_64-linux-gnu/bits/types.h	/^#define __SLONGWORD_TYPE	/;"	d
__SQUAD_TYPE	/usr/include/x86_64-linux-gnu/bits/types.h	/^# define __SQUAD_TYPE	/;"	d
__SSIZE_T_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __SSIZE_T_TYPE	/;"	d
__STATFS_MATCHES_STATFS64	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^# define __STATFS_MATCHES_STATFS64 /;"	d
__STDC_CONSTANT_MACROS	/usr/include/c++/10/bits/postypes.h	/^# define __STDC_CONSTANT_MACROS$/;"	d
__STDC_CONSTANT_MACROS	/usr/lib/gcc/x86_64-linux-gnu/10/include/stdint.h	/^#  define __STDC_CONSTANT_MACROS$/;"	d
__STDC_IEC_559_COMPLEX__	/usr/include/stdc-predef.h	/^#  define __STDC_IEC_559_COMPLEX__	/;"	d
__STDC_IEC_559_COMPLEX__	/usr/include/stdc-predef.h	/^# define __STDC_IEC_559_COMPLEX__	/;"	d
__STDC_IEC_559__	/usr/include/stdc-predef.h	/^#  define __STDC_IEC_559__	/;"	d
__STDC_IEC_559__	/usr/include/stdc-predef.h	/^# define __STDC_IEC_559__	/;"	d
__STDC_ISO_10646__	/usr/include/stdc-predef.h	/^#define __STDC_ISO_10646__	/;"	d
__STDC_LIMIT_MACROS	/usr/include/c++/10/bits/postypes.h	/^# define __STDC_LIMIT_MACROS$/;"	d
__STDC_LIMIT_MACROS	/usr/lib/gcc/x86_64-linux-gnu/10/include/stdint.h	/^#  define __STDC_LIMIT_MACROS$/;"	d
__STD_TYPE	/usr/include/x86_64-linux-gnu/bits/types.h	/^# define __STD_TYPE	/;"	d
__STRING	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#define __STRING(/;"	d	signature:(x)
__SUSECONDS_T_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __SUSECONDS_T_TYPE	/;"	d
__SWORD_TYPE	/usr/include/x86_64-linux-gnu/bits/types.h	/^# define __SWORD_TYPE	/;"	d
__SYSCALL_SLONG_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^# define __SYSCALL_SLONG_TYPE	/;"	d
__SYSCALL_ULONG_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^# define __SYSCALL_ULONG_TYPE	/;"	d
__SYSCALL_WORDSIZE	/usr/include/x86_64-linux-gnu/bits/wordsize.h	/^# define __SYSCALL_WORDSIZE	/;"	d
__THROW	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#   define __THROW	/;"	d
__THROW	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#   define __THROW$/;"	d
__THROW	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __THROW	/;"	d
__THROW	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __THROW$/;"	d
__THROWNL	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#   define __THROWNL	/;"	d
__THROWNL	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#   define __THROWNL$/;"	d
__THROWNL	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __THROWNL	/;"	d
__THROWNL	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __THROWNL$/;"	d
__TIME64_T_TYPE	/usr/include/x86_64-linux-gnu/bits/time64.h	/^# define __TIME64_T_TYPE	/;"	d
__TIMER_T_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __TIMER_T_TYPE	/;"	d
__TIMESIZE	/usr/include/x86_64-linux-gnu/bits/timesize.h	/^# define __TIMESIZE	/;"	d
__TIME_T_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __TIME_T_TYPE	/;"	d
__U16_TYPE	/usr/include/x86_64-linux-gnu/bits/types.h	/^#define __U16_TYPE	/;"	d
__U32_TYPE	/usr/include/x86_64-linux-gnu/bits/types.h	/^#define __U32_TYPE	/;"	d
__U64_TYPE	/usr/include/x86_64-linux-gnu/bits/types.h	/^# define __U64_TYPE	/;"	d
__UID_T_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __UID_T_TYPE	/;"	d
__UINT64_C	/usr/include/stdint.h	/^#  define __UINT64_C(/;"	d	signature:(c)
__ULONG32_TYPE	/usr/include/x86_64-linux-gnu/bits/types.h	/^# define __ULONG32_TYPE	/;"	d
__ULONGWORD_TYPE	/usr/include/x86_64-linux-gnu/bits/types.h	/^#define __ULONGWORD_TYPE	/;"	d
__UQUAD_TYPE	/usr/include/x86_64-linux-gnu/bits/types.h	/^# define __UQUAD_TYPE	/;"	d
__USECONDS_T_TYPE	/usr/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __USECONDS_T_TYPE	/;"	d
__USE_ATFILE	/usr/include/features.h	/^# define __USE_ATFILE	/;"	d
__USE_EXTERN_INLINES	/usr/include/features.h	/^# define __USE_EXTERN_INLINES	/;"	d
__USE_FILE_OFFSET64	/usr/include/features.h	/^# define __USE_FILE_OFFSET64	/;"	d
__USE_FORTIFY_LEVEL	/usr/include/features.h	/^#  define __USE_FORTIFY_LEVEL /;"	d
__USE_FORTIFY_LEVEL	/usr/include/features.h	/^# define __USE_FORTIFY_LEVEL /;"	d
__USE_GNU	/usr/include/features.h	/^# define __USE_GNU	/;"	d
__USE_ISOC11	/usr/include/features.h	/^#  define __USE_ISOC11	/;"	d
__USE_ISOC11	/usr/include/features.h	/^# define __USE_ISOC11	/;"	d
__USE_ISOC95	/usr/include/features.h	/^#   define __USE_ISOC95	/;"	d
__USE_ISOC95	/usr/include/features.h	/^# define __USE_ISOC95	/;"	d
__USE_ISOC99	/usr/include/features.h	/^#   define __USE_ISOC99	/;"	d
__USE_ISOC99	/usr/include/features.h	/^#  define __USE_ISOC99	/;"	d
__USE_ISOC99	/usr/include/features.h	/^# define __USE_ISOC99	/;"	d
__USE_ISOCXX11	/usr/include/features.h	/^#  define __USE_ISOCXX11	/;"	d
__USE_LARGEFILE	/usr/include/features.h	/^#  define __USE_LARGEFILE	/;"	d
__USE_LARGEFILE	/usr/include/features.h	/^# define __USE_LARGEFILE	/;"	d
__USE_LARGEFILE64	/usr/include/features.h	/^#  define __USE_LARGEFILE64	/;"	d
__USE_LARGEFILE64	/usr/include/features.h	/^# define __USE_LARGEFILE64	/;"	d
__USE_MISC	/usr/include/features.h	/^# define __USE_MISC	/;"	d
__USE_POSIX	/usr/include/features.h	/^# define __USE_POSIX	/;"	d
__USE_POSIX199309	/usr/include/features.h	/^# define __USE_POSIX199309	/;"	d
__USE_POSIX199506	/usr/include/features.h	/^# define __USE_POSIX199506	/;"	d
__USE_POSIX2	/usr/include/features.h	/^# define __USE_POSIX2	/;"	d
__USE_POSIX_IMPLICITLY	/usr/include/features.h	/^#  define __USE_POSIX_IMPLICITLY	/;"	d
__USE_POSIX_IMPLICITLY	/usr/include/features.h	/^# define __USE_POSIX_IMPLICITLY	/;"	d
__USE_UNIX98	/usr/include/features.h	/^#  define __USE_UNIX98	/;"	d
__USE_XOPEN	/usr/include/features.h	/^# define __USE_XOPEN	/;"	d
__USE_XOPEN2K	/usr/include/features.h	/^#   define __USE_XOPEN2K	/;"	d
__USE_XOPEN2K	/usr/include/features.h	/^# define __USE_XOPEN2K	/;"	d
__USE_XOPEN2K8	/usr/include/features.h	/^#    define __USE_XOPEN2K8	/;"	d
__USE_XOPEN2K8	/usr/include/features.h	/^# define __USE_XOPEN2K8	/;"	d
__USE_XOPEN2K8XSI	/usr/include/features.h	/^#    define __USE_XOPEN2K8XSI	/;"	d
__USE_XOPEN2KXSI	/usr/include/features.h	/^#   define __USE_XOPEN2KXSI	/;"	d
__USE_XOPEN_EXTENDED	/usr/include/features.h	/^#   define __USE_XOPEN_EXTENDED	/;"	d
__USE_XOPEN_EXTENDED	/usr/include/features.h	/^#  define __USE_XOPEN_EXTENDED	/;"	d
__UWORD_TYPE	/usr/include/x86_64-linux-gnu/bits/types.h	/^# define __UWORD_TYPE	/;"	d
__VA_LIST	/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h	/^#define __VA_LIST$/;"	d
__WALL	/usr/include/x86_64-linux-gnu/bits/waitflags.h	/^#define __WALL	/;"	d
__WCHAR_MAX	/usr/include/x86_64-linux-gnu/bits/wchar.h	/^# define __WCHAR_MAX	/;"	d
__WCHAR_MIN	/usr/include/x86_64-linux-gnu/bits/wchar.h	/^# define __WCHAR_MIN	/;"	d
__WCHAR_T	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define __WCHAR_T$/;"	d
__WCHAR_TYPE__	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define __WCHAR_TYPE__ /;"	d
__WCHAR_TYPE__	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^typedef __WCHAR_TYPE__ wchar_t;$/;"	t	typeref:typename:wchar_t
__WCHAR_T__	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define __WCHAR_T__	/;"	d
__WCLONE	/usr/include/x86_64-linux-gnu/bits/waitflags.h	/^#define __WCLONE	/;"	d
__WCOREDUMP	/usr/include/x86_64-linux-gnu/bits/waitstatus.h	/^#define	__WCOREDUMP(/;"	d	signature:(status)
__WCOREFLAG	/usr/include/x86_64-linux-gnu/bits/waitstatus.h	/^#define	__WCOREFLAG	/;"	d
__WEXITSTATUS	/usr/include/x86_64-linux-gnu/bits/waitstatus.h	/^#define	__WEXITSTATUS(/;"	d	signature:(status)
__WIFCONTINUED	/usr/include/x86_64-linux-gnu/bits/waitstatus.h	/^# define __WIFCONTINUED(/;"	d	signature:(status)
__WIFEXITED	/usr/include/x86_64-linux-gnu/bits/waitstatus.h	/^#define	__WIFEXITED(/;"	d	signature:(status)
__WIFSIGNALED	/usr/include/x86_64-linux-gnu/bits/waitstatus.h	/^#define __WIFSIGNALED(/;"	d	signature:(status)
__WIFSTOPPED	/usr/include/x86_64-linux-gnu/bits/waitstatus.h	/^#define	__WIFSTOPPED(/;"	d	signature:(status)
__WINT_TYPE__	/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h	/^# define __WINT_TYPE__ /;"	d
__WINT_TYPE__	/usr/include/x86_64-linux-gnu/bits/types/wint_t.h	/^# define __WINT_TYPE__ /;"	d
__WINT_TYPE__	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define __WINT_TYPE__ /;"	d
__WNOTHREAD	/usr/include/x86_64-linux-gnu/bits/waitflags.h	/^#define __WNOTHREAD /;"	d
__WORDSIZE	/usr/include/x86_64-linux-gnu/bits/wordsize.h	/^# define __WORDSIZE	/;"	d
__WORDSIZE32_PTRDIFF_LONG	/usr/include/x86_64-linux-gnu/bits/wordsize.h	/^#define __WORDSIZE32_PTRDIFF_LONG	/;"	d
__WORDSIZE32_SIZE_ULONG	/usr/include/x86_64-linux-gnu/bits/wordsize.h	/^#define __WORDSIZE32_SIZE_ULONG	/;"	d
__WORDSIZE_TIME64_COMPAT32	/usr/include/x86_64-linux-gnu/bits/wordsize.h	/^# define __WORDSIZE_TIME64_COMPAT32	/;"	d
__WSTOPSIG	/usr/include/x86_64-linux-gnu/bits/waitstatus.h	/^#define	__WSTOPSIG(/;"	d	signature:(status)
__WTERMSIG	/usr/include/x86_64-linux-gnu/bits/waitstatus.h	/^#define	__WTERMSIG(/;"	d	signature:(status)
__W_CONTINUED	/usr/include/x86_64-linux-gnu/bits/waitstatus.h	/^#define __W_CONTINUED	/;"	d
__W_EXITCODE	/usr/include/x86_64-linux-gnu/bits/waitstatus.h	/^#define	__W_EXITCODE(/;"	d	signature:(ret,sig)
__W_STOPCODE	/usr/include/x86_64-linux-gnu/bits/waitstatus.h	/^#define	__W_STOPCODE(/;"	d	signature:(sig)
____FILE_defined	/usr/include/x86_64-linux-gnu/bits/types/__FILE.h	/^#define ____FILE_defined /;"	d
_____fpos64_t_defined	/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h	/^#define _____fpos64_t_defined /;"	d
_____fpos_t_defined	/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h	/^#define _____fpos_t_defined /;"	d
____mbstate_t_defined	/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h	/^#define ____mbstate_t_defined /;"	d
____sigset_t_defined	/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h	/^#define ____sigset_t_defined$/;"	d
___int_ptrdiff_t_h	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define ___int_ptrdiff_t_h$/;"	d
___int_size_t_h	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define ___int_size_t_h$/;"	d
___int_wchar_t_h	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define ___int_wchar_t_h$/;"	d
__a	/usr/include/stdlib.h	/^    __extension__ unsigned long long int __a;	\/* Factor in congruential$/;"	m	struct:drand48_data	typeref:typename:__extension__ unsigned long long int	access:public
__add_grouping	/usr/include/c++/10/bits/locale_facets.h	/^    __add_grouping(_CharT* __s, _CharT __sep,$/;"	p	namespace:std	typeref:typename:_CharT *	signature:(_CharT * __s,_CharT __sep,const char * __gbeg,size_t __gsize,const _CharT * __first,const _CharT * __last)
__add_unsigned	/usr/include/c++/10/ext/type_traits.h	/^    struct __add_unsigned$/;"	s	namespace:__gnu_cxx
__add_unsigned	/usr/include/c++/10/ext/type_traits.h	/^    struct __add_unsigned<char>$/;"	s	namespace:__gnu_cxx
__add_unsigned	/usr/include/c++/10/ext/type_traits.h	/^    struct __add_unsigned<int>$/;"	s	namespace:__gnu_cxx
__add_unsigned	/usr/include/c++/10/ext/type_traits.h	/^    struct __add_unsigned<long long>$/;"	s	namespace:__gnu_cxx
__add_unsigned	/usr/include/c++/10/ext/type_traits.h	/^    struct __add_unsigned<long>$/;"	s	namespace:__gnu_cxx
__add_unsigned	/usr/include/c++/10/ext/type_traits.h	/^    struct __add_unsigned<short>$/;"	s	namespace:__gnu_cxx
__add_unsigned	/usr/include/c++/10/ext/type_traits.h	/^    struct __add_unsigned<signed char>$/;"	s	namespace:__gnu_cxx
__addressof	/usr/include/c++/10/bits/move.h	/^    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION _GLIBCXX_CONSTEXPR _Tp *	signature:(_Tp & __r)
__advance	/usr/include/c++/10/bits/stl_iterator_base_funcs.h	/^    __advance(_BidirectionalIterator& __i, _Distance __n,$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR void	signature:(_BidirectionalIterator & __i,_Distance __n,bidirectional_iterator_tag)
__advance	/usr/include/c++/10/bits/stl_iterator_base_funcs.h	/^    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR void	signature:(_InputIterator & __i,_Distance __n,input_iterator_tag)
__advance	/usr/include/c++/10/bits/stl_iterator_base_funcs.h	/^    __advance(_RandomAccessIterator& __i, _Distance __n,$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR void	signature:(_RandomAccessIterator & __i,_Distance __n,random_access_iterator_tag)
__align	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  __extension__ long long int __align;$/;"	m	union:__anone9c15396040a	typeref:typename:__extension__ long long int	access:public
__align	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  int __align;$/;"	m	union:__anone9c15396010a	typeref:typename:int	access:public
__align	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  int __align;$/;"	m	union:__anone9c15396020a	typeref:typename:int	access:public
__align	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  int __align;$/;"	m	union:__anone9c15396080a	typeref:typename:int	access:public
__align	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  long int __align;$/;"	m	union:__anone9c15396030a	typeref:typename:long int	access:public
__align	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  long int __align;$/;"	m	union:__anone9c15396050a	typeref:typename:long int	access:public
__align	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  long int __align;$/;"	m	union:__anone9c15396060a	typeref:typename:long int	access:public
__align	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  long int __align;$/;"	m	union:__anone9c15396070a	typeref:typename:long int	access:public
__align	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  long int __align;$/;"	m	union:pthread_attr_t	typeref:typename:long int	access:public
__alloc_neq	/usr/include/c++/10/bits/allocator.h	/^    struct __alloc_neq$/;"	s	namespace:std
__alloc_neq	/usr/include/c++/10/bits/allocator.h	/^    struct __alloc_neq<_Alloc, false>$/;"	s	namespace:std
__alloc_on_copy	/usr/include/c++/10/bits/alloc_traits.h	/^    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR void	signature:(_Alloc & __one,const _Alloc & __two)
__alloc_on_copy	/usr/include/c++/10/bits/alloc_traits.h	/^    __alloc_on_copy(const _Alloc& __a)$/;"	f	namespace:std	typeref:typename:_Alloc	signature:(const _Alloc & __a)
__alloc_on_move	/usr/include/c++/10/bits/alloc_traits.h	/^    __alloc_on_move(_Alloc& __one, _Alloc& __two)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR void	signature:(_Alloc & __one,_Alloc & __two)
__alloc_on_swap	/usr/include/c++/10/bits/alloc_traits.h	/^    __alloc_on_swap(_Alloc& __one, _Alloc& __two)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR void	signature:(_Alloc & __one,_Alloc & __two)
__alloc_rebind	/usr/include/c++/10/bits/alloc_traits.h	/^    using __alloc_rebind$/;"	t	namespace:std	typeref:typename:__allocator_traits_base::template __rebind<_Alloc,_Up>::type
__alloc_swap	/usr/include/c++/10/bits/allocator.h	/^    struct __alloc_swap$/;"	s	namespace:std
__alloc_swap	/usr/include/c++/10/bits/allocator.h	/^    struct __alloc_swap<_Alloc, false>$/;"	s	namespace:std
__alloc_traits	/usr/include/c++/10/ext/alloc_traits.h	/^  struct __alloc_traits$/;"	s	namespace:__gnu_cxx	inherits:std::allocator_traits<_Alloc>
__allocator_base	/usr/include/x86_64-linux-gnu/c++/10/bits/c++allocator.h	/^    using __allocator_base = __gnu_cxx::new_allocator<_Tp>;$/;"	t	namespace:std	typeref:typename:__gnu_cxx::new_allocator<_Tp>
__allocator_base	/usr/include/x86_64-linux-gnu/c++/10/bits/c++allocator.h	/^# define __allocator_base /;"	d
__allocator_traits_base	/usr/include/c++/10/bits/alloc_traits.h	/^  struct __allocator_traits_base$/;"	s	namespace:std
__always_inline	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __always_inline /;"	d
__anon048e86970103	/usr/include/c++/10/bits/basic_string.h	/^      enum { _S_local_capacity = 15 \/ sizeof(_CharT) };$/;"	g	class:std::basic_string	access:private
__anon048e8697020a	/usr/include/c++/10/bits/basic_string.h	/^      {$/;"	u	class:std::basic_string	access:private
__anon0ab14d0b0103	/usr/include/ctype.h	/^{$/;"	g
__anon23701d770103	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^{$/;"	g
__anon2763e7ba0108	/usr/include/x86_64-linux-gnu/bits/cpu-set.h	/^{$/;"	s
__anon2763e7ba0108::__bits	/usr/include/x86_64-linux-gnu/bits/cpu-set.h	/^  __cpu_mask __bits[__CPU_SETSIZE \/ __NCPUBITS];$/;"	m	struct:__anon2763e7ba0108	typeref:typename:__cpu_mask[]	access:public
__anon45a010bb010a	/usr/include/c++/10/bits/stl_iterator.h	/^    {$/;"	u	class:std::common_iterator	access:private
__anon45a010bb0203	/usr/include/c++/10/bits/stl_iterator.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_move_iterator	access:public
__anon4eb2adee0103	/usr/include/pthread.h	/^{$/;"	g
__anon4eb2adee0203	/usr/include/pthread.h	/^{$/;"	g
__anon4eb2adee0303	/usr/include/pthread.h	/^{$/;"	g
__anon4eb2adee0403	/usr/include/pthread.h	/^{$/;"	g
__anon4eb2adee0503	/usr/include/pthread.h	/^{$/;"	g
__anon4eb2adee0603	/usr/include/pthread.h	/^{$/;"	g
__anon4eb2adee0703	/usr/include/pthread.h	/^{$/;"	g
__anon4eb2adee0803	/usr/include/pthread.h	/^{$/;"	g
__anon4eb2adee0903	/usr/include/pthread.h	/^{$/;"	g
__anon4eb2adee0a03	/usr/include/pthread.h	/^{$/;"	g
__anon4eb2adee0b08	/usr/include/pthread.h	/^{$/;"	s
__anon4eb2adee0b08::__anon4eb2adee0c08	/usr/include/pthread.h	/^  {$/;"	s	struct:__anon4eb2adee0b08	access:public
__anon4eb2adee0b08::__anon4eb2adee0c08::__cancel_jmp_buf	/usr/include/pthread.h	/^    __jmp_buf __cancel_jmp_buf;$/;"	m	struct:__anon4eb2adee0b08::__anon4eb2adee0c08	typeref:typename:__jmp_buf	access:public
__anon4eb2adee0b08::__anon4eb2adee0c08::__mask_was_saved	/usr/include/pthread.h	/^    int __mask_was_saved;$/;"	m	struct:__anon4eb2adee0b08::__anon4eb2adee0c08	typeref:typename:int	access:public
__anon4eb2adee0b08::__cancel_jmp_buf	/usr/include/pthread.h	/^  } __cancel_jmp_buf[1];$/;"	m	struct:__anon4eb2adee0b08	typeref:struct:__anon4eb2adee0b08::__anon4eb2adee0c08[1]	access:public
__anon4eb2adee0b08::__pad	/usr/include/pthread.h	/^  void *__pad[4];$/;"	m	struct:__anon4eb2adee0b08	typeref:typename:void * [4]	access:public
__anon4eb2adee0c08	/usr/include/pthread.h	/^  {$/;"	s	struct:__anon4eb2adee0b08	access:public
__anon4f18faa40103	/usr/include/c++/10/bits/locale_facets.h	/^      {$/;"	g	class:std::__num_base	access:public
__anon4f18faa40203	/usr/include/c++/10/bits/locale_facets.h	/^    {$/;"	g	class:std::__num_base	access:public
__anon5e0da8a40103	/usr/include/c++/10/bits/ios_base.h	/^    enum { _S_local_word_size = 8 };$/;"	g	class:std::ios_base	access:protected
__anon623f701d0108	/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h	/^{$/;"	s
__anon623f701d0108::__val	/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h	/^  unsigned long int __val[_SIGSET_NWORDS];$/;"	m	struct:__anon623f701d0108	typeref:typename:unsigned long int[]	access:public
__anon823239bc0103	/usr/include/c++/10/bits/locale_classes.h	/^    enum { _S_categories_size = 6 + _GLIBCXX_NUM_CATEGORIES };$/;"	g	class:std::locale	access:private
__anon82e621690103	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      enum { __value = _Base::value };$/;"	g	struct:std::__is_random_access_iter	access:public
__anon82e621690203	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^    { enum { __value = __is_base_of(random_access_iterator_tag, _Cat) }; };$/;"	g	struct:std::__is_random_access_iter	access:public
__anon9c479bfe0108	/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h	/^{$/;"	s
__anon9c479bfe0108::__anon9c479bfe020a	/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h	/^  {$/;"	u	struct:__anon9c479bfe0108	access:public
__anon9c479bfe0108::__anon9c479bfe020a::__wch	/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h	/^    __WINT_TYPE__ __wch;$/;"	m	union:__anon9c479bfe0108::__anon9c479bfe020a	typeref:typename:__WINT_TYPE__	access:public
__anon9c479bfe0108::__anon9c479bfe020a::__wchb	/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h	/^    char __wchb[4];$/;"	m	union:__anon9c479bfe0108::__anon9c479bfe020a	typeref:typename:char[4]	access:public
__anon9c479bfe0108::__count	/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h	/^  int __count;$/;"	m	struct:__anon9c479bfe0108	typeref:typename:int	access:public
__anon9c479bfe0108::__value	/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h	/^  } __value;		\/* Value so far.  *\/$/;"	m	struct:__anon9c479bfe0108	typeref:union:__anon9c479bfe0108::__anon9c479bfe020a	access:public
__anon9c479bfe020a	/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h	/^  {$/;"	u	struct:__anon9c479bfe0108	access:public
__anona122f8870103	/usr/include/c++/10/ext/numeric_traits.h	/^      enum { __width = __value ? sizeof(_Tp) * __CHAR_BIT__ : 0 };$/;"	g	struct:__gnu_cxx::__is_integer_nonstrict	access:public
__anona7088117010a	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  {$/;"	u	struct:__pthread_cond_s	access:public
__anona70881170208	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^    {$/;"	s	union:__pthread_cond_s::__anona7088117010a	access:public
__anona7088117030a	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  {$/;"	u	struct:__pthread_cond_s	access:public
__anona70881170408	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^    {$/;"	s	union:__pthread_cond_s::__anona7088117030a	access:public
__anond8428c390103	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };$/;"	g	struct:std::__traitor	access:public
__anond8428c390203	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__are_same	access:public
__anond8428c390303	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__are_same	access:public
__anond8428c390403	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__is_void	access:public
__anond8428c390503	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_void	access:public
__anond8428c390603	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__is_integer	access:public
__anond8428c390703	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
__anond8428c390803	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
__anond8428c390903	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
__anond8428c390a03	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
__anond8428c390b03	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
__anond8428c390c03	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
__anond8428c390d03	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
__anond8428c390e03	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
__anond8428c390f03	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
__anond8428c391003	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
__anond8428c391103	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
__anond8428c391203	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
__anond8428c391303	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
__anond8428c391403	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
__anond8428c391503	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
__anond8428c391603	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
__anond8428c391703	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__is_floating	access:public
__anond8428c391803	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_floating	access:public
__anond8428c391903	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_floating	access:public
__anond8428c391a03	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_floating	access:public
__anond8428c391b03	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__is_pointer	access:public
__anond8428c391c03	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_pointer	access:public
__anond8428c391d03	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__is_char	access:public
__anond8428c391e03	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_char	access:public
__anond8428c391f03	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_char	access:public
__anond8428c392003	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__is_byte	access:public
__anond8428c392103	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_byte	access:public
__anond8428c392203	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_byte	access:public
__anond8428c392303	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_byte	access:public
__anond8428c392403	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_byte	access:public
__anond8428c392503	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_byte	access:public
__anond8428c392603	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = __is_trivially_copyable(_Tp) };$/;"	g	struct:std::__is_nonvolatile_trivially_copyable	access:public
__anond8428c392703	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__is_nonvolatile_trivially_copyable	access:public
__anond8428c392803	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__memcpyable	access:public
__anond8428c392903	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__memcmpable	access:public
__anond8428c392a03	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__is_move_iterator	access:public
__anone9c15396010a	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^{$/;"	u
__anone9c15396010a::__align	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  int __align;$/;"	m	union:__anone9c15396010a	typeref:typename:int	access:public
__anone9c15396010a::__size	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_MUTEXATTR_T];$/;"	m	union:__anone9c15396010a	typeref:typename:char[]	access:public
__anone9c15396020a	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^{$/;"	u
__anone9c15396020a::__align	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  int __align;$/;"	m	union:__anone9c15396020a	typeref:typename:int	access:public
__anone9c15396020a::__size	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_CONDATTR_T];$/;"	m	union:__anone9c15396020a	typeref:typename:char[]	access:public
__anone9c15396030a	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^{$/;"	u
__anone9c15396030a::__align	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  long int __align;$/;"	m	union:__anone9c15396030a	typeref:typename:long int	access:public
__anone9c15396030a::__data	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  struct __pthread_mutex_s __data;$/;"	m	union:__anone9c15396030a	typeref:struct:__pthread_mutex_s	access:public
__anone9c15396030a::__size	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_MUTEX_T];$/;"	m	union:__anone9c15396030a	typeref:typename:char[]	access:public
__anone9c15396040a	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^{$/;"	u
__anone9c15396040a::__align	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  __extension__ long long int __align;$/;"	m	union:__anone9c15396040a	typeref:typename:__extension__ long long int	access:public
__anone9c15396040a::__data	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  struct __pthread_cond_s __data;$/;"	m	union:__anone9c15396040a	typeref:struct:__pthread_cond_s	access:public
__anone9c15396040a::__size	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_COND_T];$/;"	m	union:__anone9c15396040a	typeref:typename:char[]	access:public
__anone9c15396050a	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^{$/;"	u
__anone9c15396050a::__align	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  long int __align;$/;"	m	union:__anone9c15396050a	typeref:typename:long int	access:public
__anone9c15396050a::__data	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  struct __pthread_rwlock_arch_t __data;$/;"	m	union:__anone9c15396050a	typeref:struct:__pthread_rwlock_arch_t	access:public
__anone9c15396050a::__size	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_RWLOCK_T];$/;"	m	union:__anone9c15396050a	typeref:typename:char[]	access:public
__anone9c15396060a	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^{$/;"	u
__anone9c15396060a::__align	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  long int __align;$/;"	m	union:__anone9c15396060a	typeref:typename:long int	access:public
__anone9c15396060a::__size	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_RWLOCKATTR_T];$/;"	m	union:__anone9c15396060a	typeref:typename:char[]	access:public
__anone9c15396070a	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^{$/;"	u
__anone9c15396070a::__align	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  long int __align;$/;"	m	union:__anone9c15396070a	typeref:typename:long int	access:public
__anone9c15396070a::__size	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_BARRIER_T];$/;"	m	union:__anone9c15396070a	typeref:typename:char[]	access:public
__anone9c15396080a	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^{$/;"	u
__anone9c15396080a::__align	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  int __align;$/;"	m	union:__anone9c15396080a	typeref:typename:int	access:public
__anone9c15396080a::__size	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_BARRIERATTR_T];$/;"	m	union:__anone9c15396080a	typeref:typename:char[]	access:public
__anoneb689ec60108	/usr/include/x86_64-linux-gnu/sys/select.h	/^  {$/;"	s
__anoneb689ec60108::fds_bits	/usr/include/x86_64-linux-gnu/sys/select.h	/^    __fd_mask fds_bits[__FD_SETSIZE \/ __NFDBITS];$/;"	m	struct:__anoneb689ec60108	typeref:typename:__fd_mask[]	access:public
__anonf11409f0010a	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  {$/;"	u	struct:__pthread_mutex_s	access:public
__anonf11409f00208	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^    {$/;"	s	union:__pthread_mutex_s::__anonf11409f0010a	access:public
__anonf11eee040108	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^typedef struct {$/;"	s
__anonf11eee040108::__max_align_f128	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^  __float128 __max_align_f128 __attribute__((__aligned__(__alignof(__float128))));$/;"	m	struct:__anonf11eee040108	typeref:typename:__float128	access:public
__anonf11eee040108::__max_align_ld	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));$/;"	m	struct:__anonf11eee040108	typeref:typename:long double	access:public
__anonf11eee040108::__max_align_ll	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));$/;"	m	struct:__anonf11eee040108	typeref:typename:long long	access:public
__anonf3b68ce80108	/usr/include/stdlib.h	/^  {$/;"	s
__anonf3b68ce80108::quot	/usr/include/stdlib.h	/^    int quot;			\/* Quotient.  *\/$/;"	m	struct:__anonf3b68ce80108	typeref:typename:int	access:public
__anonf3b68ce80108::rem	/usr/include/stdlib.h	/^    int rem;			\/* Remainder.  *\/$/;"	m	struct:__anonf3b68ce80108	typeref:typename:int	access:public
__anonf3b68ce80208	/usr/include/stdlib.h	/^  {$/;"	s
__anonf3b68ce80208::quot	/usr/include/stdlib.h	/^    long int quot;		\/* Quotient.  *\/$/;"	m	struct:__anonf3b68ce80208	typeref:typename:long int	access:public
__anonf3b68ce80208::rem	/usr/include/stdlib.h	/^    long int rem;		\/* Remainder.  *\/$/;"	m	struct:__anonf3b68ce80208	typeref:typename:long int	access:public
__anonf3b68ce80308	/usr/include/stdlib.h	/^  {$/;"	s
__anonf3b68ce80308::quot	/usr/include/stdlib.h	/^    long long int quot;		\/* Quotient.  *\/$/;"	m	struct:__anonf3b68ce80308	typeref:typename:long long int	access:public
__anonf3b68ce80308::rem	/usr/include/stdlib.h	/^    long long int rem;		\/* Remainder.  *\/$/;"	m	struct:__anonf3b68ce80308	typeref:typename:long long int	access:public
__anonf56fd07b0103	/usr/include/x86_64-linux-gnu/bits/waitflags.h	/^{$/;"	g
__are_same	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __are_same$/;"	s	namespace:std
__are_same	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __are_same<_Tp, _Tp>$/;"	s	namespace:std
__arg	/usr/include/pthread.h	/^  void *__arg;                            \/* Its argument.  *\/$/;"	m	struct:_pthread_cleanup_buffer	typeref:typename:void *	access:public
__as_const	/usr/include/c++/10/bits/range_access.h	/^      __as_const(_Tp&& __t) noexcept$/;"	f	namespace:std::ranges::__cust_access	typeref:typename:decltype (auto)	signature:(_Tp && __t)
__asprintf	/usr/include/stdio.h	/^extern int __asprintf (char **__restrict __ptr,$/;"	p	typeref:typename:int	signature:(char ** __restrict __ptr,const char * __restrict __fmt,...)
__assignable	/usr/include/c++/10/bits/stl_algobase.h	/^	  using __assignable = conditional<_IsMove,$/;"	t	function:std::__copy_move::__copy_m	typeref:typename:conditional<_IsMove,is_move_assignable<_Tp>,is_copy_assignable<_Tp>>
__assignable	/usr/include/c++/10/bits/stl_algobase.h	/^	  using __assignable = conditional<_IsMove,$/;"	t	function:std::__copy_move_backward::__copy_move_b	typeref:typename:conditional<_IsMove,is_move_assignable<_Tp>,is_copy_assignable<_Tp>>
__atomic_add	/usr/include/c++/10/ext/atomicity.h	/^  __atomic_add(volatile _Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx	typeref:typename:void	signature:(volatile _Atomic_word * __mem,int __val)
__atomic_add_dispatch	/usr/include/c++/10/ext/atomicity.h	/^  __atomic_add_dispatch(_Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx	typeref:typename:void	signature:(_Atomic_word * __mem,int __val)
__atomic_add_single	/usr/include/c++/10/ext/atomicity.h	/^  __atomic_add_single(_Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx	typeref:typename:void	signature:(_Atomic_word * __mem,int __val)
__attribute__	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute__(/;"	d	signature:(xyz)
__attribute_alloc_size__	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_alloc_size__(/;"	d	signature:(params)
__attribute_artificial__	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_artificial__ /;"	d
__attribute_const__	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_const__ /;"	d
__attribute_copy__	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_copy__(/;"	d	signature:(arg)
__attribute_deprecated__	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_deprecated__ /;"	d
__attribute_deprecated_msg__	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_deprecated_msg__(/;"	d	signature:(msg)
__attribute_format_arg__	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_format_arg__(/;"	d	signature:(x)
__attribute_format_strfmon__	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_format_strfmon__(/;"	d	signature:(a,b)
__attribute_malloc__	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_malloc__ /;"	d
__attribute_noinline__	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_noinline__ /;"	d
__attribute_nonstring__	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_nonstring__ /;"	d
__attribute_nonstring__	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_nonstring__$/;"	d
__attribute_pure__	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_pure__ /;"	d
__attribute_used__	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_used__ /;"	d
__attribute_warn_unused_result__	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_warn_unused_result__ /;"	d
__base_cat	/usr/include/c++/10/bits/stl_iterator.h	/^      using __base_cat = typename __traits_type::iterator_category;$/;"	t	class:std::move_iterator	typeref:typename:__traits_type::iterator_category	access:private
__base_ref	/usr/include/c++/10/bits/stl_iterator.h	/^      using __base_ref = typename __traits_type::reference;$/;"	t	class:std::move_iterator	typeref:typename:__traits_type::reference	access:private
__bits	/usr/include/x86_64-linux-gnu/bits/cpu-set.h	/^  __cpu_mask __bits[__CPU_SETSIZE \/ __NCPUBITS];$/;"	m	struct:__anon2763e7ba0108	typeref:typename:__cpu_mask[]	access:public
__blkcnt64_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __BLKCNT64_T_TYPE __blkcnt64_t;$/;"	v	typeref:typename:__STD_TYPE __BLKCNT64_T_TYPE
__blkcnt_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __BLKCNT_T_TYPE __blkcnt_t;$/;"	v	typeref:typename:__STD_TYPE __BLKCNT_T_TYPE
__blkcnt_t_defined	/usr/include/x86_64-linux-gnu/sys/types.h	/^#  define __blkcnt_t_defined$/;"	d
__blksize_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __BLKSIZE_T_TYPE __blksize_t;$/;"	v	typeref:typename:__STD_TYPE __BLKSIZE_T_TYPE
__blksize_t_defined	/usr/include/x86_64-linux-gnu/sys/types.h	/^# define __blksize_t_defined$/;"	d
__bos	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#define __bos(/;"	d	signature:(ptr)
__bos0	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#define __bos0(/;"	d	signature:(ptr)
__bswap_16	/usr/include/x86_64-linux-gnu/bits/byteswap.h	/^__bswap_16 (__uint16_t __bsx)$/;"	f	typeref:typename:__uint16_t	signature:(__uint16_t __bsx)
__bswap_32	/usr/include/x86_64-linux-gnu/bits/byteswap.h	/^__bswap_32 (__uint32_t __bsx)$/;"	f	typeref:typename:__uint32_t	signature:(__uint32_t __bsx)
__bswap_64	/usr/include/x86_64-linux-gnu/bits/byteswap.h	/^__bswap_64 (__uint64_t __bsx)$/;"	f	typeref:typename:__extension__ __uint64_t	signature:(__uint64_t __bsx)
__bswap_constant_16	/usr/include/x86_64-linux-gnu/bits/byteswap.h	/^#define __bswap_constant_16(/;"	d	signature:(x)
__bswap_constant_32	/usr/include/x86_64-linux-gnu/bits/byteswap.h	/^#define __bswap_constant_32(/;"	d	signature:(x)
__bswap_constant_64	/usr/include/x86_64-linux-gnu/bits/byteswap.h	/^#define __bswap_constant_64(/;"	d	signature:(x)
__btowc_alias	/usr/include/wchar.h	/^extern wint_t __btowc_alias (int __c) __asm ("btowc");$/;"	p	typeref:typename:wint_t	signature:(int __c)
__builtin_copysignf128	/usr/include/x86_64-linux-gnu/bits/floatn.h	/^#   define __builtin_copysignf128 /;"	d
__builtin_fabsf128	/usr/include/x86_64-linux-gnu/bits/floatn.h	/^#   define __builtin_fabsf128 /;"	d
__builtin_huge_valf128	/usr/include/x86_64-linux-gnu/bits/floatn.h	/^#   define __builtin_huge_valf128(/;"	d	signature:()
__builtin_huge_valf128x	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __builtin_huge_valf128x(/;"	d	signature:()
__builtin_huge_valf16	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __builtin_huge_valf16(/;"	d	signature:()
__builtin_huge_valf32	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __builtin_huge_valf32(/;"	d	signature:()
__builtin_huge_valf32x	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __builtin_huge_valf32x(/;"	d	signature:()
__builtin_huge_valf64	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#    define __builtin_huge_valf64(/;"	d	signature:()
__builtin_huge_valf64x	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#    define __builtin_huge_valf64x(/;"	d	signature:()
__builtin_inff128	/usr/include/x86_64-linux-gnu/bits/floatn.h	/^#   define __builtin_inff128(/;"	d	signature:()
__builtin_inff128x	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __builtin_inff128x(/;"	d	signature:()
__builtin_inff16	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __builtin_inff16(/;"	d	signature:()
__builtin_inff32	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __builtin_inff32(/;"	d	signature:()
__builtin_inff32x	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __builtin_inff32x(/;"	d	signature:()
__builtin_inff64	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#    define __builtin_inff64(/;"	d	signature:()
__builtin_inff64x	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#    define __builtin_inff64x(/;"	d	signature:()
__builtin_nanf128	/usr/include/x86_64-linux-gnu/bits/floatn.h	/^#   define __builtin_nanf128(/;"	d	signature:(x)
__builtin_nanf128x	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __builtin_nanf128x(/;"	d	signature:(x)
__builtin_nanf16	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __builtin_nanf16(/;"	d	signature:(x)
__builtin_nanf32	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __builtin_nanf32(/;"	d	signature:(x)
__builtin_nanf32x	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __builtin_nanf32x(/;"	d	signature:(x)
__builtin_nanf64	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#    define __builtin_nanf64(/;"	d	signature:(x)
__builtin_nanf64x	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#    define __builtin_nanf64x(/;"	d	signature:(x)
__builtin_nansf128	/usr/include/x86_64-linux-gnu/bits/floatn.h	/^#   define __builtin_nansf128(/;"	d	signature:(x)
__builtin_nansf128x	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __builtin_nansf128x(/;"	d	signature:(x)
__builtin_nansf16	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __builtin_nansf16(/;"	d	signature:(x)
__builtin_nansf32	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __builtin_nansf32(/;"	d	signature:(x)
__builtin_nansf32x	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __builtin_nansf32x(/;"	d	signature:(x)
__builtin_nansf64	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#    define __builtin_nansf64(/;"	d	signature:(x)
__builtin_nansf64x	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#    define __builtin_nansf64x(/;"	d	signature:(x)
__builtin_signbitf128	/usr/include/x86_64-linux-gnu/bits/floatn.h	/^#   define __builtin_signbitf128 /;"	d
__c	/usr/include/stdlib.h	/^    unsigned short int __c;	\/* Additive const. in congruential formula.  *\/$/;"	m	struct:drand48_data	typeref:typename:unsigned short int	access:public
__c_locale	/usr/include/x86_64-linux-gnu/c++/10/bits/c++locale.h	/^  typedef __locale_t		__c_locale;$/;"	t	namespace:std	typeref:typename:__locale_t
__c_pointer	/usr/include/c++/10/bits/alloc_traits.h	/^      using __c_pointer = typename _Tp::const_pointer;$/;"	t	struct:std::__allocator_traits_base	typeref:typename:_Tp::const_pointer	access:protected
__cache_type	/usr/include/c++/10/bits/locale_facets.h	/^      typedef __numpunct_cache<_CharT>  __cache_type;$/;"	t	class:std::numpunct	typeref:typename:__numpunct_cache<_CharT>	access:public
__caddr_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^typedef char *__caddr_t;$/;"	t	typeref:typename:char *
__cancel_arg	/usr/include/pthread.h	/^  void *__cancel_arg;$/;"	m	class:__pthread_cleanup_class	typeref:typename:void *	access:private
__cancel_arg	/usr/include/pthread.h	/^  void *__cancel_arg;$/;"	m	struct:__pthread_cleanup_frame	typeref:typename:void *	access:public
__cancel_jmp_buf	/usr/include/pthread.h	/^    __jmp_buf __cancel_jmp_buf;$/;"	m	struct:__anon4eb2adee0b08::__anon4eb2adee0c08	typeref:typename:__jmp_buf	access:public
__cancel_jmp_buf	/usr/include/pthread.h	/^  } __cancel_jmp_buf[1];$/;"	m	struct:__anon4eb2adee0b08	typeref:struct:__anon4eb2adee0b08::__anon4eb2adee0c08[1]	access:public
__cancel_routine	/usr/include/pthread.h	/^  void (*__cancel_routine) (void *);$/;"	m	class:__pthread_cleanup_class	typeref:typename:void (*)(void *)	access:private
__cancel_routine	/usr/include/pthread.h	/^  void (*__cancel_routine) (void *);$/;"	m	struct:__pthread_cleanup_frame	typeref:typename:void (*)(void *)	access:public
__cancel_type	/usr/include/pthread.h	/^  int __cancel_type;$/;"	m	class:__pthread_cleanup_class	typeref:typename:int	access:private
__cancel_type	/usr/include/pthread.h	/^  int __cancel_type;$/;"	m	struct:__pthread_cleanup_frame	typeref:typename:int	access:public
__canceltype	/usr/include/pthread.h	/^  int __canceltype;                       \/* Saved cancellation type. *\/$/;"	m	struct:_pthread_cleanup_buffer	typeref:typename:int	access:public
__cat	/usr/include/c++/10/bits/iterator_concepts.h	/^	struct __cat$/;"	s	struct:std::__iterator_traits	access:private
__cat	/usr/include/c++/10/bits/iterator_concepts.h	/^	struct __cat<_Iter>$/;"	s	struct:std::__iterator_traits	access:private
__catch	/usr/include/c++/10/bits/exception_defines.h	/^# define __catch(/;"	d	signature:(X)
__cfloat128	/usr/include/x86_64-linux-gnu/bits/floatn.h	/^typedef _Complex float __cfloat128 __attribute__ ((__mode__ (__TC__)));$/;"	t	typeref:typename:_Complex float
__cfloat16	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^typedef _Complex float __cfloat16 __attribute__ ((__mode__ (__HC__)));$/;"	t	typeref:typename:_Complex float
__char_traits_cmp_cat	/usr/include/c++/10/bits/char_traits.h	/^      __char_traits_cmp_cat(int __cmp) noexcept$/;"	f	namespace:std::__detail	typeref:typename:auto	signature:(int __cmp)
__check_facet	/usr/include/c++/10/bits/basic_ios.h	/^    __check_facet(const _Facet* __f)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION const _Facet &	signature:(const _Facet * __f)
__clamp_iter_cat	/usr/include/c++/10/bits/stl_iterator.h	/^      using __clamp_iter_cat$/;"	t	namespace:std::__detail	typeref:typename:conditional_t<derived_from<_Cat,_Limit>,_Limit,_Otherwise>
__cleanup_fct_attribute	/usr/include/pthread.h	/^# define __cleanup_fct_attribute$/;"	d
__cleanup_fct_attribute	/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^# define __cleanup_fct_attribute /;"	d
__clock_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __CLOCK_T_TYPE __clock_t;	\/* Type of CPU usage counts.  *\/$/;"	v	typeref:typename:__STD_TYPE __CLOCK_T_TYPE
__clock_t_defined	/usr/include/x86_64-linux-gnu/bits/types/clock_t.h	/^#define __clock_t_defined /;"	d
__clockid_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __CLOCKID_T_TYPE __clockid_t;$/;"	v	typeref:typename:__STD_TYPE __CLOCKID_T_TYPE
__clockid_t_defined	/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h	/^#define __clockid_t_defined /;"	d
__cnd2	/usr/include/c++/10/bits/stl_algobase.h	/^	__cnd2(_II __first, _II __last)$/;"	f	struct:std::__lc_rai	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_II __first,_II __last)
__cnd2	/usr/include/c++/10/bits/stl_algobase.h	/^	__cnd2(_RAI, _RAI)$/;"	f	struct:std::__lc_rai	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_RAI,_RAI)
__compar_d_fn_t	/usr/include/stdlib.h	/^typedef int (*__compar_d_fn_t) (const void *, const void *, void *);$/;"	t	typeref:typename:int (*)(const void *,const void *,void *)
__compar_fn_t	/usr/include/stdlib.h	/^typedef int (*__compar_fn_t) (const void *, const void *);$/;"	t	typeref:typename:int (*)(const void *,const void *)
__cond_value_type	/usr/include/c++/10/bits/iterator_concepts.h	/^      struct __cond_value_type<_Tp>$/;"	s	namespace:std::__detail
__cond_value_type	/usr/include/c++/10/bits/iterator_concepts.h	/^    template<typename> struct __cond_value_type { };$/;"	s	namespace:std::__detail
__conditional_type	/usr/include/c++/10/ext/type_traits.h	/^    struct __conditional_type$/;"	s	namespace:__gnu_cxx
__conditional_type	/usr/include/c++/10/ext/type_traits.h	/^    struct __conditional_type<false, _Iftrue, _Iffalse>$/;"	s	namespace:__gnu_cxx
__const_iterator	/usr/include/c++/10/bits/basic_string.h	/^      typedef iterator __const_iterator;$/;"	t	class:std::basic_string	typeref:typename:iterator	access:protected
__constant_char_array_p	/usr/include/c++/10/bits/char_traits.h	/^    __constant_char_array_p(const _CharT* __a, size_t __n)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_ALWAYS_INLINE bool	signature:(const _CharT * __a,size_t __n)
__constant_string_p	/usr/include/c++/10/bits/char_traits.h	/^    __constant_string_p(const _CharT* __s)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION _GLIBCXX_ALWAYS_INLINE bool	signature:(const _CharT * __s)
__construct_helper	/usr/include/c++/10/bits/alloc_traits.h	/^	struct __construct_helper$/;"	s	struct:std::allocator_traits	access:private
__convert_from_v	/usr/include/x86_64-linux-gnu/c++/10/bits/c++locale.h	/^  __convert_from_v(const __c_locale& __cloc __attribute__ ((__unused__)),$/;"	f	namespace:std	typeref:typename:int	signature:(const __c_locale & __cloc,char * __out,const int __size,const char * __fmt,...)
__convert_to_v	/usr/include/c++/10/bits/locale_facets.h	/^    __convert_to_v(const char*, _Tp&, ios_base::iostate&,$/;"	p	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION void	signature:(const char *,_Tp &,ios_base::iostate &,const __c_locale &)
__convert_to_v	/usr/include/c++/10/bits/locale_facets.h	/^    __convert_to_v(const char*, double&, ios_base::iostate&,$/;"	p	namespace:std	typeref:typename:void	signature:(const char *,double &,ios_base::iostate &,const __c_locale &)
__convert_to_v	/usr/include/c++/10/bits/locale_facets.h	/^    __convert_to_v(const char*, float&, ios_base::iostate&,$/;"	p	namespace:std	typeref:typename:void	signature:(const char *,float &,ios_base::iostate &,const __c_locale &)
__convert_to_v	/usr/include/c++/10/bits/locale_facets.h	/^    __convert_to_v(const char*, long double&, ios_base::iostate&,$/;"	p	namespace:std	typeref:typename:void	signature:(const char *,long double &,ios_base::iostate &,const __c_locale &)
__converts	/usr/include/c++/10/bits/stl_pair.h	/^	using __converts = typename conditional<__implicit,$/;"	t	function:std::_PCC::_CopyMovePair	typeref:typename:conditional<__implicit,__do_converts,__not_<__do_converts>>::type
__converts	/usr/include/c++/10/bits/stl_pair.h	/^	using __converts = typename conditional<__implicit,$/;"	t	function:std::_PCC::_MoveCopyPair	typeref:typename:conditional<__implicit,__do_converts,__not_<__do_converts>>::type
__cookie_io_functions_t_defined	/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h	/^#define __cookie_io_functions_t_defined /;"	d
__copy_m	/usr/include/c++/10/bits/stl_algobase.h	/^	__copy_m(_II __first, _II __last, _OI __result)$/;"	f	struct:std::__copy_move	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	access:public	signature:(_II __first,_II __last,_OI __result)
__copy_m	/usr/include/c++/10/bits/stl_algobase.h	/^	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)$/;"	f	struct:std::__copy_move	typeref:typename:_GLIBCXX20_CONSTEXPR _Tp *	access:public	signature:(const _Tp * __first,const _Tp * __last,_Tp * __result)
__copy_move	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __copy_move$/;"	s	namespace:std
__copy_move	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __copy_move<_IsMove, true, random_access_iterator_tag>$/;"	s	namespace:std
__copy_move	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __copy_move<false, false, random_access_iterator_tag>$/;"	s	namespace:std
__copy_move	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __copy_move<true, false, _Category>$/;"	s	namespace:std
__copy_move	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __copy_move<true, false, random_access_iterator_tag>$/;"	s	namespace:std
__copy_move_a	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_a(_II __first, _II __last, _OI __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	signature:(_II __first,_II __last,_OI __result)
__copy_move_a	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_a(_II, _II,$/;"	p	namespace:std	typeref:typename:__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat>	signature:(_II,_II,const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> &)
__copy_move_a	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,$/;"	p	namespace:std	typeref:typename:_OI	signature:(const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> &,const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> &,_OI)
__copy_move_a1	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,$/;"	p	namespace:std	typeref:typename:_GLIBCXX_STD_C::_Deque_iterator<_OTp,_OTp &,_OTp * >	signature:(_GLIBCXX_STD_C::_Deque_iterator<_ITp,_IRef,_IPtr>,_GLIBCXX_STD_C::_Deque_iterator<_ITp,_IRef,_IPtr>,_GLIBCXX_STD_C::_Deque_iterator<_OTp,_OTp &,_OTp * >)
__copy_move_a1	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,$/;"	p	namespace:std	typeref:typename:_GLIBCXX_END_NAMESPACE_CONTAINER _OI	signature:(_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Ref,_Ptr>,_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Ref,_Ptr>,_OI)
__copy_move_a1	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_a1(_II __first, _II __last, _OI __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	signature:(_II __first,_II __last,_OI __result)
__copy_move_a1	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_a1(_II, _II, _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);$/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_random_access_iter<_II>::__value,_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Tp &,_Tp * >>::__type	signature:(_II,_II,_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Tp &,_Tp * >)
__copy_move_a2	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_a2(_CharT*, _CharT*,$/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,ostreambuf_iterator<_CharT,char_traits<_CharT>>>::__type	signature:(_CharT *,_CharT *,ostreambuf_iterator<_CharT,char_traits<_CharT>>)
__copy_move_a2	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_a2(_II __first, _II __last, _OI __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	signature:(_II __first,_II __last,_OI __result)
__copy_move_a2	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_a2(const _CharT*, const _CharT*,$/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,ostreambuf_iterator<_CharT,char_traits<_CharT>>>::__type	signature:(const _CharT *,const _CharT *,ostreambuf_iterator<_CharT,char_traits<_CharT>>)
__copy_move_a2	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,$/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,_CharT * >::__type	signature:(istreambuf_iterator<_CharT,char_traits<_CharT>>,istreambuf_iterator<_CharT,char_traits<_CharT>>,_CharT *)
__copy_move_a2	/usr/include/c++/10/bits/streambuf_iterator.h	/^    __copy_move_a2(_CharT* __first, _CharT* __last,$/;"	f	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,ostreambuf_iterator<_CharT>>::__type	signature:(_CharT * __first,_CharT * __last,ostreambuf_iterator<_CharT> __result)
__copy_move_a2	/usr/include/c++/10/bits/streambuf_iterator.h	/^    __copy_move_a2(const _CharT* __first, const _CharT* __last,$/;"	f	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,ostreambuf_iterator<_CharT>>::__type	signature:(const _CharT * __first,const _CharT * __last,ostreambuf_iterator<_CharT> __result)
__copy_move_a2	/usr/include/c++/10/bits/streambuf_iterator.h	/^    __copy_move_a2(istreambuf_iterator<_CharT> __first,$/;"	f	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,_CharT * >::__type	signature:(istreambuf_iterator<_CharT> __first,istreambuf_iterator<_CharT> __last,_CharT * __result)
__copy_move_b	/usr/include/c++/10/bits/stl_algobase.h	/^	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	struct:std::__copy_move_backward	typeref:typename:_GLIBCXX20_CONSTEXPR _BI2	access:public	signature:(_BI1 __first,_BI1 __last,_BI2 __result)
__copy_move_b	/usr/include/c++/10/bits/stl_algobase.h	/^	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)$/;"	f	struct:std::__copy_move_backward	typeref:typename:_GLIBCXX20_CONSTEXPR _Tp *	access:public	signature:(const _Tp * __first,const _Tp * __last,_Tp * __result)
__copy_move_backward	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __copy_move_backward$/;"	s	namespace:std
__copy_move_backward	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>$/;"	s	namespace:std
__copy_move_backward	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __copy_move_backward<false, false, random_access_iterator_tag>$/;"	s	namespace:std
__copy_move_backward	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __copy_move_backward<true, false, _Category>$/;"	s	namespace:std
__copy_move_backward	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __copy_move_backward<true, false, random_access_iterator_tag>$/;"	s	namespace:std
__copy_move_backward_a	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_backward_a($/;"	p	namespace:std	typeref:typename:_OI	signature:(const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> &,const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> &,_OI)
__copy_move_backward_a	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_backward_a(_II __first, _II __last, _OI __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	signature:(_II __first,_II __last,_OI __result)
__copy_move_backward_a	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_backward_a(_II, _II,$/;"	p	namespace:std	typeref:typename:__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat>	signature:(_II,_II,const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> &)
__copy_move_backward_a1	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_backward_a1($/;"	p	namespace:std	typeref:typename:_GLIBCXX_STD_C::_Deque_iterator<_OTp,_OTp &,_OTp * >	signature:(_GLIBCXX_STD_C::_Deque_iterator<_ITp,_IRef,_IPtr>,_GLIBCXX_STD_C::_Deque_iterator<_ITp,_IRef,_IPtr>,_GLIBCXX_STD_C::_Deque_iterator<_OTp,_OTp &,_OTp * >)
__copy_move_backward_a1	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _BI2	signature:(_BI1 __first,_BI1 __last,_BI2 __result)
__copy_move_backward_a1	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_backward_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,$/;"	p	namespace:std	typeref:typename:_OI	signature:(_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Ref,_Ptr>,_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Ref,_Ptr>,_OI)
__copy_move_backward_a1	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_backward_a1(_II, _II,$/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_random_access_iter<_II>::__value,_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Tp &,_Tp * >>::__type	signature:(_II,_II,_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Tp &,_Tp * >)
__copy_move_backward_a2	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _BI2	signature:(_BI1 __first,_BI1 __last,_BI2 __result)
__copy_n_a	/usr/include/c++/10/bits/streambuf_iterator.h	/^    __copy_n_a(istreambuf_iterator<_CharT> __it, _Size __n, _CharT* __result)$/;"	f	namespace:std	typeref:typename:__enable_if_t<__is_char<_CharT>::__value,_CharT * >	signature:(istreambuf_iterator<_CharT> __it,_Size __n,_CharT * __result)
__count	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  unsigned int __count;$/;"	m	struct:__pthread_mutex_s	typeref:typename:unsigned int	access:public
__count	/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h	/^  int __count;$/;"	m	struct:__anon9c479bfe0108	typeref:typename:int	access:public
__count_if	/usr/include/c++/10/bits/stl_algobase.h	/^    __count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR typename iterator_traits<_InputIterator>::difference_type	signature:(_InputIterator __first,_InputIterator __last,_Predicate __pred)
__cpp_lib_addressof_constexpr	/usr/include/c++/10/bits/move.h	/^# define __cpp_lib_addressof_constexpr /;"	d
__cpp_lib_allocator_traits_is_always_equal	/usr/include/c++/10/bits/alloc_traits.h	/^#define __cpp_lib_allocator_traits_is_always_equal /;"	d
__cpp_lib_array_constexpr	/usr/include/c++/10/bits/stl_iterator.h	/^# define __cpp_lib_array_constexpr /;"	d
__cpp_lib_char8_t	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define __cpp_lib_char8_t /;"	d
__cpp_lib_constexpr_char_traits	/usr/include/c++/10/bits/char_traits.h	/^# define __cpp_lib_constexpr_char_traits /;"	d
__cpp_lib_constexpr_dynamic_alloc	/usr/include/c++/10/bits/alloc_traits.h	/^# define __cpp_lib_constexpr_dynamic_alloc /;"	d
__cpp_lib_constexpr_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^# define __cpp_lib_constexpr_iterator /;"	d
__cpp_lib_constexpr_memory	/usr/include/c++/10/bits/ptr_traits.h	/^#define __cpp_lib_constexpr_memory /;"	d
__cpp_lib_constexpr_utility	/usr/include/c++/10/bits/stl_pair.h	/^# define __cpp_lib_constexpr_utility /;"	d
__cpp_lib_incomplete_container_elements	/usr/include/c++/10/bits/allocator.h	/^#define __cpp_lib_incomplete_container_elements /;"	d
__cpp_lib_make_reverse_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^#  define __cpp_lib_make_reverse_iterator /;"	d
__cpp_lib_nonmember_container_access	/usr/include/c++/10/bits/range_access.h	/^#define __cpp_lib_nonmember_container_access /;"	d
__cpp_lib_ranges	/usr/include/c++/10/bits/range_cmp.h	/^#define __cpp_lib_ranges /;"	d
__cpp_lib_robust_nonmodifying_seq_ops	/usr/include/c++/10/bits/stl_algobase.h	/^#define __cpp_lib_robust_nonmodifying_seq_ops /;"	d
__cpp_lib_ssize	/usr/include/c++/10/bits/range_access.h	/^#define __cpp_lib_ssize /;"	d
__cpp_lib_string_udls	/usr/include/c++/10/bits/basic_string.h	/^#define __cpp_lib_string_udls /;"	d
__cpp_lib_to_address	/usr/include/c++/10/bits/ptr_traits.h	/^#define __cpp_lib_to_address /;"	d
__cpp_lib_transparent_operators	/usr/include/c++/10/bits/stl_function.h	/^#define __cpp_lib_transparent_operators /;"	d
__cpu_mask	/usr/include/x86_64-linux-gnu/bits/cpu-set.h	/^typedef __CPU_MASK_TYPE __cpu_mask;$/;"	t	typeref:typename:__CPU_MASK_TYPE
__ctype_abstract_base	/usr/include/c++/10/bits/locale_facets.h	/^      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }$/;"	f	class:std::__ctype_abstract_base	access:protected	signature:(size_t __refs=0)
__ctype_abstract_base	/usr/include/c++/10/bits/locale_facets.h	/^    class __ctype_abstract_base : public locale::facet, public ctype_base$/;"	c	namespace:std	inherits:locale::facet,ctype_base
__ctype_b	/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h	/^  const unsigned short int *__ctype_b;$/;"	m	struct:__locale_struct	typeref:typename:const unsigned short int *	access:public
__ctype_b_loc	/usr/include/ctype.h	/^extern const unsigned short int **__ctype_b_loc (void)$/;"	p	typeref:typename:const unsigned short int **	signature:(void)
__ctype_get_mb_cur_max	/usr/include/stdlib.h	/^extern size_t __ctype_get_mb_cur_max (void) __THROW __wur;$/;"	p	typeref:typename:size_t	signature:(void)
__ctype_tolower	/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h	/^  const int *__ctype_tolower;$/;"	m	struct:__locale_struct	typeref:typename:const int *	access:public
__ctype_tolower_loc	/usr/include/ctype.h	/^extern const __int32_t **__ctype_tolower_loc (void)$/;"	p	typeref:typename:const __int32_t **	signature:(void)
__ctype_toupper	/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h	/^  const int *__ctype_toupper;$/;"	m	struct:__locale_struct	typeref:typename:const int *	access:public
__ctype_toupper_loc	/usr/include/ctype.h	/^extern const __int32_t **__ctype_toupper_loc (void)$/;"	p	typeref:typename:const __int32_t **	signature:(void)
__ctype_type	/usr/include/c++/10/bits/basic_ios.h	/^      typedef ctype<_CharT>                          __ctype_type;$/;"	t	class:std::basic_ios	typeref:typename:ctype<_CharT>	access:public
__cur_writer	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  int __cur_writer;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:int	access:public
__cust	/usr/include/c++/10/bits/iterator_concepts.h	/^    inline namespace __cust$/;"	n	namespace:std::ranges
__cust	/usr/include/c++/10/bits/iterator_concepts.h	/^  inline namespace __cust$/;"	n	namespace:std::ranges
__cust	/usr/include/c++/10/bits/range_access.h	/^  inline namespace __cust$/;"	n	namespace:std::ranges
__cust_access	/usr/include/c++/10/bits/range_access.h	/^  namespace __cust_access$/;"	n	namespace:std::ranges
__cust_imove	/usr/include/c++/10/bits/iterator_concepts.h	/^    namespace __cust_imove$/;"	n	namespace:std::ranges
__cust_iswap	/usr/include/c++/10/bits/iterator_concepts.h	/^  namespace __cust_iswap$/;"	n	namespace:std::ranges
__cv_pointer	/usr/include/c++/10/bits/alloc_traits.h	/^      using __cv_pointer = typename _Tp::const_void_pointer;$/;"	t	struct:std::__allocator_traits_base	typeref:typename:_Tp::const_void_pointer	access:protected
__cxa_allocate_exception	/usr/include/c++/10/bits/cxxabi_init_exception.h	/^      __cxa_allocate_exception(size_t) _GLIBCXX_NOTHROW;$/;"	p	namespace:__cxxabiv1	typeref:typename:void *	signature:(size_t)
__cxa_free_exception	/usr/include/c++/10/bits/cxxabi_init_exception.h	/^      __cxa_free_exception(void*) _GLIBCXX_NOTHROW;$/;"	p	namespace:__cxxabiv1	typeref:typename:void	signature:(void *)
__cxa_init_primary_exception	/usr/include/c++/10/bits/cxxabi_init_exception.h	/^      __cxa_init_primary_exception(void *object, std::type_info *tinfo,$/;"	p	namespace:__cxxabiv1	typeref:typename:__cxa_refcounted_exception *	signature:(void * object,std::type_info * tinfo,void (_GLIBCXX_CDTOR_CALLABI * dest)(void *))
__cxx11	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }$/;"	n	namespace:__gnu_cxx
__cxx11	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }$/;"	n	namespace:std
__cxx11	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }$/;"	n	namespace:std::__cxx1998
__cxx1998	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^  namespace __cxx1998$/;"	n	namespace:std
__cxxabiv1	/usr/include/c++/10/bits/cxxabi_forced.h	/^namespace __cxxabiv1$/;"	n
__cxxabiv1	/usr/include/c++/10/bits/cxxabi_init_exception.h	/^namespace __cxxabiv1$/;"	n
__cxxabiv1::__cxa_allocate_exception	/usr/include/c++/10/bits/cxxabi_init_exception.h	/^      __cxa_allocate_exception(size_t) _GLIBCXX_NOTHROW;$/;"	p	namespace:__cxxabiv1	typeref:typename:void *	signature:(size_t)
__cxxabiv1::__cxa_free_exception	/usr/include/c++/10/bits/cxxabi_init_exception.h	/^      __cxa_free_exception(void*) _GLIBCXX_NOTHROW;$/;"	p	namespace:__cxxabiv1	typeref:typename:void	signature:(void *)
__cxxabiv1::__cxa_init_primary_exception	/usr/include/c++/10/bits/cxxabi_init_exception.h	/^      __cxa_init_primary_exception(void *object, std::type_info *tinfo,$/;"	p	namespace:__cxxabiv1	typeref:typename:__cxa_refcounted_exception *	signature:(void * object,std::type_info * tinfo,void (_GLIBCXX_CDTOR_CALLABI * dest)(void *))
__cxxabiv1::__forced_unwind	/usr/include/c++/10/bits/cxxabi_forced.h	/^  class __forced_unwind$/;"	c	namespace:__cxxabiv1
__cxxabiv1::__forced_unwind::__pure_dummy	/usr/include/c++/10/bits/cxxabi_forced.h	/^    virtual void __pure_dummy() = 0; $/;"	p	class:__cxxabiv1::__forced_unwind	typeref:typename:void	access:private	signature:()
__cxxabiv1::__forced_unwind::~__forced_unwind	/usr/include/c++/10/bits/cxxabi_forced.h	/^    virtual ~__forced_unwind() throw();$/;"	p	class:__cxxabiv1::__forced_unwind	access:private	signature:()
__daddr_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __DADDR_T_TYPE __daddr_t;	\/* The type of a disk address.  *\/$/;"	v	typeref:typename:__STD_TYPE __DADDR_T_TYPE
__daddr_t_defined	/usr/include/x86_64-linux-gnu/sys/types.h	/^#  define __daddr_t_defined$/;"	d
__data	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  struct __pthread_cond_s __data;$/;"	m	union:__anone9c15396040a	typeref:struct:__pthread_cond_s	access:public
__data	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  struct __pthread_mutex_s __data;$/;"	m	union:__anone9c15396030a	typeref:struct:__pthread_mutex_s	access:public
__data	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  struct __pthread_rwlock_arch_t __data;$/;"	m	union:__anone9c15396050a	typeref:struct:__pthread_rwlock_arch_t	access:public
__debug	/usr/include/c++/10/debug/debug.h	/^  namespace __debug { } $/;"	n	namespace:std
__debug	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^  inline namespace __debug { }$/;"	n	namespace:std
__decay_copy	/usr/include/c++/10/bits/iterator_concepts.h	/^      __decay_copy(_Tp&& __t)$/;"	f	namespace:std::__detail	typeref:typename:decay_t<_Tp>	signature:(_Tp && __t)
__defer	/usr/include/pthread.h	/^  void __defer () { pthread_setcanceltype (PTHREAD_CANCEL_DEFERRED,$/;"	f	class:__pthread_cleanup_class	typeref:typename:void	access:public	signature:()
__dest_thunk	/usr/include/c++/10/bits/exception_ptr.h	/^      __dest_thunk(void* __x)$/;"	f	namespace:std::__exception_ptr	typeref:typename:void	signature:(void * __x)
__destroy	/usr/include/c++/10/bits/stl_construct.h	/^	__destroy(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	struct:std::_Destroy_aux	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(_ForwardIterator __first,_ForwardIterator __last)
__destroy	/usr/include/c++/10/bits/stl_construct.h	/^        __destroy(_ForwardIterator, _ForwardIterator) { }$/;"	f	struct:std::_Destroy_aux	typeref:typename:void	access:public	signature:(_ForwardIterator,_ForwardIterator)
__destroy_n	/usr/include/c++/10/bits/stl_construct.h	/^	__destroy_n(_ForwardIterator __first, _Size __count)$/;"	f	struct:std::_Destroy_n_aux	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	access:public	signature:(_ForwardIterator __first,_Size __count)
__destroy_n	/usr/include/c++/10/bits/stl_construct.h	/^        __destroy_n(_ForwardIterator __first, _Size __count)$/;"	f	struct:std::_Destroy_n_aux	typeref:typename:_ForwardIterator	access:public	signature:(_ForwardIterator __first,_Size __count)
__detail	/usr/include/c++/10/bits/basic_string.h	/^  namespace __detail::__variant$/;"	n	namespace:std
__detail	/usr/include/c++/10/bits/char_traits.h	/^  namespace __detail$/;"	n	namespace:std
__detail	/usr/include/c++/10/bits/charconv.h	/^namespace __detail$/;"	n	namespace:std
__detail	/usr/include/c++/10/bits/iterator_concepts.h	/^  namespace __detail { using ranges::__detail::__is_signed_integer_like; }$/;"	n	namespace:std
__detail	/usr/include/c++/10/bits/iterator_concepts.h	/^  namespace __detail$/;"	n	namespace:std
__detail	/usr/include/c++/10/bits/iterator_concepts.h	/^  namespace ranges::__detail$/;"	n	namespace:std::ranges
__detail	/usr/include/c++/10/bits/range_access.h	/^  namespace __detail$/;"	n	namespace:std::ranges
__detail	/usr/include/c++/10/bits/range_cmp.h	/^  namespace __detail$/;"	n	namespace:std::ranges
__detail	/usr/include/c++/10/bits/stl_iterator.h	/^  namespace __detail$/;"	n	namespace:std
__dev_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __DEV_T_TYPE __dev_t;	\/* Type of device numbers.  *\/$/;"	v	typeref:typename:__STD_TYPE __DEV_T_TYPE
__dev_t_defined	/usr/include/x86_64-linux-gnu/sys/types.h	/^# define __dev_t_defined$/;"	d
__diff	/usr/include/c++/10/bits/iterator_concepts.h	/^	struct __diff$/;"	s	struct:std::__iterator_traits	access:private
__diff	/usr/include/c++/10/bits/iterator_concepts.h	/^	struct __diff<_Iter>$/;"	s	struct:std::__iterator_traits	access:private
__diff_type	/usr/include/c++/10/bits/range_access.h	/^	  using __diff_type = iter_difference_t<__iter_type>;$/;"	t	function:std::ranges::__cust_access::_SSize::operator ()	typeref:typename:iter_difference_t<__iter_type>
__difference_type	/usr/include/c++/10/bits/ptr_traits.h	/^	using __difference_type = typename _Tp::difference_type;$/;"	t	struct:std::pointer_traits	typeref:typename:_Tp::difference_type	access:private
__digits	/usr/include/c++/10/ext/numeric_traits.h	/^      static const int __digits$/;"	m	struct:__gnu_cxx::__numeric_traits_integer	typeref:typename:const int	access:public
__digits	/usr/include/c++/10/ext/numeric_traits.h	/^    const int __numeric_traits_integer<_Value>::__digits;$/;"	m	class:__gnu_cxx::__numeric_traits_integer<_Value>	typeref:typename:const int
__digits10	/usr/include/c++/10/ext/numeric_traits.h	/^      static const int __digits10 = __glibcxx_digits10(_Value);$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	typeref:typename:const int	access:public
__digits10	/usr/include/c++/10/ext/numeric_traits.h	/^    const int __numeric_traits_floating<_Value>::__digits10;$/;"	m	class:__gnu_cxx::__numeric_traits_floating<_Value>	typeref:typename:const int
__distance	/usr/include/c++/10/bits/stl_iterator_base_funcs.h	/^    __distance(_GLIBCXX_STD_C::_List_const_iterator<_Tp>,$/;"	p	namespace:std	typeref:typename:ptrdiff_t	signature:(_GLIBCXX_STD_C::_List_const_iterator<_Tp>,_GLIBCXX_STD_C::_List_const_iterator<_Tp>,input_iterator_tag)
__distance	/usr/include/c++/10/bits/stl_iterator_base_funcs.h	/^    __distance(_GLIBCXX_STD_C::_List_iterator<_Tp>,$/;"	p	namespace:std	typeref:typename:ptrdiff_t	signature:(_GLIBCXX_STD_C::_List_iterator<_Tp>,_GLIBCXX_STD_C::_List_iterator<_Tp>,input_iterator_tag)
__distance	/usr/include/c++/10/bits/stl_iterator_base_funcs.h	/^    __distance(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_END_NAMESPACE_CONTAINER _GLIBCXX14_CONSTEXPR typename iterator_traits<_InputIterator>::difference_type	signature:(_InputIterator __first,_InputIterator __last,input_iterator_tag)
__distance	/usr/include/c++/10/bits/stl_iterator_base_funcs.h	/^    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR typename iterator_traits<_RandomAccessIterator>::difference_type	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,random_access_iterator_tag)
__do_alloc_on_copy	/usr/include/c++/10/bits/alloc_traits.h	/^    __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)$/;"	f	namespace:std	typeref:typename:void	signature:(_Alloc & __one,const _Alloc & __two,true_type)
__do_alloc_on_copy	/usr/include/c++/10/bits/alloc_traits.h	/^    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)$/;"	f	namespace:std	typeref:typename:void	signature:(_Alloc &,const _Alloc &,false_type)
__do_alloc_on_move	/usr/include/c++/10/bits/alloc_traits.h	/^    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)$/;"	f	namespace:std	typeref:typename:void	signature:(_Alloc & __one,_Alloc & __two,true_type)
__do_alloc_on_move	/usr/include/c++/10/bits/alloc_traits.h	/^    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)$/;"	f	namespace:std	typeref:typename:void	signature:(_Alloc &,_Alloc &,false_type)
__do_alloc_on_swap	/usr/include/c++/10/bits/alloc_traits.h	/^    inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)$/;"	f	namespace:std	typeref:typename:void	signature:(_Alloc & __one,_Alloc & __two,true_type)
__do_alloc_on_swap	/usr/include/c++/10/bits/alloc_traits.h	/^    inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)$/;"	f	namespace:std	typeref:typename:void	signature:(_Alloc &,_Alloc &,false_type)
__do_converts	/usr/include/c++/10/bits/stl_pair.h	/^	using __do_converts = __and_<is_convertible<_U1&&, _T1>,$/;"	t	function:std::_PCC::_MoveCopyPair	typeref:typename:__and_<is_convertible<_U1 &&,_T1>,is_convertible<const _U2 &,_T2>>
__do_converts	/usr/include/c++/10/bits/stl_pair.h	/^	using __do_converts = __and_<is_convertible<const _U1&, _T1>,$/;"	t	function:std::_PCC::_CopyMovePair	typeref:typename:__and_<is_convertible<const _U1 &,_T1>,is_convertible<_U2 &&,_T2>>
__do_get	/usr/include/c++/10/bits/locale_facets.h	/^      __do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,$/;"	p	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,double &) const
__do_it	/usr/include/pthread.h	/^  int __do_it;$/;"	m	class:__pthread_cleanup_class	typeref:typename:int	access:private
__do_it	/usr/include/pthread.h	/^  int __do_it;$/;"	m	struct:__pthread_cleanup_frame	typeref:typename:int	access:public
__do_put	/usr/include/c++/10/bits/locale_facets.h	/^      __do_put(iter_type, ios_base&, char_type, double) const;$/;"	p	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type,double) const
__ds_type1	/usr/include/c++/10/bits/stl_pair.h	/^      typedef typename __decay_and_strip<_T1>::__type __ds_type1;$/;"	t	function:std::make_pair	typeref:typename:__decay_and_strip<_T1>::__type
__ds_type2	/usr/include/c++/10/bits/stl_pair.h	/^      typedef typename __decay_and_strip<_T2>::__type __ds_type2;$/;"	t	function:std::make_pair	typeref:typename:__decay_and_strip<_T2>::__type
__eelision	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^      short __eelision;$/;"	m	struct:__pthread_mutex_s::__anonf11409f0010a::__anonf11409f00208	typeref:typename:short	access:public
__element_type	/usr/include/c++/10/bits/ptr_traits.h	/^	using __element_type = typename _Tp::element_type;$/;"	t	struct:std::pointer_traits	typeref:typename:_Tp::element_type	access:private
__elision	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  short __elision;$/;"	m	struct:__pthread_mutex_s	typeref:typename:short	access:public
__elision	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^# define __elision /;"	d
__elision_data	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^    } __elision_data;$/;"	m	union:__pthread_mutex_s::__anonf11409f0010a	typeref:struct:__pthread_mutex_s::__anonf11409f0010a::__anonf11409f00208	access:public
__enable_hash_call	/usr/include/c++/10/bits/functional_hash.h	/^      static constexpr bool __enable_hash_call = false;$/;"	m	struct:std::__poison_hash	typeref:typename:bool	access:public
__enable_hash_call	/usr/include/c++/10/bits/functional_hash.h	/^      static constexpr bool __enable_hash_call = true;$/;"	m	struct:std::__poison_hash	typeref:typename:bool	access:public
__enable_if	/usr/include/c++/10/ext/type_traits.h	/^    struct __enable_if $/;"	s	namespace:__gnu_cxx
__enable_if	/usr/include/c++/10/ext/type_traits.h	/^    struct __enable_if<true, _Tp>$/;"	s	namespace:__gnu_cxx
__enable_if_not_native_iterator	/usr/include/c++/10/bits/basic_string.h	/^	struct __enable_if_not_native_iterator$/;"	s	class:std::basic_string	access:private
__enable_if_not_native_iterator	/usr/include/c++/10/bits/basic_string.h	/^	struct __enable_if_not_native_iterator<_Tp, false> { };$/;"	s	class:std::basic_string	access:private
__equal	/usr/include/c++/10/bits/alloc_traits.h	/^      using __equal = typename _Tp::is_always_equal;$/;"	t	struct:std::__allocator_traits_base	typeref:typename:_Tp::is_always_equal	access:protected
__equal	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __equal$/;"	s	namespace:std
__equal	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __equal<true>$/;"	s	namespace:std
__equal4	/usr/include/c++/10/bits/stl_algobase.h	/^    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2)
__equal4	/usr/include/c++/10/bits/stl_algobase.h	/^    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2,_BinaryPredicate __binary_pred)
__equal_aux	/usr/include/c++/10/bits/stl_algobase.h	/^    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2)
__equal_aux	/usr/include/c++/10/bits/stl_algobase.h	/^    __equal_aux(_II1, _II1,$/;"	p	namespace:std	typeref:typename:bool	signature:(_II1,_II1,const::__gnu_debug::_Safe_iterator<_II2,_Seq2,_Cat2> &)
__equal_aux	/usr/include/c++/10/bits/stl_algobase.h	/^    __equal_aux(const ::__gnu_debug::_Safe_iterator<_II1, _Seq1, _Cat1>&,$/;"	p	namespace:std	typeref:typename:bool	signature:(const::__gnu_debug::_Safe_iterator<_II1,_Seq1,_Cat1> &,const::__gnu_debug::_Safe_iterator<_II1,_Seq1,_Cat1> &,_II2)
__equal_aux	/usr/include/c++/10/bits/stl_algobase.h	/^    __equal_aux(const ::__gnu_debug::_Safe_iterator<_II1, _Seq1, _Cat1>&,$/;"	p	namespace:std	typeref:typename:bool	signature:(const::__gnu_debug::_Safe_iterator<_II1,_Seq1,_Cat1> &,const::__gnu_debug::_Safe_iterator<_II1,_Seq1,_Cat1> &,const::__gnu_debug::_Safe_iterator<_II2,_Seq2,_Cat2> &)
__equal_aux1	/usr/include/c++/10/bits/stl_algobase.h	/^    __equal_aux1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,$/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_random_access_iter<_II>::__value,bool>::__type	signature:(_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Ref,_Ptr>,_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Ref,_Ptr>,_II)
__equal_aux1	/usr/include/c++/10/bits/stl_algobase.h	/^    __equal_aux1(_GLIBCXX_STD_C::_Deque_iterator<_Tp1, _Ref1, _Ptr1>,$/;"	p	namespace:std	typeref:typename:bool	signature:(_GLIBCXX_STD_C::_Deque_iterator<_Tp1,_Ref1,_Ptr1>,_GLIBCXX_STD_C::_Deque_iterator<_Tp1,_Ref1,_Ptr1>,_GLIBCXX_STD_C::_Deque_iterator<_Tp2,_Ref2,_Ptr2>)
__equal_aux1	/usr/include/c++/10/bits/stl_algobase.h	/^    __equal_aux1(_II, _II,$/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_random_access_iter<_II>::__value,bool>::__type	signature:(_II,_II,_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Ref,_Ptr>)
__equal_aux1	/usr/include/c++/10/bits/stl_algobase.h	/^    __equal_aux1(_II1 __first1, _II1 __last1, _II2 __first2)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2)
__errno_location	/usr/include/errno.h	/^extern int *__errno_location (void) __THROW __attribute_const__;$/;"	p	typeref:typename:__BEGIN_DECLS int *	signature:(void)
__error_t_defined	/usr/include/x86_64-linux-gnu/bits/types/error_t.h	/^# define __error_t_defined /;"	d
__errordecl	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __errordecl(/;"	d	signature:(name,msg)
__espins	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^      short __espins;$/;"	m	struct:__pthread_mutex_s::__anonf11409f0010a::__anonf11409f00208	typeref:typename:short	access:public
__exception_ptr	/usr/include/c++/10/bits/exception_ptr.h	/^  namespace __exception_ptr$/;"	n	namespace:std
__exchange	/usr/include/c++/10/bits/move.h	/^    __exchange(_Tp& __obj, _Up&& __new_val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _Tp	signature:(_Tp & __obj,_Up && __new_val)
__exchange_and_add	/usr/include/c++/10/ext/atomicity.h	/^  __exchange_and_add(volatile _Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION _Atomic_word	signature:(volatile _Atomic_word * __mem,int __val)
__exchange_and_add_dispatch	/usr/include/c++/10/ext/atomicity.h	/^  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx	typeref:typename:_Atomic_word	signature:(_Atomic_word * __mem,int __val)
__exchange_and_add_single	/usr/include/c++/10/ext/atomicity.h	/^  __exchange_and_add_single(_Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx	typeref:typename:_Atomic_word	signature:(_Atomic_word * __mem,int __val)
__exctype	/usr/include/ctype.h	/^#define	__exctype(/;"	d	signature:(name)
__exctype	/usr/include/ctype.h	/^__exctype (_tolower);$/;"	p	signature:(_tolower)
__exctype	/usr/include/ctype.h	/^__exctype (_toupper);$/;"	p	signature:(_toupper)
__exctype	/usr/include/ctype.h	/^__exctype (isalnum);$/;"	p	signature:(isalnum)
__exctype	/usr/include/ctype.h	/^__exctype (isalpha);$/;"	p	signature:(isalpha)
__exctype	/usr/include/ctype.h	/^__exctype (isblank);$/;"	p	signature:(isblank)
__exctype	/usr/include/ctype.h	/^__exctype (iscntrl);$/;"	p	signature:(iscntrl)
__exctype	/usr/include/ctype.h	/^__exctype (isdigit);$/;"	p	signature:(isdigit)
__exctype	/usr/include/ctype.h	/^__exctype (isgraph);$/;"	p	signature:(isgraph)
__exctype	/usr/include/ctype.h	/^__exctype (islower);$/;"	p	signature:(islower)
__exctype	/usr/include/ctype.h	/^__exctype (isprint);$/;"	p	signature:(isprint)
__exctype	/usr/include/ctype.h	/^__exctype (ispunct);$/;"	p	signature:(ispunct)
__exctype	/usr/include/ctype.h	/^__exctype (isspace);$/;"	p	signature:(isspace)
__exctype	/usr/include/ctype.h	/^__exctype (isupper);$/;"	p	signature:(isupper)
__exctype	/usr/include/ctype.h	/^__exctype (isxdigit);$/;"	p	signature:(isxdigit)
__exctype_l	/usr/include/ctype.h	/^# define __exctype_l(/;"	d	signature:(name)
__exctype_l	/usr/include/ctype.h	/^__exctype_l (isalnum_l);$/;"	p	signature:(isalnum_l)
__exctype_l	/usr/include/ctype.h	/^__exctype_l (isalpha_l);$/;"	p	signature:(isalpha_l)
__exctype_l	/usr/include/ctype.h	/^__exctype_l (isblank_l);$/;"	p	signature:(isblank_l)
__exctype_l	/usr/include/ctype.h	/^__exctype_l (iscntrl_l);$/;"	p	signature:(iscntrl_l)
__exctype_l	/usr/include/ctype.h	/^__exctype_l (isdigit_l);$/;"	p	signature:(isdigit_l)
__exctype_l	/usr/include/ctype.h	/^__exctype_l (isgraph_l);$/;"	p	signature:(isgraph_l)
__exctype_l	/usr/include/ctype.h	/^__exctype_l (islower_l);$/;"	p	signature:(islower_l)
__exctype_l	/usr/include/ctype.h	/^__exctype_l (isprint_l);$/;"	p	signature:(isprint_l)
__exctype_l	/usr/include/ctype.h	/^__exctype_l (ispunct_l);$/;"	p	signature:(ispunct_l)
__exctype_l	/usr/include/ctype.h	/^__exctype_l (isspace_l);$/;"	p	signature:(isspace_l)
__exctype_l	/usr/include/ctype.h	/^__exctype_l (isupper_l);$/;"	p	signature:(isupper_l)
__exctype_l	/usr/include/ctype.h	/^__exctype_l (isxdigit_l);$/;"	p	signature:(isxdigit_l)
__extension__	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __extension__	/;"	d
__extern_always_inline	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __extern_always_inline /;"	d
__extern_inline	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __extern_inline /;"	d
__f128	/usr/include/x86_64-linux-gnu/bits/floatn.h	/^#   define __f128(/;"	d	signature:(x)
__f128x	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __f128x(/;"	d	signature:(x)
__f16	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __f16(/;"	d	signature:(x)
__f32	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __f32(/;"	d	signature:(x)
__f32x	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __f32x(/;"	d	signature:(x)
__f64	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#    define __f64(/;"	d	signature:(x)
__f64	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __f64(/;"	d	signature:(x)
__f64x	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#    define __f64x(/;"	d	signature:(x)
__f64x	/usr/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __f64x(/;"	d	signature:(x)
__false_type	/usr/include/c++/10/bits/cpp_type_traits.h	/^  struct __false_type { };$/;"	s	namespace:std
__fd_mask	/usr/include/x86_64-linux-gnu/sys/select.h	/^typedef long int __fd_mask;$/;"	t	typeref:typename:long int
__feof_unlocked_body	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^#define __feof_unlocked_body(/;"	d	signature:(_fp)
__ferror_unlocked_body	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^#define __ferror_unlocked_body(/;"	d	signature:(_fp)
__fill_a	/usr/include/c++/10/bits/stl_algobase.h	/^    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_FIte __first,_FIte __last,const _Tp & __value)
__fill_a	/usr/include/c++/10/bits/stl_algobase.h	/^    __fill_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,$/;"	p	namespace:std	typeref:typename:void	signature:(const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> &,const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> &,const _Tp &)
__fill_a1	/usr/include/c++/10/bits/stl_algobase.h	/^    __fill_a1(::__gnu_cxx::__normal_iterator<_Ite, _Cont> __first,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(::__gnu_cxx::__normal_iterator<_Ite,_Cont> __first,::__gnu_cxx::__normal_iterator<_Ite,_Cont> __last,const _Tp & __value)
__fill_a1	/usr/include/c++/10/bits/stl_algobase.h	/^    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR typename __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value,void>::__type	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __value)
__fill_a1	/usr/include/c++/10/bits/stl_algobase.h	/^    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR typename __gnu_cxx::__enable_if<__is_byte<_Tp>::__value,void>::__type	signature:(_Tp * __first,_Tp * __last,const _Tp & __c)
__fill_a1	/usr/include/c++/10/bits/stl_algobase.h	/^    __fill_a1(const _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>&,$/;"	p	namespace:std	typeref:typename:void	signature:(const _GLIBCXX_STD_C::_Deque_iterator<_Tp,_Tp &,_Tp * > &,const _GLIBCXX_STD_C::_Deque_iterator<_Tp,_Tp &,_Tp * > &,const _VTp &)
__fill_n_a	/usr/include/c++/10/bits/stl_algobase.h	/^    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OutputIterator	signature:(_OutputIterator __first,_Size __n,const _Tp & __value,std::input_iterator_tag)
__fill_n_a	/usr/include/c++/10/bits/stl_algobase.h	/^    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OutputIterator	signature:(_OutputIterator __first,_Size __n,const _Tp & __value,std::output_iterator_tag)
__fill_n_a	/usr/include/c++/10/bits/stl_algobase.h	/^    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OutputIterator	signature:(_OutputIterator __first,_Size __n,const _Tp & __value,std::random_access_iterator_tag)
__fill_n_a1	/usr/include/c++/10/bits/stl_algobase.h	/^    __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR typename __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value,_OutputIterator>::__type	signature:(_OutputIterator __first,_Size __n,const _Tp & __value)
__find_if	/usr/include/c++/10/bits/stl_algobase.h	/^    __find_if(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_END_NAMESPACE_ALGO _GLIBCXX20_CONSTEXPR _InputIterator	signature:(_InputIterator __first,_InputIterator __last,_Predicate __pred,input_iterator_tag)
__find_if	/usr/include/c++/10/bits/stl_algobase.h	/^    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _Iterator	signature:(_Iterator __first,_Iterator __last,_Predicate __pred)
__find_if	/usr/include/c++/10/bits/stl_algobase.h	/^    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _RandomAccessIterator	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Predicate __pred,random_access_iterator_tag)
__flags	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned char __flags;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned char	access:public
__flags	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned int __flags;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned int	access:public
__flexarr	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __flexarr	/;"	d
__forced_unwind	/usr/include/c++/10/bits/cxxabi_forced.h	/^  class __forced_unwind$/;"	c	namespace:__cxxabiv1
__fortify_function	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __fortify_function /;"	d
__fpos64_t	/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h	/^} __fpos64_t;$/;"	t	typeref:struct:_G_fpos64_t
__fpos_t	/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h	/^} __fpos_t;$/;"	t	typeref:struct:_G_fpos_t
__fsblkcnt64_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __FSBLKCNT64_T_TYPE __fsblkcnt64_t;$/;"	v	typeref:typename:__STD_TYPE __FSBLKCNT64_T_TYPE
__fsblkcnt_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __FSBLKCNT_T_TYPE __fsblkcnt_t;$/;"	v	typeref:typename:__STD_TYPE __FSBLKCNT_T_TYPE
__fsblkcnt_t_defined	/usr/include/x86_64-linux-gnu/sys/types.h	/^#  define __fsblkcnt_t_defined$/;"	d
__fsfilcnt64_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __FSFILCNT64_T_TYPE __fsfilcnt64_t;$/;"	v	typeref:typename:__STD_TYPE __FSFILCNT64_T_TYPE
__fsfilcnt_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __FSFILCNT_T_TYPE __fsfilcnt_t;$/;"	v	typeref:typename:__STD_TYPE __FSFILCNT_T_TYPE
__fsfilcnt_t_defined	/usr/include/x86_64-linux-gnu/sys/types.h	/^#  define __fsfilcnt_t_defined$/;"	d
__fsid_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __FSID_T_TYPE __fsid_t;	\/* Type of file system IDs.  *\/$/;"	v	typeref:typename:__STD_TYPE __FSID_T_TYPE
__fsword_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __FSWORD_T_TYPE __fsword_t;$/;"	v	typeref:typename:__STD_TYPE __FSWORD_T_TYPE
__g1_orig_size	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  unsigned int __g1_orig_size;$/;"	m	struct:__pthread_cond_s	typeref:typename:unsigned int	access:public
__g1_start	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^    __extension__ unsigned long long int __g1_start;$/;"	m	union:__pthread_cond_s::__anona7088117030a	typeref:typename:__extension__ unsigned long long int	access:public
__g1_start32	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^    } __g1_start32;$/;"	m	union:__pthread_cond_s::__anona7088117030a	typeref:struct:__pthread_cond_s::__anona7088117030a::__anona70881170408	access:public
__g_refs	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  unsigned int __g_refs[2] __LOCK_ALIGNMENT;$/;"	m	struct:__pthread_cond_s	typeref:typename:unsigned int[2]__LOCK_ALIGNMENT	access:public
__g_signals	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  unsigned int __g_signals[2];$/;"	m	struct:__pthread_cond_s	typeref:typename:unsigned int[2]	access:public
__g_size	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  unsigned int __g_size[2];$/;"	m	struct:__pthread_cond_s	typeref:typename:unsigned int[2]	access:public
__get_first_arg	/usr/include/c++/10/bits/ptr_traits.h	/^    struct __get_first_arg$/;"	s	namespace:std
__get_first_arg	/usr/include/c++/10/bits/ptr_traits.h	/^    struct __get_first_arg<_Template<_Tp, _Types...>>$/;"	s	namespace:std
__get_first_arg_t	/usr/include/c++/10/bits/ptr_traits.h	/^    using __get_first_arg_t = typename __get_first_arg<_Tp>::type;$/;"	t	namespace:std	typeref:typename:__get_first_arg<_Tp>::type
__getc_unlocked_body	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^#define __getc_unlocked_body(/;"	d	signature:(_fp)
__getdelim	/usr/include/stdio.h	/^extern __ssize_t __getdelim (char **__restrict __lineptr,$/;"	p	typeref:typename:__ssize_t	signature:(char ** __restrict __lineptr,size_t * __restrict __n,int __delimiter,FILE * __restrict __stream)
__gid_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __GID_T_TYPE __gid_t;	\/* Type of group identifications.  *\/$/;"	v	typeref:typename:__STD_TYPE __GID_T_TYPE
__gid_t_defined	/usr/include/x86_64-linux-gnu/sys/types.h	/^# define __gid_t_defined$/;"	d
__glibc_c99_flexarr_available	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __glibc_c99_flexarr_available /;"	d
__glibc_clang_has_extension	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __glibc_clang_has_extension(/;"	d	signature:(ext)
__glibc_clang_prereq	/usr/include/features.h	/^# define __glibc_clang_prereq(/;"	d	signature:(maj,min)
__glibc_has_attribute	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __glibc_has_attribute(/;"	d	signature:(attr)
__glibc_likely	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __glibc_likely(/;"	d	signature:(cond)
__glibc_macro_warning	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __glibc_macro_warning(/;"	d	signature:(message)
__glibc_macro_warning	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __glibc_macro_warning(/;"	d	signature:(msg)
__glibc_macro_warning1	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __glibc_macro_warning1(/;"	d	signature:(message)
__glibc_unlikely	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __glibc_unlikely(/;"	d	signature:(cond)
__glibcxx_assert	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define __glibcxx_assert(/;"	d	signature:(_Condition)
__glibcxx_assert_impl	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^#define __glibcxx_assert_impl(/;"	d	signature:(_Condition)
__glibcxx_class_requires	/usr/include/c++/10/bits/concept_check.h	/^#define __glibcxx_class_requires(/;"	d	signature:(_a,_C)
__glibcxx_class_requires	/usr/include/c++/10/bits/concept_check.h	/^#define __glibcxx_class_requires(/;"	d	signature:(_a,_b)
__glibcxx_class_requires2	/usr/include/c++/10/bits/concept_check.h	/^#define __glibcxx_class_requires2(/;"	d	signature:(_a,_b,_C)
__glibcxx_class_requires2	/usr/include/c++/10/bits/concept_check.h	/^#define __glibcxx_class_requires2(/;"	d	signature:(_a,_b,_c)
__glibcxx_class_requires3	/usr/include/c++/10/bits/concept_check.h	/^#define __glibcxx_class_requires3(/;"	d	signature:(_a,_b,_c,_C)
__glibcxx_class_requires3	/usr/include/c++/10/bits/concept_check.h	/^#define __glibcxx_class_requires3(/;"	d	signature:(_a,_b,_c,_d)
__glibcxx_class_requires4	/usr/include/c++/10/bits/concept_check.h	/^#define __glibcxx_class_requires4(/;"	d	signature:(_a,_b,_c,_d,_C)
__glibcxx_class_requires4	/usr/include/c++/10/bits/concept_check.h	/^#define __glibcxx_class_requires4(/;"	d	signature:(_a,_b,_c,_d,_e)
__glibcxx_digits10	/usr/include/c++/10/ext/numeric_traits.h	/^#define __glibcxx_digits10(/;"	d	signature:(_Tp)
__glibcxx_floating	/usr/include/c++/10/ext/numeric_traits.h	/^#define __glibcxx_floating(/;"	d	signature:(_Tp,_Fval,_Dval,_LDval)
__glibcxx_function_requires	/usr/include/c++/10/bits/concept_check.h	/^#define __glibcxx_function_requires(/;"	d	signature:(...)
__glibcxx_max_digits10	/usr/include/c++/10/ext/numeric_traits.h	/^#define __glibcxx_max_digits10(/;"	d	signature:(_Tp)
__glibcxx_max_exponent10	/usr/include/c++/10/ext/numeric_traits.h	/^#define __glibcxx_max_exponent10(/;"	d	signature:(_Tp)
__glibcxx_requires_can_decrement_range	/usr/include/c++/10/debug/debug.h	/^# define __glibcxx_requires_can_decrement_range(/;"	d	signature:(_First1,_Last1,_First2)
__glibcxx_requires_can_increment	/usr/include/c++/10/debug/debug.h	/^# define __glibcxx_requires_can_increment(/;"	d	signature:(_First,_Size)
__glibcxx_requires_can_increment_range	/usr/include/c++/10/debug/debug.h	/^# define __glibcxx_requires_can_increment_range(/;"	d	signature:(_First1,_Last1,_First2)
__glibcxx_requires_cond	/usr/include/c++/10/debug/debug.h	/^# define __glibcxx_requires_cond(/;"	d	signature:(_Cond,_Msg)
__glibcxx_requires_heap	/usr/include/c++/10/debug/debug.h	/^# define __glibcxx_requires_heap(/;"	d	signature:(_First,_Last)
__glibcxx_requires_heap_pred	/usr/include/c++/10/debug/debug.h	/^# define __glibcxx_requires_heap_pred(/;"	d	signature:(_First,_Last,_Pred)
__glibcxx_requires_irreflexive	/usr/include/c++/10/debug/debug.h	/^# define __glibcxx_requires_irreflexive(/;"	d	signature:(_First,_Last)
__glibcxx_requires_irreflexive2	/usr/include/c++/10/debug/debug.h	/^# define __glibcxx_requires_irreflexive2(/;"	d	signature:(_First,_Last)
__glibcxx_requires_irreflexive_pred	/usr/include/c++/10/debug/debug.h	/^# define __glibcxx_requires_irreflexive_pred(/;"	d	signature:(_First,_Last,_Pred)
__glibcxx_requires_irreflexive_pred2	/usr/include/c++/10/debug/debug.h	/^# define __glibcxx_requires_irreflexive_pred2(/;"	d	signature:(_First,_Last,_Pred)
__glibcxx_requires_non_empty_range	/usr/include/c++/10/debug/assertions.h	/^# define __glibcxx_requires_non_empty_range(/;"	d	signature:(_First,_Last)
__glibcxx_requires_nonempty	/usr/include/c++/10/debug/assertions.h	/^# define __glibcxx_requires_nonempty(/;"	d	signature:()
__glibcxx_requires_partitioned_lower	/usr/include/c++/10/debug/debug.h	/^# define __glibcxx_requires_partitioned_lower(/;"	d	signature:(_First,_Last,_Value)
__glibcxx_requires_partitioned_lower_pred	/usr/include/c++/10/debug/debug.h	/^# define __glibcxx_requires_partitioned_lower_pred(/;"	d	signature:(_First,_Last,_Value,_Pred)
__glibcxx_requires_partitioned_upper	/usr/include/c++/10/debug/debug.h	/^# define __glibcxx_requires_partitioned_upper(/;"	d	signature:(_First,_Last,_Value)
__glibcxx_requires_partitioned_upper_pred	/usr/include/c++/10/debug/debug.h	/^# define __glibcxx_requires_partitioned_upper_pred(/;"	d	signature:(_First,_Last,_Value,_Pred)
__glibcxx_requires_sorted	/usr/include/c++/10/debug/debug.h	/^# define __glibcxx_requires_sorted(/;"	d	signature:(_First,_Last)
__glibcxx_requires_sorted_pred	/usr/include/c++/10/debug/debug.h	/^# define __glibcxx_requires_sorted_pred(/;"	d	signature:(_First,_Last,_Pred)
__glibcxx_requires_sorted_set	/usr/include/c++/10/debug/debug.h	/^# define __glibcxx_requires_sorted_set(/;"	d	signature:(_First1,_Last1,_First2)
__glibcxx_requires_sorted_set_pred	/usr/include/c++/10/debug/debug.h	/^# define __glibcxx_requires_sorted_set_pred(/;"	d	signature:(_First1,_Last1,_First2,_Pred)
__glibcxx_requires_string	/usr/include/c++/10/debug/debug.h	/^# define __glibcxx_requires_string(/;"	d	signature:(_String)
__glibcxx_requires_string_len	/usr/include/c++/10/debug/debug.h	/^# define __glibcxx_requires_string_len(/;"	d	signature:(_String,_Len)
__glibcxx_requires_subscript	/usr/include/c++/10/debug/assertions.h	/^# define __glibcxx_requires_subscript(/;"	d	signature:(_N)
__glibcxx_requires_valid_range	/usr/include/c++/10/debug/debug.h	/^# define __glibcxx_requires_valid_range(/;"	d	signature:(_First,_Last)
__gnu_cxx	/usr/include/c++/10/bits/char_traits.h	/^namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)$/;"	n
__gnu_cxx	/usr/include/c++/10/bits/predefined_ops.h	/^namespace __gnu_cxx$/;"	n
__gnu_cxx	/usr/include/c++/10/bits/stl_iterator.h	/^namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)$/;"	n
__gnu_cxx	/usr/include/c++/10/ext/alloc_traits.h	/^namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)$/;"	n
__gnu_cxx	/usr/include/c++/10/ext/atomicity.h	/^namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)$/;"	n
__gnu_cxx	/usr/include/c++/10/ext/new_allocator.h	/^namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)$/;"	n
__gnu_cxx	/usr/include/c++/10/ext/numeric_traits.h	/^namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)$/;"	n
__gnu_cxx	/usr/include/c++/10/ext/string_conversions.h	/^namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)$/;"	n
__gnu_cxx	/usr/include/c++/10/ext/type_traits.h	/^namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)$/;"	n
__gnu_cxx	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^namespace __gnu_cxx$/;"	n
__gnu_cxx	/usr/include/x86_64-linux-gnu/c++/10/bits/c++locale.h	/^namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)$/;"	n
__gnu_cxx::_Char_types	/usr/include/c++/10/bits/char_traits.h	/^    struct _Char_types$/;"	s	namespace:__gnu_cxx
__gnu_cxx::_Char_types::int_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef unsigned long   int_type;$/;"	t	struct:__gnu_cxx::_Char_types	typeref:typename:unsigned long	access:public
__gnu_cxx::_Char_types::off_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef std::streamoff  off_type;$/;"	t	struct:__gnu_cxx::_Char_types	typeref:typename:std::streamoff	access:public
__gnu_cxx::_Char_types::pos_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef std::streampos  pos_type;$/;"	t	struct:__gnu_cxx::_Char_types	typeref:typename:std::streampos	access:public
__gnu_cxx::_Char_types::state_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef std::mbstate_t  state_type;$/;"	t	struct:__gnu_cxx::_Char_types	typeref:typename:std::mbstate_t	access:public
__gnu_cxx::__add_unsigned	/usr/include/c++/10/ext/type_traits.h	/^    struct __add_unsigned$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__add_unsigned	/usr/include/c++/10/ext/type_traits.h	/^    struct __add_unsigned<char>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__add_unsigned	/usr/include/c++/10/ext/type_traits.h	/^    struct __add_unsigned<int>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__add_unsigned	/usr/include/c++/10/ext/type_traits.h	/^    struct __add_unsigned<long long>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__add_unsigned	/usr/include/c++/10/ext/type_traits.h	/^    struct __add_unsigned<long>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__add_unsigned	/usr/include/c++/10/ext/type_traits.h	/^    struct __add_unsigned<short>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__add_unsigned	/usr/include/c++/10/ext/type_traits.h	/^    struct __add_unsigned<signed char>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__add_unsigned::__if_type	/usr/include/c++/10/ext/type_traits.h	/^      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;$/;"	t	struct:__gnu_cxx::__add_unsigned	typeref:typename:__enable_if<std::__is_integer<_Tp>::__value,_Tp>	access:private
__gnu_cxx::__add_unsigned::__type	/usr/include/c++/10/ext/type_traits.h	/^      typedef typename __if_type::__type __type; $/;"	t	struct:__gnu_cxx::__add_unsigned	typeref:typename:__if_type::__type	access:public
__gnu_cxx::__add_unsigned::__type	/usr/include/c++/10/ext/type_traits.h	/^    { typedef unsigned char __type; };$/;"	t	struct:__gnu_cxx::__add_unsigned	typeref:typename:unsigned char	access:public
__gnu_cxx::__add_unsigned::__type	/usr/include/c++/10/ext/type_traits.h	/^    { typedef unsigned int __type; };$/;"	t	struct:__gnu_cxx::__add_unsigned	typeref:typename:unsigned int	access:public
__gnu_cxx::__add_unsigned::__type	/usr/include/c++/10/ext/type_traits.h	/^    { typedef unsigned long __type; };$/;"	t	struct:__gnu_cxx::__add_unsigned	typeref:typename:unsigned long	access:public
__gnu_cxx::__add_unsigned::__type	/usr/include/c++/10/ext/type_traits.h	/^    { typedef unsigned long long __type; };$/;"	t	struct:__gnu_cxx::__add_unsigned	typeref:typename:unsigned long long	access:public
__gnu_cxx::__add_unsigned::__type	/usr/include/c++/10/ext/type_traits.h	/^    { typedef unsigned short __type; };$/;"	t	struct:__gnu_cxx::__add_unsigned	typeref:typename:unsigned short	access:public
__gnu_cxx::__alloc_traits	/usr/include/c++/10/ext/alloc_traits.h	/^  struct __alloc_traits$/;"	s	namespace:__gnu_cxx	inherits:std::allocator_traits<_Alloc>
__gnu_cxx::__alloc_traits::_Base_type	/usr/include/c++/10/ext/alloc_traits.h	/^    typedef std::allocator_traits<_Alloc>           _Base_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:std::allocator_traits<_Alloc>	access:public
__gnu_cxx::__alloc_traits::_S_always_equal	/usr/include/c++/10/ext/alloc_traits.h	/^    static constexpr bool _S_always_equal()$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:bool	access:public	signature:()
__gnu_cxx::__alloc_traits::_S_nothrow_move	/usr/include/c++/10/ext/alloc_traits.h	/^    static constexpr bool _S_nothrow_move()$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:bool	access:public	signature:()
__gnu_cxx::__alloc_traits::_S_on_swap	/usr/include/c++/10/ext/alloc_traits.h	/^    static _GLIBCXX14_CONSTEXPR void _S_on_swap(_Alloc& __a, _Alloc& __b)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:_GLIBCXX14_CONSTEXPR void	access:public	signature:(_Alloc & __a,_Alloc & __b)
__gnu_cxx::__alloc_traits::_S_on_swap	/usr/include/c++/10/ext/alloc_traits.h	/^    static void _S_on_swap(_Alloc& __a, _Alloc& __b)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:void	access:public	signature:(_Alloc & __a,_Alloc & __b)
__gnu_cxx::__alloc_traits::_S_propagate_on_copy_assign	/usr/include/c++/10/ext/alloc_traits.h	/^    static constexpr bool _S_propagate_on_copy_assign()$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:bool	access:public	signature:()
__gnu_cxx::__alloc_traits::_S_propagate_on_move_assign	/usr/include/c++/10/ext/alloc_traits.h	/^    static constexpr bool _S_propagate_on_move_assign()$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:bool	access:public	signature:()
__gnu_cxx::__alloc_traits::_S_propagate_on_swap	/usr/include/c++/10/ext/alloc_traits.h	/^    static constexpr bool _S_propagate_on_swap()$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:bool	access:public	signature:()
__gnu_cxx::__alloc_traits::_S_select_on_copy	/usr/include/c++/10/ext/alloc_traits.h	/^    static const _Alloc& _S_select_on_copy(const _Alloc& __a) { return __a; }$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:const _Alloc &	access:public	signature:(const _Alloc & __a)
__gnu_cxx::__alloc_traits::_S_select_on_copy	/usr/include/c++/10/ext/alloc_traits.h	/^    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc	access:public	signature:(const _Alloc & __a)
__gnu_cxx::__alloc_traits::__is_custom_pointer	/usr/include/c++/10/ext/alloc_traits.h	/^      using __is_custom_pointer$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:std::__and_<std::is_same<pointer,_Ptr>,std::__not_<std::is_pointer<_Ptr>>>	access:private
__gnu_cxx::__alloc_traits::allocate	/usr/include/c++/10/ext/alloc_traits.h	/^      allocate(_Alloc& __a, size_type __n, _Hint __hint)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:_GLIBCXX_NODISCARD pointer	access:public	signature:(_Alloc & __a,size_type __n,_Hint __hint)
__gnu_cxx::__alloc_traits::allocate	/usr/include/c++/10/ext/alloc_traits.h	/^    allocate(_Alloc& __a, size_type __n)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:_GLIBCXX_NODISCARD pointer	access:public	signature:(_Alloc & __a,size_type __n)
__gnu_cxx::__alloc_traits::allocator_type	/usr/include/c++/10/ext/alloc_traits.h	/^    typedef _Alloc allocator_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc	access:public
__gnu_cxx::__alloc_traits::const_pointer	/usr/include/c++/10/ext/alloc_traits.h	/^    typedef typename _Alloc::const_pointer          const_pointer;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc::const_pointer	access:public
__gnu_cxx::__alloc_traits::const_pointer	/usr/include/c++/10/ext/alloc_traits.h	/^    typedef typename _Base_type::const_pointer      const_pointer;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Base_type::const_pointer	access:public
__gnu_cxx::__alloc_traits::const_reference	/usr/include/c++/10/ext/alloc_traits.h	/^    typedef const value_type&                       const_reference;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:const value_type &	access:public
__gnu_cxx::__alloc_traits::const_reference	/usr/include/c++/10/ext/alloc_traits.h	/^    typedef typename _Alloc::const_reference        const_reference;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc::const_reference	access:public
__gnu_cxx::__alloc_traits::construct	/usr/include/c++/10/ext/alloc_traits.h	/^      construct(_Alloc& __a, _Ptr __p, _Args&&... __args)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:_GLIBCXX14_CONSTEXPR std::__enable_if_t<__is_custom_pointer<_Ptr>::value>	access:public	signature:(_Alloc & __a,_Ptr __p,_Args &&...__args)
__gnu_cxx::__alloc_traits::construct	/usr/include/c++/10/ext/alloc_traits.h	/^      static void construct(_Alloc& __a, pointer __p, const _Tp& __arg)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:void	access:public	signature:(_Alloc & __a,pointer __p,const _Tp & __arg)
__gnu_cxx::__alloc_traits::deallocate	/usr/include/c++/10/ext/alloc_traits.h	/^    static void deallocate(_Alloc& __a, pointer __p, size_type __n)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:void	access:public	signature:(_Alloc & __a,pointer __p,size_type __n)
__gnu_cxx::__alloc_traits::destroy	/usr/include/c++/10/ext/alloc_traits.h	/^      destroy(_Alloc& __a, _Ptr __p)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:_GLIBCXX14_CONSTEXPR std::__enable_if_t<__is_custom_pointer<_Ptr>::value>	access:public	signature:(_Alloc & __a,_Ptr __p)
__gnu_cxx::__alloc_traits::destroy	/usr/include/c++/10/ext/alloc_traits.h	/^    static void destroy(_Alloc& __a, pointer __p)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:void	access:public	signature:(_Alloc & __a,pointer __p)
__gnu_cxx::__alloc_traits::difference_type	/usr/include/c++/10/ext/alloc_traits.h	/^    typedef typename _Alloc::difference_type        difference_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc::difference_type	access:public
__gnu_cxx::__alloc_traits::difference_type	/usr/include/c++/10/ext/alloc_traits.h	/^    typedef typename _Base_type::difference_type    difference_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Base_type::difference_type	access:public
__gnu_cxx::__alloc_traits::max_size	/usr/include/c++/10/ext/alloc_traits.h	/^    static size_type max_size(const _Alloc& __a)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:size_type	access:public	signature:(const _Alloc & __a)
__gnu_cxx::__alloc_traits::pointer	/usr/include/c++/10/ext/alloc_traits.h	/^    typedef typename _Alloc::pointer                pointer;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc::pointer	access:public
__gnu_cxx::__alloc_traits::pointer	/usr/include/c++/10/ext/alloc_traits.h	/^    typedef typename _Base_type::pointer            pointer;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Base_type::pointer	access:public
__gnu_cxx::__alloc_traits::rebind	/usr/include/c++/10/ext/alloc_traits.h	/^      struct rebind$/;"	s	struct:__gnu_cxx::__alloc_traits	access:public
__gnu_cxx::__alloc_traits::rebind::other	/usr/include/c++/10/ext/alloc_traits.h	/^      { typedef typename _Alloc::template rebind<_Tp>::other other; };$/;"	t	struct:__gnu_cxx::__alloc_traits::rebind	typeref:typename:_Alloc::template rebind<_Tp>::other	access:public
__gnu_cxx::__alloc_traits::rebind::other	/usr/include/c++/10/ext/alloc_traits.h	/^      { typedef typename _Base_type::template rebind_alloc<_Tp> other; };$/;"	t	struct:__gnu_cxx::__alloc_traits::rebind	typeref:typename:_Base_type::template rebind_alloc<_Tp>	access:public
__gnu_cxx::__alloc_traits::reference	/usr/include/c++/10/ext/alloc_traits.h	/^    typedef typename _Alloc::reference              reference;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc::reference	access:public
__gnu_cxx::__alloc_traits::reference	/usr/include/c++/10/ext/alloc_traits.h	/^    typedef value_type&                             reference;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:value_type &	access:public
__gnu_cxx::__alloc_traits::size_type	/usr/include/c++/10/ext/alloc_traits.h	/^    typedef typename _Alloc::size_type              size_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc::size_type	access:public
__gnu_cxx::__alloc_traits::size_type	/usr/include/c++/10/ext/alloc_traits.h	/^    typedef typename _Base_type::size_type          size_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Base_type::size_type	access:public
__gnu_cxx::__alloc_traits::value_type	/usr/include/c++/10/ext/alloc_traits.h	/^    typedef typename _Alloc::value_type             value_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc::value_type	access:public
__gnu_cxx::__alloc_traits::value_type	/usr/include/c++/10/ext/alloc_traits.h	/^    typedef typename _Base_type::value_type         value_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Base_type::value_type	access:public
__gnu_cxx::__atomic_add	/usr/include/c++/10/ext/atomicity.h	/^  __atomic_add(volatile _Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx	typeref:typename:void	signature:(volatile _Atomic_word * __mem,int __val)
__gnu_cxx::__atomic_add_dispatch	/usr/include/c++/10/ext/atomicity.h	/^  __atomic_add_dispatch(_Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx	typeref:typename:void	signature:(_Atomic_word * __mem,int __val)
__gnu_cxx::__atomic_add_single	/usr/include/c++/10/ext/atomicity.h	/^  __atomic_add_single(_Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx	typeref:typename:void	signature:(_Atomic_word * __mem,int __val)
__gnu_cxx::__conditional_type	/usr/include/c++/10/ext/type_traits.h	/^    struct __conditional_type$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__conditional_type	/usr/include/c++/10/ext/type_traits.h	/^    struct __conditional_type<false, _Iftrue, _Iffalse>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__conditional_type::__type	/usr/include/c++/10/ext/type_traits.h	/^    { typedef _Iffalse __type; };$/;"	t	struct:__gnu_cxx::__conditional_type	typeref:typename:_Iffalse	access:public
__gnu_cxx::__conditional_type::__type	/usr/include/c++/10/ext/type_traits.h	/^    { typedef _Iftrue __type; };$/;"	t	struct:__gnu_cxx::__conditional_type	typeref:typename:_Iftrue	access:public
__gnu_cxx::__cxx11	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }$/;"	n	namespace:__gnu_cxx
__gnu_cxx::__enable_if	/usr/include/c++/10/ext/type_traits.h	/^    struct __enable_if $/;"	s	namespace:__gnu_cxx
__gnu_cxx::__enable_if	/usr/include/c++/10/ext/type_traits.h	/^    struct __enable_if<true, _Tp>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__enable_if::__type	/usr/include/c++/10/ext/type_traits.h	/^    { typedef _Tp __type; };$/;"	t	struct:__gnu_cxx::__enable_if	typeref:typename:_Tp	access:public
__gnu_cxx::__exchange_and_add	/usr/include/c++/10/ext/atomicity.h	/^  __exchange_and_add(volatile _Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION _Atomic_word	signature:(volatile _Atomic_word * __mem,int __val)
__gnu_cxx::__exchange_and_add_dispatch	/usr/include/c++/10/ext/atomicity.h	/^  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx	typeref:typename:_Atomic_word	signature:(_Atomic_word * __mem,int __val)
__gnu_cxx::__exchange_and_add_single	/usr/include/c++/10/ext/atomicity.h	/^  __exchange_and_add_single(_Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx	typeref:typename:_Atomic_word	signature:(_Atomic_word * __mem,int __val)
__gnu_cxx::__int_traits	/usr/include/c++/10/ext/numeric_traits.h	/^    using __int_traits = __numeric_traits_integer<_Tp>;$/;"	t	namespace:__gnu_cxx	typeref:typename:__numeric_traits_integer<_Tp>
__gnu_cxx::__is_integer_nonstrict	/usr/include/c++/10/ext/numeric_traits.h	/^    struct __is_integer_nonstrict$/;"	s	namespace:__gnu_cxx	inherits:std::__is_integer<_Tp>
__gnu_cxx::__is_integer_nonstrict::__anona122f8870103	/usr/include/c++/10/ext/numeric_traits.h	/^      enum { __width = __value ? sizeof(_Tp) * __CHAR_BIT__ : 0 };$/;"	g	struct:__gnu_cxx::__is_integer_nonstrict	access:public
__gnu_cxx::__is_integer_nonstrict::__width	/usr/include/c++/10/ext/numeric_traits.h	/^      enum { __width = __value ? sizeof(_Tp) * __CHAR_BIT__ : 0 };$/;"	e	enum:__gnu_cxx::__is_integer_nonstrict::__anona122f8870103	access:public
__gnu_cxx::__is_null_pointer	/usr/include/c++/10/ext/type_traits.h	/^    __is_null_pointer(_Type)$/;"	f	namespace:__gnu_cxx	typeref:typename:bool	signature:(_Type)
__gnu_cxx::__is_null_pointer	/usr/include/c++/10/ext/type_traits.h	/^    __is_null_pointer(_Type* __ptr)$/;"	f	namespace:__gnu_cxx	typeref:typename:bool	signature:(_Type * __ptr)
__gnu_cxx::__is_null_pointer	/usr/include/c++/10/ext/type_traits.h	/^  __is_null_pointer(std::nullptr_t)$/;"	f	namespace:__gnu_cxx	typeref:typename:bool	signature:(std::nullptr_t)
__gnu_cxx::__normal_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    class __normal_iterator$/;"	c	namespace:__gnu_cxx
__gnu_cxx::__normal_iterator::_M_current	/usr/include/c++/10/bits/stl_iterator.h	/^      _Iterator _M_current;$/;"	m	class:__gnu_cxx::__normal_iterator	typeref:typename:_Iterator	access:protected
__gnu_cxx::__normal_iterator::__normal_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^        __normal_iterator(const __normal_iterator<_Iter,$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const __normal_iterator<_Iter,typename __enable_if<(std::__are_same<_Iter,typename _Container::pointer>::__value),_Container>::__type> & __i)
__gnu_cxx::__normal_iterator::__normal_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX_CONSTEXPR	access:public	signature:()
__gnu_cxx::__normal_iterator::__normal_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const _Iterator & __i)
__gnu_cxx::__normal_iterator::__traits_type	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef std::iterator_traits<_Iterator>		__traits_type;$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:std::iterator_traits<_Iterator>	access:protected
__gnu_cxx::__normal_iterator::base	/usr/include/c++/10/bits/stl_iterator.h	/^      base() const _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR const _Iterator &	access:public	signature:() const
__gnu_cxx::__normal_iterator::difference_type	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef typename __traits_type::difference_type 	difference_type;$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:__traits_type::difference_type	access:public
__gnu_cxx::__normal_iterator::iterator_category	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef typename __traits_type::iterator_category iterator_category;$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:__traits_type::iterator_category	access:public
__gnu_cxx::__normal_iterator::iterator_concept	/usr/include/c++/10/bits/stl_iterator.h	/^      using iterator_concept = std::__detail::__iter_concept<_Iterator>;$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:std::__detail::__iter_concept<_Iterator>	access:public
__gnu_cxx::__normal_iterator::iterator_type	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef _Iterator					iterator_type;$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:_Iterator	access:public
__gnu_cxx::__normal_iterator::operator *	/usr/include/c++/10/bits/stl_iterator.h	/^      operator*() const _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR reference	access:public	signature:() const
__gnu_cxx::__normal_iterator::operator +	/usr/include/c++/10/bits/stl_iterator.h	/^      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator	access:public	signature:(difference_type __n) const
__gnu_cxx::__normal_iterator::operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^      operator++() _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator &	access:public	signature:()
__gnu_cxx::__normal_iterator::operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^      operator++(int) _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator	access:public	signature:(int)
__gnu_cxx::__normal_iterator::operator +=	/usr/include/c++/10/bits/stl_iterator.h	/^      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator &	access:public	signature:(difference_type __n)
__gnu_cxx::__normal_iterator::operator -	/usr/include/c++/10/bits/stl_iterator.h	/^      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator	access:public	signature:(difference_type __n) const
__gnu_cxx::__normal_iterator::operator --	/usr/include/c++/10/bits/stl_iterator.h	/^      operator--() _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator &	access:public	signature:()
__gnu_cxx::__normal_iterator::operator --	/usr/include/c++/10/bits/stl_iterator.h	/^      operator--(int) _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator	access:public	signature:(int)
__gnu_cxx::__normal_iterator::operator -=	/usr/include/c++/10/bits/stl_iterator.h	/^      operator-=(difference_type __n) _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator &	access:public	signature:(difference_type __n)
__gnu_cxx::__normal_iterator::operator ->	/usr/include/c++/10/bits/stl_iterator.h	/^      operator->() const _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR pointer	access:public	signature:() const
__gnu_cxx::__normal_iterator::operator []	/usr/include/c++/10/bits/stl_iterator.h	/^      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR reference	access:public	signature:(difference_type __n) const
__gnu_cxx::__normal_iterator::pointer	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef typename __traits_type::pointer   	pointer;$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:__traits_type::pointer	access:public
__gnu_cxx::__normal_iterator::reference	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef typename __traits_type::reference 	reference;$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:__traits_type::reference	access:public
__gnu_cxx::__normal_iterator::value_type	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef typename __traits_type::value_type  	value_type;$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:__traits_type::value_type	access:public
__gnu_cxx::__numeric_traits	/usr/include/c++/10/ext/numeric_traits.h	/^    struct __numeric_traits$/;"	s	namespace:__gnu_cxx	inherits:__conditional_type<__is_integer_nonstrict<_Value>::__value,__numeric_traits_integer<_Value>,__numeric_traits_floating<_Value>>::__type
__gnu_cxx::__numeric_traits_floating	/usr/include/c++/10/ext/numeric_traits.h	/^    struct __numeric_traits_floating$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__numeric_traits_floating::__digits10	/usr/include/c++/10/ext/numeric_traits.h	/^      static const int __digits10 = __glibcxx_digits10(_Value);$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	typeref:typename:const int	access:public
__gnu_cxx::__numeric_traits_floating::__is_signed	/usr/include/c++/10/ext/numeric_traits.h	/^      static const bool __is_signed = true;$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	typeref:typename:const bool	access:public
__gnu_cxx::__numeric_traits_floating::__max_digits10	/usr/include/c++/10/ext/numeric_traits.h	/^      static const int __max_digits10 = __glibcxx_max_digits10(_Value);$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	typeref:typename:const int	access:public
__gnu_cxx::__numeric_traits_floating::__max_exponent10	/usr/include/c++/10/ext/numeric_traits.h	/^      static const int __max_exponent10 = __glibcxx_max_exponent10(_Value);$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	typeref:typename:const int	access:public
__gnu_cxx::__numeric_traits_floating<_Value>::__digits10	/usr/include/c++/10/ext/numeric_traits.h	/^    const int __numeric_traits_floating<_Value>::__digits10;$/;"	m	class:__gnu_cxx::__numeric_traits_floating<_Value>	typeref:typename:const int
__gnu_cxx::__numeric_traits_floating<_Value>::__is_signed	/usr/include/c++/10/ext/numeric_traits.h	/^    const bool __numeric_traits_floating<_Value>::__is_signed;$/;"	m	class:__gnu_cxx::__numeric_traits_floating<_Value>	typeref:typename:const bool
__gnu_cxx::__numeric_traits_floating<_Value>::__max_digits10	/usr/include/c++/10/ext/numeric_traits.h	/^    const int __numeric_traits_floating<_Value>::__max_digits10;$/;"	m	class:__gnu_cxx::__numeric_traits_floating<_Value>	typeref:typename:const int
__gnu_cxx::__numeric_traits_floating<_Value>::__max_exponent10	/usr/include/c++/10/ext/numeric_traits.h	/^    const int __numeric_traits_floating<_Value>::__max_exponent10;$/;"	m	class:__gnu_cxx::__numeric_traits_floating<_Value>	typeref:typename:const int
__gnu_cxx::__numeric_traits_integer	/usr/include/c++/10/ext/numeric_traits.h	/^    struct __numeric_traits_integer$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__numeric_traits_integer::__digits	/usr/include/c++/10/ext/numeric_traits.h	/^      static const int __digits$/;"	m	struct:__gnu_cxx::__numeric_traits_integer	typeref:typename:const int	access:public
__gnu_cxx::__numeric_traits_integer::__is_signed	/usr/include/c++/10/ext/numeric_traits.h	/^      static const bool __is_signed = (_Value)(-1) < 0;$/;"	m	struct:__gnu_cxx::__numeric_traits_integer	typeref:typename:const bool	access:public
__gnu_cxx::__numeric_traits_integer::__max	/usr/include/c++/10/ext/numeric_traits.h	/^      static const _Value __max = __is_signed$/;"	m	struct:__gnu_cxx::__numeric_traits_integer	typeref:typename:const _Value	access:public
__gnu_cxx::__numeric_traits_integer::__min	/usr/include/c++/10/ext/numeric_traits.h	/^      static const _Value __min = __is_signed ? -__max - 1 : (_Value)0;$/;"	m	struct:__gnu_cxx::__numeric_traits_integer	typeref:typename:const _Value	access:public
__gnu_cxx::__numeric_traits_integer<_Value>::__digits	/usr/include/c++/10/ext/numeric_traits.h	/^    const int __numeric_traits_integer<_Value>::__digits;$/;"	m	class:__gnu_cxx::__numeric_traits_integer<_Value>	typeref:typename:const int
__gnu_cxx::__numeric_traits_integer<_Value>::__is_signed	/usr/include/c++/10/ext/numeric_traits.h	/^    const bool __numeric_traits_integer<_Value>::__is_signed;$/;"	m	class:__gnu_cxx::__numeric_traits_integer<_Value>	typeref:typename:const bool
__gnu_cxx::__numeric_traits_integer<_Value>::__max	/usr/include/c++/10/ext/numeric_traits.h	/^    const _Value __numeric_traits_integer<_Value>::__max;$/;"	m	class:__gnu_cxx::__numeric_traits_integer<_Value>	typeref:typename:const _Value
__gnu_cxx::__numeric_traits_integer<_Value>::__min	/usr/include/c++/10/ext/numeric_traits.h	/^    const _Value __numeric_traits_integer<_Value>::__min;$/;"	m	class:__gnu_cxx::__numeric_traits_integer<_Value>	typeref:typename:const _Value
__gnu_cxx::__ops	/usr/include/c++/10/bits/predefined_ops.h	/^namespace __ops$/;"	n	namespace:__gnu_cxx
__gnu_cxx::__ops::_Iter_comp_iter	/usr/include/c++/10/bits/predefined_ops.h	/^    struct _Iter_comp_iter$/;"	s	namespace:__gnu_cxx::__ops
__gnu_cxx::__ops::_Iter_comp_iter::_Iter_comp_iter	/usr/include/c++/10/bits/predefined_ops.h	/^      _Iter_comp_iter(_Compare __comp)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_iter	typeref:typename:_GLIBCXX14_CONSTEXPR	access:public	signature:(_Compare __comp)
__gnu_cxx::__ops::_Iter_comp_iter::_M_comp	/usr/include/c++/10/bits/predefined_ops.h	/^      _Compare _M_comp;$/;"	m	struct:__gnu_cxx::__ops::_Iter_comp_iter	typeref:typename:_Compare	access:public
__gnu_cxx::__ops::_Iter_comp_iter::operator ()	/usr/include/c++/10/bits/predefined_ops.h	/^        operator()(_Iterator1 __it1, _Iterator2 __it2)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_iter	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(_Iterator1 __it1,_Iterator2 __it2)
__gnu_cxx::__ops::_Iter_comp_to_iter	/usr/include/c++/10/bits/predefined_ops.h	/^    struct _Iter_comp_to_iter$/;"	s	namespace:__gnu_cxx::__ops
__gnu_cxx::__ops::_Iter_comp_to_iter::_Iter_comp_to_iter	/usr/include/c++/10/bits/predefined_ops.h	/^      _Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_to_iter	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Compare __comp,_Iterator1 __it1)
__gnu_cxx::__ops::_Iter_comp_to_iter::_M_comp	/usr/include/c++/10/bits/predefined_ops.h	/^      _Compare _M_comp;$/;"	m	struct:__gnu_cxx::__ops::_Iter_comp_to_iter	typeref:typename:_Compare	access:public
__gnu_cxx::__ops::_Iter_comp_to_iter::_M_it1	/usr/include/c++/10/bits/predefined_ops.h	/^      _Iterator1 _M_it1;$/;"	m	struct:__gnu_cxx::__ops::_Iter_comp_to_iter	typeref:typename:_Iterator1	access:public
__gnu_cxx::__ops::_Iter_comp_to_iter::operator ()	/usr/include/c++/10/bits/predefined_ops.h	/^	operator()(_Iterator2 __it2)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_to_iter	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator2 __it2)
__gnu_cxx::__ops::_Iter_comp_to_val	/usr/include/c++/10/bits/predefined_ops.h	/^    struct _Iter_comp_to_val$/;"	s	namespace:__gnu_cxx::__ops
__gnu_cxx::__ops::_Iter_comp_to_val::_Iter_comp_to_val	/usr/include/c++/10/bits/predefined_ops.h	/^      _Iter_comp_to_val(_Compare __comp, _Value& __value)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_to_val	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Compare __comp,_Value & __value)
__gnu_cxx::__ops::_Iter_comp_to_val::_M_comp	/usr/include/c++/10/bits/predefined_ops.h	/^      _Compare _M_comp;$/;"	m	struct:__gnu_cxx::__ops::_Iter_comp_to_val	typeref:typename:_Compare	access:public
__gnu_cxx::__ops::_Iter_comp_to_val::_M_value	/usr/include/c++/10/bits/predefined_ops.h	/^      _Value& _M_value;$/;"	m	struct:__gnu_cxx::__ops::_Iter_comp_to_val	typeref:typename:_Value &	access:public
__gnu_cxx::__ops::_Iter_comp_to_val::operator ()	/usr/include/c++/10/bits/predefined_ops.h	/^	operator()(_Iterator __it)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_to_val	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator __it)
__gnu_cxx::__ops::_Iter_comp_val	/usr/include/c++/10/bits/predefined_ops.h	/^    struct _Iter_comp_val$/;"	s	namespace:__gnu_cxx::__ops
__gnu_cxx::__ops::_Iter_comp_val::_Iter_comp_val	/usr/include/c++/10/bits/predefined_ops.h	/^      _Iter_comp_val(_Compare __comp)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_val	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Compare __comp)
__gnu_cxx::__ops::_Iter_comp_val::_Iter_comp_val	/usr/include/c++/10/bits/predefined_ops.h	/^      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_val	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Iter_comp_iter<_Compare> && __comp)
__gnu_cxx::__ops::_Iter_comp_val::_Iter_comp_val	/usr/include/c++/10/bits/predefined_ops.h	/^      _Iter_comp_val(const _Iter_comp_iter<_Compare>& __comp)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_val	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const _Iter_comp_iter<_Compare> & __comp)
__gnu_cxx::__ops::_Iter_comp_val::_M_comp	/usr/include/c++/10/bits/predefined_ops.h	/^      _Compare _M_comp;$/;"	m	struct:__gnu_cxx::__ops::_Iter_comp_val	typeref:typename:_Compare	access:public
__gnu_cxx::__ops::_Iter_comp_val::operator ()	/usr/include/c++/10/bits/predefined_ops.h	/^	operator()(_Iterator __it, _Value& __val)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_val	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator __it,_Value & __val)
__gnu_cxx::__ops::_Iter_equal_to_iter	/usr/include/c++/10/bits/predefined_ops.h	/^  struct _Iter_equal_to_iter$/;"	s	namespace:__gnu_cxx::__ops
__gnu_cxx::__ops::_Iter_equal_to_iter::operator ()	/usr/include/c++/10/bits/predefined_ops.h	/^      operator()(_Iterator1 __it1, _Iterator2 __it2) const$/;"	f	struct:__gnu_cxx::__ops::_Iter_equal_to_iter	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator1 __it1,_Iterator2 __it2) const
__gnu_cxx::__ops::_Iter_equal_to_val	/usr/include/c++/10/bits/predefined_ops.h	/^  struct _Iter_equal_to_val$/;"	s	namespace:__gnu_cxx::__ops
__gnu_cxx::__ops::_Iter_equal_to_val::operator ()	/usr/include/c++/10/bits/predefined_ops.h	/^      operator()(_Iterator __it, _Value& __val) const$/;"	f	struct:__gnu_cxx::__ops::_Iter_equal_to_val	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator __it,_Value & __val) const
__gnu_cxx::__ops::_Iter_equals_iter	/usr/include/c++/10/bits/predefined_ops.h	/^    struct _Iter_equals_iter$/;"	s	namespace:__gnu_cxx::__ops
__gnu_cxx::__ops::_Iter_equals_iter::_Iter_equals_iter	/usr/include/c++/10/bits/predefined_ops.h	/^      _Iter_equals_iter(_Iterator1 __it1)$/;"	f	struct:__gnu_cxx::__ops::_Iter_equals_iter	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Iterator1 __it1)
__gnu_cxx::__ops::_Iter_equals_iter::_M_it1	/usr/include/c++/10/bits/predefined_ops.h	/^      _Iterator1 _M_it1;$/;"	m	struct:__gnu_cxx::__ops::_Iter_equals_iter	typeref:typename:_Iterator1	access:public
__gnu_cxx::__ops::_Iter_equals_iter::operator ()	/usr/include/c++/10/bits/predefined_ops.h	/^	operator()(_Iterator2 __it2)$/;"	f	struct:__gnu_cxx::__ops::_Iter_equals_iter	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator2 __it2)
__gnu_cxx::__ops::_Iter_equals_val	/usr/include/c++/10/bits/predefined_ops.h	/^    struct _Iter_equals_val$/;"	s	namespace:__gnu_cxx::__ops
__gnu_cxx::__ops::_Iter_equals_val::_Iter_equals_val	/usr/include/c++/10/bits/predefined_ops.h	/^      _Iter_equals_val(_Value& __value)$/;"	f	struct:__gnu_cxx::__ops::_Iter_equals_val	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Value & __value)
__gnu_cxx::__ops::_Iter_equals_val::_M_value	/usr/include/c++/10/bits/predefined_ops.h	/^      _Value& _M_value;$/;"	m	struct:__gnu_cxx::__ops::_Iter_equals_val	typeref:typename:_Value &	access:public
__gnu_cxx::__ops::_Iter_equals_val::operator ()	/usr/include/c++/10/bits/predefined_ops.h	/^	operator()(_Iterator __it)$/;"	f	struct:__gnu_cxx::__ops::_Iter_equals_val	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator __it)
__gnu_cxx::__ops::_Iter_less_iter	/usr/include/c++/10/bits/predefined_ops.h	/^  struct _Iter_less_iter$/;"	s	namespace:__gnu_cxx::__ops
__gnu_cxx::__ops::_Iter_less_iter::operator ()	/usr/include/c++/10/bits/predefined_ops.h	/^      operator()(_Iterator1 __it1, _Iterator2 __it2) const$/;"	f	struct:__gnu_cxx::__ops::_Iter_less_iter	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(_Iterator1 __it1,_Iterator2 __it2) const
__gnu_cxx::__ops::_Iter_less_val	/usr/include/c++/10/bits/predefined_ops.h	/^  struct _Iter_less_val$/;"	s	namespace:__gnu_cxx::__ops
__gnu_cxx::__ops::_Iter_less_val::_Iter_less_val	/usr/include/c++/10/bits/predefined_ops.h	/^    _Iter_less_val(_Iter_less_iter) { }$/;"	f	struct:__gnu_cxx::__ops::_Iter_less_val	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Iter_less_iter)
__gnu_cxx::__ops::_Iter_less_val::_Iter_less_val	/usr/include/c++/10/bits/predefined_ops.h	/^    constexpr _Iter_less_val() = default;$/;"	p	struct:__gnu_cxx::__ops::_Iter_less_val	access:public	signature:()
__gnu_cxx::__ops::_Iter_less_val::operator ()	/usr/include/c++/10/bits/predefined_ops.h	/^      operator()(_Iterator __it, _Value& __val) const$/;"	f	struct:__gnu_cxx::__ops::_Iter_less_val	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator __it,_Value & __val) const
__gnu_cxx::__ops::_Iter_negate	/usr/include/c++/10/bits/predefined_ops.h	/^    struct _Iter_negate$/;"	s	namespace:__gnu_cxx::__ops
__gnu_cxx::__ops::_Iter_negate::_Iter_negate	/usr/include/c++/10/bits/predefined_ops.h	/^      _Iter_negate(_Predicate __pred)$/;"	f	struct:__gnu_cxx::__ops::_Iter_negate	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Predicate __pred)
__gnu_cxx::__ops::_Iter_negate::_M_pred	/usr/include/c++/10/bits/predefined_ops.h	/^      _Predicate _M_pred;$/;"	m	struct:__gnu_cxx::__ops::_Iter_negate	typeref:typename:_Predicate	access:public
__gnu_cxx::__ops::_Iter_negate::operator ()	/usr/include/c++/10/bits/predefined_ops.h	/^	operator()(_Iterator __it)$/;"	f	struct:__gnu_cxx::__ops::_Iter_negate	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator __it)
__gnu_cxx::__ops::_Iter_pred	/usr/include/c++/10/bits/predefined_ops.h	/^    struct _Iter_pred$/;"	s	namespace:__gnu_cxx::__ops
__gnu_cxx::__ops::_Iter_pred::_Iter_pred	/usr/include/c++/10/bits/predefined_ops.h	/^      _Iter_pred(_Predicate __pred)$/;"	f	struct:__gnu_cxx::__ops::_Iter_pred	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Predicate __pred)
__gnu_cxx::__ops::_Iter_pred::_M_pred	/usr/include/c++/10/bits/predefined_ops.h	/^      _Predicate _M_pred;$/;"	m	struct:__gnu_cxx::__ops::_Iter_pred	typeref:typename:_Predicate	access:public
__gnu_cxx::__ops::_Iter_pred::operator ()	/usr/include/c++/10/bits/predefined_ops.h	/^	operator()(_Iterator __it)$/;"	f	struct:__gnu_cxx::__ops::_Iter_pred	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator __it)
__gnu_cxx::__ops::_Val_comp_iter	/usr/include/c++/10/bits/predefined_ops.h	/^    struct _Val_comp_iter$/;"	s	namespace:__gnu_cxx::__ops
__gnu_cxx::__ops::_Val_comp_iter::_M_comp	/usr/include/c++/10/bits/predefined_ops.h	/^      _Compare _M_comp;$/;"	m	struct:__gnu_cxx::__ops::_Val_comp_iter	typeref:typename:_Compare	access:public
__gnu_cxx::__ops::_Val_comp_iter::_Val_comp_iter	/usr/include/c++/10/bits/predefined_ops.h	/^      _Val_comp_iter(_Compare __comp)$/;"	f	struct:__gnu_cxx::__ops::_Val_comp_iter	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Compare __comp)
__gnu_cxx::__ops::_Val_comp_iter::_Val_comp_iter	/usr/include/c++/10/bits/predefined_ops.h	/^      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)$/;"	f	struct:__gnu_cxx::__ops::_Val_comp_iter	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Iter_comp_iter<_Compare> && __comp)
__gnu_cxx::__ops::_Val_comp_iter::_Val_comp_iter	/usr/include/c++/10/bits/predefined_ops.h	/^      _Val_comp_iter(const _Iter_comp_iter<_Compare>& __comp)$/;"	f	struct:__gnu_cxx::__ops::_Val_comp_iter	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const _Iter_comp_iter<_Compare> & __comp)
__gnu_cxx::__ops::_Val_comp_iter::operator ()	/usr/include/c++/10/bits/predefined_ops.h	/^	operator()(_Value& __val, _Iterator __it)$/;"	f	struct:__gnu_cxx::__ops::_Val_comp_iter	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Value & __val,_Iterator __it)
__gnu_cxx::__ops::_Val_less_iter	/usr/include/c++/10/bits/predefined_ops.h	/^  struct _Val_less_iter$/;"	s	namespace:__gnu_cxx::__ops
__gnu_cxx::__ops::_Val_less_iter::_Val_less_iter	/usr/include/c++/10/bits/predefined_ops.h	/^    _Val_less_iter(_Iter_less_iter) { }$/;"	f	struct:__gnu_cxx::__ops::_Val_less_iter	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Iter_less_iter)
__gnu_cxx::__ops::_Val_less_iter::_Val_less_iter	/usr/include/c++/10/bits/predefined_ops.h	/^    constexpr _Val_less_iter() = default;$/;"	p	struct:__gnu_cxx::__ops::_Val_less_iter	access:public	signature:()
__gnu_cxx::__ops::_Val_less_iter::operator ()	/usr/include/c++/10/bits/predefined_ops.h	/^      operator()(_Value& __val, _Iterator __it) const$/;"	f	struct:__gnu_cxx::__ops::_Val_less_iter	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Value & __val,_Iterator __it) const
__gnu_cxx::__ops::__iter_comp_iter	/usr/include/c++/10/bits/predefined_ops.h	/^    __iter_comp_iter(_Compare __comp)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX14_CONSTEXPR _Iter_comp_iter<_Compare>	signature:(_Compare __comp)
__gnu_cxx::__ops::__iter_comp_iter	/usr/include/c++/10/bits/predefined_ops.h	/^    __iter_comp_iter(_Iter_comp_iter<_Compare> __comp, _Iterator __it)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_comp_to_iter<_Compare,_Iterator>	signature:(_Iter_comp_iter<_Compare> __comp,_Iterator __it)
__gnu_cxx::__ops::__iter_comp_iter	/usr/include/c++/10/bits/predefined_ops.h	/^    __iter_comp_iter(_Iter_equal_to_iter, _Iterator __it)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_equals_iter<_Iterator>	signature:(_Iter_equal_to_iter,_Iterator __it)
__gnu_cxx::__ops::__iter_comp_val	/usr/include/c++/10/bits/predefined_ops.h	/^    __iter_comp_val(_Compare __comp)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_comp_val<_Compare>	signature:(_Compare __comp)
__gnu_cxx::__ops::__iter_comp_val	/usr/include/c++/10/bits/predefined_ops.h	/^    __iter_comp_val(_Compare __comp, _Value &__val)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_Iter_comp_to_val<_Compare,_Value> _GLIBCXX20_CONSTEXPR	signature:(_Compare __comp,_Value & __val)
__gnu_cxx::__ops::__iter_comp_val	/usr/include/c++/10/bits/predefined_ops.h	/^    __iter_comp_val(_Iter_comp_iter<_Compare> __comp)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_comp_val<_Compare>	signature:(_Iter_comp_iter<_Compare> __comp)
__gnu_cxx::__ops::__iter_comp_val	/usr/include/c++/10/bits/predefined_ops.h	/^  __iter_comp_val(_Iter_equal_to_iter)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_equal_to_val	signature:(_Iter_equal_to_iter)
__gnu_cxx::__ops::__iter_comp_val	/usr/include/c++/10/bits/predefined_ops.h	/^  __iter_comp_val(_Iter_less_iter)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_less_val	signature:(_Iter_less_iter)
__gnu_cxx::__ops::__iter_equal_to_iter	/usr/include/c++/10/bits/predefined_ops.h	/^  __iter_equal_to_iter()$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_equal_to_iter	signature:()
__gnu_cxx::__ops::__iter_equal_to_val	/usr/include/c++/10/bits/predefined_ops.h	/^  __iter_equal_to_val()$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_equal_to_val	signature:()
__gnu_cxx::__ops::__iter_equals_val	/usr/include/c++/10/bits/predefined_ops.h	/^    __iter_equals_val(_Value& __val)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_equals_val<_Value>	signature:(_Value & __val)
__gnu_cxx::__ops::__iter_less_iter	/usr/include/c++/10/bits/predefined_ops.h	/^  __iter_less_iter()$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX14_CONSTEXPR _Iter_less_iter	signature:()
__gnu_cxx::__ops::__iter_less_val	/usr/include/c++/10/bits/predefined_ops.h	/^  __iter_less_val()$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_less_val	signature:()
__gnu_cxx::__ops::__negate	/usr/include/c++/10/bits/predefined_ops.h	/^    __negate(_Iter_pred<_Predicate> __pred)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_negate<_Predicate>	signature:(_Iter_pred<_Predicate> __pred)
__gnu_cxx::__ops::__pred_iter	/usr/include/c++/10/bits/predefined_ops.h	/^    __pred_iter(_Predicate __pred)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_pred<_Predicate>	signature:(_Predicate __pred)
__gnu_cxx::__ops::__val_comp_iter	/usr/include/c++/10/bits/predefined_ops.h	/^    __val_comp_iter(_Compare __comp)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Val_comp_iter<_Compare>	signature:(_Compare __comp)
__gnu_cxx::__ops::__val_comp_iter	/usr/include/c++/10/bits/predefined_ops.h	/^    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Val_comp_iter<_Compare>	signature:(_Iter_comp_iter<_Compare> __comp)
__gnu_cxx::__ops::__val_comp_iter	/usr/include/c++/10/bits/predefined_ops.h	/^  __val_comp_iter(_Iter_less_iter)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Val_less_iter	signature:(_Iter_less_iter)
__gnu_cxx::__ops::__val_less_iter	/usr/include/c++/10/bits/predefined_ops.h	/^  __val_less_iter()$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Val_less_iter	signature:()
__gnu_cxx::__promote	/usr/include/c++/10/ext/type_traits.h	/^    struct __promote$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__promote	/usr/include/c++/10/ext/type_traits.h	/^    struct __promote<_Tp, false>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__promote	/usr/include/c++/10/ext/type_traits.h	/^    struct __promote<double>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__promote	/usr/include/c++/10/ext/type_traits.h	/^    struct __promote<float>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__promote	/usr/include/c++/10/ext/type_traits.h	/^    struct __promote<long double>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__promote::__type	/usr/include/c++/10/ext/type_traits.h	/^    { typedef double __type; };$/;"	t	struct:__gnu_cxx::__promote	typeref:typename:double	access:public
__gnu_cxx::__promote::__type	/usr/include/c++/10/ext/type_traits.h	/^    { typedef float __type; };$/;"	t	struct:__gnu_cxx::__promote	typeref:typename:float	access:public
__gnu_cxx::__promote::__type	/usr/include/c++/10/ext/type_traits.h	/^    { typedef long double __type; };$/;"	t	struct:__gnu_cxx::__promote	typeref:typename:long double	access:public
__gnu_cxx::__promote_2	/usr/include/c++/10/ext/type_traits.h	/^    struct __promote_2$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__promote_2::__type	/usr/include/c++/10/ext/type_traits.h	/^      typedef __typeof__(_Tp2() + _Up2()) __type;$/;"	t	struct:__gnu_cxx::__promote_2	access:public
__gnu_cxx::__promote_3	/usr/include/c++/10/ext/type_traits.h	/^    struct __promote_3$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__promote_3::__type	/usr/include/c++/10/ext/type_traits.h	/^      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;$/;"	t	struct:__gnu_cxx::__promote_3	access:public
__gnu_cxx::__promote_4	/usr/include/c++/10/ext/type_traits.h	/^    struct __promote_4$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__promote_4::__type	/usr/include/c++/10/ext/type_traits.h	/^      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;$/;"	t	struct:__gnu_cxx::__promote_4	access:public
__gnu_cxx::__remove_unsigned	/usr/include/c++/10/ext/type_traits.h	/^    struct __remove_unsigned$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__remove_unsigned	/usr/include/c++/10/ext/type_traits.h	/^    struct __remove_unsigned<char>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__remove_unsigned	/usr/include/c++/10/ext/type_traits.h	/^    struct __remove_unsigned<unsigned char>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__remove_unsigned	/usr/include/c++/10/ext/type_traits.h	/^    struct __remove_unsigned<unsigned int>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__remove_unsigned	/usr/include/c++/10/ext/type_traits.h	/^    struct __remove_unsigned<unsigned long long>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__remove_unsigned	/usr/include/c++/10/ext/type_traits.h	/^    struct __remove_unsigned<unsigned long>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__remove_unsigned	/usr/include/c++/10/ext/type_traits.h	/^    struct __remove_unsigned<unsigned short>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__remove_unsigned::__if_type	/usr/include/c++/10/ext/type_traits.h	/^      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;$/;"	t	struct:__gnu_cxx::__remove_unsigned	typeref:typename:__enable_if<std::__is_integer<_Tp>::__value,_Tp>	access:private
__gnu_cxx::__remove_unsigned::__type	/usr/include/c++/10/ext/type_traits.h	/^      typedef typename __if_type::__type __type; $/;"	t	struct:__gnu_cxx::__remove_unsigned	typeref:typename:__if_type::__type	access:public
__gnu_cxx::__remove_unsigned::__type	/usr/include/c++/10/ext/type_traits.h	/^    { typedef int __type; };$/;"	t	struct:__gnu_cxx::__remove_unsigned	typeref:typename:int	access:public
__gnu_cxx::__remove_unsigned::__type	/usr/include/c++/10/ext/type_traits.h	/^    { typedef long __type; };$/;"	t	struct:__gnu_cxx::__remove_unsigned	typeref:typename:long	access:public
__gnu_cxx::__remove_unsigned::__type	/usr/include/c++/10/ext/type_traits.h	/^    { typedef long long __type; };$/;"	t	struct:__gnu_cxx::__remove_unsigned	typeref:typename:long long	access:public
__gnu_cxx::__remove_unsigned::__type	/usr/include/c++/10/ext/type_traits.h	/^    { typedef short __type; };$/;"	t	struct:__gnu_cxx::__remove_unsigned	typeref:typename:short	access:public
__gnu_cxx::__remove_unsigned::__type	/usr/include/c++/10/ext/type_traits.h	/^    { typedef signed char __type; };$/;"	t	struct:__gnu_cxx::__remove_unsigned	typeref:typename:signed char	access:public
__gnu_cxx::__typeof	/usr/include/x86_64-linux-gnu/c++/10/bits/c++locale.h	/^  extern "C" __typeof(uselocale) __uselocale;$/;"	p	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION	signature:(uselocale)
__gnu_cxx::char_traits	/usr/include/c++/10/bits/char_traits.h	/^    struct char_traits$/;"	s	namespace:__gnu_cxx
__gnu_cxx::char_traits::assign	/usr/include/c++/10/bits/char_traits.h	/^      assign(char_type& __c1, const char_type& __c2)$/;"	f	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX14_CONSTEXPR void	access:public	signature:(char_type & __c1,const char_type & __c2)
__gnu_cxx::char_traits::assign	/usr/include/c++/10/bits/char_traits.h	/^      assign(char_type* __s, std::size_t __n, char_type __a);$/;"	p	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR char_type *	access:public	signature:(char_type * __s,std::size_t __n,char_type __a)
__gnu_cxx::char_traits::assign	/usr/include/c++/10/bits/char_traits.h	/^    assign(char_type* __s, std::size_t __n, char_type __a)$/;"	f	class:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR typename char_traits<_CharT>::char_type *	signature:(char_type * __s,std::size_t __n,char_type __a)
__gnu_cxx::char_traits::char_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef _CharT                                    char_type;$/;"	t	struct:__gnu_cxx::char_traits	typeref:typename:_CharT	access:public
__gnu_cxx::char_traits::compare	/usr/include/c++/10/bits/char_traits.h	/^      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);$/;"	p	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX14_CONSTEXPR int	access:public	signature:(const char_type * __s1,const char_type * __s2,std::size_t __n)
__gnu_cxx::char_traits::compare	/usr/include/c++/10/bits/char_traits.h	/^    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)$/;"	f	class:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX14_CONSTEXPR int	signature:(const char_type * __s1,const char_type * __s2,std::size_t __n)
__gnu_cxx::char_traits::comparison_category	/usr/include/c++/10/bits/char_traits.h	/^      using comparison_category = std::strong_ordering;$/;"	t	struct:__gnu_cxx::char_traits	typeref:typename:std::strong_ordering	access:public
__gnu_cxx::char_traits::copy	/usr/include/c++/10/bits/char_traits.h	/^      copy(char_type* __s1, const char_type* __s2, std::size_t __n);$/;"	p	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR char_type *	access:public	signature:(char_type * __s1,const char_type * __s2,std::size_t __n)
__gnu_cxx::char_traits::copy	/usr/include/c++/10/bits/char_traits.h	/^    copy(char_type* __s1, const char_type* __s2, std::size_t __n)$/;"	f	class:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR typename char_traits<_CharT>::char_type *	signature:(char_type * __s1,const char_type * __s2,std::size_t __n)
__gnu_cxx::char_traits::eof	/usr/include/c++/10/bits/char_traits.h	/^      eof()$/;"	f	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR int_type	access:public	signature:()
__gnu_cxx::char_traits::eq	/usr/include/c++/10/bits/char_traits.h	/^      eq(const char_type& __c1, const char_type& __c2)$/;"	f	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR bool	access:public	signature:(const char_type & __c1,const char_type & __c2)
__gnu_cxx::char_traits::eq_int_type	/usr/include/c++/10/bits/char_traits.h	/^      eq_int_type(const int_type& __c1, const int_type& __c2)$/;"	f	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR bool	access:public	signature:(const int_type & __c1,const int_type & __c2)
__gnu_cxx::char_traits::find	/usr/include/c++/10/bits/char_traits.h	/^      find(const char_type* __s, std::size_t __n, const char_type& __a);$/;"	p	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX14_CONSTEXPR const char_type *	access:public	signature:(const char_type * __s,std::size_t __n,const char_type & __a)
__gnu_cxx::char_traits::find	/usr/include/c++/10/bits/char_traits.h	/^    find(const char_type* __s, std::size_t __n, const char_type& __a)$/;"	f	class:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX14_CONSTEXPR const typename char_traits<_CharT>::char_type *	signature:(const char_type * __s,std::size_t __n,const char_type & __a)
__gnu_cxx::char_traits::int_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef typename _Char_types<_CharT>::int_type    int_type;$/;"	t	struct:__gnu_cxx::char_traits	typeref:typename:_Char_types<_CharT>::int_type	access:public
__gnu_cxx::char_traits::length	/usr/include/c++/10/bits/char_traits.h	/^      length(const char_type* __s);$/;"	p	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX14_CONSTEXPR std::size_t	access:public	signature:(const char_type * __s)
__gnu_cxx::char_traits::length	/usr/include/c++/10/bits/char_traits.h	/^    length(const char_type* __p)$/;"	f	class:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX14_CONSTEXPR std::size_t	signature:(const char_type * __p)
__gnu_cxx::char_traits::lt	/usr/include/c++/10/bits/char_traits.h	/^      lt(const char_type& __c1, const char_type& __c2)$/;"	f	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR bool	access:public	signature:(const char_type & __c1,const char_type & __c2)
__gnu_cxx::char_traits::move	/usr/include/c++/10/bits/char_traits.h	/^      move(char_type* __s1, const char_type* __s2, std::size_t __n);$/;"	p	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR char_type *	access:public	signature:(char_type * __s1,const char_type * __s2,std::size_t __n)
__gnu_cxx::char_traits::move	/usr/include/c++/10/bits/char_traits.h	/^    move(char_type* __s1, const char_type* __s2, std::size_t __n)$/;"	f	class:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR typename char_traits<_CharT>::char_type *	signature:(char_type * __s1,const char_type * __s2,std::size_t __n)
__gnu_cxx::char_traits::not_eof	/usr/include/c++/10/bits/char_traits.h	/^      not_eof(const int_type& __c)$/;"	f	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR int_type	access:public	signature:(const int_type & __c)
__gnu_cxx::char_traits::off_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef typename _Char_types<_CharT>::off_type    off_type;$/;"	t	struct:__gnu_cxx::char_traits	typeref:typename:_Char_types<_CharT>::off_type	access:public
__gnu_cxx::char_traits::pos_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef typename _Char_types<_CharT>::pos_type    pos_type;$/;"	t	struct:__gnu_cxx::char_traits	typeref:typename:_Char_types<_CharT>::pos_type	access:public
__gnu_cxx::char_traits::state_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef typename _Char_types<_CharT>::state_type  state_type;$/;"	t	struct:__gnu_cxx::char_traits	typeref:typename:_Char_types<_CharT>::state_type	access:public
__gnu_cxx::char_traits::to_char_type	/usr/include/c++/10/bits/char_traits.h	/^      to_char_type(const int_type& __c)$/;"	f	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR char_type	access:public	signature:(const int_type & __c)
__gnu_cxx::char_traits::to_int_type	/usr/include/c++/10/bits/char_traits.h	/^      to_int_type(const char_type& __c)$/;"	f	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR int_type	access:public	signature:(const char_type & __c)
__gnu_cxx::new_allocator	/usr/include/c++/10/ext/new_allocator.h	/^    class new_allocator$/;"	c	namespace:__gnu_cxx
__gnu_cxx::new_allocator::_M_max_size	/usr/include/c++/10/ext/new_allocator.h	/^      _M_max_size() const _GLIBCXX_USE_NOEXCEPT$/;"	f	class:__gnu_cxx::new_allocator	typeref:typename:_GLIBCXX_CONSTEXPR size_type	access:private	signature:() const
__gnu_cxx::new_allocator::address	/usr/include/c++/10/ext/new_allocator.h	/^      address(const_reference __x) const _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::new_allocator	typeref:typename:const_pointer	access:public	signature:(const_reference __x) const
__gnu_cxx::new_allocator::address	/usr/include/c++/10/ext/new_allocator.h	/^      address(reference __x) const _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::new_allocator	typeref:typename:pointer	access:public	signature:(reference __x) const
__gnu_cxx::new_allocator::allocate	/usr/include/c++/10/ext/new_allocator.h	/^      allocate(size_type __n, const void* = static_cast<const void*>(0))$/;"	f	class:__gnu_cxx::new_allocator	typeref:typename:_GLIBCXX_NODISCARD _Tp *	access:public	signature:(size_type __n,const void * =static_cast<const void * > (0))
__gnu_cxx::new_allocator::const_pointer	/usr/include/c++/10/ext/new_allocator.h	/^      typedef const _Tp* const_pointer;$/;"	t	class:__gnu_cxx::new_allocator	typeref:typename:const _Tp *	access:public
__gnu_cxx::new_allocator::const_reference	/usr/include/c++/10/ext/new_allocator.h	/^      typedef const _Tp& const_reference;$/;"	t	class:__gnu_cxx::new_allocator	typeref:typename:const _Tp &	access:public
__gnu_cxx::new_allocator::construct	/usr/include/c++/10/ext/new_allocator.h	/^	construct(_Up* __p, _Args&&... __args)$/;"	f	class:__gnu_cxx::new_allocator	typeref:typename:void	access:public	signature:(_Up * __p,_Args &&...__args)
__gnu_cxx::new_allocator::construct	/usr/include/c++/10/ext/new_allocator.h	/^      construct(pointer __p, const _Tp& __val)$/;"	f	class:__gnu_cxx::new_allocator	typeref:typename:void	access:public	signature:(pointer __p,const _Tp & __val)
__gnu_cxx::new_allocator::deallocate	/usr/include/c++/10/ext/new_allocator.h	/^      deallocate(_Tp* __p, size_type __t)$/;"	f	class:__gnu_cxx::new_allocator	typeref:typename:void	access:public	signature:(_Tp * __p,size_type __t)
__gnu_cxx::new_allocator::destroy	/usr/include/c++/10/ext/new_allocator.h	/^	destroy(_Up* __p)$/;"	f	class:__gnu_cxx::new_allocator	typeref:typename:void	access:public	signature:(_Up * __p)
__gnu_cxx::new_allocator::destroy	/usr/include/c++/10/ext/new_allocator.h	/^      destroy(pointer __p) { __p->~_Tp(); }$/;"	f	class:__gnu_cxx::new_allocator	typeref:typename:void	access:public	signature:(pointer __p)
__gnu_cxx::new_allocator::difference_type	/usr/include/c++/10/ext/new_allocator.h	/^      typedef std::ptrdiff_t  difference_type;$/;"	t	class:__gnu_cxx::new_allocator	typeref:typename:std::ptrdiff_t	access:public
__gnu_cxx::new_allocator::max_size	/usr/include/c++/10/ext/new_allocator.h	/^      max_size() const _GLIBCXX_USE_NOEXCEPT$/;"	f	class:__gnu_cxx::new_allocator	typeref:typename:size_type	access:public	signature:() const
__gnu_cxx::new_allocator::new_allocator	/usr/include/c++/10/ext/new_allocator.h	/^	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }$/;"	f	class:__gnu_cxx::new_allocator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const new_allocator<_Tp1> &)
__gnu_cxx::new_allocator::new_allocator	/usr/include/c++/10/ext/new_allocator.h	/^      new_allocator() _GLIBCXX_USE_NOEXCEPT { }$/;"	f	class:__gnu_cxx::new_allocator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:()
__gnu_cxx::new_allocator::new_allocator	/usr/include/c++/10/ext/new_allocator.h	/^      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }$/;"	f	class:__gnu_cxx::new_allocator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const new_allocator &)
__gnu_cxx::new_allocator::pointer	/usr/include/c++/10/ext/new_allocator.h	/^      typedef _Tp*       pointer;$/;"	t	class:__gnu_cxx::new_allocator	typeref:typename:_Tp *	access:public
__gnu_cxx::new_allocator::propagate_on_container_move_assignment	/usr/include/c++/10/ext/new_allocator.h	/^      typedef std::true_type propagate_on_container_move_assignment;$/;"	t	class:__gnu_cxx::new_allocator	typeref:typename:std::true_type	access:public
__gnu_cxx::new_allocator::rebind	/usr/include/c++/10/ext/new_allocator.h	/^	struct rebind$/;"	s	class:__gnu_cxx::new_allocator	access:public
__gnu_cxx::new_allocator::rebind::other	/usr/include/c++/10/ext/new_allocator.h	/^	{ typedef new_allocator<_Tp1> other; };$/;"	t	struct:__gnu_cxx::new_allocator::rebind	typeref:typename:new_allocator<_Tp1>	access:public
__gnu_cxx::new_allocator::reference	/usr/include/c++/10/ext/new_allocator.h	/^      typedef _Tp&       reference;$/;"	t	class:__gnu_cxx::new_allocator	typeref:typename:_Tp &	access:public
__gnu_cxx::new_allocator::size_type	/usr/include/c++/10/ext/new_allocator.h	/^      typedef std::size_t     size_type;$/;"	t	class:__gnu_cxx::new_allocator	typeref:typename:std::size_t	access:public
__gnu_cxx::new_allocator::value_type	/usr/include/c++/10/ext/new_allocator.h	/^      typedef _Tp        value_type;$/;"	t	class:__gnu_cxx::new_allocator	typeref:typename:_Tp	access:public
__gnu_cxx::new_allocator::~new_allocator	/usr/include/c++/10/ext/new_allocator.h	/^      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }$/;"	f	class:__gnu_cxx::new_allocator	access:public	signature:()
__gnu_cxx::operator !=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
__gnu_cxx::operator !=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
__gnu_cxx::operator !=	/usr/include/c++/10/ext/new_allocator.h	/^	operator!=(const new_allocator&, const new_allocator<_Up>&)$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const new_allocator &,const new_allocator<_Up> &)
__gnu_cxx::operator +	/usr/include/c++/10/bits/stl_iterator.h	/^    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator<_Iterator,_Container>	signature:(typename __normal_iterator<_Iterator,_Container>::difference_type __n,const __normal_iterator<_Iterator,_Container> & __i)
__gnu_cxx::operator -	/usr/include/c++/10/bits/stl_iterator.h	/^    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX20_CONSTEXPR typename __normal_iterator<_Iterator,_Container>::difference_type	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
__gnu_cxx::operator -	/usr/include/c++/10/bits/stl_iterator.h	/^    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX20_CONSTEXPR auto	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
__gnu_cxx::operator <	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
__gnu_cxx::operator <	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
__gnu_cxx::operator <=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
__gnu_cxx::operator <=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
__gnu_cxx::operator <=>	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<=>(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:std::__detail::__synth3way_t<_IteratorR,_IteratorL>	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
__gnu_cxx::operator ==	/usr/include/c++/10/bits/stl_iterator.h	/^    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
__gnu_cxx::operator ==	/usr/include/c++/10/bits/stl_iterator.h	/^    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
__gnu_cxx::operator ==	/usr/include/c++/10/bits/stl_iterator.h	/^    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
__gnu_cxx::operator ==	/usr/include/c++/10/ext/new_allocator.h	/^	operator==(const new_allocator&, const new_allocator<_Up>&)$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const new_allocator &,const new_allocator<_Up> &)
__gnu_cxx::operator >	/usr/include/c++/10/bits/stl_iterator.h	/^    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
__gnu_cxx::operator >	/usr/include/c++/10/bits/stl_iterator.h	/^    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
__gnu_cxx::operator >=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
__gnu_cxx::operator >=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
__gnu_cxx_ldbl128	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^  inline namespace __gnu_cxx_ldbl128 { }$/;"	n	namespace:std
__gnu_debug	/usr/include/c++/10/bits/ptr_traits.h	/^namespace __gnu_debug { struct _Safe_iterator_base; }$/;"	n
__gnu_debug	/usr/include/c++/10/debug/debug.h	/^namespace __gnu_debug$/;"	n
__gnuc_va_list	/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h	/^typedef __builtin_va_list __gnuc_va_list;$/;"	t	typeref:typename:__builtin_va_list
__gthread_active_p	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_active_p (void)$/;"	f	typeref:typename:int	signature:(void)
__gthread_cond_broadcast	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_cond_broadcast (__gthread_cond_t *__cond)$/;"	f	typeref:typename:int	signature:(__gthread_cond_t * __cond)
__gthread_cond_destroy	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_cond_destroy (__gthread_cond_t* __cond)$/;"	f	typeref:typename:int	signature:(__gthread_cond_t * __cond)
__gthread_cond_init_function	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_cond_init_function (__gthread_cond_t *__cond)$/;"	f	typeref:typename:void	signature:(__gthread_cond_t * __cond)
__gthread_cond_signal	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_cond_signal (__gthread_cond_t *__cond)$/;"	f	typeref:typename:int	signature:(__gthread_cond_t * __cond)
__gthread_cond_t	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^typedef pthread_cond_t __gthread_cond_t;$/;"	t	typeref:typename:pthread_cond_t
__gthread_cond_timedwait	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_cond_timedwait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex,$/;"	f	typeref:typename:int	signature:(__gthread_cond_t * __cond,__gthread_mutex_t * __mutex,const __gthread_time_t * __abs_timeout)
__gthread_cond_wait	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_cond_wait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex)$/;"	f	typeref:typename:int	signature:(__gthread_cond_t * __cond,__gthread_mutex_t * __mutex)
__gthread_cond_wait_recursive	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_cond_wait_recursive (__gthread_cond_t *__cond,$/;"	f	typeref:typename:int	signature:(__gthread_cond_t * __cond,__gthread_recursive_mutex_t * __mutex)
__gthread_create	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_create (__gthread_t *__threadid, void *(*__func) (void*),$/;"	f	typeref:typename:int	signature:(__gthread_t * __threadid,void * (* __func)(void *),void * __args)
__gthread_detach	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_detach (__gthread_t __threadid)$/;"	f	typeref:typename:int	signature:(__gthread_t __threadid)
__gthread_equal	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_equal (__gthread_t __t1, __gthread_t __t2)$/;"	f	typeref:typename:int	signature:(__gthread_t __t1,__gthread_t __t2)
__gthread_getspecific	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_getspecific (__gthread_key_t __key)$/;"	f	typeref:typename:void *	signature:(__gthread_key_t __key)
__gthread_join	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_join (__gthread_t __threadid, void **__value_ptr)$/;"	f	typeref:typename:int	signature:(__gthread_t __threadid,void ** __value_ptr)
__gthread_key_create	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))$/;"	f	typeref:typename:int	signature:(__gthread_key_t * __key,void (* __dtor)(void *))
__gthread_key_delete	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_key_delete (__gthread_key_t __key)$/;"	f	typeref:typename:int	signature:(__gthread_key_t __key)
__gthread_key_t	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^typedef pthread_key_t __gthread_key_t;$/;"	t	typeref:typename:pthread_key_t
__gthread_mutex_destroy	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_mutex_destroy (__gthread_mutex_t *__mutex)$/;"	f	typeref:typename:int	signature:(__gthread_mutex_t * __mutex)
__gthread_mutex_init_function	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_mutex_init_function (__gthread_mutex_t *__mutex)$/;"	f	typeref:typename:void	signature:(__gthread_mutex_t * __mutex)
__gthread_mutex_lock	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_mutex_lock (__gthread_mutex_t *__mutex)$/;"	f	typeref:typename:int	signature:(__gthread_mutex_t * __mutex)
__gthread_mutex_t	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^typedef pthread_mutex_t __gthread_mutex_t;$/;"	t	typeref:typename:pthread_mutex_t
__gthread_mutex_timedlock	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_mutex_timedlock (__gthread_mutex_t *__mutex,$/;"	f	typeref:typename:int	signature:(__gthread_mutex_t * __mutex,const __gthread_time_t * __abs_timeout)
__gthread_mutex_trylock	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_mutex_trylock (__gthread_mutex_t *__mutex)$/;"	f	typeref:typename:int	signature:(__gthread_mutex_t * __mutex)
__gthread_mutex_unlock	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_mutex_unlock (__gthread_mutex_t *__mutex)$/;"	f	typeref:typename:int	signature:(__gthread_mutex_t * __mutex)
__gthread_objc_close_thread_system	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_objc_close_thread_system (void)$/;"	f	typeref:typename:int	signature:(void)
__gthread_objc_condition_allocate	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_objc_condition_allocate (objc_condition_t condition)$/;"	f	typeref:typename:int	signature:(objc_condition_t condition)
__gthread_objc_condition_broadcast	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_objc_condition_broadcast (objc_condition_t condition)$/;"	f	typeref:typename:int	signature:(objc_condition_t condition)
__gthread_objc_condition_deallocate	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_objc_condition_deallocate (objc_condition_t condition)$/;"	f	typeref:typename:int	signature:(objc_condition_t condition)
__gthread_objc_condition_signal	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_objc_condition_signal (objc_condition_t condition)$/;"	f	typeref:typename:int	signature:(objc_condition_t condition)
__gthread_objc_condition_wait	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_objc_condition_wait (objc_condition_t condition, objc_mutex_t mutex)$/;"	f	typeref:typename:int	signature:(objc_condition_t condition,objc_mutex_t mutex)
__gthread_objc_init_thread_system	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_objc_init_thread_system (void)$/;"	f	typeref:typename:int	signature:(void)
__gthread_objc_mutex_allocate	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_objc_mutex_allocate (objc_mutex_t mutex)$/;"	f	typeref:typename:int	signature:(objc_mutex_t mutex)
__gthread_objc_mutex_deallocate	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_objc_mutex_deallocate (objc_mutex_t mutex)$/;"	f	typeref:typename:int	signature:(objc_mutex_t mutex)
__gthread_objc_mutex_lock	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_objc_mutex_lock (objc_mutex_t mutex)$/;"	f	typeref:typename:int	signature:(objc_mutex_t mutex)
__gthread_objc_mutex_trylock	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_objc_mutex_trylock (objc_mutex_t mutex)$/;"	f	typeref:typename:int	signature:(objc_mutex_t mutex)
__gthread_objc_mutex_unlock	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_objc_mutex_unlock (objc_mutex_t mutex)$/;"	f	typeref:typename:int	signature:(objc_mutex_t mutex)
__gthread_objc_thread_detach	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_objc_thread_detach (void (*func)(void *), void *arg)$/;"	f	typeref:typename:objc_thread_t	signature:(void (* func)(void *),void * arg)
__gthread_objc_thread_exit	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_objc_thread_exit (void)$/;"	f	typeref:typename:int	signature:(void)
__gthread_objc_thread_get_data	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_objc_thread_get_data (void)$/;"	f	typeref:typename:void *	signature:(void)
__gthread_objc_thread_get_priority	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_objc_thread_get_priority (void)$/;"	f	typeref:typename:int	signature:(void)
__gthread_objc_thread_id	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_objc_thread_id (void)$/;"	f	typeref:typename:objc_thread_t	signature:(void)
__gthread_objc_thread_set_data	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_objc_thread_set_data (void *value)$/;"	f	typeref:typename:int	signature:(void * value)
__gthread_objc_thread_set_priority	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_objc_thread_set_priority (int priority)$/;"	f	typeref:typename:int	signature:(int priority)
__gthread_objc_thread_yield	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_objc_thread_yield (void)$/;"	f	typeref:typename:void	signature:(void)
__gthread_once	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_once (__gthread_once_t *__once, void (*__func) (void))$/;"	f	typeref:typename:int	signature:(__gthread_once_t * __once,void (* __func)(void))
__gthread_once_t	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^typedef pthread_once_t __gthread_once_t;$/;"	t	typeref:typename:pthread_once_t
__gthread_recursive_mutex_destroy	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_recursive_mutex_destroy (__gthread_recursive_mutex_t *__mutex)$/;"	f	typeref:typename:int	signature:(__gthread_recursive_mutex_t * __mutex)
__gthread_recursive_mutex_init_function	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_recursive_mutex_init_function (__gthread_recursive_mutex_t *__mutex)$/;"	f	typeref:typename:int	signature:(__gthread_recursive_mutex_t * __mutex)
__gthread_recursive_mutex_lock	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)$/;"	f	typeref:typename:int	signature:(__gthread_recursive_mutex_t * __mutex)
__gthread_recursive_mutex_t	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^typedef pthread_mutex_t __gthread_recursive_mutex_t;$/;"	t	typeref:typename:pthread_mutex_t
__gthread_recursive_mutex_timedlock	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_recursive_mutex_timedlock (__gthread_recursive_mutex_t *__mutex,$/;"	f	typeref:typename:int	signature:(__gthread_recursive_mutex_t * __mutex,const __gthread_time_t * __abs_timeout)
__gthread_recursive_mutex_trylock	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)$/;"	f	typeref:typename:int	signature:(__gthread_recursive_mutex_t * __mutex)
__gthread_recursive_mutex_unlock	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)$/;"	f	typeref:typename:int	signature:(__gthread_recursive_mutex_t * __mutex)
__gthread_self	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_self (void)$/;"	f	typeref:typename:__gthread_t	signature:(void)
__gthread_setspecific	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_setspecific (__gthread_key_t __key, const void *__ptr)$/;"	f	typeref:typename:int	signature:(__gthread_key_t __key,const void * __ptr)
__gthread_t	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^typedef pthread_t __gthread_t;$/;"	t	typeref:typename:pthread_t
__gthread_time_t	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^typedef struct timespec __gthread_time_t;$/;"	t	typeref:struct:timespec
__gthread_trigger	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_trigger (void)$/;"	f	typeref:typename:void	signature:(void)
__gthread_yield	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthread_yield (void)$/;"	f	typeref:typename:int	signature:(void)
__gthrw	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^#define __gthrw(/;"	d	signature:(name)
__gthrw	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^__gthrw(pthread_getspecific)$/;"	p	typeref:typename:pthread_once	signature:(pthread_getspecific)
__gthrw2	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^# define __gthrw2(/;"	d	signature:(name,name2,type)
__gthrw_	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^# define __gthrw_(/;"	d	signature:(name)
__gthrw_pragma	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^#  define __gthrw_pragma(/;"	d	signature:(pragma)
__has_construct	/usr/include/c++/10/bits/alloc_traits.h	/^	using __has_construct$/;"	t	struct:std::allocator_traits	typeref:typename:__construct_helper<_Tp,_Args...>::type	access:private
__hash_base	/usr/include/c++/10/bits/functional_hash.h	/^    struct __hash_base$/;"	s	namespace:std
__hash_combine	/usr/include/c++/10/bits/functional_hash.h	/^      __hash_combine(const _Tp& __val, size_t __hash)$/;"	f	struct:std::_Fnv_hash_impl	typeref:typename:size_t	access:public	signature:(const _Tp & __val,size_t __hash)
__hash_combine	/usr/include/c++/10/bits/functional_hash.h	/^      __hash_combine(const _Tp& __val, size_t __hash)$/;"	f	struct:std::_Hash_impl	typeref:typename:size_t	access:public	signature:(const _Tp & __val,size_t __hash)
__hash_enum	/usr/include/c++/10/bits/functional_hash.h	/^      __hash_enum(__hash_enum&&);$/;"	p	struct:std::__hash_enum	access:private	signature:(__hash_enum &&)
__hash_enum	/usr/include/c++/10/bits/functional_hash.h	/^    struct __hash_enum$/;"	s	namespace:std
__hash_enum	/usr/include/c++/10/bits/functional_hash.h	/^    struct __hash_enum<_Tp, true> : public __hash_base<size_t, _Tp>$/;"	s	namespace:std	inherits:__hash_base<size_t,_Tp>
__have_pthread_attr_t	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^# define __have_pthread_attr_t /;"	d
__high	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^      unsigned int __high;$/;"	m	struct:__pthread_cond_s::__anona7088117010a::__anona70881170208	typeref:typename:unsigned int	access:public
__high	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^      unsigned int __high;$/;"	m	struct:__pthread_cond_s::__anona7088117030a::__anona70881170408	typeref:typename:unsigned int	access:public
__id_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __ID_T_TYPE __id_t;		\/* General type for IDs.  *\/$/;"	v	typeref:typename:__STD_TYPE __ID_T_TYPE
__id_t_defined	/usr/include/x86_64-linux-gnu/sys/types.h	/^# define __id_t_defined$/;"	d
__if_type	/usr/include/c++/10/ext/type_traits.h	/^      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;$/;"	t	struct:__gnu_cxx::__add_unsigned	typeref:typename:__enable_if<std::__is_integer<_Tp>::__value,_Tp>	access:private
__if_type	/usr/include/c++/10/ext/type_traits.h	/^      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;$/;"	t	struct:__gnu_cxx::__remove_unsigned	typeref:typename:__enable_if<std::__is_integer<_Tp>::__value,_Tp>	access:private
__init	/usr/include/stdlib.h	/^    unsigned short int __init;	\/* Flag for initializing.  *\/$/;"	m	struct:drand48_data	typeref:typename:unsigned short int	access:public
__inline	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __inline	/;"	d
__ino64_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __INO64_T_TYPE __ino64_t;	\/* Type of file serial numbers (LFS).*\/$/;"	v	typeref:typename:__STD_TYPE __INO64_T_TYPE
__ino64_t_defined	/usr/include/x86_64-linux-gnu/sys/types.h	/^# define __ino64_t_defined$/;"	d
__ino_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __INO_T_TYPE __ino_t;	\/* Type of file serial numbers.  *\/$/;"	v	typeref:typename:__STD_TYPE __INO_T_TYPE
__ino_t_defined	/usr/include/x86_64-linux-gnu/sys/types.h	/^# define __ino_t_defined$/;"	d
__int16_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^typedef signed short int __int16_t;$/;"	t	typeref:typename:signed short int
__int32_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^typedef signed int __int32_t;$/;"	t	typeref:typename:signed int
__int64_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__extension__ typedef signed long long int __int64_t;$/;"	t	typeref:typename:signed long long int
__int64_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^typedef signed long int __int64_t;$/;"	t	typeref:typename:signed long int
__int8_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^typedef signed char __int8_t;$/;"	t	typeref:typename:signed char
__int_least16_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^typedef __int16_t __int_least16_t;$/;"	t	typeref:typename:__int16_t
__int_least32_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^typedef __int32_t __int_least32_t;$/;"	t	typeref:typename:__int32_t
__int_least64_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^typedef __int64_t __int_least64_t;$/;"	t	typeref:typename:__int64_t
__int_least8_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^typedef __int8_t __int_least8_t;$/;"	t	typeref:typename:__int8_t
__int_n_cs_precedes	/usr/include/locale.h	/^  char __int_n_cs_precedes;$/;"	m	struct:lconv	typeref:typename:char	access:public
__int_n_sep_by_space	/usr/include/locale.h	/^  char __int_n_sep_by_space;$/;"	m	struct:lconv	typeref:typename:char	access:public
__int_n_sign_posn	/usr/include/locale.h	/^  char __int_n_sign_posn;$/;"	m	struct:lconv	typeref:typename:char	access:public
__int_p_cs_precedes	/usr/include/locale.h	/^  char __int_p_cs_precedes;$/;"	m	struct:lconv	typeref:typename:char	access:public
__int_p_sep_by_space	/usr/include/locale.h	/^  char __int_p_sep_by_space;$/;"	m	struct:lconv	typeref:typename:char	access:public
__int_p_sign_posn	/usr/include/locale.h	/^  char __int_p_sign_posn;$/;"	m	struct:lconv	typeref:typename:char	access:public
__int_traits	/usr/include/c++/10/ext/numeric_traits.h	/^    using __int_traits = __numeric_traits_integer<_Tp>;$/;"	t	namespace:__gnu_cxx	typeref:typename:__numeric_traits_integer<_Tp>
__intmax_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__extension__ typedef long long int __intmax_t;$/;"	t	typeref:typename:long long int
__intmax_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^typedef long int __intmax_t;$/;"	t	typeref:typename:long int
__intptr_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __SWORD_TYPE __intptr_t;$/;"	v	typeref:typename:__STD_TYPE __SWORD_TYPE
__intptr_t_defined	/usr/include/stdint.h	/^#  define __intptr_t_defined$/;"	d
__ios_base	/usr/include/c++/10/bits/ostream_insert.h	/^      typedef typename __ostream_type::ios_base    __ios_base;$/;"	t	function:std::__ostream_fill	typeref:typename:__ostream_type::ios_base
__ios_base	/usr/include/c++/10/bits/ostream_insert.h	/^      typedef typename __ostream_type::ios_base    __ios_base;$/;"	t	function:std::__ostream_insert	typeref:typename:__ostream_type::ios_base
__ios_base	/usr/include/c++/10/bits/ostream_insert.h	/^      typedef typename __ostream_type::ios_base    __ios_base;$/;"	t	function:std::__ostream_write	typeref:typename:__ostream_type::ios_base
__is_alloc_insertable_impl	/usr/include/c++/10/bits/alloc_traits.h	/^    struct __is_alloc_insertable_impl$/;"	s	namespace:std	inherits:false_type
__is_alloc_insertable_impl	/usr/include/c++/10/bits/alloc_traits.h	/^    struct __is_alloc_insertable_impl<_Alloc, _Tp, _ValueT,$/;"	s	namespace:std	inherits:true_type
__is_allocator	/usr/include/c++/10/bits/alloc_traits.h	/^    struct __is_allocator : false_type { };$/;"	s	namespace:std	inherits:false_type
__is_allocator	/usr/include/c++/10/bits/alloc_traits.h	/^    struct __is_allocator<_Alloc,$/;"	s	namespace:std	inherits:true_type
__is_arithmetic	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_arithmetic$/;"	s	namespace:std	inherits:__traitor<__is_integer<_Tp>,__is_floating<_Tp>>
__is_byte	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_byte$/;"	s	namespace:std
__is_byte	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_byte<byte>$/;"	s	namespace:std
__is_byte	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_byte<char8_t>$/;"	s	namespace:std
__is_byte	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_byte<char>$/;"	s	namespace:std
__is_byte	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_byte<signed char>$/;"	s	namespace:std
__is_byte	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_byte<unsigned char>$/;"	s	namespace:std
__is_char	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_char$/;"	s	namespace:std
__is_char	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_char<char>$/;"	s	namespace:std
__is_char	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_char<wchar_t>$/;"	s	namespace:std
__is_copy_insertable	/usr/include/c++/10/bits/alloc_traits.h	/^    struct __is_copy_insertable$/;"	s	namespace:std	inherits:__is_alloc_insertable_impl<_Alloc,typename_Alloc::value_typeconst&>::type
__is_copy_insertable	/usr/include/c++/10/bits/alloc_traits.h	/^    struct __is_copy_insertable<allocator<_Tp>>$/;"	s	namespace:std	inherits:is_copy_constructible<_Tp>
__is_custom_pointer	/usr/include/c++/10/ext/alloc_traits.h	/^      using __is_custom_pointer$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:std::__and_<std::is_same<pointer,_Ptr>,std::__not_<std::is_pointer<_Ptr>>>	access:private
__is_fast_hash	/usr/include/c++/10/bits/basic_string.h	/^    struct __is_fast_hash<hash<string>> : std::false_type$/;"	s	namespace:std	inherits:std::false_type
__is_fast_hash	/usr/include/c++/10/bits/basic_string.h	/^    struct __is_fast_hash<hash<u16string>> : std::false_type$/;"	s	namespace:std	inherits:std::false_type
__is_fast_hash	/usr/include/c++/10/bits/basic_string.h	/^    struct __is_fast_hash<hash<u32string>> : std::false_type$/;"	s	namespace:std	inherits:std::false_type
__is_fast_hash	/usr/include/c++/10/bits/basic_string.h	/^    struct __is_fast_hash<hash<u8string>> : std::false_type$/;"	s	namespace:std	inherits:std::false_type
__is_fast_hash	/usr/include/c++/10/bits/basic_string.h	/^    struct __is_fast_hash<hash<wstring>> : std::false_type$/;"	s	namespace:std	inherits:std::false_type
__is_fast_hash	/usr/include/c++/10/bits/functional_hash.h	/^    struct __is_fast_hash : public std::true_type$/;"	s	namespace:std	inherits:std::true_type
__is_fast_hash	/usr/include/c++/10/bits/functional_hash.h	/^    struct __is_fast_hash<hash<long double>> : public std::false_type$/;"	s	namespace:std	inherits:std::false_type
__is_final	/usr/include/c++/10/bits/nested_exception.h	/^      using __nest = __and_<is_class<_Up>, __bool_constant<!__is_final(_Up)>,$/;"	t	function:std::throw_with_nested
__is_floating	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_floating$/;"	s	namespace:std
__is_floating	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_floating<double>$/;"	s	namespace:std
__is_floating	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_floating<float>$/;"	s	namespace:std
__is_floating	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_floating<long double>$/;"	s	namespace:std
__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer$/;"	s	namespace:std
__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer<bool>$/;"	s	namespace:std
__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer<char16_t>$/;"	s	namespace:std
__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer<char32_t>$/;"	s	namespace:std
__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer<char8_t>$/;"	s	namespace:std
__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer<char>$/;"	s	namespace:std
__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer<int>$/;"	s	namespace:std
__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer<long long>$/;"	s	namespace:std
__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer<long>$/;"	s	namespace:std
__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer<short>$/;"	s	namespace:std
__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer<signed char>$/;"	s	namespace:std
__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer<unsigned char>$/;"	s	namespace:std
__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer<unsigned int>$/;"	s	namespace:std
__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer<unsigned long long>$/;"	s	namespace:std
__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer<unsigned long>$/;"	s	namespace:std
__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer<unsigned short>$/;"	s	namespace:std
__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer<wchar_t>$/;"	s	namespace:std
__is_integer_nonstrict	/usr/include/c++/10/ext/numeric_traits.h	/^    struct __is_integer_nonstrict$/;"	s	namespace:__gnu_cxx	inherits:std::__is_integer<_Tp>
__is_iterator_type	/usr/include/c++/10/bits/streambuf_iterator.h	/^      typedef istreambuf_iterator<_CharT>		   __is_iterator_type;$/;"	t	function:std::__copy_move_a2	typeref:typename:istreambuf_iterator<_CharT>
__is_iterator_type	/usr/include/c++/10/bits/streambuf_iterator.h	/^      typedef istreambuf_iterator<_CharT>		   __is_iterator_type;$/;"	t	function:std::advance	typeref:typename:istreambuf_iterator<_CharT>
__is_iterator_type	/usr/include/c++/10/bits/streambuf_iterator.h	/^      typedef istreambuf_iterator<_CharT>		   __is_iterator_type;$/;"	t	function:std::find	typeref:typename:istreambuf_iterator<_CharT>
__is_memcmp_ordered	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_memcmp_ordered$/;"	s	namespace:std
__is_memcmp_ordered	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_memcmp_ordered<_Tp, false>$/;"	s	namespace:std
__is_memcmp_ordered_with	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_memcmp_ordered_with$/;"	s	namespace:std
__is_memcmp_ordered_with	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_memcmp_ordered_with<_Tp, _Up, false>$/;"	s	namespace:std
__is_memcmp_ordered_with	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_memcmp_ordered_with<_Tp, std::byte, _SameSize>$/;"	s	namespace:std
__is_memcmp_ordered_with	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_memcmp_ordered_with<std::byte, _Up, _SameSize>$/;"	s	namespace:std
__is_memcmp_ordered_with	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_memcmp_ordered_with<std::byte, std::byte, true>$/;"	s	namespace:std
__is_move_insertable	/usr/include/c++/10/bits/alloc_traits.h	/^    struct __is_move_insertable$/;"	s	namespace:std	inherits:__is_alloc_insertable_impl<_Alloc,typename_Alloc::value_type>::type
__is_move_insertable	/usr/include/c++/10/bits/alloc_traits.h	/^    struct __is_move_insertable<allocator<_Tp>>$/;"	s	namespace:std	inherits:is_move_constructible<_Tp>
__is_move_iterator	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_move_iterator$/;"	s	namespace:std
__is_move_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    struct __is_move_iterator<move_iterator<_Iterator> >$/;"	s	namespace:std
__is_move_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    struct __is_move_iterator<reverse_iterator<_Iterator> >$/;"	s	namespace:std	inherits:__is_move_iterator<_Iterator>
__is_nonvolatile_trivially_copyable	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_nonvolatile_trivially_copyable$/;"	s	namespace:std
__is_nonvolatile_trivially_copyable	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_nonvolatile_trivially_copyable<volatile _Tp>$/;"	s	namespace:std
__is_null_pointer	/usr/include/c++/10/ext/type_traits.h	/^    __is_null_pointer(_Type)$/;"	f	namespace:__gnu_cxx	typeref:typename:bool	signature:(_Type)
__is_null_pointer	/usr/include/c++/10/ext/type_traits.h	/^    __is_null_pointer(_Type* __ptr)$/;"	f	namespace:__gnu_cxx	typeref:typename:bool	signature:(_Type * __ptr)
__is_null_pointer	/usr/include/c++/10/ext/type_traits.h	/^  __is_null_pointer(std::nullptr_t)$/;"	f	namespace:__gnu_cxx	typeref:typename:bool	signature:(std::nullptr_t)
__is_permutation	/usr/include/c++/10/bits/stl_algobase.h	/^    __is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_ForwardIterator1 __first1,_ForwardIterator1 __last1,_ForwardIterator2 __first2,_BinaryPredicate __pred)
__is_pointer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_pointer$/;"	s	namespace:std
__is_pointer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_pointer<_Tp*>$/;"	s	namespace:std
__is_random_access_iter	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^    struct __is_random_access_iter$/;"	s	namespace:std
__is_random_access_iter	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^    struct __is_random_access_iter$/;"	s	namespace:std	inherits:is_base_of<random_access_iterator_tag,_Cat>
__is_scalar	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_scalar$/;"	s	namespace:std	inherits:__traitor<__is_arithmetic<_Tp>,__is_pointer<_Tp>>
__is_signed	/usr/include/c++/10/ext/numeric_traits.h	/^      static const bool __is_signed = (_Value)(-1) < 0;$/;"	m	struct:__gnu_cxx::__numeric_traits_integer	typeref:typename:const bool	access:public
__is_signed	/usr/include/c++/10/ext/numeric_traits.h	/^      static const bool __is_signed = true;$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	typeref:typename:const bool	access:public
__is_signed	/usr/include/c++/10/ext/numeric_traits.h	/^    const bool __numeric_traits_floating<_Value>::__is_signed;$/;"	m	class:__gnu_cxx::__numeric_traits_floating<_Value>	typeref:typename:const bool
__is_signed	/usr/include/c++/10/ext/numeric_traits.h	/^    const bool __numeric_traits_integer<_Value>::__is_signed;$/;"	m	class:__gnu_cxx::__numeric_traits_integer<_Value>	typeref:typename:const bool
__is_void	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_void$/;"	s	namespace:std
__is_void	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_void<void>$/;"	s	namespace:std
__isalnum_l	/usr/include/ctype.h	/^#  define __isalnum_l(/;"	d	signature:(c,l)
__isalpha_l	/usr/include/ctype.h	/^#  define __isalpha_l(/;"	d	signature:(c,l)
__isascii	/usr/include/ctype.h	/^#define	__isascii(/;"	d	signature:(c)
__isascii_l	/usr/include/ctype.h	/^#   define __isascii_l(/;"	d	signature:(c,l)
__isblank_l	/usr/include/ctype.h	/^#  define __isblank_l(/;"	d	signature:(c,l)
__iscntrl_l	/usr/include/ctype.h	/^#  define __iscntrl_l(/;"	d	signature:(c,l)
__isctype	/usr/include/ctype.h	/^# define __isctype(/;"	d	signature:(c,type)
__isctype_f	/usr/include/ctype.h	/^# define __isctype_f(/;"	d	signature:(type)
__isctype_f	/usr/include/ctype.h	/^__isctype_f (alpha)$/;"	f	typeref:typename:alnum	signature:(alpha)
__isctype_l	/usr/include/ctype.h	/^#  define __isctype_l(/;"	d	signature:(c,type,locale)
__isdigit_l	/usr/include/ctype.h	/^#  define __isdigit_l(/;"	d	signature:(c,l)
__isgraph_l	/usr/include/ctype.h	/^#  define __isgraph_l(/;"	d	signature:(c,l)
__isleap	/usr/include/time.h	/^#define __isleap(/;"	d	signature:(year)
__islower_l	/usr/include/ctype.h	/^#  define __islower_l(/;"	d	signature:(c,l)
__isoc99_fscanf	/usr/include/stdio.h	/^extern int __isoc99_fscanf (FILE *__restrict __stream,$/;"	p	typeref:typename:int	signature:(FILE * __restrict __stream,const char * __restrict __format,...)
__isoc99_fwscanf	/usr/include/wchar.h	/^extern int __isoc99_fwscanf (__FILE *__restrict __stream,$/;"	p	typeref:typename:int	signature:(__FILE * __restrict __stream,const wchar_t * __restrict __format,...)
__isoc99_scanf	/usr/include/stdio.h	/^extern int __isoc99_scanf (const char *__restrict __format, ...) __wur;$/;"	p	typeref:typename:int	signature:(const char * __restrict __format,...)
__isoc99_sscanf	/usr/include/stdio.h	/^extern int __isoc99_sscanf (const char *__restrict __s,$/;"	p	typeref:typename:int	signature:(const char * __restrict __s,const char * __restrict __format,...)
__isoc99_swscanf	/usr/include/wchar.h	/^extern int __isoc99_swscanf (const wchar_t *__restrict __s,$/;"	p	typeref:typename:int	signature:(const wchar_t * __restrict __s,const wchar_t * __restrict __format,...)
__isoc99_vfscanf	/usr/include/stdio.h	/^extern int __isoc99_vfscanf (FILE *__restrict __s,$/;"	p	typeref:typename:int	signature:(FILE * __restrict __s,const char * __restrict __format,__gnuc_va_list __arg)
__isoc99_vfwscanf	/usr/include/wchar.h	/^extern int __isoc99_vfwscanf (__FILE *__restrict __s,$/;"	p	typeref:typename:int	signature:(__FILE * __restrict __s,const wchar_t * __restrict __format,__gnuc_va_list __arg)
__isoc99_vscanf	/usr/include/stdio.h	/^extern int __isoc99_vscanf (const char *__restrict __format,$/;"	p	typeref:typename:int	signature:(const char * __restrict __format,__gnuc_va_list __arg)
__isoc99_vsscanf	/usr/include/stdio.h	/^extern int __isoc99_vsscanf (const char *__restrict __s,$/;"	p	typeref:typename:int	signature:(const char * __restrict __s,const char * __restrict __format,__gnuc_va_list __arg)
__isoc99_vswscanf	/usr/include/wchar.h	/^extern int __isoc99_vswscanf (const wchar_t *__restrict __s,$/;"	p	typeref:typename:int	signature:(const wchar_t * __restrict __s,const wchar_t * __restrict __format,__gnuc_va_list __arg)
__isoc99_vwscanf	/usr/include/wchar.h	/^extern int __isoc99_vwscanf (const wchar_t *__restrict __format,$/;"	p	typeref:typename:int	signature:(const wchar_t * __restrict __format,__gnuc_va_list __arg)
__isoc99_wscanf	/usr/include/wchar.h	/^extern int __isoc99_wscanf (const wchar_t *__restrict __format, ...);$/;"	p	typeref:typename:int	signature:(const wchar_t * __restrict __format,...)
__isprint_l	/usr/include/ctype.h	/^#  define __isprint_l(/;"	d	signature:(c,l)
__ispunct_l	/usr/include/ctype.h	/^#  define __ispunct_l(/;"	d	signature:(c,l)
__isspace_l	/usr/include/ctype.h	/^#  define __isspace_l(/;"	d	signature:(c,l)
__isupper_l	/usr/include/ctype.h	/^#  define __isupper_l(/;"	d	signature:(c,l)
__isxdigit_l	/usr/include/ctype.h	/^#  define __isxdigit_l(/;"	d	signature:(c,l)
__iter_comp_iter	/usr/include/c++/10/bits/predefined_ops.h	/^    __iter_comp_iter(_Compare __comp)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX14_CONSTEXPR _Iter_comp_iter<_Compare>	signature:(_Compare __comp)
__iter_comp_iter	/usr/include/c++/10/bits/predefined_ops.h	/^    __iter_comp_iter(_Iter_comp_iter<_Compare> __comp, _Iterator __it)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_comp_to_iter<_Compare,_Iterator>	signature:(_Iter_comp_iter<_Compare> __comp,_Iterator __it)
__iter_comp_iter	/usr/include/c++/10/bits/predefined_ops.h	/^    __iter_comp_iter(_Iter_equal_to_iter, _Iterator __it)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_equals_iter<_Iterator>	signature:(_Iter_equal_to_iter,_Iterator __it)
__iter_comp_val	/usr/include/c++/10/bits/predefined_ops.h	/^    __iter_comp_val(_Compare __comp)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_comp_val<_Compare>	signature:(_Compare __comp)
__iter_comp_val	/usr/include/c++/10/bits/predefined_ops.h	/^    __iter_comp_val(_Compare __comp, _Value &__val)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_Iter_comp_to_val<_Compare,_Value> _GLIBCXX20_CONSTEXPR	signature:(_Compare __comp,_Value & __val)
__iter_comp_val	/usr/include/c++/10/bits/predefined_ops.h	/^    __iter_comp_val(_Iter_comp_iter<_Compare> __comp)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_comp_val<_Compare>	signature:(_Iter_comp_iter<_Compare> __comp)
__iter_comp_val	/usr/include/c++/10/bits/predefined_ops.h	/^  __iter_comp_val(_Iter_equal_to_iter)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_equal_to_val	signature:(_Iter_equal_to_iter)
__iter_comp_val	/usr/include/c++/10/bits/predefined_ops.h	/^  __iter_comp_val(_Iter_less_iter)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_less_val	signature:(_Iter_less_iter)
__iter_concept	/usr/include/c++/10/bits/iterator_concepts.h	/^      using __iter_concept = typename __iter_concept_impl<_Iter>::type;$/;"	t	namespace:std::__detail	typeref:typename:__iter_concept_impl<_Iter>::type
__iter_concept_impl	/usr/include/c++/10/bits/iterator_concepts.h	/^      struct __iter_concept_impl$/;"	s	namespace:std::__detail
__iter_concept_impl	/usr/include/c++/10/bits/iterator_concepts.h	/^      struct __iter_concept_impl<_Iter>$/;"	s	namespace:std::__detail
__iter_diff_t	/usr/include/c++/10/bits/iterator_concepts.h	/^      using __iter_diff_t = typename$/;"	t	namespace:std::__detail	typeref:typename:__iter_traits<_Tp,incrementable_traits<_Tp>>::difference_type
__iter_equal_to_iter	/usr/include/c++/10/bits/predefined_ops.h	/^  __iter_equal_to_iter()$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_equal_to_iter	signature:()
__iter_equal_to_val	/usr/include/c++/10/bits/predefined_ops.h	/^  __iter_equal_to_val()$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_equal_to_val	signature:()
__iter_equals_val	/usr/include/c++/10/bits/predefined_ops.h	/^    __iter_equals_val(_Value& __val)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_equals_val<_Value>	signature:(_Value & __val)
__iter_exchange_move	/usr/include/c++/10/bits/iterator_concepts.h	/^      __iter_exchange_move(_Xp&& __x, _Yp&& __y)$/;"	f	namespace:std::ranges::__cust_iswap	typeref:typename:iter_value_t<_Xp>	signature:(_Xp && __x,_Yp && __y)
__iter_key_t	/usr/include/c++/10/bits/stl_iterator.h	/^    using __iter_key_t = remove_const_t<$/;"	t	namespace:std	typeref:typename:remove_const_t<typename iterator_traits<_InputIterator>::value_type::first_type>
__iter_less_iter	/usr/include/c++/10/bits/predefined_ops.h	/^  __iter_less_iter()$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX14_CONSTEXPR _Iter_less_iter	signature:()
__iter_less_val	/usr/include/c++/10/bits/predefined_ops.h	/^  __iter_less_val()$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_less_val	signature:()
__iter_swap	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __iter_swap$/;"	s	namespace:std
__iter_swap	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __iter_swap<true>$/;"	s	namespace:std
__iter_to_alloc_t	/usr/include/c++/10/bits/stl_iterator.h	/^    using __iter_to_alloc_t =$/;"	t	namespace:std	typeref:typename:pair<add_const_t<__iter_key_t<_InputIterator>>,__iter_val_t<_InputIterator>>
__iter_traits	/usr/include/c++/10/bits/iterator_concepts.h	/^      using __iter_traits = typename __iter_traits_impl<_Iter, _Tp>::type;$/;"	t	namespace:std::__detail	typeref:typename:__iter_traits_impl<_Iter,_Tp>::type
__iter_traits_impl	/usr/include/c++/10/bits/iterator_concepts.h	/^      struct __iter_traits_impl$/;"	s	namespace:std::__detail
__iter_traits_impl	/usr/include/c++/10/bits/iterator_concepts.h	/^      struct __iter_traits_impl<_Iter, _Tp>$/;"	s	namespace:std::__detail
__iter_type	/usr/include/c++/10/bits/range_access.h	/^	  using __iter_type = decltype(_Begin{}(std::forward<_Tp>(__e)));$/;"	t	function:std::ranges::__cust_access::_SSize::operator ()
__iter_val_t	/usr/include/c++/10/bits/stl_iterator.h	/^    using __iter_val_t =$/;"	t	namespace:std	typeref:typename:iterator_traits<_InputIterator>::value_type::second_type
__iter_value_t	/usr/include/c++/10/bits/iterator_concepts.h	/^      using __iter_value_t = typename$/;"	t	namespace:std::__detail	typeref:typename:__iter_traits<_Tp,indirectly_readable_traits<_Tp>>::value_type
__iterator_category	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^    __iterator_category(const _Iter&)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR typename iterator_traits<_Iter>::iterator_category	signature:(const _Iter &)
__iterator_category_t	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^    using __iterator_category_t$/;"	t	namespace:std	typeref:typename:iterator_traits<_Iter>::iterator_category
__iterator_traits	/usr/include/c++/10/bits/iterator_concepts.h	/^    struct __iterator_traits<_Iterator, void>$/;"	s	namespace:std
__iterator_traits	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^    struct __iterator_traits { };$/;"	s	namespace:std
__iterator_traits	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^    struct __iterator_traits<_Iterator,$/;"	s	namespace:std
__itimerspec_defined	/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h	/^#define __itimerspec_defined /;"	d
__jmp_buf	/usr/include/x86_64-linux-gnu/bits/setjmp.h	/^__extension__ typedef long long int __jmp_buf[8];$/;"	t	typeref:typename:long long int[8]
__jmp_buf	/usr/include/x86_64-linux-gnu/bits/setjmp.h	/^typedef int __jmp_buf[6];$/;"	t	typeref:typename:int[6]
__jmp_buf	/usr/include/x86_64-linux-gnu/bits/setjmp.h	/^typedef long int __jmp_buf[8];$/;"	t	typeref:typename:long int[8]
__key_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __KEY_T_TYPE __key_t;	\/* Type of an IPC key.  *\/$/;"	v	typeref:typename:__STD_TYPE __KEY_T_TYPE
__key_t_defined	/usr/include/x86_64-linux-gnu/sys/types.h	/^# define __key_t_defined$/;"	d
__kind	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  int __kind;$/;"	m	struct:__pthread_mutex_s	typeref:typename:int	access:public
__lc	/usr/include/c++/10/bits/stl_algobase.h	/^	__lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)$/;"	f	struct:std::__lexicographical_compare	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2)
__lc	/usr/include/c++/10/bits/stl_algobase.h	/^	__lc(const _Tp* __first1, const _Tp* __last1,$/;"	f	struct:std::__lexicographical_compare	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(const _Tp * __first1,const _Tp * __last1,const _Up * __first2,const _Up * __last2)
__lc_rai	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __lc_rai$/;"	s	namespace:std
__lc_rai	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>$/;"	s	namespace:std
__ldiv_t_defined	/usr/include/stdlib.h	/^# define __ldiv_t_defined	/;"	d
__lexicographical_compare	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __lexicographical_compare$/;"	s	namespace:std
__lexicographical_compare	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __lexicographical_compare<true>$/;"	s	namespace:std
__lexicographical_compare_aux	/usr/include/c++/10/bits/stl_algobase.h	/^    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2)
__lexicographical_compare_impl	/usr/include/c++/10/bits/stl_algobase.h	/^    __lexicographical_compare_impl(_II1 __first1, _II1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2,_Compare __comp)
__lg	/usr/include/c++/10/bits/stl_algobase.h	/^  __lg(int __n)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR int	signature:(int __n)
__lg	/usr/include/c++/10/bits/stl_algobase.h	/^  __lg(long __n)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR long	signature:(long __n)
__lg	/usr/include/c++/10/bits/stl_algobase.h	/^  __lg(long long __n)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR long long	signature:(long long __n)
__lg	/usr/include/c++/10/bits/stl_algobase.h	/^  __lg(unsigned __n)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR unsigned	signature:(unsigned __n)
__lg	/usr/include/c++/10/bits/stl_algobase.h	/^  __lg(unsigned long __n)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR unsigned long	signature:(unsigned long __n)
__lg	/usr/include/c++/10/bits/stl_algobase.h	/^  __lg(unsigned long long __n)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR unsigned long long	signature:(unsigned long long __n)
__list	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^    __pthread_slist_t __list;$/;"	m	union:__pthread_mutex_s::__anonf11409f0010a	typeref:typename:__pthread_slist_t	access:public
__list	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  __pthread_list_t __list;$/;"	m	struct:__pthread_mutex_s	typeref:typename:__pthread_list_t	access:public
__lldiv_t_defined	/usr/include/stdlib.h	/^# define __lldiv_t_defined	/;"	d
__locale_struct	/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h	/^struct __locale_struct$/;"	s
__locale_struct::__ctype_b	/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h	/^  const unsigned short int *__ctype_b;$/;"	m	struct:__locale_struct	typeref:typename:const unsigned short int *	access:public
__locale_struct::__ctype_tolower	/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h	/^  const int *__ctype_tolower;$/;"	m	struct:__locale_struct	typeref:typename:const int *	access:public
__locale_struct::__ctype_toupper	/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h	/^  const int *__ctype_toupper;$/;"	m	struct:__locale_struct	typeref:typename:const int *	access:public
__locale_struct::__locales	/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h	/^  struct __locale_data *__locales[13]; \/* 13 = __LC_LAST. *\/$/;"	m	struct:__locale_struct	typeref:struct:__locale_data * [13]	access:public
__locale_struct::__names	/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h	/^  const char *__names[13];$/;"	m	struct:__locale_struct	typeref:typename:const char * [13]	access:public
__locale_t	/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h	/^typedef struct __locale_struct *__locale_t;$/;"	t	typeref:struct:__locale_struct *
__locales	/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h	/^  struct __locale_data *__locales[13]; \/* 13 = __LC_LAST. *\/$/;"	m	struct:__locale_struct	typeref:struct:__locale_data * [13]	access:public
__lock	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  int __lock;$/;"	m	struct:__pthread_mutex_s	typeref:typename:int	access:public
__loff_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^typedef __off64_t __loff_t;	\/* Type of file sizes and offsets (LFS).  *\/$/;"	t	typeref:typename:__off64_t
__low	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^      unsigned int __low;$/;"	m	struct:__pthread_cond_s::__anona7088117010a::__anona70881170208	typeref:typename:unsigned int	access:public
__low	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^      unsigned int __low;$/;"	m	struct:__pthread_cond_s::__anona7088117030a::__anona70881170408	typeref:typename:unsigned int	access:public
__lower_bound	/usr/include/c++/10/bits/stl_algobase.h	/^    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __val,_Compare __comp)
__make_move_if_noexcept_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    __make_move_if_noexcept_iterator(_Iterator __i)$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR _ReturnType	signature:(_Iterator __i)
__make_move_if_noexcept_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    __make_move_if_noexcept_iterator(_Tp* __i)$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR _ReturnType	signature:(_Tp * __i)
__make_not_void	/usr/include/c++/10/bits/ptr_traits.h	/^    using __make_not_void$/;"	t	namespace:std	typeref:typename:conditional<is_void<_Tp>::value,__undefined,_Tp>::type
__make_reverse_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    __make_reverse_iterator(_Iterator __i)$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>	signature:(_Iterator __i)
__make_unsigned_like_t	/usr/include/c++/10/bits/range_access.h	/^      using __make_unsigned_like_t$/;"	t	namespace:std::ranges::__detail
__mask_was_saved	/usr/include/pthread.h	/^    int __mask_was_saved;$/;"	m	struct:__anon4eb2adee0b08::__anon4eb2adee0c08	typeref:typename:int	access:public
__max	/usr/include/c++/10/ext/numeric_traits.h	/^      static const _Value __max = __is_signed$/;"	m	struct:__gnu_cxx::__numeric_traits_integer	typeref:typename:const _Value	access:public
__max	/usr/include/c++/10/ext/numeric_traits.h	/^    const _Value __numeric_traits_integer<_Value>::__max;$/;"	m	class:__gnu_cxx::__numeric_traits_integer<_Value>	typeref:typename:const _Value
__max_align_f128	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^  __float128 __max_align_f128 __attribute__((__aligned__(__alignof(__float128))));$/;"	m	struct:__anonf11eee040108	typeref:typename:__float128	access:public
__max_align_ld	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));$/;"	m	struct:__anonf11eee040108	typeref:typename:long double	access:public
__max_align_ll	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));$/;"	m	struct:__anonf11eee040108	typeref:typename:long long	access:public
__max_diff_type	/usr/include/c++/10/bits/iterator_concepts.h	/^    using __max_diff_type = __int128;$/;"	t	namespace:std::ranges::__detail	typeref:typename:__int128
__max_digits10	/usr/include/c++/10/ext/numeric_traits.h	/^      static const int __max_digits10 = __glibcxx_max_digits10(_Value);$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	typeref:typename:const int	access:public
__max_digits10	/usr/include/c++/10/ext/numeric_traits.h	/^    const int __numeric_traits_floating<_Value>::__max_digits10;$/;"	m	class:__gnu_cxx::__numeric_traits_floating<_Value>	typeref:typename:const int
__max_exponent10	/usr/include/c++/10/ext/numeric_traits.h	/^      static const int __max_exponent10 = __glibcxx_max_exponent10(_Value);$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	typeref:typename:const int	access:public
__max_exponent10	/usr/include/c++/10/ext/numeric_traits.h	/^    const int __numeric_traits_floating<_Value>::__max_exponent10;$/;"	m	class:__gnu_cxx::__numeric_traits_floating<_Value>	typeref:typename:const int
__max_size_type	/usr/include/c++/10/bits/iterator_concepts.h	/^    using __max_size_type = unsigned __int128;$/;"	t	namespace:std::ranges::__detail	typeref:typename:unsigned __int128
__mbrlen	/usr/include/wchar.h	/^extern size_t __mbrlen (const char *__restrict __s, size_t __n,$/;"	p	typeref:typename:size_t	signature:(const char * __restrict __s,size_t __n,mbstate_t * __restrict __ps)
__mbstate_t	/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h	/^} __mbstate_t;$/;"	t	typeref:struct:__anon9c479bfe0108
__mbstate_t_defined	/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h	/^#define __mbstate_t_defined /;"	d
__memcmp	/usr/include/c++/10/bits/stl_algobase.h	/^    __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION _GLIBCXX14_CONSTEXPR int	signature:(const _Tp * __first1,const _Up * __first2,size_t __num)
__memcmpable	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __memcmpable$/;"	s	namespace:std
__memcmpable	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __memcmpable<_Tp*, _Tp*>$/;"	s	namespace:std	inherits:__is_nonvolatile_trivially_copyable<_Tp>
__memcmpable	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __memcmpable<_Tp*, const _Tp*>$/;"	s	namespace:std	inherits:__is_nonvolatile_trivially_copyable<_Tp>
__memcmpable	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __memcmpable<const _Tp*, _Tp*>$/;"	s	namespace:std	inherits:__is_nonvolatile_trivially_copyable<_Tp>
__memcpyable	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __memcpyable$/;"	s	namespace:std
__memcpyable	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __memcpyable<_Tp*, _Tp*>$/;"	s	namespace:std	inherits:__is_nonvolatile_trivially_copyable<_Tp>
__memcpyable	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __memcpyable<_Tp*, const _Tp*>$/;"	s	namespace:std	inherits:__is_nonvolatile_trivially_copyable<_Tp>
__min	/usr/include/c++/10/ext/numeric_traits.h	/^      static const _Value __min = __is_signed ? -__max - 1 : (_Value)0;$/;"	m	struct:__gnu_cxx::__numeric_traits_integer	typeref:typename:const _Value	access:public
__min	/usr/include/c++/10/ext/numeric_traits.h	/^    const _Value __numeric_traits_integer<_Value>::__min;$/;"	m	class:__gnu_cxx::__numeric_traits_integer<_Value>	typeref:typename:const _Value
__min_cmp	/usr/include/c++/10/bits/stl_algobase.h	/^    __min_cmp(_Tp __x, _Tp __y)$/;"	f	namespace:std	typeref:typename:auto	signature:(_Tp __x,_Tp __y)
__mismatch	/usr/include/c++/10/bits/stl_algobase.h	/^    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR pair<_InputIterator1,_InputIterator2>	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_BinaryPredicate __binary_pred)
__mismatch	/usr/include/c++/10/bits/stl_algobase.h	/^    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR pair<_InputIterator1,_InputIterator2>	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_BinaryPredicate __binary_pred)
__miter_base	/usr/include/c++/10/bits/cpp_type_traits.h	/^    __miter_base(_Iterator __it)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _Iterator	signature:(_Iterator __it)
__miter_base	/usr/include/c++/10/bits/stl_iterator.h	/^    __miter_base(move_iterator<_Iterator> __it)$/;"	f	namespace:std	typeref:typename:decltype (__miter_base (__it.base ()))	signature:(move_iterator<_Iterator> __it)
__miter_base	/usr/include/c++/10/bits/stl_iterator.h	/^    __miter_base(reverse_iterator<_Iterator> __it)$/;"	f	namespace:std	typeref:typename:decltype (__make_reverse_iterator (__miter_base (__it.base ())))	signature:(reverse_iterator<_Iterator> __it)
__mode_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __MODE_T_TYPE __mode_t;	\/* Type of file attribute bitmasks.  *\/$/;"	v	typeref:typename:__STD_TYPE __MODE_T_TYPE
__mode_t_defined	/usr/include/x86_64-linux-gnu/sys/types.h	/^# define __mode_t_defined$/;"	d
__move_if_noexcept_cond	/usr/include/c++/10/bits/move.h	/^    struct __move_if_noexcept_cond$/;"	s	namespace:std	inherits:__and_<__not_<is_nothrow_move_constructible<_Tp>>,is_copy_constructible<_Tp>>::type
__names	/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h	/^  const char *__names[13];$/;"	m	struct:__locale_struct	typeref:typename:const char * [13]	access:public
__need_NULL	/usr/include/locale.h	/^#define __need_NULL$/;"	d
__need_NULL	/usr/include/sched.h	/^#define __need_NULL$/;"	d
__need_NULL	/usr/include/stdio.h	/^#define __need_NULL$/;"	d
__need_NULL	/usr/include/stdlib.h	/^#define __need_NULL$/;"	d
__need_NULL	/usr/include/time.h	/^#define __need_NULL$/;"	d
__need_NULL	/usr/include/wchar.h	/^#define __need_NULL$/;"	d
__need___va_list	/usr/include/stdio.h	/^#define __need___va_list$/;"	d
__need___va_list	/usr/include/wchar.h	/^#define __need___va_list$/;"	d
__need_size_t	/usr/include/alloca.h	/^#define	__need_size_t$/;"	d
__need_size_t	/usr/include/sched.h	/^#define __need_size_t$/;"	d
__need_size_t	/usr/include/stdio.h	/^#define __need_size_t$/;"	d
__need_size_t	/usr/include/stdlib.h	/^#define __need_size_t$/;"	d
__need_size_t	/usr/include/time.h	/^#define __need_size_t$/;"	d
__need_size_t	/usr/include/wchar.h	/^#define __need_size_t$/;"	d
__need_size_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^#define	__need_size_t$/;"	d
__need_wchar_t	/usr/include/stdlib.h	/^#define __need_wchar_t$/;"	d
__need_wchar_t	/usr/include/wchar.h	/^#define __need_wchar_t$/;"	d
__negate	/usr/include/c++/10/bits/predefined_ops.h	/^    __negate(_Iter_pred<_Predicate> __pred)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_negate<_Predicate>	signature:(_Iter_pred<_Predicate> __pred)
__nest	/usr/include/c++/10/bits/nested_exception.h	/^      using __nest = __and_<is_class<_Up>, __bool_constant<!__is_final(_Up)>,$/;"	t	function:std::throw_with_nested
__newlast1	/usr/include/c++/10/bits/stl_algobase.h	/^	__newlast1(_II1, _II1 __last1, _II2, _II2)$/;"	f	struct:std::__lc_rai	typeref:typename:_GLIBCXX20_CONSTEXPR _II1	access:public	signature:(_II1,_II1 __last1,_II2,_II2)
__newlast1	/usr/include/c++/10/bits/stl_algobase.h	/^	__newlast1(_RAI1 __first1, _RAI1 __last1,$/;"	f	struct:std::__lc_rai	typeref:typename:_GLIBCXX20_CONSTEXPR _RAI1	access:public	signature:(_RAI1 __first1,_RAI1 __last1,_RAI2 __first2,_RAI2 __last2)
__next	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  struct __pthread_internal_list *__next;$/;"	m	struct:__pthread_internal_list	typeref:struct:__pthread_internal_list *	access:public
__next	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  struct __pthread_internal_slist *__next;$/;"	m	struct:__pthread_internal_slist	typeref:struct:__pthread_internal_slist *	access:public
__niter_base	/usr/include/c++/10/bits/stl_algobase.h	/^    __niter_base(_Iterator __it)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _Iterator	signature:(_Iterator __it)
__niter_base	/usr/include/c++/10/bits/stl_iterator.h	/^    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION _GLIBCXX20_CONSTEXPR _Iterator	signature:(__gnu_cxx::__normal_iterator<_Iterator,_Container> __it)
__niter_base	/usr/include/c++/10/bits/stl_iterator.h	/^    __niter_base(move_iterator<_Iterator> __it)$/;"	f	namespace:std	typeref:typename:decltype (make_move_iterator (__niter_base (__it.base ())))	signature:(move_iterator<_Iterator> __it)
__niter_base	/usr/include/c++/10/bits/stl_iterator.h	/^    __niter_base(reverse_iterator<_Iterator> __it)$/;"	f	namespace:std	typeref:typename:decltype (__make_reverse_iterator (__niter_base (__it.base ())))	signature:(reverse_iterator<_Iterator> __it)
__niter_wrap	/usr/include/c++/10/bits/stl_algobase.h	/^    __niter_wrap(_From __from, _To __res)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _From	signature:(_From __from,_To __res)
__niter_wrap	/usr/include/c++/10/bits/stl_algobase.h	/^    __niter_wrap(const _Iterator&, _Iterator __res)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _Iterator	signature:(const _Iterator &,_Iterator __res)
__nlink_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __NLINK_T_TYPE __nlink_t;	\/* Type of file link counts.  *\/$/;"	v	typeref:typename:__STD_TYPE __NLINK_T_TYPE
__nlink_t_defined	/usr/include/x86_64-linux-gnu/sys/types.h	/^# define __nlink_t_defined$/;"	d
__nonnull	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __nonnull(/;"	d	signature:(params)
__normal_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^        __normal_iterator(const __normal_iterator<_Iter,$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const __normal_iterator<_Iter,typename __enable_if<(std::__are_same<_Iter,typename _Container::pointer>::__value),_Container>::__type> & __i)
__normal_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX_CONSTEXPR	access:public	signature:()
__normal_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const _Iterator & __i)
__normal_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    class __normal_iterator$/;"	c	namespace:__gnu_cxx
__not_overloaded	/usr/include/c++/10/bits/stl_function.h	/^	struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };$/;"	s	struct:std::greater	inherits:__not_overloaded2<_Tp,_Up>	access:private
__not_overloaded	/usr/include/c++/10/bits/stl_function.h	/^	struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };$/;"	s	struct:std::greater_equal	inherits:__not_overloaded2<_Tp,_Up>	access:private
__not_overloaded	/usr/include/c++/10/bits/stl_function.h	/^	struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };$/;"	s	struct:std::less	inherits:__not_overloaded2<_Tp,_Up>	access:private
__not_overloaded	/usr/include/c++/10/bits/stl_function.h	/^	struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };$/;"	s	struct:std::less_equal	inherits:__not_overloaded2<_Tp,_Up>	access:private
__not_overloaded	/usr/include/c++/10/bits/stl_function.h	/^	struct __not_overloaded<_Tp, _Up, __void_t<$/;"	s	struct:std::greater	inherits:false_type	access:private
__not_overloaded	/usr/include/c++/10/bits/stl_function.h	/^	struct __not_overloaded<_Tp, _Up, __void_t<$/;"	s	struct:std::greater_equal	inherits:false_type	access:private
__not_overloaded	/usr/include/c++/10/bits/stl_function.h	/^	struct __not_overloaded<_Tp, _Up, __void_t<$/;"	s	struct:std::less	inherits:false_type	access:private
__not_overloaded	/usr/include/c++/10/bits/stl_function.h	/^	struct __not_overloaded<_Tp, _Up, __void_t<$/;"	s	struct:std::less_equal	inherits:false_type	access:private
__not_overloaded2	/usr/include/c++/10/bits/stl_function.h	/^	struct __not_overloaded2 : true_type { };$/;"	s	struct:std::greater	inherits:true_type	access:private
__not_overloaded2	/usr/include/c++/10/bits/stl_function.h	/^	struct __not_overloaded2 : true_type { };$/;"	s	struct:std::greater_equal	inherits:true_type	access:private
__not_overloaded2	/usr/include/c++/10/bits/stl_function.h	/^	struct __not_overloaded2 : true_type { };$/;"	s	struct:std::less	inherits:true_type	access:private
__not_overloaded2	/usr/include/c++/10/bits/stl_function.h	/^	struct __not_overloaded2 : true_type { };$/;"	s	struct:std::less_equal	inherits:true_type	access:private
__not_overloaded2	/usr/include/c++/10/bits/stl_function.h	/^	struct __not_overloaded2<_Tp, _Up, __void_t<$/;"	s	struct:std::greater	inherits:false_type	access:private
__not_overloaded2	/usr/include/c++/10/bits/stl_function.h	/^	struct __not_overloaded2<_Tp, _Up, __void_t<$/;"	s	struct:std::greater_equal	inherits:false_type	access:private
__not_overloaded2	/usr/include/c++/10/bits/stl_function.h	/^	struct __not_overloaded2<_Tp, _Up, __void_t<$/;"	s	struct:std::less	inherits:false_type	access:private
__not_overloaded2	/usr/include/c++/10/bits/stl_function.h	/^	struct __not_overloaded2<_Tp, _Up, __void_t<$/;"	s	struct:std::less_equal	inherits:false_type	access:private
__num_base	/usr/include/c++/10/bits/locale_facets.h	/^  class __num_base$/;"	c	namespace:std
__num_get_type	/usr/include/c++/10/bits/basic_ios.h	/^						     __num_get_type;$/;"	t	class:std::basic_ios	typeref:typename:num_get<_CharT,istreambuf_iterator<_CharT,_Traits>>	access:public
__num_put_type	/usr/include/c++/10/bits/basic_ios.h	/^						     __num_put_type;$/;"	t	class:std::basic_ios	typeref:typename:num_put<_CharT,ostreambuf_iterator<_CharT,_Traits>>	access:public
__numeric_traits	/usr/include/c++/10/ext/numeric_traits.h	/^    struct __numeric_traits$/;"	s	namespace:__gnu_cxx	inherits:__conditional_type<__is_integer_nonstrict<_Value>::__value,__numeric_traits_integer<_Value>,__numeric_traits_floating<_Value>>::__type
__numeric_traits_floating	/usr/include/c++/10/ext/numeric_traits.h	/^    struct __numeric_traits_floating$/;"	s	namespace:__gnu_cxx
__numeric_traits_integer	/usr/include/c++/10/ext/numeric_traits.h	/^    struct __numeric_traits_integer$/;"	s	namespace:__gnu_cxx
__numpunct_cache	/usr/include/c++/10/bits/locale_facets.h	/^      __numpunct_cache(const __numpunct_cache&);$/;"	p	struct:std::__numpunct_cache	access:private	signature:(const __numpunct_cache &)
__numpunct_cache	/usr/include/c++/10/bits/locale_facets.h	/^      __numpunct_cache(size_t __refs = 0)$/;"	f	struct:std::__numpunct_cache	access:public	signature:(size_t __refs=0)
__numpunct_cache	/usr/include/c++/10/bits/locale_facets.h	/^    struct __numpunct_cache : public locale::facet$/;"	s	namespace:std	inherits:locale::facet
__nusers	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  unsigned int __nusers;$/;"	m	struct:__pthread_mutex_s	typeref:typename:unsigned int	access:public
__off64_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __OFF64_T_TYPE __off64_t;	\/* Type of file sizes and offsets (LFS).  *\/$/;"	v	typeref:typename:__STD_TYPE __OFF64_T_TYPE
__off64_t_defined	/usr/include/stdio.h	/^# define __off64_t_defined$/;"	d
__off64_t_defined	/usr/include/x86_64-linux-gnu/sys/types.h	/^# define __off64_t_defined$/;"	d
__off_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __OFF_T_TYPE __off_t;	\/* Type of file sizes and offsets.  *\/$/;"	v	typeref:typename:__STD_TYPE __OFF_T_TYPE
__off_t_defined	/usr/include/stdio.h	/^# define __off_t_defined$/;"	d
__off_t_defined	/usr/include/x86_64-linux-gnu/sys/types.h	/^# define __off_t_defined$/;"	d
__old_x	/usr/include/stdlib.h	/^    unsigned short int __old_x[3]; \/* Old state.  *\/$/;"	m	struct:drand48_data	typeref:typename:unsigned short int[3]	access:public
__ops	/usr/include/c++/10/bits/predefined_ops.h	/^namespace __ops$/;"	n	namespace:__gnu_cxx
__ostream_fill	/usr/include/c++/10/bits/ostream_insert.h	/^    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)$/;"	f	namespace:std	typeref:typename:void	signature:(basic_ostream<_CharT,_Traits> & __out,streamsize __n)
__ostream_insert	/usr/include/c++/10/bits/ostream_insert.h	/^    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,$/;"	f	namespace:std	typeref:typename:basic_ostream<_CharT,_Traits> &	signature:(basic_ostream<_CharT,_Traits> & __out,const _CharT * __s,streamsize __n)
__ostream_type	/usr/include/c++/10/bits/ostream_insert.h	/^      typedef basic_ostream<_CharT, _Traits>       __ostream_type;      $/;"	t	function:std::__ostream_fill	typeref:typename:basic_ostream<_CharT,_Traits>
__ostream_type	/usr/include/c++/10/bits/ostream_insert.h	/^      typedef basic_ostream<_CharT, _Traits>       __ostream_type;      $/;"	t	function:std::__ostream_write	typeref:typename:basic_ostream<_CharT,_Traits>
__ostream_type	/usr/include/c++/10/bits/ostream_insert.h	/^      typedef basic_ostream<_CharT, _Traits>       __ostream_type;$/;"	t	function:std::__ostream_insert	typeref:typename:basic_ostream<_CharT,_Traits>
__ostream_write	/usr/include/c++/10/bits/ostream_insert.h	/^    __ostream_write(basic_ostream<_CharT, _Traits>& __out,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION void	signature:(basic_ostream<_CharT,_Traits> & __out,const _CharT * __s,streamsize __n)
__overflow	/usr/include/stdio.h	/^extern int __overflow (FILE *, int);$/;"	p	typeref:typename:int	signature:(FILE *,int)
__owner	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  int __owner;$/;"	m	struct:__pthread_mutex_s	typeref:typename:int	access:public
__pad	/usr/include/c++/10/bits/locale_facets.h	/^    struct __pad$/;"	s	namespace:std
__pad	/usr/include/pthread.h	/^  void *__pad[4];$/;"	m	struct:__anon4eb2adee0b08	typeref:typename:void * [4]	access:public
__pad1	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned char __pad1[3];$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned char[3]	access:public
__pad1	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned char __pad1[7];$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned char[7]	access:public
__pad2	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned char __pad2;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned char	access:public
__pad2	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned long int __pad2;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned long int	access:public
__pad3	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned int __pad3;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned int	access:public
__pad4	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned int __pad4;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned int	access:public
__pad5	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  size_t __pad5;$/;"	m	struct:_IO_FILE_complete	typeref:typename:size_t	access:public
__pair_base	/usr/include/c++/10/bits/stl_pair.h	/^    __pair_base() = default;$/;"	p	class:std::__pair_base	access:private	signature:()
__pair_base	/usr/include/c++/10/bits/stl_pair.h	/^    __pair_base(const __pair_base&) = default;$/;"	p	class:std::__pair_base	access:private	signature:(const __pair_base &)
__pair_base	/usr/include/c++/10/bits/stl_pair.h	/^  template<typename _U1, typename _U2> class __pair_base$/;"	c	namespace:std
__pair_type	/usr/include/c++/10/bits/stl_pair.h	/^      typedef pair<__ds_type1, __ds_type2> 	      __pair_type;$/;"	t	function:std::make_pair	typeref:typename:pair<__ds_type1,__ds_type2>
__parallel	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^  inline namespace __parallel { }$/;"	n	namespace:std
__pid_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __PID_T_TYPE __pid_t;	\/* Type of process identifications.  *\/$/;"	v	typeref:typename:__STD_TYPE __PID_T_TYPE
__pid_t_defined	/usr/include/sched.h	/^# define __pid_t_defined$/;"	d
__pid_t_defined	/usr/include/time.h	/^#  define __pid_t_defined$/;"	d
__pid_t_defined	/usr/include/x86_64-linux-gnu/sys/types.h	/^# define __pid_t_defined$/;"	d
__pocca	/usr/include/c++/10/bits/alloc_traits.h	/^      typedef typename __traits::propagate_on_container_copy_assignment __pocca;$/;"	t	function:std::__alloc_on_copy	typeref:typename:__traits::propagate_on_container_copy_assignment
__pocca	/usr/include/c++/10/bits/alloc_traits.h	/^      using __pocca = typename _Tp::propagate_on_container_copy_assignment;$/;"	t	struct:std::__allocator_traits_base	typeref:typename:_Tp::propagate_on_container_copy_assignment	access:protected
__pocma	/usr/include/c++/10/bits/alloc_traits.h	/^      typedef typename __traits::propagate_on_container_move_assignment __pocma;$/;"	t	function:std::__alloc_on_move	typeref:typename:__traits::propagate_on_container_move_assignment
__pocma	/usr/include/c++/10/bits/alloc_traits.h	/^      using __pocma = typename _Tp::propagate_on_container_move_assignment;$/;"	t	struct:std::__allocator_traits_base	typeref:typename:_Tp::propagate_on_container_move_assignment	access:protected
__pocs	/usr/include/c++/10/bits/alloc_traits.h	/^      typedef typename __traits::propagate_on_container_swap __pocs;$/;"	t	function:std::__alloc_on_swap	typeref:typename:__traits::propagate_on_container_swap
__pocs	/usr/include/c++/10/bits/alloc_traits.h	/^      using __pocs = typename _Tp::propagate_on_container_swap;$/;"	t	struct:std::__allocator_traits_base	typeref:typename:_Tp::propagate_on_container_swap	access:protected
__pointer	/usr/include/c++/10/bits/alloc_traits.h	/^      using __pointer = typename _Tp::pointer;$/;"	t	struct:std::__allocator_traits_base	typeref:typename:_Tp::pointer	access:protected
__poison_hash	/usr/include/c++/10/bits/functional_hash.h	/^      __poison_hash(__poison_hash&&);$/;"	p	struct:std::__poison_hash	access:private	signature:(__poison_hash &&)
__poison_hash	/usr/include/c++/10/bits/functional_hash.h	/^    struct __poison_hash$/;"	s	namespace:std
__poison_hash	/usr/include/c++/10/bits/functional_hash.h	/^    struct __poison_hash<_Tp, __void_t<decltype(hash<_Tp>()(declval<_Tp>()))>>$/;"	s	namespace:std
__pos	/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h	/^  __off64_t __pos;$/;"	m	struct:_G_fpos64_t	typeref:typename:__off64_t	access:public
__pos	/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h	/^  __off_t __pos;$/;"	m	struct:_G_fpos_t	typeref:typename:__off_t	access:public
__pred_iter	/usr/include/c++/10/bits/predefined_ops.h	/^    __pred_iter(_Predicate __pred)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_pred<_Predicate>	signature:(_Predicate __pred)
__prev	/usr/include/pthread.h	/^  struct _pthread_cleanup_buffer *__prev; \/* Chaining of cleanup functions.  *\/$/;"	m	struct:_pthread_cleanup_buffer	typeref:struct:_pthread_cleanup_buffer *	access:public
__prev	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  struct __pthread_internal_list *__prev;$/;"	m	struct:__pthread_internal_list	typeref:struct:__pthread_internal_list *	access:public
__promote	/usr/include/c++/10/ext/type_traits.h	/^    struct __promote$/;"	s	namespace:__gnu_cxx
__promote	/usr/include/c++/10/ext/type_traits.h	/^    struct __promote<_Tp, false>$/;"	s	namespace:__gnu_cxx
__promote	/usr/include/c++/10/ext/type_traits.h	/^    struct __promote<double>$/;"	s	namespace:__gnu_cxx
__promote	/usr/include/c++/10/ext/type_traits.h	/^    struct __promote<float>$/;"	s	namespace:__gnu_cxx
__promote	/usr/include/c++/10/ext/type_traits.h	/^    struct __promote<long double>$/;"	s	namespace:__gnu_cxx
__promote_2	/usr/include/c++/10/ext/type_traits.h	/^    struct __promote_2$/;"	s	namespace:__gnu_cxx
__promote_3	/usr/include/c++/10/ext/type_traits.h	/^    struct __promote_3$/;"	s	namespace:__gnu_cxx
__promote_4	/usr/include/c++/10/ext/type_traits.h	/^    struct __promote_4$/;"	s	namespace:__gnu_cxx
__pthread_cleanup_class	/usr/include/pthread.h	/^  __pthread_cleanup_class (void (*__fct) (void *), void *__arg)$/;"	f	class:__pthread_cleanup_class	access:public	signature:(void (* __fct)(void *),void * __arg)
__pthread_cleanup_class	/usr/include/pthread.h	/^class __pthread_cleanup_class$/;"	c
__pthread_cleanup_class::__cancel_arg	/usr/include/pthread.h	/^  void *__cancel_arg;$/;"	m	class:__pthread_cleanup_class	typeref:typename:void *	access:private
__pthread_cleanup_class::__cancel_routine	/usr/include/pthread.h	/^  void (*__cancel_routine) (void *);$/;"	m	class:__pthread_cleanup_class	typeref:typename:void (*)(void *)	access:private
__pthread_cleanup_class::__cancel_type	/usr/include/pthread.h	/^  int __cancel_type;$/;"	m	class:__pthread_cleanup_class	typeref:typename:int	access:private
__pthread_cleanup_class::__defer	/usr/include/pthread.h	/^  void __defer () { pthread_setcanceltype (PTHREAD_CANCEL_DEFERRED,$/;"	f	class:__pthread_cleanup_class	typeref:typename:void	access:public	signature:()
__pthread_cleanup_class::__do_it	/usr/include/pthread.h	/^  int __do_it;$/;"	m	class:__pthread_cleanup_class	typeref:typename:int	access:private
__pthread_cleanup_class::__pthread_cleanup_class	/usr/include/pthread.h	/^  __pthread_cleanup_class (void (*__fct) (void *), void *__arg)$/;"	f	class:__pthread_cleanup_class	access:public	signature:(void (* __fct)(void *),void * __arg)
__pthread_cleanup_class::__restore	/usr/include/pthread.h	/^  void __restore () const { pthread_setcanceltype (__cancel_type, 0); }$/;"	f	class:__pthread_cleanup_class	typeref:typename:void	access:public	signature:() const
__pthread_cleanup_class::__setdoit	/usr/include/pthread.h	/^  void __setdoit (int __newval) { __do_it = __newval; }$/;"	f	class:__pthread_cleanup_class	typeref:typename:void	access:public	signature:(int __newval)
__pthread_cleanup_class::~__pthread_cleanup_class	/usr/include/pthread.h	/^  ~__pthread_cleanup_class () { if (__do_it) __cancel_routine (__cancel_arg); }$/;"	f	class:__pthread_cleanup_class	access:public	signature:()
__pthread_cleanup_frame	/usr/include/pthread.h	/^struct __pthread_cleanup_frame$/;"	s
__pthread_cleanup_frame::__cancel_arg	/usr/include/pthread.h	/^  void *__cancel_arg;$/;"	m	struct:__pthread_cleanup_frame	typeref:typename:void *	access:public
__pthread_cleanup_frame::__cancel_routine	/usr/include/pthread.h	/^  void (*__cancel_routine) (void *);$/;"	m	struct:__pthread_cleanup_frame	typeref:typename:void (*)(void *)	access:public
__pthread_cleanup_frame::__cancel_type	/usr/include/pthread.h	/^  int __cancel_type;$/;"	m	struct:__pthread_cleanup_frame	typeref:typename:int	access:public
__pthread_cleanup_frame::__do_it	/usr/include/pthread.h	/^  int __do_it;$/;"	m	struct:__pthread_cleanup_frame	typeref:typename:int	access:public
__pthread_cleanup_routine	/usr/include/pthread.h	/^__pthread_cleanup_routine (struct __pthread_cleanup_frame *__frame)$/;"	f	typeref:typename:__extern_inline void	signature:(struct __pthread_cleanup_frame * __frame)
__pthread_cond_s	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^struct __pthread_cond_s$/;"	s
__pthread_cond_s::__anona7088117010a	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  {$/;"	u	struct:__pthread_cond_s	access:public
__pthread_cond_s::__anona7088117010a::__anona70881170208	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^    {$/;"	s	union:__pthread_cond_s::__anona7088117010a	access:public
__pthread_cond_s::__anona7088117010a::__anona70881170208::__high	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^      unsigned int __high;$/;"	m	struct:__pthread_cond_s::__anona7088117010a::__anona70881170208	typeref:typename:unsigned int	access:public
__pthread_cond_s::__anona7088117010a::__anona70881170208::__low	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^      unsigned int __low;$/;"	m	struct:__pthread_cond_s::__anona7088117010a::__anona70881170208	typeref:typename:unsigned int	access:public
__pthread_cond_s::__anona7088117010a::__wseq	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^    __extension__ unsigned long long int __wseq;$/;"	m	union:__pthread_cond_s::__anona7088117010a	typeref:typename:__extension__ unsigned long long int	access:public
__pthread_cond_s::__anona7088117010a::__wseq32	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^    } __wseq32;$/;"	m	union:__pthread_cond_s::__anona7088117010a	typeref:struct:__pthread_cond_s::__anona7088117010a::__anona70881170208	access:public
__pthread_cond_s::__anona7088117030a	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  {$/;"	u	struct:__pthread_cond_s	access:public
__pthread_cond_s::__anona7088117030a::__anona70881170408	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^    {$/;"	s	union:__pthread_cond_s::__anona7088117030a	access:public
__pthread_cond_s::__anona7088117030a::__anona70881170408::__high	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^      unsigned int __high;$/;"	m	struct:__pthread_cond_s::__anona7088117030a::__anona70881170408	typeref:typename:unsigned int	access:public
__pthread_cond_s::__anona7088117030a::__anona70881170408::__low	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^      unsigned int __low;$/;"	m	struct:__pthread_cond_s::__anona7088117030a::__anona70881170408	typeref:typename:unsigned int	access:public
__pthread_cond_s::__anona7088117030a::__g1_start	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^    __extension__ unsigned long long int __g1_start;$/;"	m	union:__pthread_cond_s::__anona7088117030a	typeref:typename:__extension__ unsigned long long int	access:public
__pthread_cond_s::__anona7088117030a::__g1_start32	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^    } __g1_start32;$/;"	m	union:__pthread_cond_s::__anona7088117030a	typeref:struct:__pthread_cond_s::__anona7088117030a::__anona70881170408	access:public
__pthread_cond_s::__g1_orig_size	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  unsigned int __g1_orig_size;$/;"	m	struct:__pthread_cond_s	typeref:typename:unsigned int	access:public
__pthread_cond_s::__g_refs	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  unsigned int __g_refs[2] __LOCK_ALIGNMENT;$/;"	m	struct:__pthread_cond_s	typeref:typename:unsigned int[2]__LOCK_ALIGNMENT	access:public
__pthread_cond_s::__g_signals	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  unsigned int __g_signals[2];$/;"	m	struct:__pthread_cond_s	typeref:typename:unsigned int[2]	access:public
__pthread_cond_s::__g_size	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  unsigned int __g_size[2];$/;"	m	struct:__pthread_cond_s	typeref:typename:unsigned int[2]	access:public
__pthread_cond_s::__wrefs	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  unsigned int __wrefs;$/;"	m	struct:__pthread_cond_s	typeref:typename:unsigned int	access:public
__pthread_internal_list	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^typedef struct __pthread_internal_list$/;"	s
__pthread_internal_list::__next	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  struct __pthread_internal_list *__next;$/;"	m	struct:__pthread_internal_list	typeref:struct:__pthread_internal_list *	access:public
__pthread_internal_list::__prev	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  struct __pthread_internal_list *__prev;$/;"	m	struct:__pthread_internal_list	typeref:struct:__pthread_internal_list *	access:public
__pthread_internal_slist	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^typedef struct __pthread_internal_slist$/;"	s
__pthread_internal_slist::__next	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  struct __pthread_internal_slist *__next;$/;"	m	struct:__pthread_internal_slist	typeref:struct:__pthread_internal_slist *	access:public
__pthread_list_t	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^} __pthread_list_t;$/;"	t	typeref:struct:__pthread_internal_list
__pthread_mutex_s	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^struct __pthread_mutex_s$/;"	s
__pthread_mutex_s::__anonf11409f0010a	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  {$/;"	u	struct:__pthread_mutex_s	access:public
__pthread_mutex_s::__anonf11409f0010a::__anonf11409f00208	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^    {$/;"	s	union:__pthread_mutex_s::__anonf11409f0010a	access:public
__pthread_mutex_s::__anonf11409f0010a::__anonf11409f00208::__eelision	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^      short __eelision;$/;"	m	struct:__pthread_mutex_s::__anonf11409f0010a::__anonf11409f00208	typeref:typename:short	access:public
__pthread_mutex_s::__anonf11409f0010a::__anonf11409f00208::__espins	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^      short __espins;$/;"	m	struct:__pthread_mutex_s::__anonf11409f0010a::__anonf11409f00208	typeref:typename:short	access:public
__pthread_mutex_s::__anonf11409f0010a::__elision_data	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^    } __elision_data;$/;"	m	union:__pthread_mutex_s::__anonf11409f0010a	typeref:struct:__pthread_mutex_s::__anonf11409f0010a::__anonf11409f00208	access:public
__pthread_mutex_s::__anonf11409f0010a::__list	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^    __pthread_slist_t __list;$/;"	m	union:__pthread_mutex_s::__anonf11409f0010a	typeref:typename:__pthread_slist_t	access:public
__pthread_mutex_s::__count	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  unsigned int __count;$/;"	m	struct:__pthread_mutex_s	typeref:typename:unsigned int	access:public
__pthread_mutex_s::__elision	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  short __elision;$/;"	m	struct:__pthread_mutex_s	typeref:typename:short	access:public
__pthread_mutex_s::__kind	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  int __kind;$/;"	m	struct:__pthread_mutex_s	typeref:typename:int	access:public
__pthread_mutex_s::__list	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  __pthread_list_t __list;$/;"	m	struct:__pthread_mutex_s	typeref:typename:__pthread_list_t	access:public
__pthread_mutex_s::__lock	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  int __lock;$/;"	m	struct:__pthread_mutex_s	typeref:typename:int	access:public
__pthread_mutex_s::__nusers	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  unsigned int __nusers;$/;"	m	struct:__pthread_mutex_s	typeref:typename:unsigned int	access:public
__pthread_mutex_s::__owner	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  int __owner;$/;"	m	struct:__pthread_mutex_s	typeref:typename:int	access:public
__pthread_mutex_s::__spins	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  short __spins;$/;"	m	struct:__pthread_mutex_s	typeref:typename:short	access:public
__pthread_register_cancel	/usr/include/pthread.h	/^extern void __pthread_register_cancel (__pthread_unwind_buf_t *__buf)$/;"	p	typeref:typename:void	signature:(__pthread_unwind_buf_t * __buf)
__pthread_register_cancel_defer	/usr/include/pthread.h	/^extern void __pthread_register_cancel_defer (__pthread_unwind_buf_t *__buf)$/;"	p	typeref:typename:void	signature:(__pthread_unwind_buf_t * __buf)
__pthread_rwlock_arch_t	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^struct __pthread_rwlock_arch_t$/;"	s
__pthread_rwlock_arch_t::__cur_writer	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  int __cur_writer;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:int	access:public
__pthread_rwlock_arch_t::__flags	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned char __flags;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned char	access:public
__pthread_rwlock_arch_t::__flags	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned int __flags;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned int	access:public
__pthread_rwlock_arch_t::__pad1	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned char __pad1[3];$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned char[3]	access:public
__pthread_rwlock_arch_t::__pad1	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned char __pad1[7];$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned char[7]	access:public
__pthread_rwlock_arch_t::__pad2	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned char __pad2;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned char	access:public
__pthread_rwlock_arch_t::__pad2	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned long int __pad2;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned long int	access:public
__pthread_rwlock_arch_t::__pad3	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned int __pad3;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned int	access:public
__pthread_rwlock_arch_t::__pad4	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned int __pad4;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned int	access:public
__pthread_rwlock_arch_t::__readers	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned int __readers;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned int	access:public
__pthread_rwlock_arch_t::__rwelision	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  signed char __rwelision;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:signed char	access:public
__pthread_rwlock_arch_t::__shared	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  int __shared;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:int	access:public
__pthread_rwlock_arch_t::__shared	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned char __shared;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned char	access:public
__pthread_rwlock_arch_t::__writers	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned int __writers;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned int	access:public
__pthread_rwlock_arch_t::__writers_futex	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned int __writers_futex;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned int	access:public
__pthread_rwlock_arch_t::__wrphase_futex	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned int __wrphase_futex;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned int	access:public
__pthread_slist_t	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^} __pthread_slist_t;$/;"	t	typeref:struct:__pthread_internal_slist
__pthread_unregister_cancel	/usr/include/pthread.h	/^extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)$/;"	p	typeref:typename:void	signature:(__pthread_unwind_buf_t * __buf)
__pthread_unregister_cancel_restore	/usr/include/pthread.h	/^extern void __pthread_unregister_cancel_restore (__pthread_unwind_buf_t *__buf)$/;"	p	typeref:typename:void	signature:(__pthread_unwind_buf_t * __buf)
__pthread_unwind_buf_t	/usr/include/pthread.h	/^} __pthread_unwind_buf_t __attribute__ ((__aligned__));$/;"	t	typeref:struct:__anon4eb2adee0b08
__pthread_unwind_next	/usr/include/pthread.h	/^extern void __pthread_unwind_next (__pthread_unwind_buf_t *__buf)$/;"	p	typeref:typename:void	signature:(__pthread_unwind_buf_t * __buf)
__ptr	/usr/include/c++/10/bits/iterator_concepts.h	/^	struct __ptr$/;"	s	struct:std::__iterator_traits	access:private
__ptr	/usr/include/c++/10/bits/iterator_concepts.h	/^	struct __ptr<_Iter>$/;"	s	struct:std::__iterator_traits	access:private
__ptr	/usr/include/c++/10/bits/stl_iterator.h	/^	struct __ptr$/;"	s	struct:std::iterator_traits	access:private
__ptr	/usr/include/c++/10/bits/stl_iterator.h	/^	struct __ptr<_Iter>$/;"	s	struct:std::iterator_traits	access:private
__ptr_cmp	/usr/include/c++/10/bits/stl_function.h	/^	using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,$/;"	t	struct:std::greater	typeref:typename:__and_<__not_overloaded<_Tp,_Up>,is_convertible<_Tp,const volatile void * >,is_convertible<_Up,const volatile void * >>	access:private
__ptr_cmp	/usr/include/c++/10/bits/stl_function.h	/^	using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,$/;"	t	struct:std::greater_equal	typeref:typename:__and_<__not_overloaded<_Tp,_Up>,is_convertible<_Tp,const volatile void * >,is_convertible<_Up,const volatile void * >>	access:private
__ptr_cmp	/usr/include/c++/10/bits/stl_function.h	/^	using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,$/;"	t	struct:std::less	typeref:typename:__and_<__not_overloaded<_Tp,_Up>,is_convertible<_Tp,const volatile void * >,is_convertible<_Up,const volatile void * >>	access:private
__ptr_cmp	/usr/include/c++/10/bits/stl_function.h	/^	using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,$/;"	t	struct:std::less_equal	typeref:typename:__and_<__not_overloaded<_Tp,_Up>,is_convertible<_Tp,const volatile void * >,is_convertible<_Up,const volatile void * >>	access:private
__ptr_rebind	/usr/include/c++/10/bits/ptr_traits.h	/^    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;$/;"	t	namespace:std	typeref:typename:pointer_traits<_Ptr>::template rebind<_Tp>
__ptr_t	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#define __ptr_t /;"	d
__pure_dummy	/usr/include/c++/10/bits/cxxabi_forced.h	/^    virtual void __pure_dummy() = 0; $/;"	p	class:__cxxabiv1::__forced_unwind	typeref:typename:void	access:private	signature:()
__putc_unlocked_body	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^#define __putc_unlocked_body(/;"	d	signature:(_ch,_fp)
__q	/usr/include/c++/10/bits/locale_facets.h	/^	  const char_type* __q = char_traits<_CharT2>::find(__zero, __len, __c);$/;"	m	class:std::num_get	typeref:typename:const char_type *	access:protected
__quad_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__extension__ typedef long long int __quad_t;$/;"	t	typeref:typename:long long int
__quad_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^typedef long int __quad_t;$/;"	t	typeref:typename:long int
__rai_type	/usr/include/c++/10/bits/stl_algobase.h	/^      typedef std::__lc_rai<_Category1, _Category2> __rai_type;$/;"	t	function:std::__lexicographical_compare_impl	typeref:typename:std::__lc_rai<_Category1,_Category2>
__range_iter_t	/usr/include/c++/10/bits/iterator_concepts.h	/^      using __range_iter_t$/;"	t	namespace:std::__detail
__readers	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned int __readers;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned int	access:public
__rebind	/usr/include/c++/10/bits/alloc_traits.h	/^      struct __rebind : __replace_first_arg<_Tp, _Up> { };$/;"	s	struct:std::__allocator_traits_base	inherits:__replace_first_arg<_Tp,_Up>	access:public
__rebind	/usr/include/c++/10/bits/alloc_traits.h	/^      struct __rebind<_Tp, _Up,$/;"	s	struct:std::__allocator_traits_base	access:public
__rebind	/usr/include/c++/10/bits/ptr_traits.h	/^	struct __rebind : __replace_first_arg<_Tp, _Up> { };$/;"	s	struct:std::pointer_traits	inherits:__replace_first_arg<_Tp,_Up>	access:private
__rebind	/usr/include/c++/10/bits/ptr_traits.h	/^	struct __rebind<_Tp, _Up, __void_t<typename _Tp::template rebind<_Up>>>$/;"	s	struct:std::pointer_traits	access:private
__ref	/usr/include/c++/10/bits/iterator_concepts.h	/^	struct __ref$/;"	s	struct:std::__iterator_traits	access:private
__ref	/usr/include/c++/10/bits/iterator_concepts.h	/^	struct __ref<_Iter>$/;"	s	struct:std::__iterator_traits	access:private
__remove_unsigned	/usr/include/c++/10/ext/type_traits.h	/^    struct __remove_unsigned$/;"	s	namespace:__gnu_cxx
__remove_unsigned	/usr/include/c++/10/ext/type_traits.h	/^    struct __remove_unsigned<char>$/;"	s	namespace:__gnu_cxx
__remove_unsigned	/usr/include/c++/10/ext/type_traits.h	/^    struct __remove_unsigned<unsigned char>$/;"	s	namespace:__gnu_cxx
__remove_unsigned	/usr/include/c++/10/ext/type_traits.h	/^    struct __remove_unsigned<unsigned int>$/;"	s	namespace:__gnu_cxx
__remove_unsigned	/usr/include/c++/10/ext/type_traits.h	/^    struct __remove_unsigned<unsigned long long>$/;"	s	namespace:__gnu_cxx
__remove_unsigned	/usr/include/c++/10/ext/type_traits.h	/^    struct __remove_unsigned<unsigned long>$/;"	s	namespace:__gnu_cxx
__remove_unsigned	/usr/include/c++/10/ext/type_traits.h	/^    struct __remove_unsigned<unsigned short>$/;"	s	namespace:__gnu_cxx
__replace_first_arg	/usr/include/c++/10/bits/ptr_traits.h	/^    struct __replace_first_arg$/;"	s	namespace:std
__replace_first_arg	/usr/include/c++/10/bits/ptr_traits.h	/^    struct __replace_first_arg<_Template<_Tp, _Types...>, _Up>$/;"	s	namespace:std
__replace_first_arg_t	/usr/include/c++/10/bits/ptr_traits.h	/^    using __replace_first_arg_t = typename __replace_first_arg<_Tp, _Up>::type;$/;"	t	namespace:std	typeref:typename:__replace_first_arg<_Tp,_Up>::type
__replacement_assert	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^  __replacement_assert(const char* __file, int __line,$/;"	f	namespace:std	typeref:typename:void	signature:(const char * __file,int __line,const char * __function,const char * __condition)
__restore	/usr/include/pthread.h	/^  void __restore () const { pthread_setcanceltype (__cancel_type, 0); }$/;"	f	class:__pthread_cleanup_class	typeref:typename:void	access:public	signature:() const
__restrict	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __restrict	/;"	d
__restrict_arr	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#   define __restrict_arr	/;"	d
__restrict_arr	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __restrict_arr	/;"	d
__restrict_arr	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __restrict_arr	/;"	d
__result	/usr/include/c++/10/bits/iterator_concepts.h	/^	  struct __result$/;"	s	struct:std::ranges::__cust_imove::_IMove	access:private
__result	/usr/include/c++/10/bits/iterator_concepts.h	/^	  struct __result<_Tp>$/;"	s	struct:std::ranges::__cust_imove::_IMove	access:private
__ret	/usr/include/c++/10/bits/locale_facets.h	/^	  int __ret = -1;$/;"	m	class:std::num_get	typeref:typename:int	access:protected
__rethrow_if_nested_cond	/usr/include/c++/10/bits/nested_exception.h	/^    using __rethrow_if_nested_cond = typename enable_if<$/;"	t	namespace:std
__rethrow_if_nested_impl	/usr/include/c++/10/bits/nested_exception.h	/^    __rethrow_if_nested_impl(const _Ex* __ptr)$/;"	f	namespace:std	typeref:typename:__rethrow_if_nested_cond<_Ex>	signature:(const _Ex * __ptr)
__rethrow_if_nested_impl	/usr/include/c++/10/bits/nested_exception.h	/^  __rethrow_if_nested_impl(const void*)$/;"	f	namespace:std	typeref:typename:void	signature:(const void *)
__rlim64_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __RLIM64_T_TYPE __rlim64_t;	\/* Type for resource measurement (LFS).  *\/$/;"	v	typeref:typename:__STD_TYPE __RLIM64_T_TYPE
__rlim_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __RLIM_T_TYPE __rlim_t;	\/* Type for resource measurement.  *\/$/;"	v	typeref:typename:__STD_TYPE __RLIM_T_TYPE
__routine	/usr/include/pthread.h	/^  void (*__routine) (void *);             \/* Function to call.  *\/$/;"	m	struct:_pthread_cleanup_buffer	typeref:typename:void (*)(void *)	access:public
__rwelision	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  signed char __rwelision;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:signed char	access:public
__safe_bool	/usr/include/c++/10/bits/exception_ptr.h	/^      typedef void (exception_ptr::*__safe_bool)();$/;"	t	class:std::__exception_ptr::exception_ptr	typeref:typename:void (exception_ptr::*)()	access:public
__sched_cpualloc	/usr/include/x86_64-linux-gnu/bits/cpu-set.h	/^extern cpu_set_t *__sched_cpualloc (size_t __count) __THROW __wur;$/;"	p	typeref:typename:cpu_set_t *	signature:(size_t __count)
__sched_cpucount	/usr/include/x86_64-linux-gnu/bits/cpu-set.h	/^extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)$/;"	p	typeref:typename:__BEGIN_DECLS int	signature:(size_t __setsize,const cpu_set_t * __setp)
__sched_cpufree	/usr/include/x86_64-linux-gnu/bits/cpu-set.h	/^extern void __sched_cpufree (cpu_set_t *__set) __THROW;$/;"	p	typeref:typename:void	signature:(cpu_set_t * __set)
__sched_priority	/usr/include/sched.h	/^#define __sched_priority /;"	d
__setdoit	/usr/include/pthread.h	/^  void __setdoit (int __newval) { __do_it = __newval; }$/;"	f	class:__pthread_cleanup_class	typeref:typename:void	access:public	signature:(int __newval)
__shared	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  int __shared;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:int	access:public
__shared	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned char __shared;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned char	access:public
__shrink_to_fit_aux	/usr/include/c++/10/bits/allocator.h	/^    struct __shrink_to_fit_aux$/;"	s	namespace:std
__shrink_to_fit_aux	/usr/include/c++/10/bits/allocator.h	/^    struct __shrink_to_fit_aux<_Tp, true>$/;"	s	namespace:std
__sig_atomic_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^typedef int __sig_atomic_t;$/;"	t	typeref:typename:int
__sigset_t	/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h	/^} __sigset_t;$/;"	t	typeref:struct:__anon623f701d0108
__sigset_t_defined	/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h	/^#define __sigset_t_defined /;"	d
__sigsetjmp	/usr/include/pthread.h	/^extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) __THROWNL;$/;"	p	typeref:typename:int	signature:(struct __jmp_buf_tag * __env,int __savemask)
__size	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_ATTR_T];$/;"	m	union:pthread_attr_t	typeref:typename:char[]	access:public
__size	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_BARRIERATTR_T];$/;"	m	union:__anone9c15396080a	typeref:typename:char[]	access:public
__size	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_BARRIER_T];$/;"	m	union:__anone9c15396070a	typeref:typename:char[]	access:public
__size	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_CONDATTR_T];$/;"	m	union:__anone9c15396020a	typeref:typename:char[]	access:public
__size	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_COND_T];$/;"	m	union:__anone9c15396040a	typeref:typename:char[]	access:public
__size	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_MUTEXATTR_T];$/;"	m	union:__anone9c15396010a	typeref:typename:char[]	access:public
__size	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_MUTEX_T];$/;"	m	union:__anone9c15396030a	typeref:typename:char[]	access:public
__size	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_RWLOCKATTR_T];$/;"	m	union:__anone9c15396060a	typeref:typename:char[]	access:public
__size	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_RWLOCK_T];$/;"	m	union:__anone9c15396050a	typeref:typename:char[]	access:public
__size_t	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define __size_t$/;"	d
__size_t__	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define __size_t__	/;"	d
__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(__GLIBCXX_TYPE_INT_N_0 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_0	signature:(__GLIBCXX_TYPE_INT_N_0 __n)
__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(__GLIBCXX_TYPE_INT_N_1 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_1	signature:(__GLIBCXX_TYPE_INT_N_1 __n)
__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(__GLIBCXX_TYPE_INT_N_2 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_2	signature:(__GLIBCXX_TYPE_INT_N_2 __n)
__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(__GLIBCXX_TYPE_INT_N_3 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_3	signature:(__GLIBCXX_TYPE_INT_N_3 __n)
__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(__float128 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR long long	signature:(__float128 __n)
__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(double __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR long long	signature:(double __n)
__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(float __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR long long	signature:(float __n)
__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(int __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR int	signature:(int __n)
__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(long __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR long	signature:(long __n)
__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(long double __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR long long	signature:(long double __n)
__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(long long __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR long long	signature:(long long __n)
__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_0 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_0	signature:(unsigned __GLIBCXX_TYPE_INT_N_0 __n)
__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_1 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_1	signature:(unsigned __GLIBCXX_TYPE_INT_N_1 __n)
__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_2 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_2	signature:(unsigned __GLIBCXX_TYPE_INT_N_2 __n)
__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_3 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_3	signature:(unsigned __GLIBCXX_TYPE_INT_N_3 __n)
__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(unsigned __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR unsigned	signature:(unsigned __n)
__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(unsigned long __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR unsigned long	signature:(unsigned long __n)
__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(unsigned long long __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR unsigned long long	signature:(unsigned long long __n)
__size_type	/usr/include/c++/10/bits/basic_string.h	/^      typedef typename __string_type::size_type		__size_type;$/;"	t	function:std::operator +	typeref:typename:__string_type::size_type
__socklen_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __U32_TYPE __socklen_t;$/;"	v	typeref:typename:__STD_TYPE __U32_TYPE
__spins	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  short __spins;$/;"	m	struct:__pthread_mutex_s	typeref:typename:short	access:public
__spins	/usr/include/x86_64-linux-gnu/bits/struct_mutex.h	/^# define __spins /;"	d
__ssize_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __SSIZE_T_TYPE __ssize_t; \/* Type of a byte count, or error.  *\/$/;"	v	typeref:typename:__STD_TYPE __SSIZE_T_TYPE
__ssize_t_defined	/usr/include/stdio.h	/^# define __ssize_t_defined$/;"	d
__ssize_t_defined	/usr/include/x86_64-linux-gnu/sys/types.h	/^# define __ssize_t_defined$/;"	d
__state	/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h	/^  __mbstate_t __state;$/;"	m	struct:_G_fpos64_t	typeref:typename:__mbstate_t	access:public
__state	/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h	/^  __mbstate_t __state;$/;"	m	struct:_G_fpos_t	typeref:typename:__mbstate_t	access:public
__string_type	/usr/include/c++/10/bits/basic_string.h	/^      typedef basic_string<_CharT, _Traits, _Alloc>	__string_type;$/;"	t	function:std::operator +	typeref:typename:basic_string<_CharT,_Traits,_Alloc>
__struct_FILE_defined	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^#define __struct_FILE_defined /;"	d
__struct_tm_defined	/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^#define __struct_tm_defined /;"	d
__stub___compat_bdflush	/usr/include/x86_64-linux-gnu/gnu/stubs-64.h	/^#define __stub___compat_bdflush$/;"	d
__stub_chflags	/usr/include/x86_64-linux-gnu/gnu/stubs-64.h	/^#define __stub_chflags$/;"	d
__stub_fchflags	/usr/include/x86_64-linux-gnu/gnu/stubs-64.h	/^#define __stub_fchflags$/;"	d
__stub_gtty	/usr/include/x86_64-linux-gnu/gnu/stubs-64.h	/^#define __stub_gtty$/;"	d
__stub_lchmod	/usr/include/x86_64-linux-gnu/gnu/stubs-64.h	/^#define __stub_lchmod$/;"	d
__stub_revoke	/usr/include/x86_64-linux-gnu/gnu/stubs-64.h	/^#define __stub_revoke$/;"	d
__stub_setlogin	/usr/include/x86_64-linux-gnu/gnu/stubs-64.h	/^#define __stub_setlogin$/;"	d
__stub_sigreturn	/usr/include/x86_64-linux-gnu/gnu/stubs-64.h	/^#define __stub_sigreturn$/;"	d
__stub_sstk	/usr/include/x86_64-linux-gnu/gnu/stubs-64.h	/^#define __stub_sstk$/;"	d
__stub_stty	/usr/include/x86_64-linux-gnu/gnu/stubs-64.h	/^#define __stub_stty$/;"	d
__suseconds_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __SUSECONDS_T_TYPE __suseconds_t; \/* Signed count of microseconds.  *\/$/;"	v	typeref:typename:__STD_TYPE __SUSECONDS_T_TYPE
__suseconds_t_defined	/usr/include/x86_64-linux-gnu/sys/select.h	/^# define __suseconds_t_defined$/;"	d
__suseconds_t_defined	/usr/include/x86_64-linux-gnu/sys/types.h	/^#  define __suseconds_t_defined$/;"	d
__sv_type	/usr/include/c++/10/bits/basic_string.h	/^      typedef basic_string_view<_CharT, _Traits> __sv_type;$/;"	t	class:std::basic_string	typeref:typename:basic_string_view<_CharT,_Traits>	access:private
__sv_wrapper	/usr/include/c++/10/bits/basic_string.h	/^	explicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }$/;"	f	struct:std::basic_string::__sv_wrapper	access:public	signature:(__sv_type __sv)
__sv_wrapper	/usr/include/c++/10/bits/basic_string.h	/^      struct __sv_wrapper$/;"	s	class:std::basic_string	access:private
__syscall_slong_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __SYSCALL_SLONG_TYPE __syscall_slong_t;$/;"	v	typeref:typename:__STD_TYPE __SYSCALL_SLONG_TYPE
__syscall_ulong_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __SYSCALL_ULONG_TYPE __syscall_ulong_t;$/;"	v	typeref:typename:__STD_TYPE __SYSCALL_ULONG_TYPE
__sysconf	/usr/include/x86_64-linux-gnu/bits/time.h	/^extern long int __sysconf (int);$/;"	p	typeref:typename:long int	signature:(int)
__test	/usr/include/c++/10/bits/alloc_traits.h	/^	    static false_type __test(...);$/;"	p	struct:std::allocator_traits::__construct_helper	typeref:typename:false_type	access:public	signature:(...)
__test	/usr/include/c++/10/bits/alloc_traits.h	/^	    static true_type __test(int);$/;"	p	struct:std::allocator_traits::__construct_helper	typeref:typename:true_type	access:public	signature:(int)
__throw_bad_alloc	/usr/include/c++/10/bits/functexcept.h	/^  __throw_bad_alloc(void) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(void)
__throw_bad_cast	/usr/include/c++/10/bits/functexcept.h	/^  __throw_bad_cast(void) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(void)
__throw_bad_exception	/usr/include/c++/10/bits/functexcept.h	/^  __throw_bad_exception(void) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION void	signature:(void)
__throw_bad_function_call	/usr/include/c++/10/bits/functexcept.h	/^  __throw_bad_function_call() __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:()
__throw_bad_typeid	/usr/include/c++/10/bits/functexcept.h	/^  __throw_bad_typeid(void) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(void)
__throw_domain_error	/usr/include/c++/10/bits/functexcept.h	/^  __throw_domain_error(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
__throw_exception_again	/usr/include/c++/10/bits/exception_defines.h	/^# define __throw_exception_again /;"	d
__throw_exception_again	/usr/include/c++/10/bits/exception_defines.h	/^# define __throw_exception_again$/;"	d
__throw_future_error	/usr/include/c++/10/bits/functexcept.h	/^  __throw_future_error(int) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(int)
__throw_invalid_argument	/usr/include/c++/10/bits/functexcept.h	/^  __throw_invalid_argument(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
__throw_ios_failure	/usr/include/c++/10/bits/functexcept.h	/^  __throw_ios_failure(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
__throw_ios_failure	/usr/include/c++/10/bits/functexcept.h	/^  __throw_ios_failure(const char*, int) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *,int)
__throw_length_error	/usr/include/c++/10/bits/functexcept.h	/^  __throw_length_error(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
__throw_logic_error	/usr/include/c++/10/bits/functexcept.h	/^  __throw_logic_error(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
__throw_out_of_range	/usr/include/c++/10/bits/functexcept.h	/^  __throw_out_of_range(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
__throw_out_of_range_fmt	/usr/include/c++/10/bits/functexcept.h	/^  __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__))$/;"	p	namespace:std	typeref:typename:void	signature:(const char *,...)
__throw_overflow_error	/usr/include/c++/10/bits/functexcept.h	/^  __throw_overflow_error(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
__throw_range_error	/usr/include/c++/10/bits/functexcept.h	/^  __throw_range_error(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
__throw_runtime_error	/usr/include/c++/10/bits/functexcept.h	/^  __throw_runtime_error(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
__throw_system_error	/usr/include/c++/10/bits/functexcept.h	/^  __throw_system_error(int) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(int)
__throw_underflow_error	/usr/include/c++/10/bits/functexcept.h	/^  __throw_underflow_error(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
__throw_with_nested_impl	/usr/include/c++/10/bits/nested_exception.h	/^    __throw_with_nested_impl(_Tp&& __t, false_type)$/;"	f	namespace:std	typeref:typename:void	signature:(_Tp && __t,false_type)
__throw_with_nested_impl	/usr/include/c++/10/bits/nested_exception.h	/^    __throw_with_nested_impl(_Tp&& __t, true_type)$/;"	f	namespace:std	typeref:typename:void	signature:(_Tp && __t,true_type)
__time64_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^# define __time64_t /;"	d
__time64_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __TIME64_T_TYPE __time64_t;$/;"	v	typeref:typename:__STD_TYPE __TIME64_T_TYPE
__time_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __TIME_T_TYPE __time_t;	\/* Seconds since the Epoch.  *\/$/;"	v	typeref:typename:__STD_TYPE __TIME_T_TYPE
__time_t_defined	/usr/include/x86_64-linux-gnu/bits/types/time_t.h	/^#define __time_t_defined /;"	d
__timer_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __TIMER_T_TYPE __timer_t;$/;"	v	typeref:typename:__STD_TYPE __TIMER_T_TYPE
__timer_t_defined	/usr/include/x86_64-linux-gnu/bits/types/timer_t.h	/^#define __timer_t_defined /;"	d
__timeval_defined	/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h	/^#define __timeval_defined /;"	d
__tm_gmtoff	/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  long int __tm_gmtoff;		\/* Seconds east of UTC.  *\/$/;"	m	struct:tm	typeref:typename:long int	access:public
__tm_zone	/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  const char *__tm_zone;	\/* Timezone abbreviation.  *\/$/;"	m	struct:tm	typeref:typename:const char *	access:public
__tmp	/usr/include/c++/10/bits/stl_iterator.h	/^	_Iterator __tmp = current;$/;"	m	class:std::reverse_iterator	typeref:typename:_Iterator	access:public
__to_address	/usr/include/c++/10/bits/ptr_traits.h	/^    __to_address(_Tp* __ptr) noexcept$/;"	f	namespace:std	typeref:typename:_Tp *	signature:(_Tp * __ptr)
__to_address	/usr/include/c++/10/bits/ptr_traits.h	/^    __to_address(const _Ptr& __ptr) noexcept$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Ptr & __ptr)
__to_address	/usr/include/c++/10/bits/ptr_traits.h	/^    __to_address(const _Ptr& __ptr)$/;"	f	namespace:std	typeref:typename:std::pointer_traits<_Ptr>::element_type *	signature:(const _Ptr & __ptr)
__to_address	/usr/include/c++/10/bits/ptr_traits.h	/^    __to_address(const _Ptr& __ptr, _None...) noexcept$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Ptr & __ptr,_None...)
__to_chars_10_impl	/usr/include/c++/10/bits/charconv.h	/^    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept$/;"	f	namespace:std::__detail	typeref:typename:void	signature:(char * __first,unsigned __len,_Tp __val)
__to_chars_len	/usr/include/c++/10/bits/charconv.h	/^    __to_chars_len(_Tp __value, int __base = 10) noexcept$/;"	f	namespace:std::__detail	typeref:typename:_GLIBCXX14_CONSTEXPR unsigned	signature:(_Tp __value,int __base=10)
__to_type	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h	/^    typedef const int* 		__to_type;$/;"	t	struct:std::ctype_base	typeref:typename:const int *	access:public
__to_unsigned_like	/usr/include/c++/10/bits/range_access.h	/^      __to_unsigned_like(_Tp __t) noexcept$/;"	f	namespace:std::ranges::__detail	typeref:typename:auto	signature:(_Tp __t)
__to_unsigned_like	/usr/include/c++/10/bits/range_access.h	/^    __to_unsigned_like(__int128 __t) noexcept$/;"	f	namespace:std::ranges::__detail	typeref:typename:unsigned __int128	signature:(__int128 __t)
__to_unsigned_like	/usr/include/c++/10/bits/range_access.h	/^    __to_unsigned_like(unsigned __int128 __t) noexcept$/;"	f	namespace:std::ranges::__detail	typeref:typename:unsigned __int128	signature:(unsigned __int128 __t)
__toascii	/usr/include/ctype.h	/^#define	__toascii(/;"	d	signature:(c)
__toascii_l	/usr/include/ctype.h	/^#   define __toascii_l(/;"	d	signature:(c,l)
__tobody	/usr/include/ctype.h	/^#define __tobody(/;"	d	signature:(c,f,a,args)
__tolower_l	/usr/include/ctype.h	/^#  define __tolower_l(/;"	d	signature:(c,locale)
__tolower_l	/usr/include/ctype.h	/^extern int __tolower_l (int __c, locale_t __l) __THROW;$/;"	p	typeref:typename:int	signature:(int __c,locale_t __l)
__toupper_l	/usr/include/ctype.h	/^#  define __toupper_l(/;"	d	signature:(c,locale)
__toupper_l	/usr/include/ctype.h	/^extern int __toupper_l (int __c, locale_t __l) __THROW;$/;"	p	typeref:typename:int	signature:(int __c,locale_t __l)
__traitor	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __traitor$/;"	s	namespace:std
__traits	/usr/include/c++/10/bits/alloc_traits.h	/^      typedef allocator_traits<_Alloc> __traits;$/;"	t	function:std::__alloc_on_copy	typeref:typename:allocator_traits<_Alloc>
__traits	/usr/include/c++/10/bits/alloc_traits.h	/^      typedef allocator_traits<_Alloc> __traits;$/;"	t	function:std::__alloc_on_move	typeref:typename:allocator_traits<_Alloc>
__traits	/usr/include/c++/10/bits/alloc_traits.h	/^      typedef allocator_traits<_Alloc> __traits;$/;"	t	function:std::__alloc_on_swap	typeref:typename:allocator_traits<_Alloc>
__traits_type	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef iterator_traits<_Iterator>		__traits_type;$/;"	t	class:std::reverse_iterator	typeref:typename:iterator_traits<_Iterator>	access:protected
__traits_type	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef std::iterator_traits<_Iterator>		__traits_type;$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:std::iterator_traits<_Iterator>	access:protected
__traits_type	/usr/include/c++/10/bits/stl_iterator.h	/^      using __traits_type = iterator_traits<_Iterator>;$/;"	t	class:std::move_iterator	typeref:typename:iterator_traits<_Iterator>	access:private
__true_type	/usr/include/c++/10/bits/cpp_type_traits.h	/^  struct __true_type { };$/;"	s	namespace:std
__truth_type	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __truth_type$/;"	s	namespace:std
__truth_type	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __truth_type<true>$/;"	s	namespace:std
__try	/usr/include/c++/10/bits/exception_defines.h	/^# define __try /;"	d
__type	/usr/include/c++/10/bits/basic_string.h	/^	{ typedef basic_string& __type; };$/;"	t	struct:std::basic_string::__enable_if_not_native_iterator	typeref:typename:basic_string &	access:public
__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^      typedef __false_type __type;$/;"	t	struct:std::__are_same	typeref:typename:__false_type	access:public
__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^      typedef __false_type __type;$/;"	t	struct:std::__is_byte	typeref:typename:__false_type	access:public
__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^      typedef __false_type __type;$/;"	t	struct:std::__is_char	typeref:typename:__false_type	access:public
__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^      typedef __false_type __type;$/;"	t	struct:std::__is_floating	typeref:typename:__false_type	access:public
__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^      typedef __false_type __type;$/;"	t	struct:std::__is_integer	typeref:typename:__false_type	access:public
__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^      typedef __false_type __type;$/;"	t	struct:std::__is_move_iterator	typeref:typename:__false_type	access:public
__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^      typedef __false_type __type;$/;"	t	struct:std::__is_pointer	typeref:typename:__false_type	access:public
__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^      typedef __false_type __type;$/;"	t	struct:std::__is_void	typeref:typename:__false_type	access:public
__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^      typedef __true_type __type;$/;"	t	struct:std::__are_same	typeref:typename:__true_type	access:public
__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^      typedef __true_type __type;$/;"	t	struct:std::__is_byte	typeref:typename:__true_type	access:public
__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^      typedef __true_type __type;$/;"	t	struct:std::__is_char	typeref:typename:__true_type	access:public
__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^      typedef __true_type __type;$/;"	t	struct:std::__is_floating	typeref:typename:__true_type	access:public
__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^      typedef __true_type __type;$/;"	t	struct:std::__is_integer	typeref:typename:__true_type	access:public
__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^      typedef __true_type __type;$/;"	t	struct:std::__is_pointer	typeref:typename:__true_type	access:public
__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^      typedef __true_type __type;$/;"	t	struct:std::__is_void	typeref:typename:__true_type	access:public
__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^      typedef typename __truth_type<__value>::__type __type;$/;"	t	struct:std::__traitor	typeref:typename:__truth_type<__value>::__type	access:public
__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^    { typedef __false_type __type; };$/;"	t	struct:std::__truth_type	typeref:typename:__false_type	access:public
__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^    { typedef __true_type __type; };$/;"	t	struct:std::__truth_type	typeref:typename:__true_type	access:public
__type	/usr/include/c++/10/bits/functional_hash.h	/^       using __type = typename underlying_type<_Tp>::type;$/;"	t	function:std::__hash_enum::operator ()	typeref:typename:underlying_type<_Tp>::type
__type	/usr/include/c++/10/bits/iterator_concepts.h	/^	  using __type = typename __result<_Tp>::type;$/;"	t	struct:std::ranges::__cust_imove::_IMove	typeref:typename:__result<_Tp>::type	access:public
__type	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef __true_type __type;$/;"	t	struct:std::__is_move_iterator	typeref:typename:__true_type	access:public
__type	/usr/include/c++/10/ext/type_traits.h	/^      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;$/;"	t	struct:__gnu_cxx::__promote_4	access:public
__type	/usr/include/c++/10/ext/type_traits.h	/^      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;$/;"	t	struct:__gnu_cxx::__promote_3	access:public
__type	/usr/include/c++/10/ext/type_traits.h	/^      typedef __typeof__(_Tp2() + _Up2()) __type;$/;"	t	struct:__gnu_cxx::__promote_2	access:public
__type	/usr/include/c++/10/ext/type_traits.h	/^      typedef typename __if_type::__type __type; $/;"	t	struct:__gnu_cxx::__add_unsigned	typeref:typename:__if_type::__type	access:public
__type	/usr/include/c++/10/ext/type_traits.h	/^      typedef typename __if_type::__type __type; $/;"	t	struct:__gnu_cxx::__remove_unsigned	typeref:typename:__if_type::__type	access:public
__type	/usr/include/c++/10/ext/type_traits.h	/^    { typedef _Iffalse __type; };$/;"	t	struct:__gnu_cxx::__conditional_type	typeref:typename:_Iffalse	access:public
__type	/usr/include/c++/10/ext/type_traits.h	/^    { typedef _Iftrue __type; };$/;"	t	struct:__gnu_cxx::__conditional_type	typeref:typename:_Iftrue	access:public
__type	/usr/include/c++/10/ext/type_traits.h	/^    { typedef _Tp __type; };$/;"	t	struct:__gnu_cxx::__enable_if	typeref:typename:_Tp	access:public
__type	/usr/include/c++/10/ext/type_traits.h	/^    { typedef double __type; };$/;"	t	struct:__gnu_cxx::__promote	typeref:typename:double	access:public
__type	/usr/include/c++/10/ext/type_traits.h	/^    { typedef float __type; };$/;"	t	struct:__gnu_cxx::__promote	typeref:typename:float	access:public
__type	/usr/include/c++/10/ext/type_traits.h	/^    { typedef int __type; };$/;"	t	struct:__gnu_cxx::__remove_unsigned	typeref:typename:int	access:public
__type	/usr/include/c++/10/ext/type_traits.h	/^    { typedef long __type; };$/;"	t	struct:__gnu_cxx::__remove_unsigned	typeref:typename:long	access:public
__type	/usr/include/c++/10/ext/type_traits.h	/^    { typedef long double __type; };$/;"	t	struct:__gnu_cxx::__promote	typeref:typename:long double	access:public
__type	/usr/include/c++/10/ext/type_traits.h	/^    { typedef long long __type; };$/;"	t	struct:__gnu_cxx::__remove_unsigned	typeref:typename:long long	access:public
__type	/usr/include/c++/10/ext/type_traits.h	/^    { typedef short __type; };$/;"	t	struct:__gnu_cxx::__remove_unsigned	typeref:typename:short	access:public
__type	/usr/include/c++/10/ext/type_traits.h	/^    { typedef signed char __type; };$/;"	t	struct:__gnu_cxx::__remove_unsigned	typeref:typename:signed char	access:public
__type	/usr/include/c++/10/ext/type_traits.h	/^    { typedef unsigned char __type; };$/;"	t	struct:__gnu_cxx::__add_unsigned	typeref:typename:unsigned char	access:public
__type	/usr/include/c++/10/ext/type_traits.h	/^    { typedef unsigned int __type; };$/;"	t	struct:__gnu_cxx::__add_unsigned	typeref:typename:unsigned int	access:public
__type	/usr/include/c++/10/ext/type_traits.h	/^    { typedef unsigned long __type; };$/;"	t	struct:__gnu_cxx::__add_unsigned	typeref:typename:unsigned long	access:public
__type	/usr/include/c++/10/ext/type_traits.h	/^    { typedef unsigned long long __type; };$/;"	t	struct:__gnu_cxx::__add_unsigned	typeref:typename:unsigned long long	access:public
__type	/usr/include/c++/10/ext/type_traits.h	/^    { typedef unsigned short __type; };$/;"	t	struct:__gnu_cxx::__add_unsigned	typeref:typename:unsigned short	access:public
__typeof	/usr/include/x86_64-linux-gnu/c++/10/bits/c++locale.h	/^  extern "C" __typeof(uselocale) __uselocale;$/;"	p	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION	signature:(uselocale)
__u_char	/usr/include/x86_64-linux-gnu/bits/types.h	/^typedef unsigned char __u_char;$/;"	t	typeref:typename:unsigned char
__u_char_defined	/usr/include/x86_64-linux-gnu/sys/types.h	/^#  define __u_char_defined$/;"	d
__u_int	/usr/include/x86_64-linux-gnu/bits/types.h	/^typedef unsigned int __u_int;$/;"	t	typeref:typename:unsigned int
__u_long	/usr/include/x86_64-linux-gnu/bits/types.h	/^typedef unsigned long int __u_long;$/;"	t	typeref:typename:unsigned long int
__u_quad_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__extension__ typedef unsigned long long int __u_quad_t;$/;"	t	typeref:typename:unsigned long long int
__u_quad_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^typedef unsigned long int __u_quad_t;$/;"	t	typeref:typename:unsigned long int
__u_short	/usr/include/x86_64-linux-gnu/bits/types.h	/^typedef unsigned short int __u_short;$/;"	t	typeref:typename:unsigned short int
__uflow	/usr/include/stdio.h	/^extern int __uflow (FILE *);$/;"	p	typeref:typename:int	signature:(FILE *)
__uid_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __UID_T_TYPE __uid_t;	\/* Type of user identifications.  *\/$/;"	v	typeref:typename:__STD_TYPE __UID_T_TYPE
__uid_t_defined	/usr/include/x86_64-linux-gnu/sys/types.h	/^# define __uid_t_defined$/;"	d
__uint16_identity	/usr/include/x86_64-linux-gnu/bits/uintn-identity.h	/^__uint16_identity (__uint16_t __x)$/;"	f	typeref:typename:__uint16_t	signature:(__uint16_t __x)
__uint16_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^typedef unsigned short int __uint16_t;$/;"	t	typeref:typename:unsigned short int
__uint32_identity	/usr/include/x86_64-linux-gnu/bits/uintn-identity.h	/^__uint32_identity (__uint32_t __x)$/;"	f	typeref:typename:__uint32_t	signature:(__uint32_t __x)
__uint32_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^typedef unsigned int __uint32_t;$/;"	t	typeref:typename:unsigned int
__uint64_identity	/usr/include/x86_64-linux-gnu/bits/uintn-identity.h	/^__uint64_identity (__uint64_t __x)$/;"	f	typeref:typename:__uint64_t	signature:(__uint64_t __x)
__uint64_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__extension__ typedef unsigned long long int __uint64_t;$/;"	t	typeref:typename:unsigned long long int
__uint64_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^typedef unsigned long int __uint64_t;$/;"	t	typeref:typename:unsigned long int
__uint8_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^typedef unsigned char __uint8_t;$/;"	t	typeref:typename:unsigned char
__uint_least16_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^typedef __uint16_t __uint_least16_t;$/;"	t	typeref:typename:__uint16_t
__uint_least32_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^typedef __uint32_t __uint_least32_t;$/;"	t	typeref:typename:__uint32_t
__uint_least64_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^typedef __uint64_t __uint_least64_t;$/;"	t	typeref:typename:__uint64_t
__uint_least8_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^typedef __uint8_t __uint_least8_t;$/;"	t	typeref:typename:__uint8_t
__uintmax_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__extension__ typedef unsigned long long int __uintmax_t;$/;"	t	typeref:typename:unsigned long long int
__uintmax_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^typedef unsigned long int __uintmax_t;$/;"	t	typeref:typename:unsigned long int
__useconds_t	/usr/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __USECONDS_T_TYPE __useconds_t; \/* Count of microseconds.  *\/$/;"	v	typeref:typename:__STD_TYPE __USECONDS_T_TYPE
__useconds_t_defined	/usr/include/x86_64-linux-gnu/sys/types.h	/^#  define __useconds_t_defined$/;"	d
__v_pointer	/usr/include/c++/10/bits/alloc_traits.h	/^      using __v_pointer = typename _Tp::void_pointer;$/;"	t	struct:std::__allocator_traits_base	typeref:typename:_Tp::void_pointer	access:protected
__va_arg_pack	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __va_arg_pack(/;"	d	signature:()
__va_arg_pack_len	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __va_arg_pack_len(/;"	d	signature:()
__va_copy	/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h	/^#define __va_copy(/;"	d	signature:(d,s)
__va_list__	/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h	/^#define __va_list__$/;"	d
__val	/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h	/^  unsigned long int __val[_SIGSET_NWORDS];$/;"	m	struct:__anon623f701d0108	typeref:typename:unsigned long int[]	access:public
__val_comp_iter	/usr/include/c++/10/bits/predefined_ops.h	/^    __val_comp_iter(_Compare __comp)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Val_comp_iter<_Compare>	signature:(_Compare __comp)
__val_comp_iter	/usr/include/c++/10/bits/predefined_ops.h	/^    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Val_comp_iter<_Compare>	signature:(_Iter_comp_iter<_Compare> __comp)
__val_comp_iter	/usr/include/c++/10/bits/predefined_ops.h	/^  __val_comp_iter(_Iter_less_iter)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Val_less_iter	signature:(_Iter_less_iter)
__val_less_iter	/usr/include/c++/10/bits/predefined_ops.h	/^  __val_less_iter()$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Val_less_iter	signature:()
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__are_same::__anond8428c390203	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__is_byte::__anond8428c392003	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__is_char::__anond8428c391d03	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__is_floating::__anond8428c391703	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__is_integer::__anond8428c390603	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__is_move_iterator::__anond8428c392a03	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__is_nonvolatile_trivially_copyable::__anond8428c392703	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__is_pointer::__anond8428c391b03	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__is_void::__anond8428c390403	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__memcmpable::__anond8428c392903	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__memcpyable::__anond8428c392803	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__are_same::__anond8428c390303	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_byte::__anond8428c392103	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_byte::__anond8428c392203	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_byte::__anond8428c392303	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_byte::__anond8428c392403	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_byte::__anond8428c392503	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_char::__anond8428c391e03	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_char::__anond8428c391f03	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_floating::__anond8428c391803	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_floating::__anond8428c391903	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_floating::__anond8428c391a03	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anond8428c390703	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anond8428c390803	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anond8428c390903	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anond8428c390a03	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anond8428c390b03	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anond8428c390c03	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anond8428c390d03	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anond8428c390e03	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anond8428c390f03	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anond8428c391003	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anond8428c391103	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anond8428c391203	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anond8428c391303	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anond8428c391403	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anond8428c391503	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anond8428c391603	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_pointer::__anond8428c391c03	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_void::__anond8428c390503	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = __is_trivially_copyable(_Tp) };$/;"	e	enum:std::__is_nonvolatile_trivially_copyable::__anond8428c392603	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };$/;"	e	enum:std::__traitor::__anond8428c390103	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      static const bool __value = _Tp(-1) > _Tp(1); \/\/ is unsigned$/;"	m	struct:std::__is_memcmp_ordered	typeref:typename:const bool	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      static const bool __value = __is_memcmp_ordered<_Tp>::__value$/;"	m	struct:std::__is_memcmp_ordered_with	typeref:typename:const bool	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      static const bool __value = false;$/;"	m	struct:std::__is_memcmp_ordered	typeref:typename:const bool	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      static const bool __value = false;$/;"	m	struct:std::__is_memcmp_ordered_with	typeref:typename:const bool	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^    { static constexpr bool __value = false; };$/;"	m	struct:std::__is_memcmp_ordered_with	typeref:typename:bool	access:public
__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^    { static constexpr bool __value = true; };$/;"	m	struct:std::__is_memcmp_ordered_with	typeref:typename:bool	access:public
__value	/usr/include/c++/10/bits/stl_iterator.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_move_iterator::__anon45a010bb0203	access:public
__value	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      enum { __value = _Base::value };$/;"	e	enum:std::__is_random_access_iter::__anon82e621690103	access:public
__value	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^    { enum { __value = __is_base_of(random_access_iterator_tag, _Cat) }; };$/;"	e	enum:std::__is_random_access_iter::__anon82e621690203	access:public
__value	/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h	/^  } __value;		\/* Value so far.  *\/$/;"	m	struct:__anon9c479bfe0108	typeref:union:__anon9c479bfe0108::__anon9c479bfe020a	access:public
__variant	/usr/include/c++/10/bits/basic_string.h	/^  namespace __detail::__variant$/;"	n	namespace:std::__detail
__warnattr	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __warnattr(/;"	d	signature:(msg)
__warndecl	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __warndecl(/;"	d	signature:(name,msg)
__wch	/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h	/^    __WINT_TYPE__ __wch;$/;"	m	union:__anon9c479bfe0108::__anon9c479bfe020a	typeref:typename:__WINT_TYPE__	access:public
__wchar_t__	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define __wchar_t__	/;"	d
__wchb	/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h	/^    char __wchb[4];$/;"	m	union:__anon9c479bfe0108::__anon9c479bfe020a	typeref:typename:char[4]	access:public
__wctob_alias	/usr/include/wchar.h	/^extern int __wctob_alias (wint_t __c) __asm ("wctob");$/;"	p	typeref:typename:int	signature:(wint_t __c)
__width	/usr/include/c++/10/ext/numeric_traits.h	/^      enum { __width = __value ? sizeof(_Tp) * __CHAR_BIT__ : 0 };$/;"	e	enum:__gnu_cxx::__is_integer_nonstrict::__anona122f8870103	access:public
__wint_t_defined	/usr/include/x86_64-linux-gnu/bits/types/wint_t.h	/^#define __wint_t_defined /;"	d
__with_ref	/usr/include/c++/10/bits/iterator_concepts.h	/^      using __with_ref = _Tp&;$/;"	t	namespace:std::__detail	typeref:typename:_Tp &
__wmask_type	/usr/include/c++/10/bits/locale_facets.h	/^      typedef wctype_t		__wmask_type;$/;"	t	class:std::ctype	typeref:typename:wctype_t	access:public
__wrefs	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  unsigned int __wrefs;$/;"	m	struct:__pthread_cond_s	typeref:typename:unsigned int	access:public
__write	/usr/include/c++/10/bits/locale_facets.h	/^    __write(_OutIter __s, const _CharT* __ws, int __len)$/;"	f	namespace:std	typeref:typename:_OutIter	signature:(_OutIter __s,const _CharT * __ws,int __len)
__write	/usr/include/c++/10/bits/locale_facets.h	/^    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)$/;"	f	namespace:std	typeref:typename:ostreambuf_iterator<_CharT>	signature:(ostreambuf_iterator<_CharT> __s,const _CharT * __ws,int __len)
__writers	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned int __writers;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned int	access:public
__writers_futex	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned int __writers_futex;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned int	access:public
__wrphase_futex	/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned int __wrphase_futex;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned int	access:public
__wseq	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^    __extension__ unsigned long long int __wseq;$/;"	m	union:__pthread_cond_s::__anona7088117010a	typeref:typename:__extension__ unsigned long long int	access:public
__wseq32	/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^    } __wseq32;$/;"	m	union:__pthread_cond_s::__anona7088117010a	typeref:struct:__pthread_cond_s::__anona7088117010a::__anona70881170208	access:public
__wur	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __wur /;"	d
__wur	/usr/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __wur /;"	d
__x	/usr/include/c++/10/bits/range_cmp.h	/^	    auto __x = reinterpret_cast<__UINTPTR_TYPE__>($/;"	m	struct:std::ranges::less	typeref:typename:auto	access:public
__x	/usr/include/stdlib.h	/^    unsigned short int __x[3];	\/* Current state.  *\/$/;"	m	struct:drand48_data	typeref:typename:unsigned short int[3]	access:public
__y	/usr/include/c++/10/bits/range_cmp.h	/^	    auto __y = reinterpret_cast<__UINTPTR_TYPE__>($/;"	m	struct:std::ranges::less	typeref:typename:auto	access:public
_chain	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  struct _IO_FILE *_chain;$/;"	m	struct:_IO_FILE	typeref:struct:_IO_FILE *	access:public
_codecvt	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  struct _IO_codecvt *_codecvt;$/;"	m	struct:_IO_FILE_complete	typeref:struct:_IO_codecvt *	access:public
_cur_column	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  unsigned short _cur_column;$/;"	m	struct:_IO_FILE	typeref:typename:unsigned short	access:public
_file	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  struct _IO_FILE _file;$/;"	m	struct:_IO_FILE_complete	typeref:struct:_IO_FILE	access:public
_fileno	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  int _fileno;$/;"	m	struct:_IO_FILE	typeref:typename:int	access:public
_flags	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  int _flags;		\/* High-order word is _IO_MAGIC; rest is flags. *\/$/;"	m	struct:_IO_FILE	typeref:typename:int	access:public
_flags2	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  int _flags2;$/;"	m	struct:_IO_FILE	typeref:typename:int	access:public
_freeres_buf	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  void *_freeres_buf;$/;"	m	struct:_IO_FILE_complete	typeref:typename:void *	access:public
_freeres_list	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  struct _IO_FILE *_freeres_list;$/;"	m	struct:_IO_FILE_complete	typeref:struct:_IO_FILE *	access:public
_lock	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  _IO_lock_t *_lock;$/;"	m	struct:_IO_FILE	typeref:typename:_IO_lock_t *	access:public
_markers	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  struct _IO_marker *_markers;$/;"	m	struct:_IO_FILE	typeref:struct:_IO_marker *	access:public
_mode	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  int _mode;$/;"	m	struct:_IO_FILE_complete	typeref:typename:int	access:public
_objc_thread_attribs	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^static pthread_attr_t _objc_thread_attribs;$/;"	v	typeref:typename:pthread_attr_t
_objc_thread_storage	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^static pthread_key_t _objc_thread_storage;$/;"	v	typeref:typename:pthread_key_t
_offset	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  __off64_t _offset;$/;"	m	struct:_IO_FILE_complete	typeref:typename:__off64_t	access:public
_old_offset	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  __off_t _old_offset; \/* This used to be _offset but it's too small.  *\/$/;"	m	struct:_IO_FILE	typeref:typename:__off_t	access:public
_pthread_cleanup_buffer	/usr/include/pthread.h	/^struct _pthread_cleanup_buffer$/;"	s
_pthread_cleanup_buffer::__arg	/usr/include/pthread.h	/^  void *__arg;                            \/* Its argument.  *\/$/;"	m	struct:_pthread_cleanup_buffer	typeref:typename:void *	access:public
_pthread_cleanup_buffer::__canceltype	/usr/include/pthread.h	/^  int __canceltype;                       \/* Saved cancellation type. *\/$/;"	m	struct:_pthread_cleanup_buffer	typeref:typename:int	access:public
_pthread_cleanup_buffer::__prev	/usr/include/pthread.h	/^  struct _pthread_cleanup_buffer *__prev; \/* Chaining of cleanup functions.  *\/$/;"	m	struct:_pthread_cleanup_buffer	typeref:struct:_pthread_cleanup_buffer *	access:public
_pthread_cleanup_buffer::__routine	/usr/include/pthread.h	/^  void (*__routine) (void *);             \/* Function to call.  *\/$/;"	m	struct:_pthread_cleanup_buffer	typeref:typename:void (*)(void *)	access:public
_shortbuf	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char _shortbuf[1];$/;"	m	struct:_IO_FILE	typeref:typename:char[1]	access:public
_tolower	/usr/include/ctype.h	/^#  define _tolower(/;"	d	signature:(c)
_toupper	/usr/include/ctype.h	/^#  define _toupper(/;"	d	signature:(c)
_unused2	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];$/;"	m	struct:_IO_FILE_complete	typeref:typename:char[]	access:public
_vtable_offset	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  signed char _vtable_offset;$/;"	m	struct:_IO_FILE	typeref:typename:signed char	access:public
_wide_data	/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  struct _IO_wide_data *_wide_data;$/;"	m	struct:_IO_FILE_complete	typeref:struct:_IO_wide_data *	access:public
a64l	/usr/include/stdlib.h	/^extern long int a64l (const char *__s)$/;"	p	typeref:typename:long int	signature:(const char * __s)
abort	/usr/include/stdlib.h	/^extern void abort (void) __THROW __attribute__ ((__noreturn__));$/;"	p	typeref:typename:void	signature:(void)
abs	/usr/include/c++/10/bits/std_abs.h	/^  abs(__GLIBCXX_TYPE_INT_N_0 __x) { return __x >= 0 ? __x : -__x; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_0	signature:(__GLIBCXX_TYPE_INT_N_0 __x)
abs	/usr/include/c++/10/bits/std_abs.h	/^  abs(__GLIBCXX_TYPE_INT_N_1 __x) { return __x >= 0 ? __x : -__x; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_1	signature:(__GLIBCXX_TYPE_INT_N_1 __x)
abs	/usr/include/c++/10/bits/std_abs.h	/^  abs(__GLIBCXX_TYPE_INT_N_2 __x) { return __x >= 0 ? __x : -__x; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_2	signature:(__GLIBCXX_TYPE_INT_N_2 __x)
abs	/usr/include/c++/10/bits/std_abs.h	/^  abs(__GLIBCXX_TYPE_INT_N_3 __x) { return __x >= 0 ? __x : -__x; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_3	signature:(__GLIBCXX_TYPE_INT_N_3 __x)
abs	/usr/include/c++/10/bits/std_abs.h	/^  abs(__float128 __x)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR __float128	signature:(__float128 __x)
abs	/usr/include/c++/10/bits/std_abs.h	/^  abs(double __x)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR double	signature:(double __x)
abs	/usr/include/c++/10/bits/std_abs.h	/^  abs(float __x)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR float	signature:(float __x)
abs	/usr/include/c++/10/bits/std_abs.h	/^  abs(long __i) { return __builtin_labs(__i); }$/;"	f	namespace:std	typeref:typename:long	signature:(long __i)
abs	/usr/include/c++/10/bits/std_abs.h	/^  abs(long double __x)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR long double	signature:(long double __x)
abs	/usr/include/c++/10/bits/std_abs.h	/^  abs(long long __x) { return __builtin_llabs (__x); }$/;"	f	namespace:std	typeref:typename:long long	signature:(long long __x)
abs	/usr/include/stdlib.h	/^extern int abs (int __x) __THROW __attribute__ ((__const__)) __wur;$/;"	p	typeref:typename:int	signature:(int __x)
acosf	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define acosf /;"	d
acosl	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define acosl /;"	d
address	/usr/include/c++/10/ext/new_allocator.h	/^      address(const_reference __x) const _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::new_allocator	typeref:typename:const_pointer	access:public	signature:(const_reference __x) const
address	/usr/include/c++/10/ext/new_allocator.h	/^      address(reference __x) const _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::new_allocator	typeref:typename:pointer	access:public	signature:(reference __x) const
address_family_not_supported	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      address_family_not_supported = 		EAFNOSUPPORT,$/;"	e	enum:std::errc	access:public
address_in_use	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      address_in_use = 				EADDRINUSE,$/;"	e	enum:std::errc	access:public
address_not_available	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      address_not_available = 			EADDRNOTAVAIL,$/;"	e	enum:std::errc	access:public
addressof	/usr/include/c++/10/bits/move.h	/^    addressof(_Tp& __r) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR _Tp *	signature:(_Tp & __r)
addressof	/usr/include/c++/10/bits/move.h	/^    const _Tp* addressof(const _Tp&&) = delete;$/;"	p	namespace:std	typeref:typename:const _Tp *	signature:(const _Tp &&)
adjustfield	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags adjustfield = _S_adjustfield;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
advance	/usr/include/c++/10/bits/range_access.h	/^    advance(_It& __it, _Sent __bound)$/;"	f	namespace:std::ranges	typeref:typename:void	signature:(_It & __it,_Sent __bound)
advance	/usr/include/c++/10/bits/range_access.h	/^    advance(_It& __it, iter_difference_t<_It> __n)$/;"	f	namespace:std::ranges	typeref:typename:void	signature:(_It & __it,iter_difference_t<_It> __n)
advance	/usr/include/c++/10/bits/range_access.h	/^    advance(_It& __it, iter_difference_t<_It> __n, _Sent __bound)$/;"	f	namespace:std::ranges	typeref:typename:iter_difference_t<_It>	signature:(_It & __it,iter_difference_t<_It> __n,_Sent __bound)
advance	/usr/include/c++/10/bits/stl_iterator_base_funcs.h	/^    advance(_InputIterator& __i, _Distance __n)$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR void	signature:(_InputIterator & __i,_Distance __n)
advance	/usr/include/c++/10/bits/streambuf_iterator.h	/^    advance(istreambuf_iterator<_CharT>& __i, _Distance __n)$/;"	f	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,void>::__type	signature:(istreambuf_iterator<_CharT> & __i,_Distance __n)
aligned_alloc	/usr/include/stdlib.h	/^extern void *aligned_alloc (size_t __alignment, size_t __size)$/;"	p	typeref:typename:void *	signature:(size_t __alignment,size_t __size)
all	/usr/include/c++/10/bits/locale_classes.h	/^    static const category all		= (ctype | numeric | collate |$/;"	m	class:std::locale	typeref:typename:const category	access:public
alloca	/usr/include/alloca.h	/^# define alloca(/;"	d	signature:(size)
alloca	/usr/include/alloca.h	/^extern void *alloca (size_t __size) __THROW;$/;"	p	typeref:typename:__BEGIN_DECLS void *	signature:(size_t __size)
allocate	/usr/include/c++/10/bits/alloc_traits.h	/^      allocate(_Alloc& __a, size_type __n)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR pointer	access:public	signature:(_Alloc & __a,size_type __n)
allocate	/usr/include/c++/10/bits/alloc_traits.h	/^      allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR pointer	access:public	signature:(_Alloc & __a,size_type __n,const_void_pointer __hint)
allocate	/usr/include/c++/10/bits/alloc_traits.h	/^      allocate(allocator_type& __a, size_type __n)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR pointer	access:public	signature:(allocator_type & __a,size_type __n)
allocate	/usr/include/c++/10/bits/alloc_traits.h	/^      allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR pointer	access:public	signature:(allocator_type & __a,size_type __n,const_void_pointer __hint)
allocate	/usr/include/c++/10/bits/allocator.h	/^      allocate(size_t __n)$/;"	f	class:std::allocator	typeref:typename:_Tp *	access:public	signature:(size_t __n)
allocate	/usr/include/c++/10/ext/alloc_traits.h	/^      allocate(_Alloc& __a, size_type __n, _Hint __hint)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:_GLIBCXX_NODISCARD pointer	access:public	signature:(_Alloc & __a,size_type __n,_Hint __hint)
allocate	/usr/include/c++/10/ext/alloc_traits.h	/^    allocate(_Alloc& __a, size_type __n)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:_GLIBCXX_NODISCARD pointer	access:public	signature:(_Alloc & __a,size_type __n)
allocate	/usr/include/c++/10/ext/new_allocator.h	/^      allocate(size_type __n, const void* = static_cast<const void*>(0))$/;"	f	class:__gnu_cxx::new_allocator	typeref:typename:_GLIBCXX_NODISCARD _Tp *	access:public	signature:(size_type __n,const void * =static_cast<const void * > (0))
allocator	/usr/include/c++/10/bits/allocator.h	/^	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }$/;"	f	class:std::allocator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const allocator<_Tp1> &)
allocator	/usr/include/c++/10/bits/allocator.h	/^	allocator(const allocator<_Up>&) { }$/;"	f	class:std::allocator	access:public	signature:(const allocator<_Up> &)
allocator	/usr/include/c++/10/bits/allocator.h	/^      allocator() = default;$/;"	p	class:std::allocator	access:public	signature:()
allocator	/usr/include/c++/10/bits/allocator.h	/^      allocator() _GLIBCXX_NOTHROW { }$/;"	f	class:std::allocator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:()
allocator	/usr/include/c++/10/bits/allocator.h	/^      allocator(const allocator& __a) _GLIBCXX_NOTHROW$/;"	f	class:std::allocator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const allocator & __a)
allocator	/usr/include/c++/10/bits/allocator.h	/^      template<typename _Up> allocator(const allocator<_Up>&) { }$/;"	f	class:std::allocator	access:public	signature:(const allocator<_Up> &)
allocator	/usr/include/c++/10/bits/allocator.h	/^    class allocator : public __allocator_base<_Tp>$/;"	c	namespace:std	inherits:__allocator_base<_Tp>
allocator	/usr/include/c++/10/bits/allocator.h	/^    class allocator<const _Tp>$/;"	c	namespace:std
allocator	/usr/include/c++/10/bits/allocator.h	/^    class allocator<const volatile _Tp>$/;"	c	namespace:std
allocator	/usr/include/c++/10/bits/allocator.h	/^    class allocator<void>$/;"	c	namespace:std
allocator	/usr/include/c++/10/bits/allocator.h	/^    class allocator<volatile _Tp>$/;"	c	namespace:std
allocator_traits	/usr/include/c++/10/bits/alloc_traits.h	/^    struct allocator_traits : __allocator_traits_base$/;"	s	namespace:std	inherits:__allocator_traits_base
allocator_traits	/usr/include/c++/10/bits/alloc_traits.h	/^    struct allocator_traits<allocator<_Tp>>$/;"	s	namespace:std
allocator_type	/usr/include/c++/10/bits/alloc_traits.h	/^      typedef _Alloc allocator_type;$/;"	t	struct:std::allocator_traits	typeref:typename:_Alloc	access:public
allocator_type	/usr/include/c++/10/bits/alloc_traits.h	/^      using allocator_type = allocator<_Tp>;$/;"	t	struct:std::allocator_traits	typeref:typename:allocator<_Tp>	access:public
allocator_type	/usr/include/c++/10/bits/basic_string.h	/^      typedef _Char_alloc_type				allocator_type;$/;"	t	class:std::basic_string	typeref:typename:_Char_alloc_type	access:public
allocator_type	/usr/include/c++/10/ext/alloc_traits.h	/^    typedef _Alloc allocator_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc	access:public
alnum	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h	/^    static const mask alnum 	= _ISalpha | _ISdigit;$/;"	m	struct:std::ctype_base	typeref:typename:const mask	access:public
alpha	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h	/^    static const mask alpha 	= _ISalpha;$/;"	m	struct:std::ctype_base	typeref:typename:const mask	access:public
already_connected	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      already_connected = 			EISCONN,$/;"	e	enum:std::errc	access:public
app	/usr/include/c++/10/bits/ios_base.h	/^    static const openmode app =		_S_app;$/;"	m	class:std::ios_base	typeref:typename:const openmode	access:public
append	/usr/include/c++/10/bits/basic_string.h	/^	append(const _Tp& __svt, size_type __pos, size_type __n = npos)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt,size_type __pos,size_type __n=npos)
append	/usr/include/c++/10/bits/basic_string.h	/^        append(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(_InputIterator __first,_InputIterator __last)
append	/usr/include/c++/10/bits/basic_string.h	/^        append(const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt)
append	/usr/include/c++/10/bits/basic_string.h	/^      append(const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s)
append	/usr/include/c++/10/bits/basic_string.h	/^      append(const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s,size_type __n)
append	/usr/include/c++/10/bits/basic_string.h	/^      append(const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str)
append	/usr/include/c++/10/bits/basic_string.h	/^      append(const basic_string& __str, size_type __pos, size_type __n = npos)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str,size_type __pos,size_type __n=npos)
append	/usr/include/c++/10/bits/basic_string.h	/^      append(initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(initializer_list<_CharT> __l)
append	/usr/include/c++/10/bits/basic_string.h	/^      append(size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __n,_CharT __c)
argument_list_too_long	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      argument_list_too_long = 			E2BIG,$/;"	e	enum:std::errc	access:public
argument_out_of_domain	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      argument_out_of_domain = 			EDOM,$/;"	e	enum:std::errc	access:public
argument_type	/usr/include/c++/10/bits/stl_function.h	/^      typedef _Arg 	argument_type;   $/;"	t	struct:std::unary_function	typeref:typename:_Arg	access:public
asctime	/usr/include/time.h	/^extern char *asctime (const struct tm *__tp) __THROW;$/;"	p	typeref:typename:char *	signature:(const struct tm * __tp)
asctime_r	/usr/include/time.h	/^extern char *asctime_r (const struct tm *__restrict __tp,$/;"	p	typeref:typename:char *	signature:(const struct tm * __restrict __tp,char * __restrict __buf)
asinf	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define asinf /;"	d
asinl	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define asinl /;"	d
asprintf	/usr/include/stdio.h	/^extern int asprintf (char **__restrict __ptr,$/;"	p	typeref:typename:int	signature:(char ** __restrict __ptr,const char * __restrict __fmt,...)
assign	/usr/include/c++/10/bits/basic_string.h	/^	assign(const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt)
assign	/usr/include/c++/10/bits/basic_string.h	/^	assign(const _Tp& __svt, size_type __pos, size_type __n = npos)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt,size_type __pos,size_type __n=npos)
assign	/usr/include/c++/10/bits/basic_string.h	/^        assign(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(_InputIterator __first,_InputIterator __last)
assign	/usr/include/c++/10/bits/basic_string.h	/^      assign(basic_string&& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(basic_string && __str)
assign	/usr/include/c++/10/bits/basic_string.h	/^      assign(const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s)
assign	/usr/include/c++/10/bits/basic_string.h	/^      assign(const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s,size_type __n)
assign	/usr/include/c++/10/bits/basic_string.h	/^      assign(const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str)
assign	/usr/include/c++/10/bits/basic_string.h	/^      assign(const basic_string& __str, size_type __pos, size_type __n = npos)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str,size_type __pos,size_type __n=npos)
assign	/usr/include/c++/10/bits/basic_string.h	/^      assign(initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(initializer_list<_CharT> __l)
assign	/usr/include/c++/10/bits/basic_string.h	/^      assign(size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __n,_CharT __c)
assign	/usr/include/c++/10/bits/char_traits.h	/^      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX17_CONSTEXPR void	access:public	signature:(char_type & __c1,const char_type & __c2)
assign	/usr/include/c++/10/bits/char_traits.h	/^      assign(char_type& __c1, const char_type& __c2) noexcept$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX17_CONSTEXPR void	access:public	signature:(char_type & __c1,const char_type & __c2)
assign	/usr/include/c++/10/bits/char_traits.h	/^      assign(char_type& __c1, const char_type& __c2)$/;"	f	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX14_CONSTEXPR void	access:public	signature:(char_type & __c1,const char_type & __c2)
assign	/usr/include/c++/10/bits/char_traits.h	/^      assign(char_type* __s, size_t __n, char_type __a)$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR char_type *	access:public	signature:(char_type * __s,size_t __n,char_type __a)
assign	/usr/include/c++/10/bits/char_traits.h	/^      assign(char_type* __s, std::size_t __n, char_type __a);$/;"	p	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR char_type *	access:public	signature:(char_type * __s,std::size_t __n,char_type __a)
assign	/usr/include/c++/10/bits/char_traits.h	/^    assign(char_type* __s, std::size_t __n, char_type __a)$/;"	f	class:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR typename char_traits<_CharT>::char_type *	signature:(char_type * __s,std::size_t __n,char_type __a)
at	/usr/include/c++/10/bits/basic_string.h	/^      at(size_type __n) const$/;"	f	class:std::basic_string	typeref:typename:const_reference	access:public	signature:(size_type __n) const
at	/usr/include/c++/10/bits/basic_string.h	/^      at(size_type __n)$/;"	f	class:std::basic_string	typeref:typename:reference	access:public	signature:(size_type __n)
at_quick_exit	/usr/include/stdlib.h	/^extern "C++" int at_quick_exit (void (*__func) (void))$/;"	p	typeref:typename:int	signature:(void (* __func)(void))
at_quick_exit	/usr/include/stdlib.h	/^extern int at_quick_exit (void (*__func) (void)) __THROW __nonnull ((1));$/;"	p	typeref:typename:int	signature:(void (* __func)(void))
atan2f	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define atan2f /;"	d
atan2l	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define atan2l /;"	d
atanf	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define atanf /;"	d
atanl	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define atanl /;"	d
ate	/usr/include/c++/10/bits/ios_base.h	/^    static const openmode ate =		_S_ate;$/;"	m	class:std::ios_base	typeref:typename:const openmode	access:public
atexit	/usr/include/stdlib.h	/^extern int atexit (void (*__func) (void)) __THROW __nonnull ((1));$/;"	p	typeref:typename:int	signature:(void (* __func)(void))
atof	/usr/include/stdlib.h	/^extern double atof (const char *__nptr)$/;"	p	typeref:typename:double	signature:(const char * __nptr)
atoi	/usr/include/stdlib.h	/^extern int atoi (const char *__nptr)$/;"	p	typeref:typename:int	signature:(const char * __nptr)
atol	/usr/include/stdlib.h	/^extern long int atol (const char *__nptr)$/;"	p	typeref:typename:long int	signature:(const char * __nptr)
atoll	/usr/include/stdlib.h	/^__extension__ extern long long int atoll (const char *__nptr)$/;"	p	typeref:typename:__extension__ long long int	signature:(const char * __nptr)
back	/usr/include/c++/10/bits/basic_string.h	/^      back() const noexcept$/;"	f	class:std::basic_string	typeref:typename:const_reference	access:public	signature:() const
back	/usr/include/c++/10/bits/basic_string.h	/^      back() noexcept$/;"	f	class:std::basic_string	typeref:typename:reference	access:public	signature:()
back_insert_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^      back_insert_iterator(_Container& __x)$/;"	f	class:std::back_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Container & __x)
back_insert_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^      constexpr back_insert_iterator() noexcept : container(nullptr) { }$/;"	f	class:std::back_insert_iterator	access:public	signature:()
back_insert_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    class back_insert_iterator$/;"	c	namespace:std	inherits:iterator<output_iterator_tag,void,void,void,void>
back_inserter	/usr/include/c++/10/bits/stl_iterator.h	/^    back_inserter(_Container& __x)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR back_insert_iterator<_Container>	signature:(_Container & __x)
bad	/usr/include/c++/10/bits/basic_ios.h	/^      bad() const$/;"	f	class:std::basic_ios	typeref:typename:bool	access:public	signature:() const
bad_address	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      bad_address = 				EFAULT,$/;"	e	enum:std::errc	access:public
bad_file_descriptor	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      bad_file_descriptor = 			EBADF,$/;"	e	enum:std::errc	access:public
bad_message	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      bad_message = 				EBADMSG,$/;"	e	enum:std::errc	access:public
badbit	/usr/include/c++/10/bits/ios_base.h	/^    static const iostate badbit =	_S_badbit;$/;"	m	class:std::ios_base	typeref:typename:const iostate	access:public
base	/usr/include/c++/10/bits/stl_iterator.h	/^      base() &&$/;"	f	class:std::counted_iterator	typeref:typename:_It	access:public	signature:()
base	/usr/include/c++/10/bits/stl_iterator.h	/^      base() &&$/;"	f	class:std::move_iterator	typeref:typename:iterator_type	access:public	signature:()
base	/usr/include/c++/10/bits/stl_iterator.h	/^      base() const &$/;"	f	class:std::counted_iterator	typeref:typename:_It	access:public	signature:() const
base	/usr/include/c++/10/bits/stl_iterator.h	/^      base() const &$/;"	f	class:std::move_iterator	typeref:typename:iterator_type	access:public	signature:() const
base	/usr/include/c++/10/bits/stl_iterator.h	/^      base() const _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR const _Iterator &	access:public	signature:() const
base	/usr/include/c++/10/bits/stl_iterator.h	/^      base() const$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR iterator_type	access:public	signature:() const
base	/usr/include/c++/10/bits/stl_iterator.h	/^      base() const$/;"	f	class:std::move_sentinel	typeref:typename:_Sent	access:public	signature:() const
base	/usr/include/c++/10/bits/stl_iterator.h	/^      base() const$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR iterator_type	access:public	signature:() const
basefield	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags basefield =   _S_basefield;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
basic_ios	/usr/include/c++/10/bits/basic_ios.h	/^      basic_ios()$/;"	f	class:std::basic_ios	access:protected	signature:()
basic_ios	/usr/include/c++/10/bits/basic_ios.h	/^      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)$/;"	f	class:std::basic_ios	access:public	signature:(basic_streambuf<_CharT,_Traits> * __sb)
basic_ios	/usr/include/c++/10/bits/basic_ios.h	/^      basic_ios(const basic_ios&) = delete;$/;"	p	class:std::basic_ios	access:protected	signature:(const basic_ios &)
basic_ios	/usr/include/c++/10/bits/basic_ios.h	/^    class basic_ios : public ios_base$/;"	c	namespace:std	inherits:ios_base
basic_string	/usr/include/c++/10/bits/basic_string.h	/^	basic_string(const _Tp& __t, const _Alloc& __a = _Alloc())$/;"	f	class:std::basic_string	access:public	signature:(const _Tp & __t,const _Alloc & __a=_Alloc ())
basic_string	/usr/include/c++/10/bits/basic_string.h	/^	basic_string(const _Tp& __t, size_type __pos, size_type __n,$/;"	f	class:std::basic_string	access:public	signature:(const _Tp & __t,size_type __pos,size_type __n,const _Alloc & __a=_Alloc ())
basic_string	/usr/include/c++/10/bits/basic_string.h	/^        basic_string(_InputIterator __beg, _InputIterator __end,$/;"	f	class:std::basic_string	access:public	signature:(_InputIterator __beg,_InputIterator __end,const _Alloc & __a=_Alloc ())
basic_string	/usr/include/c++/10/bits/basic_string.h	/^      basic_string(__sv_wrapper __svw, const _Alloc& __a)$/;"	f	class:std::basic_string	access:private	signature:(__sv_wrapper __svw,const _Alloc & __a)
basic_string	/usr/include/c++/10/bits/basic_string.h	/^      basic_string(basic_string&& __str) noexcept$/;"	f	class:std::basic_string	access:public	signature:(basic_string && __str)
basic_string	/usr/include/c++/10/bits/basic_string.h	/^      basic_string(basic_string&& __str, const _Alloc& __a)$/;"	f	class:std::basic_string	access:public	signature:(basic_string && __str,const _Alloc & __a)
basic_string	/usr/include/c++/10/bits/basic_string.h	/^      basic_string(const _Alloc& __a) _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	access:public	signature:(const _Alloc & __a)
basic_string	/usr/include/c++/10/bits/basic_string.h	/^      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())$/;"	f	class:std::basic_string	access:public	signature:(const _CharT * __s,const _Alloc & __a=_Alloc ())
basic_string	/usr/include/c++/10/bits/basic_string.h	/^      basic_string(const _CharT* __s, size_type __n,$/;"	f	class:std::basic_string	access:public	signature:(const _CharT * __s,size_type __n,const _Alloc & __a=_Alloc ())
basic_string	/usr/include/c++/10/bits/basic_string.h	/^      basic_string(const basic_string& __str)$/;"	f	class:std::basic_string	access:public	signature:(const basic_string & __str)
basic_string	/usr/include/c++/10/bits/basic_string.h	/^      basic_string(const basic_string& __str, const _Alloc& __a)$/;"	f	class:std::basic_string	access:public	signature:(const basic_string & __str,const _Alloc & __a)
basic_string	/usr/include/c++/10/bits/basic_string.h	/^      basic_string(const basic_string& __str, size_type __pos,$/;"	f	class:std::basic_string	access:public	signature:(const basic_string & __str,size_type __pos,const _Alloc & __a=_Alloc ())
basic_string	/usr/include/c++/10/bits/basic_string.h	/^      basic_string(const basic_string& __str, size_type __pos,$/;"	f	class:std::basic_string	access:public	signature:(const basic_string & __str,size_type __pos,size_type __n)
basic_string	/usr/include/c++/10/bits/basic_string.h	/^      basic_string(const basic_string& __str, size_type __pos,$/;"	f	class:std::basic_string	access:public	signature:(const basic_string & __str,size_type __pos,size_type __n,const _Alloc & __a)
basic_string	/usr/include/c++/10/bits/basic_string.h	/^      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())$/;"	f	class:std::basic_string	access:public	signature:(initializer_list<_CharT> __l,const _Alloc & __a=_Alloc ())
basic_string	/usr/include/c++/10/bits/basic_string.h	/^      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())$/;"	f	class:std::basic_string	access:public	signature:(size_type __n,_CharT __c,const _Alloc & __a=_Alloc ())
basic_string	/usr/include/c++/10/bits/basic_string.h	/^    basic_string(_InputIterator, _InputIterator, _Allocator = _Allocator())$/;"	p	namespace:std	typeref:typename:_GLIBCXX_END_NAMESPACE_CXX11 _GLIBCXX_BEGIN_NAMESPACE_CXX11	signature:(_InputIterator,_InputIterator,_Allocator=_Allocator ())
basic_string	/usr/include/c++/10/bits/basic_string.h	/^    basic_string(basic_string_view<_CharT, _Traits>, const _Allocator& = _Allocator())$/;"	p	namespace:std	signature:(basic_string_view<_CharT,_Traits>,const _Allocator &=_Allocator ())
basic_string	/usr/include/c++/10/bits/basic_string.h	/^    basic_string(basic_string_view<_CharT, _Traits>,$/;"	p	namespace:std	signature:(basic_string_view<_CharT,_Traits>,typename basic_string<_CharT,_Traits,_Allocator>::size_type,typename basic_string<_CharT,_Traits,_Allocator>::size_type,const _Allocator &=_Allocator ())
basic_string	/usr/include/c++/10/bits/basic_string.h	/^    class basic_string$/;"	c	namespace:std
be16toh	/usr/include/endian.h	/^#  define be16toh(/;"	d	signature:(x)
be32toh	/usr/include/endian.h	/^#  define be32toh(/;"	d	signature:(x)
be64toh	/usr/include/endian.h	/^#  define be64toh(/;"	d	signature:(x)
beg	/usr/include/c++/10/bits/ios_base.h	/^    static const seekdir beg =		_S_beg;$/;"	m	class:std::ios_base	typeref:typename:const seekdir	access:public
begin	/usr/include/c++/10/bits/basic_string.h	/^      begin() _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:iterator	access:public	signature:()
begin	/usr/include/c++/10/bits/basic_string.h	/^      begin() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:const_iterator	access:public	signature:() const
begin	/usr/include/c++/10/bits/iterator_concepts.h	/^    void begin(auto&) = delete;$/;"	p	namespace:std::__detail	typeref:typename:void	signature:(auto &)
begin	/usr/include/c++/10/bits/iterator_concepts.h	/^    void begin(const auto&) = delete;$/;"	p	namespace:std::__detail	typeref:typename:void	signature:(const auto &)
begin	/usr/include/c++/10/bits/range_access.h	/^	ranges::begin(__t);$/;"	p	class:std::ranges::ranges	signature:(__t)
begin	/usr/include/c++/10/bits/range_access.h	/^    begin(_Container& __cont) -> decltype(__cont.begin())$/;"	f	namespace:std	typeref:typename:decltype (__cont.begin ())	signature:(_Container & __cont)
begin	/usr/include/c++/10/bits/range_access.h	/^    begin(_Tp (&__arr)[_Nm])$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp *	signature:(_Tp (& __arr)[_Nm])
begin	/usr/include/c++/10/bits/range_access.h	/^    begin(const _Container& __cont) -> decltype(__cont.begin())$/;"	f	namespace:std	typeref:typename:decltype (__cont.begin ())	signature:(const _Container & __cont)
begin	/usr/include/c++/10/bits/range_access.h	/^    inline constexpr __cust_access::_Begin begin{};$/;"	v	namespace:std::ranges::__cust	typeref:typename:__cust_access::_Begin
begin	/usr/include/c++/10/bits/range_access.h	/^  template<typename _Tp> _Tp* begin(valarray<_Tp>&);$/;"	p	namespace:std	typeref:typename:_Tp *	signature:(valarray<_Tp> &)
begin	/usr/include/c++/10/bits/range_access.h	/^  template<typename _Tp> const _Tp* begin(const valarray<_Tp>&);$/;"	p	namespace:std	typeref:typename:const _Tp *	signature:(const valarray<_Tp> &)
bidirectional_iterator_tag	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^  struct bidirectional_iterator_tag : public forward_iterator_tag { };$/;"	s	namespace:std	inherits:forward_iterator_tag
binary	/usr/include/c++/10/bits/ios_base.h	/^    static const openmode binary =	_S_bin;$/;"	m	class:std::ios_base	typeref:typename:const openmode	access:public
binary_function	/usr/include/c++/10/bits/stl_function.h	/^    struct binary_function$/;"	s	namespace:std
binary_negate	/usr/include/c++/10/bits/stl_function.h	/^      binary_negate(const _Predicate& __x) : _M_pred(__x) { }$/;"	f	class:std::binary_negate	typeref:typename:_GLIBCXX14_CONSTEXPR	access:public	signature:(const _Predicate & __x)
binary_negate	/usr/include/c++/10/bits/stl_function.h	/^    class binary_negate$/;"	c	namespace:std	inherits:binary_function<typename_Predicate::first_argument_type,typename_Predicate::second_argument_type,bool>
bind1st	/usr/include/c++/10/backward/binders.h	/^    bind1st(const _Operation& __fn, const _Tp& __x)$/;"	f	namespace:std	typeref:typename:binder1st<_Operation>	signature:(const _Operation & __fn,const _Tp & __x)
bind2nd	/usr/include/c++/10/backward/binders.h	/^    bind2nd(const _Operation& __fn, const _Tp& __x)$/;"	f	namespace:std	typeref:typename:binder2nd<_Operation>	signature:(const _Operation & __fn,const _Tp & __x)
binder1st	/usr/include/c++/10/backward/binders.h	/^      binder1st(const _Operation& __x,$/;"	f	class:std::binder1st	access:public	signature:(const _Operation & __x,const typename _Operation::first_argument_type & __y)
binder1st	/usr/include/c++/10/backward/binders.h	/^    class binder1st$/;"	c	namespace:std	inherits:unary_function<typename_Operation::second_argument_type,typename_Operation::result_type>
binder2nd	/usr/include/c++/10/backward/binders.h	/^      binder2nd(const _Operation& __x,$/;"	f	class:std::binder2nd	access:public	signature:(const _Operation & __x,const typename _Operation::second_argument_type & __y)
binder2nd	/usr/include/c++/10/backward/binders.h	/^    class binder2nd$/;"	c	namespace:std	inherits:unary_function<typename_Operation::first_argument_type,typename_Operation::result_type>
bit_and	/usr/include/c++/10/bits/stl_function.h	/^    struct bit_and : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
bit_and	/usr/include/c++/10/bits/stl_function.h	/^    struct bit_and<void>$/;"	s	namespace:std
bit_not	/usr/include/c++/10/bits/stl_function.h	/^    struct bit_not : public unary_function<_Tp, _Tp>$/;"	s	namespace:std	inherits:unary_function<_Tp,_Tp>
bit_not	/usr/include/c++/10/bits/stl_function.h	/^    struct bit_not<void>$/;"	s	namespace:std
bit_or	/usr/include/c++/10/bits/stl_function.h	/^    struct bit_or : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
bit_or	/usr/include/c++/10/bits/stl_function.h	/^    struct bit_or<void>$/;"	s	namespace:std
bit_xor	/usr/include/c++/10/bits/stl_function.h	/^    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
bit_xor	/usr/include/c++/10/bits/stl_function.h	/^    struct bit_xor<void>$/;"	s	namespace:std
blank	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h	/^    static const mask blank	= _ISblank;$/;"	m	struct:std::ctype_base	typeref:typename:const mask	access:public
blkcnt64_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __blkcnt64_t blkcnt64_t;     \/* Type to count number of disk blocks. *\/$/;"	t	typeref:typename:__blkcnt64_t
blkcnt_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __blkcnt64_t blkcnt_t;	   \/* Type to count number of disk blocks.  *\/$/;"	t	typeref:typename:__blkcnt64_t
blkcnt_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __blkcnt_t blkcnt_t;	 \/* Type to count number of disk blocks.  *\/$/;"	t	typeref:typename:__blkcnt_t
blksize_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __blksize_t blksize_t;$/;"	t	typeref:typename:__blksize_t
boolalpha	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags boolalpha =   _S_boolalpha;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
boolalpha	/usr/include/c++/10/bits/ios_base.h	/^  boolalpha(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
broken_pipe	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      broken_pipe = 				EPIPE,$/;"	e	enum:std::errc	access:public
bsearch	/usr/include/stdlib.h	/^extern void *bsearch (const void *__key, const void *__base,$/;"	p	typeref:typename:void *	signature:(const void * __key,const void * __base,size_t __nmemb,size_t __size,__compar_fn_t __compar)
btowc	/usr/include/wchar.h	/^extern wint_t btowc (int __c) __THROW;$/;"	p	typeref:typename:wint_t	signature:(int __c)
c_str	/usr/include/c++/10/bits/basic_string.h	/^      c_str() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:const _CharT *	access:public	signature:() const
caddr_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __caddr_t caddr_t;$/;"	t	typeref:typename:__caddr_t
calcnt	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  __syscall_slong_t calcnt;	\/* calibration intervals (ro) *\/$/;"	m	struct:timex	typeref:typename:__syscall_slong_t	access:public
calloc	/usr/include/stdlib.h	/^extern void *calloc (size_t __nmemb, size_t __size)$/;"	p	typeref:typename:void *	signature:(size_t __nmemb,size_t __size)
canonicalize_file_name	/usr/include/stdlib.h	/^extern char *canonicalize_file_name (const char *__name)$/;"	p	typeref:typename:char *	signature:(const char * __name)
capacity	/usr/include/c++/10/bits/basic_string.h	/^      capacity() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:() const
category	/usr/include/c++/10/bits/locale_classes.h	/^    typedef int	category;$/;"	t	class:std::locale	typeref:typename:int	access:public
cbegin	/usr/include/c++/10/bits/basic_string.h	/^      cbegin() const noexcept$/;"	f	class:std::basic_string	typeref:typename:const_iterator	access:public	signature:() const
cbegin	/usr/include/c++/10/bits/range_access.h	/^    cbegin(const _Container& __cont) noexcept(noexcept(std::begin(__cont)))$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Container & __cont)
cbegin	/usr/include/c++/10/bits/range_access.h	/^    inline constexpr __cust_access::_CBegin cbegin{};$/;"	v	namespace:std::ranges::__cust	typeref:typename:__cust_access::_CBegin
cdata	/usr/include/c++/10/bits/range_access.h	/^    inline constexpr __cust_access::_CData cdata{};$/;"	v	namespace:std::ranges::__cust	typeref:typename:__cust_access::_CData
ceilf	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define ceilf /;"	d
ceill	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define ceill /;"	d
cend	/usr/include/c++/10/bits/basic_string.h	/^      cend() const noexcept$/;"	f	class:std::basic_string	typeref:typename:const_iterator	access:public	signature:() const
cend	/usr/include/c++/10/bits/range_access.h	/^    cend(const _Container& __cont) noexcept(noexcept(std::end(__cont)))$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Container & __cont)
cend	/usr/include/c++/10/bits/range_access.h	/^    inline constexpr __cust_access::_CEnd cend{};$/;"	v	namespace:std::ranges::__cust	typeref:typename:__cust_access::_CEnd
char_traits	/usr/include/c++/10/bits/char_traits.h	/^    struct char_traits : public __gnu_cxx::char_traits<_CharT>$/;"	s	namespace:std	inherits:__gnu_cxx::char_traits<_CharT>
char_traits	/usr/include/c++/10/bits/char_traits.h	/^    struct char_traits$/;"	s	namespace:__gnu_cxx
char_traits	/usr/include/c++/10/bits/char_traits.h	/^    struct char_traits<char16_t>$/;"	s	namespace:std
char_traits	/usr/include/c++/10/bits/char_traits.h	/^    struct char_traits<char32_t>$/;"	s	namespace:std
char_traits	/usr/include/c++/10/bits/char_traits.h	/^    struct char_traits<char8_t>$/;"	s	namespace:std
char_traits	/usr/include/c++/10/bits/char_traits.h	/^    struct char_traits<char>$/;"	s	namespace:std
char_traits	/usr/include/c++/10/bits/char_traits.h	/^    struct char_traits<wchar_t>$/;"	s	namespace:std
char_type	/usr/include/c++/10/bits/basic_ios.h	/^      typedef _CharT                                 char_type;$/;"	t	class:std::basic_ios	typeref:typename:_CharT	access:public
char_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef _CharT                                    char_type;$/;"	t	struct:__gnu_cxx::char_traits	typeref:typename:_CharT	access:public
char_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef char              char_type;$/;"	t	struct:std::char_traits	typeref:typename:char	access:public
char_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef char16_t          char_type;$/;"	t	struct:std::char_traits	typeref:typename:char16_t	access:public
char_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef char32_t          char_type;$/;"	t	struct:std::char_traits	typeref:typename:char32_t	access:public
char_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef char8_t           char_type;$/;"	t	struct:std::char_traits	typeref:typename:char8_t	access:public
char_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef wchar_t           char_type;$/;"	t	struct:std::char_traits	typeref:typename:wchar_t	access:public
char_type	/usr/include/c++/10/bits/locale_classes.h	/^      typedef _CharT			char_type;$/;"	t	class:std::collate	typeref:typename:_CharT	access:public
char_type	/usr/include/c++/10/bits/locale_classes.h	/^      typedef _CharT               char_type;$/;"	t	class:std::collate_byname	typeref:typename:_CharT	access:public
char_type	/usr/include/c++/10/bits/locale_facets.h	/^      typedef _CharT			char_type;$/;"	t	class:std::ctype	typeref:typename:_CharT	access:public
char_type	/usr/include/c++/10/bits/locale_facets.h	/^      typedef _CharT			char_type;$/;"	t	class:std::num_get	typeref:typename:_CharT	access:public
char_type	/usr/include/c++/10/bits/locale_facets.h	/^      typedef _CharT			char_type;$/;"	t	class:std::numpunct	typeref:typename:_CharT	access:public
char_type	/usr/include/c++/10/bits/locale_facets.h	/^      typedef _CharT			char_type;$/;"	t	class:std::numpunct_byname	typeref:typename:_CharT	access:public
char_type	/usr/include/c++/10/bits/locale_facets.h	/^      typedef _CharT		char_type;$/;"	t	class:std::num_put	typeref:typename:_CharT	access:public
char_type	/usr/include/c++/10/bits/locale_facets.h	/^      typedef _CharT char_type;$/;"	t	class:std::__ctype_abstract_base	typeref:typename:_CharT	access:public
char_type	/usr/include/c++/10/bits/locale_facets.h	/^      typedef char		char_type;$/;"	t	class:std::ctype	typeref:typename:char	access:public
char_type	/usr/include/c++/10/bits/locale_facets.h	/^      typedef wchar_t		char_type;$/;"	t	class:std::ctype	typeref:typename:wchar_t	access:public
char_type	/usr/include/c++/10/bits/streambuf_iterator.h	/^      typedef _CharT					char_type;$/;"	t	class:std::istreambuf_iterator	typeref:typename:_CharT	access:public
char_type	/usr/include/c++/10/bits/streambuf_iterator.h	/^      typedef _CharT			       char_type;$/;"	t	class:std::ostreambuf_iterator	typeref:typename:_CharT	access:public
chrono_literals	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^    inline namespace chrono_literals { }$/;"	n	namespace:std::literals
classic	/usr/include/c++/10/bits/locale_classes.h	/^    classic();$/;"	p	class:std::locale	typeref:typename:const locale &	access:public	signature:()
classic_table	/usr/include/c++/10/bits/locale_facets.h	/^      classic_table() throw();$/;"	p	class:std::ctype	typeref:typename:const mask *	access:public	signature:()
clear	/usr/include/c++/10/bits/basic_ios.h	/^      clear(iostate __state = goodbit);$/;"	p	class:std::basic_ios	typeref:typename:void	access:public	signature:(iostate __state=goodbit)
clear	/usr/include/c++/10/bits/basic_string.h	/^      clear() _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:()
clearenv	/usr/include/stdlib.h	/^extern int clearenv (void) __THROW;$/;"	p	typeref:typename:int	signature:(void)
clearerr	/usr/include/stdio.h	/^extern void clearerr (FILE *__stream) __THROW;$/;"	p	typeref:typename:void	signature:(FILE * __stream)
clearerr_unlocked	/usr/include/stdio.h	/^extern void clearerr_unlocked (FILE *__stream) __THROW;$/;"	p	typeref:typename:void	signature:(FILE * __stream)
clock	/usr/include/time.h	/^extern clock_t clock (void) __THROW;$/;"	p	typeref:typename:__BEGIN_DECLS clock_t	signature:(void)
clock_adjtime	/usr/include/x86_64-linux-gnu/bits/time.h	/^extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) __THROW;$/;"	p	typeref:typename:__BEGIN_DECLS int	signature:(__clockid_t __clock_id,struct timex * __utx)
clock_getcpuclockid	/usr/include/time.h	/^extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __THROW;$/;"	p	typeref:typename:int	signature:(pid_t __pid,clockid_t * __clock_id)
clock_getres	/usr/include/time.h	/^extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __THROW;$/;"	p	typeref:typename:int	signature:(clockid_t __clock_id,struct timespec * __res)
clock_gettime	/usr/include/time.h	/^extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __THROW;$/;"	p	typeref:typename:int	signature:(clockid_t __clock_id,struct timespec * __tp)
clock_nanosleep	/usr/include/time.h	/^extern int clock_nanosleep (clockid_t __clock_id, int __flags,$/;"	p	typeref:typename:int	signature:(clockid_t __clock_id,int __flags,const struct timespec * __req,struct timespec * __rem)
clock_settime	/usr/include/time.h	/^extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)$/;"	p	typeref:typename:int	signature:(clockid_t __clock_id,const struct timespec * __tp)
clock_t	/usr/include/x86_64-linux-gnu/bits/types/clock_t.h	/^typedef __clock_t clock_t;$/;"	t	typeref:typename:__clock_t
clockid_t	/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h	/^typedef __clockid_t clockid_t;$/;"	t	typeref:typename:__clockid_t
clone	/usr/include/x86_64-linux-gnu/bits/sched.h	/^extern int clone (int (*__fn) (void *__arg), void *__child_stack,$/;"	p	typeref:typename:__BEGIN_DECLS int	signature:(int (* __fn)(void * __arg),void * __child_stack,int __flags,void * __arg,...)
close	/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h	/^  cookie_close_function_t *close;	\/* Close file.  *\/$/;"	m	struct:_IO_cookie_io_functions_t	typeref:typename:cookie_close_function_t *	access:public
cntrl	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h	/^    static const mask cntrl 	= _IScntrl;$/;"	m	struct:std::ctype_base	typeref:typename:const mask	access:public
collate	/usr/include/c++/10/bits/locale_classes.h	/^      collate(__c_locale __cloc, size_t __refs = 0)$/;"	f	class:std::collate	access:public	signature:(__c_locale __cloc,size_t __refs=0)
collate	/usr/include/c++/10/bits/locale_classes.h	/^      collate(size_t __refs = 0)$/;"	f	class:std::collate	access:public	signature:(size_t __refs=0)
collate	/usr/include/c++/10/bits/locale_classes.h	/^    class _GLIBCXX_NAMESPACE_CXX11 collate : public locale::facet$/;"	c	namespace:std	inherits:locale::facet
collate	/usr/include/c++/10/bits/locale_classes.h	/^    static const category collate	= 1L << 2;$/;"	m	class:std::locale	typeref:typename:const category	access:public
collate_byname	/usr/include/c++/10/bits/locale_classes.h	/^      collate_byname(const char* __s, size_t __refs = 0)$/;"	f	class:std::collate_byname	access:public	signature:(const char * __s,size_t __refs=0)
collate_byname	/usr/include/c++/10/bits/locale_classes.h	/^      collate_byname(const string& __s, size_t __refs = 0)$/;"	f	class:std::collate_byname	access:public	signature:(const string & __s,size_t __refs=0)
collate_byname	/usr/include/c++/10/bits/locale_classes.h	/^    class _GLIBCXX_NAMESPACE_CXX11 collate_byname : public collate<_CharT>$/;"	c	namespace:std	inherits:collate<_CharT>
combine	/usr/include/c++/10/bits/locale_classes.h	/^      combine(const locale& __other) const;$/;"	p	class:std::locale	typeref:typename:locale	access:public	signature:(const locale & __other) const
common_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^      common_iterator(const common_iterator<_It2, _Sent2>& __x)$/;"	f	class:std::common_iterator	typeref:typename:requires convertible_to<const _It2 &,_It> && convertible_to<const _Sent2 &,_Sent> 	access:public	signature:(const common_iterator<_It2,_Sent2> & __x)
common_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    common_iterator()$/;"	f	class:std::common_iterator	access:public	signature:()
common_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    common_iterator(_It __i)$/;"	f	class:std::common_iterator	access:public	signature:(_It __i)
common_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    common_iterator(_Sent __s)$/;"	f	class:std::common_iterator	access:public	signature:(_Sent __s)
common_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    common_iterator(const common_iterator& __x)$/;"	f	class:std::common_iterator	access:public	signature:(const common_iterator & __x)
common_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^  class common_iterator$/;"	c	namespace:std
compare	/usr/include/c++/10/bits/basic_string.h	/^	compare(const _Tp& __svt) const$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,int>	access:public	signature:(const _Tp & __svt) const
compare	/usr/include/c++/10/bits/basic_string.h	/^	compare(size_type __pos, size_type __n, const _Tp& __svt) const$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,int>	access:public	signature:(size_type __pos,size_type __n,const _Tp & __svt) const
compare	/usr/include/c++/10/bits/basic_string.h	/^	compare(size_type __pos1, size_type __n1, const _Tp& __svt,$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,int>	access:public	signature:(size_type __pos1,size_type __n1,const _Tp & __svt,size_type __pos2,size_type __n2=npos) const
compare	/usr/include/c++/10/bits/basic_string.h	/^      compare(const _CharT* __s) const _GLIBCXX_NOEXCEPT;$/;"	p	class:std::basic_string	typeref:typename:int	access:public	signature:(const _CharT * __s) const
compare	/usr/include/c++/10/bits/basic_string.h	/^      compare(const basic_string& __str) const$/;"	f	class:std::basic_string	typeref:typename:int	access:public	signature:(const basic_string & __str) const
compare	/usr/include/c++/10/bits/basic_string.h	/^      compare(size_type __pos, size_type __n, const basic_string& __str) const;$/;"	p	class:std::basic_string	typeref:typename:int	access:public	signature:(size_type __pos,size_type __n,const basic_string & __str) const
compare	/usr/include/c++/10/bits/basic_string.h	/^      compare(size_type __pos, size_type __n1, const _CharT* __s) const;$/;"	p	class:std::basic_string	typeref:typename:int	access:public	signature:(size_type __pos,size_type __n1,const _CharT * __s) const
compare	/usr/include/c++/10/bits/basic_string.h	/^      compare(size_type __pos, size_type __n1, const _CharT* __s,$/;"	p	class:std::basic_string	typeref:typename:int	access:public	signature:(size_type __pos,size_type __n1,const _CharT * __s,size_type __n2) const
compare	/usr/include/c++/10/bits/basic_string.h	/^      compare(size_type __pos1, size_type __n1, const basic_string& __str,$/;"	p	class:std::basic_string	typeref:typename:int	access:public	signature:(size_type __pos1,size_type __n1,const basic_string & __str,size_type __pos2,size_type __n2=npos) const
compare	/usr/include/c++/10/bits/char_traits.h	/^      compare(const char_type* __s1, const char_type* __s2, size_t __n)$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX17_CONSTEXPR int	access:public	signature:(const char_type * __s1,const char_type * __s2,size_t __n)
compare	/usr/include/c++/10/bits/char_traits.h	/^      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);$/;"	p	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX14_CONSTEXPR int	access:public	signature:(const char_type * __s1,const char_type * __s2,std::size_t __n)
compare	/usr/include/c++/10/bits/char_traits.h	/^    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)$/;"	f	class:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX14_CONSTEXPR int	signature:(const char_type * __s1,const char_type * __s2,std::size_t __n)
compare	/usr/include/c++/10/bits/locale_classes.h	/^      compare(const _CharT* __lo1, const _CharT* __hi1,$/;"	f	class:std::collate	typeref:typename:int	access:public	signature:(const _CharT * __lo1,const _CharT * __hi1,const _CharT * __lo2,const _CharT * __hi2) const
comparison_category	/usr/include/c++/10/bits/char_traits.h	/^      using comparison_category = std::strong_ordering;$/;"	t	struct:__gnu_cxx::char_traits	typeref:typename:std::strong_ordering	access:public
comparison_category	/usr/include/c++/10/bits/char_traits.h	/^      using comparison_category = strong_ordering;$/;"	t	struct:std::char_traits	typeref:typename:strong_ordering	access:public
comparison_fn_t	/usr/include/stdlib.h	/^typedef __compar_fn_t comparison_fn_t;$/;"	t	typeref:typename:__compar_fn_t
complex_literals	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^    inline namespace complex_literals { }$/;"	n	namespace:std::literals
connection_aborted	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      connection_aborted = 			ECONNABORTED,$/;"	e	enum:std::errc	access:public
connection_already_in_progress	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      connection_already_in_progress = 		EALREADY,$/;"	e	enum:std::errc	access:public
connection_refused	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      connection_refused = 			ECONNREFUSED,$/;"	e	enum:std::errc	access:public
connection_reset	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      connection_reset = 			ECONNRESET,$/;"	e	enum:std::errc	access:public
const_iterator	/usr/include/c++/10/bits/basic_string.h	/^							const_iterator;$/;"	t	class:std::basic_string	typeref:typename:__gnu_cxx::__normal_iterator<const_pointer,basic_string>	access:public
const_mem_fun1_ref_t	/usr/include/c++/10/bits/stl_function.h	/^      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)$/;"	f	class:std::const_mem_fun1_ref_t	access:public	signature:(_Ret (_Tp::* __pf)(_Arg)const)
const_mem_fun1_ref_t	/usr/include/c++/10/bits/stl_function.h	/^    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>$/;"	c	namespace:std	inherits:binary_function<_Tp,_Arg,_Ret>
const_mem_fun1_t	/usr/include/c++/10/bits/stl_function.h	/^      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)$/;"	f	class:std::const_mem_fun1_t	access:public	signature:(_Ret (_Tp::* __pf)(_Arg)const)
const_mem_fun1_t	/usr/include/c++/10/bits/stl_function.h	/^    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>$/;"	c	namespace:std	inherits:binary_function<const_Tp*,_Arg,_Ret>
const_mem_fun_ref_t	/usr/include/c++/10/bits/stl_function.h	/^      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)$/;"	f	class:std::const_mem_fun_ref_t	access:public	signature:(_Ret (_Tp::* __pf)()const)
const_mem_fun_ref_t	/usr/include/c++/10/bits/stl_function.h	/^    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>$/;"	c	namespace:std	inherits:unary_function<_Tp,_Ret>
const_mem_fun_t	/usr/include/c++/10/bits/stl_function.h	/^      const_mem_fun_t(_Ret (_Tp::*__pf)() const)$/;"	f	class:std::const_mem_fun_t	access:public	signature:(_Ret (_Tp::* __pf)()const)
const_mem_fun_t	/usr/include/c++/10/bits/stl_function.h	/^    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>$/;"	c	namespace:std	inherits:unary_function<const_Tp*,_Ret>
const_pointer	/usr/include/c++/10/bits/alloc_traits.h	/^      using const_pointer = const _Tp*;$/;"	t	struct:std::allocator_traits	typeref:typename:const _Tp *	access:public
const_pointer	/usr/include/c++/10/bits/alloc_traits.h	/^      using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;$/;"	t	struct:std::allocator_traits	typeref:typename:_Ptr<__c_pointer,const value_type>::type	access:public
const_pointer	/usr/include/c++/10/bits/allocator.h	/^      typedef const _Tp* const_pointer;$/;"	t	class:std::allocator	typeref:typename:const _Tp *	access:public
const_pointer	/usr/include/c++/10/bits/allocator.h	/^      typedef const void* const_pointer;$/;"	t	class:std::allocator	typeref:typename:const void *	access:public
const_pointer	/usr/include/c++/10/bits/basic_string.h	/^      typedef typename _Alloc_traits::const_pointer	const_pointer;$/;"	t	class:std::basic_string	typeref:typename:_Alloc_traits::const_pointer	access:public
const_pointer	/usr/include/c++/10/ext/alloc_traits.h	/^    typedef typename _Alloc::const_pointer          const_pointer;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc::const_pointer	access:public
const_pointer	/usr/include/c++/10/ext/alloc_traits.h	/^    typedef typename _Base_type::const_pointer      const_pointer;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Base_type::const_pointer	access:public
const_pointer	/usr/include/c++/10/ext/new_allocator.h	/^      typedef const _Tp* const_pointer;$/;"	t	class:__gnu_cxx::new_allocator	typeref:typename:const _Tp *	access:public
const_reference	/usr/include/c++/10/bits/allocator.h	/^      typedef const _Tp& const_reference;$/;"	t	class:std::allocator	typeref:typename:const _Tp &	access:public
const_reference	/usr/include/c++/10/bits/basic_string.h	/^      typedef typename _Alloc_traits::const_reference	const_reference;$/;"	t	class:std::basic_string	typeref:typename:_Alloc_traits::const_reference	access:public
const_reference	/usr/include/c++/10/ext/alloc_traits.h	/^    typedef const value_type&                       const_reference;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:const value_type &	access:public
const_reference	/usr/include/c++/10/ext/alloc_traits.h	/^    typedef typename _Alloc::const_reference        const_reference;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc::const_reference	access:public
const_reference	/usr/include/c++/10/ext/new_allocator.h	/^      typedef const _Tp& const_reference;$/;"	t	class:__gnu_cxx::new_allocator	typeref:typename:const _Tp &	access:public
const_reverse_iterator	/usr/include/c++/10/bits/basic_string.h	/^      typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;$/;"	t	class:std::basic_string	typeref:typename:std::reverse_iterator<const_iterator>	access:public
const_void_pointer	/usr/include/c++/10/bits/alloc_traits.h	/^      using const_void_pointer = const void*;$/;"	t	struct:std::allocator_traits	typeref:typename:const void *	access:public
const_void_pointer	/usr/include/c++/10/bits/alloc_traits.h	/^      using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;$/;"	t	struct:std::allocator_traits	typeref:typename:_Ptr<__cv_pointer,const void>::type	access:public
constant	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  __syscall_slong_t constant;	\/* pll time constant *\/$/;"	m	struct:timex	typeref:typename:__syscall_slong_t	access:public
construct	/usr/include/c++/10/bits/alloc_traits.h	/^	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR auto	access:public	signature:(_Alloc & __a,_Tp * __p,_Args &&...__args)
construct	/usr/include/c++/10/bits/alloc_traits.h	/^	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(allocator_type & __a,_Up * __p,_Args &&...__args)
construct	/usr/include/c++/10/bits/allocator.h	/^	construct(_Up* __p, _Args&&... __args)$/;"	f	class:std::allocator	typeref:typename:void	access:public	signature:(_Up * __p,_Args &&...__args)
construct	/usr/include/c++/10/ext/alloc_traits.h	/^      construct(_Alloc& __a, _Ptr __p, _Args&&... __args)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:_GLIBCXX14_CONSTEXPR std::__enable_if_t<__is_custom_pointer<_Ptr>::value>	access:public	signature:(_Alloc & __a,_Ptr __p,_Args &&...__args)
construct	/usr/include/c++/10/ext/alloc_traits.h	/^      static void construct(_Alloc& __a, pointer __p, const _Tp& __arg)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:void	access:public	signature:(_Alloc & __a,pointer __p,const _Tp & __arg)
construct	/usr/include/c++/10/ext/new_allocator.h	/^	construct(_Up* __p, _Args&&... __args)$/;"	f	class:__gnu_cxx::new_allocator	typeref:typename:void	access:public	signature:(_Up * __p,_Args &&...__args)
construct	/usr/include/c++/10/ext/new_allocator.h	/^      construct(pointer __p, const _Tp& __val)$/;"	f	class:__gnu_cxx::new_allocator	typeref:typename:void	access:public	signature:(pointer __p,const _Tp & __val)
construct_at	/usr/include/c++/10/bits/stl_construct.h	/^    construct_at(_Tp* __location, _Args&&... __args)$/;"	f	namespace:std	typeref:typename:auto	signature:(_Tp * __location,_Args &&...__args)
container	/usr/include/c++/10/bits/stl_iterator.h	/^      _Container* container = nullptr;$/;"	m	class:std::insert_iterator	typeref:typename:_Container *	access:protected
container	/usr/include/c++/10/bits/stl_iterator.h	/^      _Container* container;$/;"	m	class:std::back_insert_iterator	typeref:typename:_Container *	access:protected
container	/usr/include/c++/10/bits/stl_iterator.h	/^      _Container* container;$/;"	m	class:std::front_insert_iterator	typeref:typename:_Container *	access:protected
container_type	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef _Container          container_type;$/;"	t	class:std::back_insert_iterator	typeref:typename:_Container	access:public
container_type	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef _Container          container_type;$/;"	t	class:std::front_insert_iterator	typeref:typename:_Container	access:public
container_type	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef _Container          container_type;$/;"	t	class:std::insert_iterator	typeref:typename:_Container	access:public
contiguous_iterator_tag	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^  struct contiguous_iterator_tag : public random_access_iterator_tag { };$/;"	s	namespace:std	inherits:random_access_iterator_tag
cookie_close_function_t	/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h	/^typedef int cookie_close_function_t (void *__cookie);$/;"	t	typeref:typename:int ()(void * __cookie)
cookie_io_functions_t	/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h	/^} cookie_io_functions_t;$/;"	t	typeref:struct:_IO_cookie_io_functions_t
cookie_read_function_t	/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h	/^typedef __ssize_t cookie_read_function_t (void *__cookie, char *__buf,$/;"	t	typeref:typename:__ssize_t ()(void * __cookie,char * __buf,size_t __nbytes)
cookie_seek_function_t	/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h	/^typedef int cookie_seek_function_t (void *__cookie, __off64_t *__pos, int __w);$/;"	t	typeref:typename:int ()(void * __cookie,__off64_t * __pos,int __w)
cookie_write_function_t	/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h	/^typedef __ssize_t cookie_write_function_t (void *__cookie, const char *__buf,$/;"	t	typeref:typename:__ssize_t ()(void * __cookie,const char * __buf,size_t __nbytes)
copy	/usr/include/c++/10/bits/basic_string.h	/^      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT * __s,size_type __n,size_type __pos=0) const
copy	/usr/include/c++/10/bits/char_traits.h	/^      copy(char_type* __s1, const char_type* __s2, size_t __n)$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR char_type *	access:public	signature:(char_type * __s1,const char_type * __s2,size_t __n)
copy	/usr/include/c++/10/bits/char_traits.h	/^      copy(char_type* __s1, const char_type* __s2, std::size_t __n);$/;"	p	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR char_type *	access:public	signature:(char_type * __s1,const char_type * __s2,std::size_t __n)
copy	/usr/include/c++/10/bits/char_traits.h	/^    copy(char_type* __s1, const char_type* __s2, std::size_t __n)$/;"	f	class:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR typename char_traits<_CharT>::char_type *	signature:(char_type * __s1,const char_type * __s2,std::size_t __n)
copy	/usr/include/c++/10/bits/stl_algobase.h	/^    copy(_II __first, _II __last, _OI __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	signature:(_II __first,_II __last,_OI __result)
copy	/usr/include/c++/10/bits/streambuf_iterator.h	/^    copy(istreambuf_iterator<_CharT> __first,$/;"	f	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,ostreambuf_iterator<_CharT>>::__type	signature:(istreambuf_iterator<_CharT> __first,istreambuf_iterator<_CharT> __last,ostreambuf_iterator<_CharT> __result)
copy_backward	/usr/include/c++/10/bits/stl_algobase.h	/^    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _BI2	signature:(_BI1 __first,_BI1 __last,_BI2 __result)
copyfmt	/usr/include/c++/10/bits/basic_ios.h	/^      copyfmt(const basic_ios& __rhs);$/;"	p	class:std::basic_ios	typeref:typename:basic_ios &	access:public	signature:(const basic_ios & __rhs)
copyfmt_event	/usr/include/c++/10/bits/ios_base.h	/^      copyfmt_event$/;"	e	enum:std::ios_base::event	access:public
cosf	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define cosf /;"	d
coshf	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define coshf /;"	d
coshl	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define coshl /;"	d
cosl	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define cosl /;"	d
count	/usr/include/c++/10/bits/stl_iterator.h	/^      count() const noexcept { return _M_length; }$/;"	f	class:std::counted_iterator	typeref:typename:iter_difference_t<_It>	access:public	signature:() const
counted_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^	counted_iterator(const counted_iterator<_It2>& __x)$/;"	f	class:std::counted_iterator	typeref:typename:requires convertible_to<const _It2 &,_It> 	access:public	signature:(const counted_iterator<_It2> & __x)
counted_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^      constexpr counted_iterator() = default;$/;"	p	class:std::counted_iterator	access:public	signature:()
counted_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^      counted_iterator(_It __i, iter_difference_t<_It> __n)$/;"	f	class:std::counted_iterator	access:public	signature:(_It __i,iter_difference_t<_It> __n)
counted_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    class counted_iterator$/;"	c	namespace:std
cpu_set_t	/usr/include/x86_64-linux-gnu/bits/cpu-set.h	/^} cpu_set_t;$/;"	t	typeref:struct:__anon2763e7ba0108
crbegin	/usr/include/c++/10/bits/basic_string.h	/^      crbegin() const noexcept$/;"	f	class:std::basic_string	typeref:typename:const_reverse_iterator	access:public	signature:() const
crbegin	/usr/include/c++/10/bits/range_access.h	/^    crbegin(const _Container& __cont) -> decltype(std::rbegin(__cont))$/;"	f	namespace:std	typeref:typename:decltype (std::rbegin (__cont))	signature:(const _Container & __cont)
crbegin	/usr/include/c++/10/bits/range_access.h	/^    inline constexpr __cust_access::_CRBegin crbegin{};$/;"	v	namespace:std::ranges::__cust	typeref:typename:__cust_access::_CRBegin
crend	/usr/include/c++/10/bits/basic_string.h	/^      crend() const noexcept$/;"	f	class:std::basic_string	typeref:typename:const_reverse_iterator	access:public	signature:() const
crend	/usr/include/c++/10/bits/range_access.h	/^    crend(const _Container& __cont) -> decltype(std::rend(__cont))$/;"	f	namespace:std	typeref:typename:decltype (std::rend (__cont))	signature:(const _Container & __cont)
crend	/usr/include/c++/10/bits/range_access.h	/^    inline constexpr __cust_access::_CREnd crend{};$/;"	v	namespace:std::ranges::__cust	typeref:typename:__cust_access::_CREnd
cross_device_link	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      cross_device_link = 			EXDEV,$/;"	e	enum:std::errc	access:public
ctermid	/usr/include/stdio.h	/^extern char *ctermid (char *__s) __THROW;$/;"	p	typeref:typename:char *	signature:(char * __s)
ctime	/usr/include/time.h	/^extern char *ctime (const time_t *__timer) __THROW;$/;"	p	typeref:typename:char *	signature:(const time_t * __timer)
ctime_r	/usr/include/time.h	/^extern char *ctime_r (const time_t *__restrict __timer,$/;"	p	typeref:typename:char *	signature:(const time_t * __restrict __timer,char * __restrict __buf)
ctype	/usr/include/c++/10/bits/locale_classes.h	/^    static const category ctype		= 1L << 0;$/;"	m	class:std::locale	typeref:typename:const category	access:public
ctype	/usr/include/c++/10/bits/locale_facets.h	/^      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,$/;"	p	class:std::ctype	access:public	signature:(__c_locale __cloc,const mask * __table=0,bool __del=false,size_t __refs=0)
ctype	/usr/include/c++/10/bits/locale_facets.h	/^      ctype(__c_locale __cloc, size_t __refs = 0);$/;"	p	class:std::ctype	access:public	signature:(__c_locale __cloc,size_t __refs=0)
ctype	/usr/include/c++/10/bits/locale_facets.h	/^      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);$/;"	p	class:std::ctype	access:public	signature:(const mask * __table=0,bool __del=false,size_t __refs=0)
ctype	/usr/include/c++/10/bits/locale_facets.h	/^      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }$/;"	f	class:std::ctype	access:public	signature:(size_t __refs=0)
ctype	/usr/include/c++/10/bits/locale_facets.h	/^      ctype(size_t __refs = 0);$/;"	p	class:std::ctype	access:public	signature:(size_t __refs=0)
ctype	/usr/include/c++/10/bits/locale_facets.h	/^    class ctype : public __ctype_abstract_base<_CharT>$/;"	c	namespace:std	inherits:__ctype_abstract_base<_CharT>
ctype	/usr/include/c++/10/bits/locale_facets.h	/^    class ctype<char> : public locale::facet, public ctype_base$/;"	c	namespace:std	inherits:locale::facet,ctype_base
ctype	/usr/include/c++/10/bits/locale_facets.h	/^    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>$/;"	c	namespace:std	inherits:__ctype_abstract_base<wchar_t>
ctype_base	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h	/^  struct ctype_base$/;"	s	namespace:std
ctype_byname	/usr/include/c++/10/bits/locale_facets.h	/^      ctype_byname(const char* __s, size_t __refs = 0);$/;"	p	class:std::ctype_byname	access:public	signature:(const char * __s,size_t __refs=0)
ctype_byname	/usr/include/c++/10/bits/locale_facets.h	/^      ctype_byname(const string& __s, size_t __refs = 0)$/;"	f	class:std::ctype_byname	access:public	signature:(const string & __s,size_t __refs=0)
ctype_byname	/usr/include/c++/10/bits/locale_facets.h	/^      ctype_byname(const string& __s, size_t __refs = 0);$/;"	p	class:std::ctype_byname	access:public	signature:(const string & __s,size_t __refs=0)
ctype_byname	/usr/include/c++/10/bits/locale_facets.h	/^    class ctype_byname : public ctype<_CharT>$/;"	c	namespace:std	inherits:ctype<_CharT>
ctype_byname	/usr/include/c++/10/bits/locale_facets.h	/^    class ctype_byname<char> : public ctype<char>$/;"	c	namespace:std	inherits:ctype<char>
ctype_byname	/usr/include/c++/10/bits/locale_facets.h	/^    class ctype_byname<wchar_t> : public ctype<wchar_t>$/;"	c	namespace:std	inherits:ctype<wchar_t>
cur	/usr/include/c++/10/bits/ios_base.h	/^    static const seekdir cur =		_S_cur;$/;"	m	class:std::ios_base	typeref:typename:const seekdir	access:public
currency_symbol	/usr/include/locale.h	/^  char *currency_symbol;	\/* Local currency symbol.  *\/$/;"	m	struct:lconv	typeref:typename:char *	access:public
current	/usr/include/c++/10/bits/stl_iterator.h	/^      _Iterator current;$/;"	m	class:std::reverse_iterator	typeref:typename:_Iterator	access:protected
current_exception	/usr/include/c++/10/bits/exception_ptr.h	/^  exception_ptr current_exception() _GLIBCXX_USE_NOEXCEPT;$/;"	p	namespace:std	typeref:typename:exception_ptr	signature:()
cuserid	/usr/include/stdio.h	/^extern char *cuserid (char *__s);$/;"	p	typeref:typename:char *	signature:(char * __s)
daddr_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __daddr_t daddr_t;$/;"	t	typeref:typename:__daddr_t
data	/usr/include/c++/10/bits/basic_string.h	/^      data() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:const _CharT *	access:public	signature:() const
data	/usr/include/c++/10/bits/basic_string.h	/^      data() noexcept$/;"	f	class:std::basic_string	typeref:typename:_CharT *	access:public	signature:()
data	/usr/include/c++/10/bits/range_access.h	/^    data(_Container& __cont) noexcept(noexcept(__cont.data()))$/;"	f	namespace:std	typeref:typename:auto	signature:(_Container & __cont)
data	/usr/include/c++/10/bits/range_access.h	/^    data(_Tp (&__array)[_Nm]) noexcept$/;"	f	namespace:std	typeref:typename:_Tp *	signature:(_Tp (& __array)[_Nm])
data	/usr/include/c++/10/bits/range_access.h	/^    data(const _Container& __cont) noexcept(noexcept(__cont.data()))$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Container & __cont)
data	/usr/include/c++/10/bits/range_access.h	/^    data(initializer_list<_Tp> __il) noexcept$/;"	f	namespace:std	typeref:typename:const _Tp *	signature:(initializer_list<_Tp> __il)
data	/usr/include/c++/10/bits/range_access.h	/^    inline constexpr __cust_access::_Data data{};$/;"	v	namespace:std::ranges::__cust	typeref:typename:__cust_access::_Data
deallocate	/usr/include/c++/10/bits/alloc_traits.h	/^      deallocate(_Alloc& __a, pointer __p, size_type __n)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(_Alloc & __a,pointer __p,size_type __n)
deallocate	/usr/include/c++/10/bits/alloc_traits.h	/^      deallocate(allocator_type& __a, pointer __p, size_type __n)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(allocator_type & __a,pointer __p,size_type __n)
deallocate	/usr/include/c++/10/bits/allocator.h	/^      deallocate(_Tp* __p, size_t __n)$/;"	f	class:std::allocator	typeref:typename:void	access:public	signature:(_Tp * __p,size_t __n)
deallocate	/usr/include/c++/10/ext/alloc_traits.h	/^    static void deallocate(_Alloc& __a, pointer __p, size_type __n)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:void	access:public	signature:(_Alloc & __a,pointer __p,size_type __n)
deallocate	/usr/include/c++/10/ext/new_allocator.h	/^      deallocate(_Tp* __p, size_type __t)$/;"	f	class:__gnu_cxx::new_allocator	typeref:typename:void	access:public	signature:(_Tp * __p,size_type __t)
dec	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags dec =         _S_dec;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
dec	/usr/include/c++/10/bits/ios_base.h	/^  dec(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
decimal_point	/usr/include/c++/10/bits/locale_facets.h	/^      decimal_point() const$/;"	f	class:std::numpunct	typeref:typename:char_type	access:public	signature:() const
decimal_point	/usr/include/locale.h	/^  char *decimal_point;		\/* Decimal point character.  *\/$/;"	m	struct:lconv	typeref:typename:char *	access:public
default_sentinel	/usr/include/c++/10/bits/iterator_concepts.h	/^  inline constexpr default_sentinel_t default_sentinel{};$/;"	v	namespace:std	typeref:typename:default_sentinel_t
default_sentinel_t	/usr/include/c++/10/bits/iterator_concepts.h	/^  struct default_sentinel_t { };$/;"	s	namespace:std
defaultfloat	/usr/include/c++/10/bits/ios_base.h	/^  defaultfloat(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
destination_address_required	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      destination_address_required = 		EDESTADDRREQ,$/;"	e	enum:std::errc	access:public
destroy	/usr/include/c++/10/bits/alloc_traits.h	/^	destroy(_Alloc& __a, _Tp* __p)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(_Alloc & __a,_Tp * __p)
destroy	/usr/include/c++/10/bits/alloc_traits.h	/^	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(allocator_type & __a,_Up * __p)
destroy	/usr/include/c++/10/bits/allocator.h	/^	destroy(_Up* __p)$/;"	f	class:std::allocator	typeref:typename:void	access:public	signature:(_Up * __p)
destroy	/usr/include/c++/10/bits/stl_construct.h	/^    destroy(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_ForwardIterator __first,_ForwardIterator __last)
destroy	/usr/include/c++/10/ext/alloc_traits.h	/^      destroy(_Alloc& __a, _Ptr __p)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:_GLIBCXX14_CONSTEXPR std::__enable_if_t<__is_custom_pointer<_Ptr>::value>	access:public	signature:(_Alloc & __a,_Ptr __p)
destroy	/usr/include/c++/10/ext/alloc_traits.h	/^    static void destroy(_Alloc& __a, pointer __p)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:void	access:public	signature:(_Alloc & __a,pointer __p)
destroy	/usr/include/c++/10/ext/new_allocator.h	/^	destroy(_Up* __p)$/;"	f	class:__gnu_cxx::new_allocator	typeref:typename:void	access:public	signature:(_Up * __p)
destroy	/usr/include/c++/10/ext/new_allocator.h	/^      destroy(pointer __p) { __p->~_Tp(); }$/;"	f	class:__gnu_cxx::new_allocator	typeref:typename:void	access:public	signature:(pointer __p)
destroy_at	/usr/include/c++/10/bits/stl_construct.h	/^    destroy_at(_Tp* __location)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION _GLIBCXX20_CONSTEXPR void	signature:(_Tp * __location)
destroy_n	/usr/include/c++/10/bits/stl_construct.h	/^    destroy_n(_ForwardIterator __first, _Size __count)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_ForwardIterator __first,_Size __count)
dev_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __dev_t dev_t;$/;"	t	typeref:typename:__dev_t
device_or_resource_busy	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      device_or_resource_busy = 		EBUSY,$/;"	e	enum:std::errc	access:public
difference_type	/usr/include/c++/10/bits/alloc_traits.h	/^      using difference_type = std::ptrdiff_t;$/;"	t	struct:std::allocator_traits	typeref:typename:std::ptrdiff_t	access:public
difference_type	/usr/include/c++/10/bits/alloc_traits.h	/^      using difference_type = typename _Diff<_Alloc, pointer>::type;$/;"	t	struct:std::allocator_traits	typeref:typename:_Diff<_Alloc,pointer>::type	access:public
difference_type	/usr/include/c++/10/bits/allocator.h	/^      typedef ptrdiff_t   difference_type;$/;"	t	class:std::allocator	typeref:typename:ptrdiff_t	access:public
difference_type	/usr/include/c++/10/bits/allocator.h	/^      typedef ptrdiff_t  difference_type;$/;"	t	class:std::allocator	typeref:typename:ptrdiff_t	access:public
difference_type	/usr/include/c++/10/bits/basic_string.h	/^      typedef typename _Alloc_traits::difference_type	difference_type;$/;"	t	class:std::basic_string	typeref:typename:_Alloc_traits::difference_type	access:public
difference_type	/usr/include/c++/10/bits/iterator_concepts.h	/^	  typename incrementable_traits<_Iter>::difference_type;$/;"	m	class:std::__detail::incrementable_traits<_Iter>	typeref:meta:typename
difference_type	/usr/include/c++/10/bits/iterator_concepts.h	/^	typename _Iter::difference_type;$/;"	m	class:std::__detail::_Iter	typeref:meta:typename
difference_type	/usr/include/c++/10/bits/iterator_concepts.h	/^	{ typename incrementable_traits<_Iter>::difference_type; }$/;"	m	class:std::__iterator_traits::incrementable_traits<_Iter>	typeref:meta:typename
difference_type	/usr/include/c++/10/bits/iterator_concepts.h	/^      using difference_type   = typename _Iterator::difference_type;$/;"	t	struct:std::__iterator_traits	typeref:typename:_Iterator::difference_type	access:public
difference_type	/usr/include/c++/10/bits/iterator_concepts.h	/^      using difference_type   = typename __diff<_Iterator>::type;$/;"	t	struct:std::__iterator_traits	typeref:typename:__diff<_Iterator>::type	access:public
difference_type	/usr/include/c++/10/bits/iterator_concepts.h	/^      using difference_type$/;"	t	struct:std::__iterator_traits	typeref:typename:incrementable_traits<_Iterator>::difference_type	access:public
difference_type	/usr/include/c++/10/bits/iterator_concepts.h	/^      using difference_type$/;"	t	struct:std::incrementable_traits	access:public
difference_type	/usr/include/c++/10/bits/iterator_concepts.h	/^    { using difference_type = __int128; };$/;"	t	struct:std::incrementable_traits	typeref:typename:__int128	access:public
difference_type	/usr/include/c++/10/bits/iterator_concepts.h	/^    { using difference_type = iter_difference_t<_Iter>; };$/;"	t	struct:std::incrementable_traits	typeref:typename:iter_difference_t<_Iter>	access:public
difference_type	/usr/include/c++/10/bits/iterator_concepts.h	/^    { using difference_type = ptrdiff_t; };$/;"	t	struct:std::incrementable_traits	typeref:typename:ptrdiff_t	access:public
difference_type	/usr/include/c++/10/bits/iterator_concepts.h	/^    { using difference_type = typename _Tp::difference_type; };$/;"	t	struct:std::incrementable_traits	typeref:typename:_Tp::difference_type	access:public
difference_type	/usr/include/c++/10/bits/iterator_concepts.h	/^  template<typename _Tp> requires requires { typename _Tp::difference_type; }$/;"	m	class:std::_Tp	typeref:meta:typename
difference_type	/usr/include/c++/10/bits/ptr_traits.h	/^      typedef ptrdiff_t difference_type;$/;"	t	struct:std::pointer_traits	typeref:typename:ptrdiff_t	access:public
difference_type	/usr/include/c++/10/bits/ptr_traits.h	/^      using difference_type$/;"	t	struct:std::pointer_traits	typeref:typename:__detected_or_t<ptrdiff_t,__difference_type,_Ptr>	access:public
difference_type	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef typename __traits_type::difference_type	difference_type;$/;"	t	class:std::move_iterator	typeref:typename:__traits_type::difference_type	access:public
difference_type	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef typename __traits_type::difference_type	difference_type;$/;"	t	class:std::reverse_iterator	typeref:typename:__traits_type::difference_type	access:public
difference_type	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef typename __traits_type::difference_type 	difference_type;$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:__traits_type::difference_type	access:public
difference_type	/usr/include/c++/10/bits/stl_iterator.h	/^      using difference_type = iter_difference_t<_It>;$/;"	t	struct:std::incrementable_traits	typeref:typename:iter_difference_t<_It>	access:public
difference_type	/usr/include/c++/10/bits/stl_iterator.h	/^      using difference_type = iter_difference_t<_It>;$/;"	t	struct:std::iterator_traits	typeref:typename:iter_difference_t<_It>	access:public
difference_type	/usr/include/c++/10/bits/stl_iterator.h	/^      using difference_type = iter_difference_t<_Iterator>;$/;"	t	class:std::move_iterator	typeref:typename:iter_difference_t<_Iterator>	access:public
difference_type	/usr/include/c++/10/bits/stl_iterator.h	/^      using difference_type = ptrdiff_t;$/;"	t	class:std::back_insert_iterator	typeref:typename:ptrdiff_t	access:public
difference_type	/usr/include/c++/10/bits/stl_iterator.h	/^      using difference_type = ptrdiff_t;$/;"	t	class:std::front_insert_iterator	typeref:typename:ptrdiff_t	access:public
difference_type	/usr/include/c++/10/bits/stl_iterator.h	/^      using difference_type = ptrdiff_t;$/;"	t	class:std::insert_iterator	typeref:typename:ptrdiff_t	access:public
difference_type	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef _Distance  difference_type;$/;"	t	struct:std::iterator	typeref:typename:_Distance	access:public
difference_type	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef ptrdiff_t                   difference_type;$/;"	t	struct:std::iterator_traits	typeref:typename:ptrdiff_t	access:public
difference_type	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::difference_type   difference_type;$/;"	t	struct:std::__iterator_traits	typeref:typename:_Iterator::difference_type	access:public
difference_type	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::difference_type   difference_type;$/;"	t	struct:std::iterator_traits	typeref:typename:_Iterator::difference_type	access:public
difference_type	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      using difference_type   = ptrdiff_t;$/;"	t	struct:std::iterator_traits	typeref:typename:ptrdiff_t	access:public
difference_type	/usr/include/c++/10/bits/streambuf_iterator.h	/^      using difference_type = ptrdiff_t;$/;"	t	class:std::ostreambuf_iterator	typeref:typename:ptrdiff_t	access:public
difference_type	/usr/include/c++/10/ext/alloc_traits.h	/^    typedef typename _Alloc::difference_type        difference_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc::difference_type	access:public
difference_type	/usr/include/c++/10/ext/alloc_traits.h	/^    typedef typename _Base_type::difference_type    difference_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Base_type::difference_type	access:public
difference_type	/usr/include/c++/10/ext/new_allocator.h	/^      typedef std::ptrdiff_t  difference_type;$/;"	t	class:__gnu_cxx::new_allocator	typeref:typename:std::ptrdiff_t	access:public
difftime	/usr/include/time.h	/^extern double difftime (time_t __time1, time_t __time0)$/;"	p	typeref:typename:double	signature:(time_t __time1,time_t __time0)
digit	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h	/^    static const mask digit 	= _ISdigit;$/;"	m	struct:std::ctype_base	typeref:typename:const mask	access:public
directory_not_empty	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      directory_not_empty = 			ENOTEMPTY,$/;"	e	enum:std::errc	access:public
disable_sized_range	/usr/include/c++/10/bits/range_access.h	/^    inline constexpr bool disable_sized_range = false;$/;"	v	namespace:std::ranges	typeref:typename:bool
disable_sized_sentinel_for	/usr/include/c++/10/bits/iterator_concepts.h	/^    inline constexpr bool disable_sized_sentinel_for = false;$/;"	v	namespace:std	typeref:typename:bool
distance	/usr/include/c++/10/bits/range_access.h	/^    distance(_It __first, _Sent __last)$/;"	f	namespace:std::ranges	typeref:typename:iter_difference_t<_It>	signature:(_It __first,_Sent __last)
distance	/usr/include/c++/10/bits/range_access.h	/^    distance(_Range&& __r)$/;"	f	namespace:std::ranges	typeref:typename:range_difference_t<_Range>	signature:(_Range && __r)
distance	/usr/include/c++/10/bits/stl_iterator_base_funcs.h	/^    distance(_InputIterator __first, _InputIterator __last)$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR typename iterator_traits<_InputIterator>::difference_type	signature:(_InputIterator __first,_InputIterator __last)
div	/usr/include/stdlib.h	/^extern div_t div (int __numer, int __denom)$/;"	p	typeref:typename:div_t	signature:(int __numer,int __denom)
div_t	/usr/include/stdlib.h	/^  } div_t;$/;"	t	typeref:struct:__anonf3b68ce80108
divides	/usr/include/c++/10/bits/stl_function.h	/^    struct divides : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
divides	/usr/include/c++/10/bits/stl_function.h	/^    struct divides<void>$/;"	s	namespace:std
do_compare	/usr/include/c++/10/bits/locale_classes.h	/^      do_compare(const _CharT* __lo1, const _CharT* __hi1,$/;"	p	class:std::collate	typeref:typename:int	access:protected	signature:(const _CharT * __lo1,const _CharT * __hi1,const _CharT * __lo2,const _CharT * __hi2) const
do_decimal_point	/usr/include/c++/10/bits/locale_facets.h	/^      do_decimal_point() const$/;"	f	class:std::numpunct	typeref:typename:char_type	access:protected	signature:() const
do_falsename	/usr/include/c++/10/bits/locale_facets.h	/^      do_falsename() const$/;"	f	class:std::numpunct	typeref:typename:string_type	access:protected	signature:() const
do_get	/usr/include/c++/10/bits/locale_facets.h	/^      do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,long & __v) const
do_get	/usr/include/c++/10/bits/locale_facets.h	/^      do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,long long & __v) const
do_get	/usr/include/c++/10/bits/locale_facets.h	/^      do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned int & __v) const
do_get	/usr/include/c++/10/bits/locale_facets.h	/^      do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned long & __v) const
do_get	/usr/include/c++/10/bits/locale_facets.h	/^      do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned long long & __v) const
do_get	/usr/include/c++/10/bits/locale_facets.h	/^      do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned short & __v) const
do_get	/usr/include/c++/10/bits/locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;$/;"	p	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,bool &) const
do_get	/usr/include/c++/10/bits/locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, float&) const;$/;"	p	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,float &) const
do_get	/usr/include/c++/10/bits/locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, void*&) const;$/;"	p	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,void * &) const
do_get	/usr/include/c++/10/bits/locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,$/;"	p	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,double &) const
do_get	/usr/include/c++/10/bits/locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,$/;"	p	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,long double &) const
do_grouping	/usr/include/c++/10/bits/locale_facets.h	/^      do_grouping() const$/;"	f	class:std::numpunct	typeref:typename:string	access:protected	signature:() const
do_hash	/usr/include/c++/10/bits/locale_classes.h	/^      do_hash(const _CharT* __lo, const _CharT* __hi) const;$/;"	p	class:std::collate	typeref:typename:long	access:protected	signature:(const _CharT * __lo,const _CharT * __hi) const
do_is	/usr/include/c++/10/bits/locale_facets.h	/^      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;$/;"	p	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(const char_type * __lo,const char_type * __hi,mask * __vec) const
do_is	/usr/include/c++/10/bits/locale_facets.h	/^      do_is(const char_type* __lo, const char_type* __hi,$/;"	p	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(const char_type * __lo,const char_type * __hi,mask * __vec) const
do_is	/usr/include/c++/10/bits/locale_facets.h	/^      do_is(mask __m, char_type __c) const = 0;$/;"	p	class:std::__ctype_abstract_base	typeref:typename:bool	access:protected	signature:(mask __m,char_type __c) const
do_is	/usr/include/c++/10/bits/locale_facets.h	/^      do_is(mask __m, char_type __c) const;$/;"	p	class:std::ctype	typeref:typename:bool	access:protected	signature:(mask __m,char_type __c) const
do_narrow	/usr/include/c++/10/bits/locale_facets.h	/^      do_narrow(char_type __c, char __dfault __attribute__((__unused__))) const$/;"	f	class:std::ctype	typeref:typename:char	access:protected	signature:(char_type __c,char __dfault) const
do_narrow	/usr/include/c++/10/bits/locale_facets.h	/^      do_narrow(char_type __c, char __dfault) const = 0;$/;"	p	class:std::__ctype_abstract_base	typeref:typename:char	access:protected	signature:(char_type __c,char __dfault) const
do_narrow	/usr/include/c++/10/bits/locale_facets.h	/^      do_narrow(char_type __c, char __dfault) const;$/;"	p	class:std::ctype	typeref:typename:char	access:protected	signature:(char_type __c,char __dfault) const
do_narrow	/usr/include/c++/10/bits/locale_facets.h	/^      do_narrow(char_type, char __dfault) const;$/;"	p	class:std::ctype	typeref:typename:char	access:protected	signature:(char_type,char __dfault) const
do_narrow	/usr/include/c++/10/bits/locale_facets.h	/^      do_narrow(const char_type* __lo, const char_type* __hi,$/;"	f	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(const char_type * __lo,const char_type * __hi,char __dfault,char * __to) const
do_narrow	/usr/include/c++/10/bits/locale_facets.h	/^      do_narrow(const char_type* __lo, const char_type* __hi,$/;"	p	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(const char_type * __lo,const char_type * __hi,char __dfault,char * __to) const
do_narrow	/usr/include/c++/10/bits/locale_facets.h	/^      do_narrow(const char_type* __lo, const char_type* __hi,$/;"	p	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(const char_type * __lo,const char_type * __hi,char __dfault,char * __to) const
do_put	/usr/include/c++/10/bits/locale_facets.h	/^      do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const;$/;"	p	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type __s,ios_base & __io,char_type __fill,bool __v) const
do_put	/usr/include/c++/10/bits/locale_facets.h	/^      do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const$/;"	f	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type __s,ios_base & __io,char_type __fill,long __v) const
do_put	/usr/include/c++/10/bits/locale_facets.h	/^      do_put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type __s,ios_base & __io,char_type __fill,long long __v) const
do_put	/usr/include/c++/10/bits/locale_facets.h	/^      do_put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type __s,ios_base & __io,char_type __fill,unsigned long __v) const
do_put	/usr/include/c++/10/bits/locale_facets.h	/^      do_put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type __s,ios_base & __io,char_type __fill,unsigned long long __v) const
do_put	/usr/include/c++/10/bits/locale_facets.h	/^      do_put(iter_type, ios_base&, char_type, const void*) const;$/;"	p	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type,const void *) const
do_put	/usr/include/c++/10/bits/locale_facets.h	/^      do_put(iter_type, ios_base&, char_type, double) const;$/;"	p	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type,double) const
do_put	/usr/include/c++/10/bits/locale_facets.h	/^      do_put(iter_type, ios_base&, char_type, long double) const;$/;"	p	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type,long double) const
do_scan_is	/usr/include/c++/10/bits/locale_facets.h	/^      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;$/;"	p	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
do_scan_is	/usr/include/c++/10/bits/locale_facets.h	/^      do_scan_is(mask __m, const char_type* __lo,$/;"	p	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
do_scan_not	/usr/include/c++/10/bits/locale_facets.h	/^      do_scan_not(mask __m, const char_type* __lo,$/;"	p	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
do_scan_not	/usr/include/c++/10/bits/locale_facets.h	/^      do_scan_not(mask __m, const char_type* __lo,$/;"	p	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
do_thousands_sep	/usr/include/c++/10/bits/locale_facets.h	/^      do_thousands_sep() const$/;"	f	class:std::numpunct	typeref:typename:char_type	access:protected	signature:() const
do_tolower	/usr/include/c++/10/bits/locale_facets.h	/^      do_tolower(char_type __c) const = 0;$/;"	p	class:std::__ctype_abstract_base	typeref:typename:char_type	access:protected	signature:(char_type __c) const
do_tolower	/usr/include/c++/10/bits/locale_facets.h	/^      do_tolower(char_type __c) const;$/;"	p	class:std::ctype	typeref:typename:char_type	access:protected	signature:(char_type __c) const
do_tolower	/usr/include/c++/10/bits/locale_facets.h	/^      do_tolower(char_type* __lo, const char_type* __hi) const = 0;$/;"	p	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(char_type * __lo,const char_type * __hi) const
do_tolower	/usr/include/c++/10/bits/locale_facets.h	/^      do_tolower(char_type* __lo, const char_type* __hi) const;$/;"	p	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(char_type * __lo,const char_type * __hi) const
do_toupper	/usr/include/c++/10/bits/locale_facets.h	/^      do_toupper(char_type __c) const = 0;$/;"	p	class:std::__ctype_abstract_base	typeref:typename:char_type	access:protected	signature:(char_type __c) const
do_toupper	/usr/include/c++/10/bits/locale_facets.h	/^      do_toupper(char_type __c) const;$/;"	p	class:std::ctype	typeref:typename:char_type	access:protected	signature:(char_type __c) const
do_toupper	/usr/include/c++/10/bits/locale_facets.h	/^      do_toupper(char_type* __lo, const char_type* __hi) const = 0;$/;"	p	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(char_type * __lo,const char_type * __hi) const
do_toupper	/usr/include/c++/10/bits/locale_facets.h	/^      do_toupper(char_type* __lo, const char_type* __hi) const;$/;"	p	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(char_type * __lo,const char_type * __hi) const
do_transform	/usr/include/c++/10/bits/locale_classes.h	/^      do_transform(const _CharT* __lo, const _CharT* __hi) const;$/;"	p	class:std::collate	typeref:typename:string_type	access:protected	signature:(const _CharT * __lo,const _CharT * __hi) const
do_truename	/usr/include/c++/10/bits/locale_facets.h	/^      do_truename() const$/;"	f	class:std::numpunct	typeref:typename:string_type	access:protected	signature:() const
do_widen	/usr/include/c++/10/bits/locale_facets.h	/^      do_widen(char __c) const = 0;$/;"	p	class:std::__ctype_abstract_base	typeref:typename:char_type	access:protected	signature:(char __c) const
do_widen	/usr/include/c++/10/bits/locale_facets.h	/^      do_widen(char __c) const$/;"	f	class:std::ctype	typeref:typename:char_type	access:protected	signature:(char __c) const
do_widen	/usr/include/c++/10/bits/locale_facets.h	/^      do_widen(char __c) const;$/;"	p	class:std::ctype	typeref:typename:char_type	access:protected	signature:(char __c) const
do_widen	/usr/include/c++/10/bits/locale_facets.h	/^      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;$/;"	p	class:std::ctype	typeref:typename:const char *	access:protected	signature:(const char * __lo,const char * __hi,char_type * __dest) const
do_widen	/usr/include/c++/10/bits/locale_facets.h	/^      do_widen(const char* __lo, const char* __hi, char_type* __to) const = 0;$/;"	p	class:std::__ctype_abstract_base	typeref:typename:const char *	access:protected	signature:(const char * __lo,const char * __hi,char_type * __to) const
do_widen	/usr/include/c++/10/bits/locale_facets.h	/^      do_widen(const char* __lo, const char* __hi, char_type* __to) const$/;"	f	class:std::ctype	typeref:typename:const char *	access:protected	signature:(const char * __lo,const char * __hi,char_type * __to) const
do_widen	/usr/include/c++/10/bits/locale_facets.h	/^      do_widen(const char* __lo, const char* __hi, char_type* __to) const;$/;"	p	class:std::ctype	typeref:typename:const char *	access:protected	signature:(const char * __lo,const char * __hi,char_type * __to) const
dprintf	/usr/include/stdio.h	/^extern int dprintf (int __fd, const char *__restrict __fmt, ...)$/;"	p	typeref:typename:int	signature:(int __fd,const char * __restrict __fmt,...)
drand48	/usr/include/stdlib.h	/^extern double drand48 (void) __THROW;$/;"	p	typeref:typename:double	signature:(void)
drand48_data	/usr/include/stdlib.h	/^struct drand48_data$/;"	s
drand48_data::__a	/usr/include/stdlib.h	/^    __extension__ unsigned long long int __a;	\/* Factor in congruential$/;"	m	struct:drand48_data	typeref:typename:__extension__ unsigned long long int	access:public
drand48_data::__c	/usr/include/stdlib.h	/^    unsigned short int __c;	\/* Additive const. in congruential formula.  *\/$/;"	m	struct:drand48_data	typeref:typename:unsigned short int	access:public
drand48_data::__init	/usr/include/stdlib.h	/^    unsigned short int __init;	\/* Flag for initializing.  *\/$/;"	m	struct:drand48_data	typeref:typename:unsigned short int	access:public
drand48_data::__old_x	/usr/include/stdlib.h	/^    unsigned short int __old_x[3]; \/* Old state.  *\/$/;"	m	struct:drand48_data	typeref:typename:unsigned short int[3]	access:public
drand48_data::__x	/usr/include/stdlib.h	/^    unsigned short int __x[3];	\/* Current state.  *\/$/;"	m	struct:drand48_data	typeref:typename:unsigned short int[3]	access:public
drand48_r	/usr/include/stdlib.h	/^extern int drand48_r (struct drand48_data *__restrict __buffer,$/;"	p	typeref:typename:int	signature:(struct drand48_data * __restrict __buffer,double * __restrict __result)
duplocale	/usr/include/locale.h	/^extern locale_t duplocale (locale_t __dataset) __THROW;$/;"	p	typeref:typename:locale_t	signature:(locale_t __dataset)
dysize	/usr/include/time.h	/^extern int dysize (int __year) __THROW  __attribute__ ((__const__));$/;"	p	typeref:typename:int	signature:(int __year)
ecvt	/usr/include/stdlib.h	/^extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,$/;"	p	typeref:typename:char *	signature:(double __value,int __ndigit,int * __restrict __decpt,int * __restrict __sign)
ecvt_r	/usr/include/stdlib.h	/^extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,$/;"	p	typeref:typename:int	signature:(double __value,int __ndigit,int * __restrict __decpt,int * __restrict __sign,char * __restrict __buf,size_t __len)
element_type	/usr/include/c++/10/bits/iterator_concepts.h	/^  template<typename _Tp> requires requires { typename _Tp::element_type; }$/;"	m	class:std::_Tp	typeref:meta:typename
element_type	/usr/include/c++/10/bits/ptr_traits.h	/^      typedef _Tp  element_type;$/;"	t	struct:std::pointer_traits	typeref:typename:_Tp	access:public
element_type	/usr/include/c++/10/bits/ptr_traits.h	/^      using element_type$/;"	t	struct:std::pointer_traits	typeref:typename:__detected_or_t<__get_first_arg_t<_Ptr>,__element_type,_Ptr>	access:public
empty	/usr/include/c++/10/bits/basic_string.h	/^      empty() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD bool	access:public	signature:() const
empty	/usr/include/c++/10/bits/range_access.h	/^    empty(const _Container& __cont) noexcept(noexcept(__cont.empty()))$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Container & __cont)
empty	/usr/include/c++/10/bits/range_access.h	/^    empty(const _Tp (&)[_Nm]) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(const _Tp (&)[_Nm])
empty	/usr/include/c++/10/bits/range_access.h	/^    empty(initializer_list<_Tp> __il) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(initializer_list<_Tp> __il)
empty	/usr/include/c++/10/bits/range_access.h	/^    inline constexpr __cust_access::_Empty empty{};$/;"	v	namespace:std::ranges::__cust	typeref:typename:__cust_access::_Empty
enable_borrowed_range	/usr/include/c++/10/bits/range_access.h	/^    inline constexpr bool enable_borrowed_range = false;$/;"	v	namespace:std::ranges	typeref:typename:bool
end	/usr/include/c++/10/bits/basic_string.h	/^      end() _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:iterator	access:public	signature:()
end	/usr/include/c++/10/bits/basic_string.h	/^      end() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:const_iterator	access:public	signature:() const
end	/usr/include/c++/10/bits/ios_base.h	/^    static const seekdir end =		_S_end;$/;"	m	class:std::ios_base	typeref:typename:const seekdir	access:public
end	/usr/include/c++/10/bits/range_access.h	/^	ranges::end(__t);$/;"	p	class:std::ranges::ranges	signature:(__t)
end	/usr/include/c++/10/bits/range_access.h	/^    end(_Container& __cont) -> decltype(__cont.end())$/;"	f	namespace:std	typeref:typename:decltype (__cont.end ())	signature:(_Container & __cont)
end	/usr/include/c++/10/bits/range_access.h	/^    end(_Tp (&__arr)[_Nm])$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp *	signature:(_Tp (& __arr)[_Nm])
end	/usr/include/c++/10/bits/range_access.h	/^    end(const _Container& __cont) -> decltype(__cont.end())$/;"	f	namespace:std	typeref:typename:decltype (__cont.end ())	signature:(const _Container & __cont)
end	/usr/include/c++/10/bits/range_access.h	/^    inline constexpr __cust_access::_End end{};$/;"	v	namespace:std::ranges::__cust	typeref:typename:__cust_access::_End
end	/usr/include/c++/10/bits/range_access.h	/^    void end(auto&) = delete;$/;"	p	namespace:std::ranges::__cust_access	typeref:typename:void	signature:(auto &)
end	/usr/include/c++/10/bits/range_access.h	/^    void end(const auto&) = delete;$/;"	p	namespace:std::ranges::__cust_access	typeref:typename:void	signature:(const auto &)
end	/usr/include/c++/10/bits/range_access.h	/^  template<typename _Tp> _Tp* end(valarray<_Tp>&);$/;"	p	namespace:std	typeref:typename:_Tp *	signature:(valarray<_Tp> &)
end	/usr/include/c++/10/bits/range_access.h	/^  template<typename _Tp> const _Tp* end(const valarray<_Tp>&);$/;"	p	namespace:std	typeref:typename:const _Tp *	signature:(const valarray<_Tp> &)
end_ptr	/usr/include/stdlib.h	/^    int32_t *end_ptr;		\/* Pointer behind state table.  *\/$/;"	m	struct:random_data	typeref:typename:int32_t *	access:public
ends_with	/usr/include/c++/10/bits/basic_string.h	/^      ends_with(_CharT __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(_CharT __x) const
ends_with	/usr/include/c++/10/bits/basic_string.h	/^      ends_with(basic_string_view<_CharT, _Traits> __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(basic_string_view<_CharT,_Traits> __x) const
ends_with	/usr/include/c++/10/bits/basic_string.h	/^      ends_with(const _CharT* __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(const _CharT * __x) const
eof	/usr/include/c++/10/bits/basic_ios.h	/^      eof() const$/;"	f	class:std::basic_ios	typeref:typename:bool	access:public	signature:() const
eof	/usr/include/c++/10/bits/char_traits.h	/^      eof() _GLIBCXX_NOEXCEPT$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR int_type	access:public	signature:()
eof	/usr/include/c++/10/bits/char_traits.h	/^      eof() noexcept$/;"	f	struct:std::char_traits	typeref:typename:int_type	access:public	signature:()
eof	/usr/include/c++/10/bits/char_traits.h	/^      eof()$/;"	f	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR int_type	access:public	signature:()
eofbit	/usr/include/c++/10/bits/ios_base.h	/^    static const iostate eofbit =	_S_eofbit;$/;"	m	class:std::ios_base	typeref:typename:const iostate	access:public
eq	/usr/include/c++/10/bits/char_traits.h	/^      eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR bool	access:public	signature:(const char_type & __c1,const char_type & __c2)
eq	/usr/include/c++/10/bits/char_traits.h	/^      eq(const char_type& __c1, const char_type& __c2) noexcept$/;"	f	struct:std::char_traits	typeref:typename:bool	access:public	signature:(const char_type & __c1,const char_type & __c2)
eq	/usr/include/c++/10/bits/char_traits.h	/^      eq(const char_type& __c1, const char_type& __c2)$/;"	f	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR bool	access:public	signature:(const char_type & __c1,const char_type & __c2)
eq_int_type	/usr/include/c++/10/bits/char_traits.h	/^      eq_int_type(const int_type& __c1, const int_type& __c2) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR bool	access:public	signature:(const int_type & __c1,const int_type & __c2)
eq_int_type	/usr/include/c++/10/bits/char_traits.h	/^      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept$/;"	f	struct:std::char_traits	typeref:typename:bool	access:public	signature:(const int_type & __c1,const int_type & __c2)
eq_int_type	/usr/include/c++/10/bits/char_traits.h	/^      eq_int_type(const int_type& __c1, const int_type& __c2)$/;"	f	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR bool	access:public	signature:(const int_type & __c1,const int_type & __c2)
equal	/usr/include/c++/10/bits/stl_algobase.h	/^	equal(_II1 __first1, _II1 __last1, _II2 __first2)$/;"	f	struct:std::__equal	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_II1 __first1,_II1 __last1,_II2 __first2)
equal	/usr/include/c++/10/bits/stl_algobase.h	/^	equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)$/;"	f	struct:std::__equal	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(const _Tp * __first1,const _Tp * __last1,const _Tp * __first2)
equal	/usr/include/c++/10/bits/stl_algobase.h	/^    equal(_II1 __first1, _II1 __last1, _II2 __first2)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_ALGO _GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2)
equal	/usr/include/c++/10/bits/stl_algobase.h	/^    equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2)
equal	/usr/include/c++/10/bits/stl_algobase.h	/^    equal(_IIter1 __first1, _IIter1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_IIter1 __first1,_IIter1 __last1,_IIter2 __first2,_BinaryPredicate __binary_pred)
equal	/usr/include/c++/10/bits/stl_algobase.h	/^    equal(_IIter1 __first1, _IIter1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_IIter1 __first1,_IIter1 __last1,_IIter2 __first2,_IIter2 __last2,_BinaryPredicate __binary_pred)
equal	/usr/include/c++/10/bits/streambuf_iterator.h	/^      equal(const istreambuf_iterator& __b) const$/;"	f	class:std::istreambuf_iterator	typeref:typename:bool	access:public	signature:(const istreambuf_iterator & __b) const
equal_to	/usr/include/c++/10/bits/range_cmp.h	/^  struct equal_to$/;"	s	namespace:std::ranges
equal_to	/usr/include/c++/10/bits/stl_function.h	/^    struct equal_to : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
equal_to	/usr/include/c++/10/bits/stl_function.h	/^    struct equal_to<void>$/;"	s	namespace:std
erand48	/usr/include/stdlib.h	/^extern double erand48 (unsigned short int __xsubi[3]) __THROW __nonnull ((1));$/;"	p	typeref:typename:double	signature:(unsigned short int __xsubi[3])
erand48_r	/usr/include/stdlib.h	/^extern int erand48_r (unsigned short int __xsubi[3],$/;"	p	typeref:typename:int	signature:(unsigned short int __xsubi[3],struct drand48_data * __restrict __buffer,double * __restrict __result)
erase	/usr/include/c++/10/bits/basic_string.h	/^      erase(__const_iterator __first, __const_iterator __last)$/;"	f	class:std::basic_string	typeref:typename:iterator	access:public	signature:(__const_iterator __first,__const_iterator __last)
erase	/usr/include/c++/10/bits/basic_string.h	/^      erase(__const_iterator __position)$/;"	f	class:std::basic_string	typeref:typename:iterator	access:public	signature:(__const_iterator __position)
erase	/usr/include/c++/10/bits/basic_string.h	/^      erase(size_type __pos = 0, size_type __n = npos)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos=0,size_type __n=npos)
erase_event	/usr/include/c++/10/bits/ios_base.h	/^      erase_event,$/;"	e	enum:std::ios_base::event	access:public
errc	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^  enum class errc$/;"	g	namespace:std
errcnt	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  __syscall_slong_t errcnt;	\/* calibration errors (ro) *\/$/;"	m	struct:timex	typeref:typename:__syscall_slong_t	access:public
errno	/usr/include/errno.h	/^# define errno /;"	d
error_code	/usr/include/c++/10/bits/ios_base.h	/^	error_code() { }$/;"	f	struct:std::ios_base::system_error::error_code	access:public	signature:()
error_code	/usr/include/c++/10/bits/ios_base.h	/^      struct error_code$/;"	s	struct:std::ios_base::system_error	access:public
error_t	/usr/include/x86_64-linux-gnu/bits/types/error_t.h	/^typedef int error_t;$/;"	t	typeref:typename:int
esterror	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  __syscall_slong_t esterror;	\/* estimated error (usec) *\/$/;"	m	struct:timex	typeref:typename:__syscall_slong_t	access:public
event	/usr/include/c++/10/bits/ios_base.h	/^    enum event$/;"	g	class:std::ios_base	access:public
event_callback	/usr/include/c++/10/bits/ios_base.h	/^    typedef void (*event_callback) (event __e, ios_base& __b, int __i);$/;"	t	class:std::ios_base	typeref:typename:void (*)(event __e,ios_base & __b,int __i)	access:public
exception	/usr/include/c++/10/bits/exception.h	/^    exception() _GLIBCXX_NOTHROW { }$/;"	f	class:std::exception	access:public	signature:()
exception	/usr/include/c++/10/bits/exception.h	/^    exception(const exception&) = default;$/;"	p	class:std::exception	access:public	signature:(const exception &)
exception	/usr/include/c++/10/bits/exception.h	/^    exception(exception&&) = default;$/;"	p	class:std::exception	access:public	signature:(exception &&)
exception	/usr/include/c++/10/bits/exception.h	/^  class exception$/;"	c	namespace:std
exception_ptr	/usr/include/c++/10/bits/exception_ptr.h	/^      exception_ptr(exception_ptr&& __o) noexcept$/;"	f	class:std::__exception_ptr::exception_ptr	access:public	signature:(exception_ptr && __o)
exception_ptr	/usr/include/c++/10/bits/exception_ptr.h	/^      exception_ptr(nullptr_t) noexcept$/;"	f	class:std::__exception_ptr::exception_ptr	access:public	signature:(nullptr_t)
exception_ptr	/usr/include/c++/10/bits/exception_ptr.h	/^    class exception_ptr$/;"	c	namespace:std::__exception_ptr
exceptions	/usr/include/c++/10/bits/basic_ios.h	/^      exceptions() const$/;"	f	class:std::basic_ios	typeref:typename:iostate	access:public	signature:() const
exceptions	/usr/include/c++/10/bits/basic_ios.h	/^      exceptions(iostate __except)$/;"	f	class:std::basic_ios	typeref:typename:void	access:public	signature:(iostate __except)
executable_format_error	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      executable_format_error = 		ENOEXEC,$/;"	e	enum:std::errc	access:public
exit	/usr/include/stdlib.h	/^extern void exit (int __status) __THROW __attribute__ ((__noreturn__));$/;"	p	typeref:typename:void	signature:(int __status)
expf	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define expf /;"	d
expl	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define expl /;"	d
fabsf	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define fabsf /;"	d
fabsl	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define fabsl /;"	d
facet	/usr/include/c++/10/bits/locale_classes.h	/^    facet(const facet&) = delete;$/;"	p	class:std::locale::facet	access:private	signature:(const facet &)
facet	/usr/include/c++/10/bits/locale_classes.h	/^    facet(const facet&);  \/\/ Not defined.$/;"	p	class:std::locale::facet	access:private	signature:(const facet &)
facet	/usr/include/c++/10/bits/locale_classes.h	/^    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)$/;"	f	class:std::locale::facet	access:protected	signature:(size_t __refs=0)
facet	/usr/include/c++/10/bits/locale_classes.h	/^  class locale::facet$/;"	c	class:std::locale
fail	/usr/include/c++/10/bits/basic_ios.h	/^      fail() const$/;"	f	class:std::basic_ios	typeref:typename:bool	access:public	signature:() const
failbit	/usr/include/c++/10/bits/ios_base.h	/^    static const iostate failbit =	_S_failbit;$/;"	m	class:std::ios_base	typeref:typename:const iostate	access:public
failed	/usr/include/c++/10/bits/streambuf_iterator.h	/^      failed() const _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::ostreambuf_iterator	typeref:typename:bool	access:public	signature:() const
failure	/usr/include/c++/10/bits/ios_base.h	/^      failure(const char*, const error_code& = io_errc::stream);$/;"	p	class:std::ios_base::failure	access:public	signature:(const char *,const error_code &=io_errc::stream)
failure	/usr/include/c++/10/bits/ios_base.h	/^      failure(const string& __str);$/;"	p	class:std::ios_base::failure	access:public	signature:(const string & __str)
failure	/usr/include/c++/10/bits/ios_base.h	/^      failure(const string&, const error_code&);$/;"	p	class:std::ios_base::failure	access:public	signature:(const string &,const error_code &)
failure	/usr/include/c++/10/bits/ios_base.h	/^    class _GLIBCXX_ABI_TAG_CXX11 failure : public system_error$/;"	c	class:std::ios_base	inherits:system_error	access:public
falsename	/usr/include/c++/10/bits/locale_facets.h	/^      falsename() const$/;"	f	class:std::numpunct	typeref:typename:string_type	access:public	signature:() const
fclose	/usr/include/stdio.h	/^extern int fclose (FILE *__stream);$/;"	p	typeref:typename:int	signature:(FILE * __stream)
fcloseall	/usr/include/stdio.h	/^extern int fcloseall (void);$/;"	p	typeref:typename:int	signature:(void)
fcvt	/usr/include/stdlib.h	/^extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,$/;"	p	typeref:typename:char *	signature:(double __value,int __ndigit,int * __restrict __decpt,int * __restrict __sign)
fcvt_r	/usr/include/stdlib.h	/^extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,$/;"	p	typeref:typename:int	signature:(double __value,int __ndigit,int * __restrict __decpt,int * __restrict __sign,char * __restrict __buf,size_t __len)
fd_mask	/usr/include/x86_64-linux-gnu/sys/select.h	/^typedef __fd_mask fd_mask;$/;"	t	typeref:typename:__fd_mask
fd_set	/usr/include/x86_64-linux-gnu/sys/select.h	/^  } fd_set;$/;"	t	typeref:struct:__anoneb689ec60108
fdopen	/usr/include/stdio.h	/^extern FILE *fdopen (int __fd, const char *__modes) __THROW __wur;$/;"	p	typeref:typename:FILE *	signature:(int __fd,const char * __modes)
fds_bits	/usr/include/x86_64-linux-gnu/sys/select.h	/^    __fd_mask fds_bits[__FD_SETSIZE \/ __NFDBITS];$/;"	m	struct:__anoneb689ec60108	typeref:typename:__fd_mask[]	access:public
feof	/usr/include/stdio.h	/^extern int feof (FILE *__stream) __THROW __wur;$/;"	p	typeref:typename:int	signature:(FILE * __stream)
feof_unlocked	/usr/include/stdio.h	/^extern int feof_unlocked (FILE *__stream) __THROW __wur;$/;"	p	typeref:typename:int	signature:(FILE * __stream)
ferror	/usr/include/stdio.h	/^extern int ferror (FILE *__stream) __THROW __wur;$/;"	p	typeref:typename:int	signature:(FILE * __stream)
ferror_unlocked	/usr/include/stdio.h	/^extern int ferror_unlocked (FILE *__stream) __THROW __wur;$/;"	p	typeref:typename:int	signature:(FILE * __stream)
fflush	/usr/include/stdio.h	/^extern int fflush (FILE *__stream);$/;"	p	typeref:typename:int	signature:(FILE * __stream)
fflush_unlocked	/usr/include/stdio.h	/^extern int fflush_unlocked (FILE *__stream);$/;"	p	typeref:typename:int	signature:(FILE * __stream)
fgetc	/usr/include/stdio.h	/^extern int fgetc (FILE *__stream);$/;"	p	typeref:typename:int	signature:(FILE * __stream)
fgetc_unlocked	/usr/include/stdio.h	/^extern int fgetc_unlocked (FILE *__stream);$/;"	p	typeref:typename:int	signature:(FILE * __stream)
fgetpos	/usr/include/stdio.h	/^#  define fgetpos /;"	d
fgetpos	/usr/include/stdio.h	/^extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);$/;"	p	typeref:typename:int	signature:(FILE * __restrict __stream,fpos_t * __restrict __pos)
fgetpos64	/usr/include/stdio.h	/^extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);$/;"	p	typeref:typename:int	signature:(FILE * __restrict __stream,fpos64_t * __restrict __pos)
fgets	/usr/include/stdio.h	/^extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)$/;"	p	typeref:typename:char *	signature:(char * __restrict __s,int __n,FILE * __restrict __stream)
fgets_unlocked	/usr/include/stdio.h	/^extern char *fgets_unlocked (char *__restrict __s, int __n,$/;"	p	typeref:typename:char *	signature:(char * __restrict __s,int __n,FILE * __restrict __stream)
fgetwc	/usr/include/wchar.h	/^extern wint_t fgetwc (__FILE *__stream);$/;"	p	typeref:typename:wint_t	signature:(__FILE * __stream)
fgetwc_unlocked	/usr/include/wchar.h	/^extern wint_t fgetwc_unlocked (__FILE *__stream);$/;"	p	typeref:typename:wint_t	signature:(__FILE * __stream)
fgetws	/usr/include/wchar.h	/^extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __restrict __ws,int __n,__FILE * __restrict __stream)
fgetws_unlocked	/usr/include/wchar.h	/^extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __restrict __ws,int __n,__FILE * __restrict __stream)
file_exists	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      file_exists = 	       			EEXIST,$/;"	e	enum:std::errc	access:public
file_too_large	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      file_too_large = 				EFBIG,$/;"	e	enum:std::errc	access:public
filename_too_long	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      filename_too_long = 			ENAMETOOLONG,$/;"	e	enum:std::errc	access:public
fileno	/usr/include/stdio.h	/^extern int fileno (FILE *__stream) __THROW __wur;$/;"	p	typeref:typename:int	signature:(FILE * __stream)
fileno_unlocked	/usr/include/stdio.h	/^extern int fileno_unlocked (FILE *__stream) __THROW __wur;$/;"	p	typeref:typename:int	signature:(FILE * __stream)
fill	/usr/include/c++/10/bits/basic_ios.h	/^      fill() const$/;"	f	class:std::basic_ios	typeref:typename:char_type	access:public	signature:() const
fill	/usr/include/c++/10/bits/basic_ios.h	/^      fill(char_type __ch)$/;"	f	class:std::basic_ios	typeref:typename:char_type	access:public	signature:(char_type __ch)
fill	/usr/include/c++/10/bits/stl_algobase.h	/^    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __value)
fill_n	/usr/include/c++/10/bits/stl_algobase.h	/^    fill_n(_OI __first, _Size __n, const _Tp& __value)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	signature:(_OI __first,_Size __n,const _Tp & __value)
find	/usr/include/c++/10/bits/basic_string.h	/^	find(const _Tp& __svt, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=0) const
find	/usr/include/c++/10/bits/basic_string.h	/^      find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=0) const
find	/usr/include/c++/10/bits/basic_string.h	/^      find(const _CharT* __s, size_type __pos = 0) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=0) const
find	/usr/include/c++/10/bits/basic_string.h	/^      find(const _CharT* __s, size_type __pos, size_type __n) const$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
find	/usr/include/c++/10/bits/basic_string.h	/^      find(const basic_string& __str, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=0) const
find	/usr/include/c++/10/bits/char_traits.h	/^      find(const char_type* __s, size_t __n, const char_type& __a)$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX17_CONSTEXPR const char_type *	access:public	signature:(const char_type * __s,size_t __n,const char_type & __a)
find	/usr/include/c++/10/bits/char_traits.h	/^      find(const char_type* __s, std::size_t __n, const char_type& __a);$/;"	p	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX14_CONSTEXPR const char_type *	access:public	signature:(const char_type * __s,std::size_t __n,const char_type & __a)
find	/usr/include/c++/10/bits/char_traits.h	/^    find(const char_type* __s, std::size_t __n, const char_type& __a)$/;"	f	class:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX14_CONSTEXPR const typename char_traits<_CharT>::char_type *	signature:(const char_type * __s,std::size_t __n,const char_type & __a)
find	/usr/include/c++/10/bits/streambuf_iterator.h	/^    find(istreambuf_iterator<_CharT> __first,$/;"	f	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,istreambuf_iterator<_CharT>>::__type	signature:(istreambuf_iterator<_CharT> __first,istreambuf_iterator<_CharT> __last,const _CharT & __val)
find_first_not_of	/usr/include/c++/10/bits/basic_string.h	/^	find_first_not_of(const _Tp& __svt, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=0) const
find_first_not_of	/usr/include/c++/10/bits/basic_string.h	/^      find_first_not_of(_CharT __c, size_type __pos = 0) const$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=0) const
find_first_not_of	/usr/include/c++/10/bits/basic_string.h	/^      find_first_not_of(const _CharT* __s, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=0) const
find_first_not_of	/usr/include/c++/10/bits/basic_string.h	/^      find_first_not_of(const _CharT* __s, size_type __pos,$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
find_first_not_of	/usr/include/c++/10/bits/basic_string.h	/^      find_first_not_of(const basic_string& __str, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=0) const
find_first_of	/usr/include/c++/10/bits/basic_string.h	/^	find_first_of(const _Tp& __svt, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=0) const
find_first_of	/usr/include/c++/10/bits/basic_string.h	/^      find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=0) const
find_first_of	/usr/include/c++/10/bits/basic_string.h	/^      find_first_of(const _CharT* __s, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=0) const
find_first_of	/usr/include/c++/10/bits/basic_string.h	/^      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
find_first_of	/usr/include/c++/10/bits/basic_string.h	/^      find_first_of(const basic_string& __str, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=0) const
find_last_not_of	/usr/include/c++/10/bits/basic_string.h	/^	find_last_not_of(const _Tp& __svt, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=npos) const
find_last_not_of	/usr/include/c++/10/bits/basic_string.h	/^      find_last_not_of(_CharT __c, size_type __pos = npos) const$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=npos) const
find_last_not_of	/usr/include/c++/10/bits/basic_string.h	/^      find_last_not_of(const _CharT* __s, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=npos) const
find_last_not_of	/usr/include/c++/10/bits/basic_string.h	/^      find_last_not_of(const _CharT* __s, size_type __pos,$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
find_last_not_of	/usr/include/c++/10/bits/basic_string.h	/^      find_last_not_of(const basic_string& __str, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=npos) const
find_last_of	/usr/include/c++/10/bits/basic_string.h	/^	find_last_of(const _Tp& __svt, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=npos) const
find_last_of	/usr/include/c++/10/bits/basic_string.h	/^      find_last_of(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=npos) const
find_last_of	/usr/include/c++/10/bits/basic_string.h	/^      find_last_of(const _CharT* __s, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=npos) const
find_last_of	/usr/include/c++/10/bits/basic_string.h	/^      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
find_last_of	/usr/include/c++/10/bits/basic_string.h	/^      find_last_of(const basic_string& __str, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=npos) const
finite	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define finite /;"	d
finitef	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define finitef /;"	d
finitel	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define finitel /;"	d
first	/usr/include/c++/10/bits/stl_pair.h	/^      _T1 first;                 \/\/\/< The first member$/;"	m	struct:std::pair	typeref:typename:_T1	access:public
first_argument_type	/usr/include/c++/10/bits/stl_function.h	/^      typedef _Arg1 	first_argument_type; $/;"	t	struct:std::binary_function	typeref:typename:_Arg1	access:public
first_type	/usr/include/c++/10/bits/stl_pair.h	/^      typedef _T1 first_type;    \/\/\/< The type of the `first` member$/;"	t	struct:std::pair	typeref:typename:_T1	access:public
fixed	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags fixed =       _S_fixed;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
fixed	/usr/include/c++/10/bits/ios_base.h	/^  fixed(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
flags	/usr/include/c++/10/bits/ios_base.h	/^    flags() const$/;"	f	class:std::ios_base	typeref:typename:fmtflags	access:public	signature:() const
flags	/usr/include/c++/10/bits/ios_base.h	/^    flags(fmtflags __fmtfl)$/;"	f	class:std::ios_base	typeref:typename:fmtflags	access:public	signature:(fmtflags __fmtfl)
floatfield	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags floatfield =  _S_floatfield;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
flockfile	/usr/include/stdio.h	/^extern void flockfile (FILE *__stream) __THROW;$/;"	p	typeref:typename:void	signature:(FILE * __stream)
floorf	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define floorf /;"	d
floorl	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define floorl /;"	d
fmemopen	/usr/include/stdio.h	/^extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)$/;"	p	typeref:typename:FILE *	signature:(void * __s,size_t __len,const char * __modes)
fmodf	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define fmodf /;"	d
fmodl	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define fmodl /;"	d
fmtflags	/usr/include/c++/10/bits/ios_base.h	/^    typedef _Ios_Fmtflags fmtflags;$/;"	t	class:std::ios_base	typeref:typename:_Ios_Fmtflags	access:public
fopen	/usr/include/stdio.h	/^#  define fopen /;"	d
fopen	/usr/include/stdio.h	/^extern FILE *fopen (const char *__restrict __filename,$/;"	p	typeref:typename:FILE *	signature:(const char * __restrict __filename,const char * __restrict __modes)
fopen64	/usr/include/stdio.h	/^extern FILE *fopen64 (const char *__restrict __filename,$/;"	p	typeref:typename:FILE *	signature:(const char * __restrict __filename,const char * __restrict __modes)
fopencookie	/usr/include/stdio.h	/^extern FILE *fopencookie (void *__restrict __magic_cookie,$/;"	p	typeref:typename:FILE *	signature:(void * __restrict __magic_cookie,const char * __restrict __modes,cookie_io_functions_t __io_funcs)
forward	/usr/include/c++/10/bits/move.h	/^    forward(typename std::remove_reference<_Tp>::type& __t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION _Tp &&	signature:(typename std::remove_reference<_Tp>::type & __t)
forward	/usr/include/c++/10/bits/move.h	/^    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept$/;"	f	namespace:std	typeref:typename:_Tp &&	signature:(typename std::remove_reference<_Tp>::type && __t)
forward_iterator_tag	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^  struct forward_iterator_tag : public input_iterator_tag { };$/;"	s	namespace:std	inherits:input_iterator_tag
fpclass	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define fpclass /;"	d
fpos	/usr/include/c++/10/bits/postypes.h	/^      fpos()$/;"	f	class:std::fpos	access:public	signature:()
fpos	/usr/include/c++/10/bits/postypes.h	/^      fpos(const fpos&) = default;$/;"	p	class:std::fpos	access:public	signature:(const fpos &)
fpos	/usr/include/c++/10/bits/postypes.h	/^      fpos(streamoff __off)$/;"	f	class:std::fpos	access:public	signature:(streamoff __off)
fpos	/usr/include/c++/10/bits/postypes.h	/^    class fpos$/;"	c	namespace:std
fpos64_t	/usr/include/stdio.h	/^typedef __fpos64_t fpos64_t;$/;"	t	typeref:typename:__fpos64_t
fpos_t	/usr/include/stdio.h	/^typedef __fpos64_t fpos_t;$/;"	t	typeref:typename:__fpos64_t
fpos_t	/usr/include/stdio.h	/^typedef __fpos_t fpos_t;$/;"	t	typeref:typename:__fpos_t
fprintf	/usr/include/stdio.h	/^extern int fprintf (FILE *__restrict __stream,$/;"	p	typeref:typename:int	signature:(FILE * __restrict __stream,const char * __restrict __format,...)
fptr	/usr/include/stdlib.h	/^    int32_t *fptr;		\/* Front pointer.  *\/$/;"	m	struct:random_data	typeref:typename:int32_t *	access:public
fputc	/usr/include/stdio.h	/^extern int fputc (int __c, FILE *__stream);$/;"	p	typeref:typename:int	signature:(int __c,FILE * __stream)
fputc_unlocked	/usr/include/stdio.h	/^extern int fputc_unlocked (int __c, FILE *__stream);$/;"	p	typeref:typename:int	signature:(int __c,FILE * __stream)
fputs	/usr/include/stdio.h	/^extern int fputs (const char *__restrict __s, FILE *__restrict __stream);$/;"	p	typeref:typename:int	signature:(const char * __restrict __s,FILE * __restrict __stream)
fputs_unlocked	/usr/include/stdio.h	/^extern int fputs_unlocked (const char *__restrict __s,$/;"	p	typeref:typename:int	signature:(const char * __restrict __s,FILE * __restrict __stream)
fputwc	/usr/include/wchar.h	/^extern wint_t fputwc (wchar_t __wc, __FILE *__stream);$/;"	p	typeref:typename:wint_t	signature:(wchar_t __wc,__FILE * __stream)
fputwc_unlocked	/usr/include/wchar.h	/^extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);$/;"	p	typeref:typename:wint_t	signature:(wchar_t __wc,__FILE * __stream)
fputws	/usr/include/wchar.h	/^extern int fputws (const wchar_t *__restrict __ws,$/;"	p	typeref:typename:int	signature:(const wchar_t * __restrict __ws,__FILE * __restrict __stream)
fputws_unlocked	/usr/include/wchar.h	/^extern int fputws_unlocked (const wchar_t *__restrict __ws,$/;"	p	typeref:typename:int	signature:(const wchar_t * __restrict __ws,__FILE * __restrict __stream)
frac_digits	/usr/include/locale.h	/^  char frac_digits;		\/* Local fractional digits.  *\/$/;"	m	struct:lconv	typeref:typename:char	access:public
fread	/usr/include/stdio.h	/^extern size_t fread (void *__restrict __ptr, size_t __size,$/;"	p	typeref:typename:size_t	signature:(void * __restrict __ptr,size_t __size,size_t __n,FILE * __restrict __stream)
fread_unlocked	/usr/include/stdio.h	/^extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,$/;"	p	typeref:typename:size_t	signature:(void * __restrict __ptr,size_t __size,size_t __n,FILE * __restrict __stream)
free	/usr/include/stdlib.h	/^extern void free (void *__ptr) __THROW;$/;"	p	typeref:typename:void	signature:(void * __ptr)
freelocale	/usr/include/locale.h	/^extern void freelocale (locale_t __dataset) __THROW;$/;"	p	typeref:typename:void	signature:(locale_t __dataset)
freopen	/usr/include/stdio.h	/^#  define freopen /;"	d
freopen	/usr/include/stdio.h	/^extern FILE *freopen (const char *__restrict __filename,$/;"	p	typeref:typename:FILE *	signature:(const char * __restrict __filename,const char * __restrict __modes,FILE * __restrict __stream)
freopen64	/usr/include/stdio.h	/^extern FILE *freopen64 (const char *__restrict __filename,$/;"	p	typeref:typename:FILE *	signature:(const char * __restrict __filename,const char * __restrict __modes,FILE * __restrict __stream)
freq	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  __syscall_slong_t freq;	\/* frequency offset (scaled ppm) *\/$/;"	m	struct:timex	typeref:typename:__syscall_slong_t	access:public
frexpf	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define frexpf /;"	d
frexpl	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define frexpl /;"	d
front	/usr/include/c++/10/bits/basic_string.h	/^      front() const noexcept$/;"	f	class:std::basic_string	typeref:typename:const_reference	access:public	signature:() const
front	/usr/include/c++/10/bits/basic_string.h	/^      front() noexcept$/;"	f	class:std::basic_string	typeref:typename:reference	access:public	signature:()
front_insert_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^      constexpr front_insert_iterator() noexcept : container(nullptr) { }$/;"	f	class:std::front_insert_iterator	access:public	signature:()
front_insert_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^      front_insert_iterator(_Container& __x)$/;"	f	class:std::front_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Container & __x)
front_insert_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    class front_insert_iterator$/;"	c	namespace:std	inherits:iterator<output_iterator_tag,void,void,void,void>
front_inserter	/usr/include/c++/10/bits/stl_iterator.h	/^    front_inserter(_Container& __x)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR front_insert_iterator<_Container>	signature:(_Container & __x)
fsblkcnt64_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __fsblkcnt64_t fsblkcnt64_t; \/* Type to count file system blocks.  *\/$/;"	t	typeref:typename:__fsblkcnt64_t
fsblkcnt_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __fsblkcnt64_t fsblkcnt_t; \/* Type to count file system blocks.  *\/$/;"	t	typeref:typename:__fsblkcnt64_t
fsblkcnt_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __fsblkcnt_t fsblkcnt_t; \/* Type to count file system blocks.  *\/$/;"	t	typeref:typename:__fsblkcnt_t
fscanf	/usr/include/stdio.h	/^#  define fscanf /;"	d
fscanf	/usr/include/stdio.h	/^extern int fscanf (FILE *__restrict __stream,$/;"	p	typeref:typename:int	signature:(FILE * __restrict __stream,const char * __restrict __format,...)
fseek	/usr/include/stdio.h	/^extern int fseek (FILE *__stream, long int __off, int __whence);$/;"	p	typeref:typename:int	signature:(FILE * __stream,long int __off,int __whence)
fseeko	/usr/include/stdio.h	/^#   define fseeko /;"	d
fseeko	/usr/include/stdio.h	/^extern int fseeko (FILE *__stream, __off_t __off, int __whence);$/;"	p	typeref:typename:int	signature:(FILE * __stream,__off_t __off,int __whence)
fseeko64	/usr/include/stdio.h	/^extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);$/;"	p	typeref:typename:int	signature:(FILE * __stream,__off64_t __off,int __whence)
fsetpos	/usr/include/stdio.h	/^#  define fsetpos /;"	d
fsetpos	/usr/include/stdio.h	/^extern int fsetpos (FILE *__stream, const fpos_t *__pos);$/;"	p	typeref:typename:int	signature:(FILE * __stream,const fpos_t * __pos)
fsetpos64	/usr/include/stdio.h	/^extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);$/;"	p	typeref:typename:int	signature:(FILE * __stream,const fpos64_t * __pos)
fsfilcnt64_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __fsfilcnt64_t fsfilcnt64_t; \/* Type to count file system inodes.  *\/$/;"	t	typeref:typename:__fsfilcnt64_t
fsfilcnt_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __fsfilcnt64_t fsfilcnt_t; \/* Type to count file system inodes.  *\/$/;"	t	typeref:typename:__fsfilcnt64_t
fsfilcnt_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __fsfilcnt_t fsfilcnt_t; \/* Type to count file system inodes.  *\/$/;"	t	typeref:typename:__fsfilcnt_t
fsid_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __fsid_t fsid_t;$/;"	t	typeref:typename:__fsid_t
ftell	/usr/include/stdio.h	/^extern long int ftell (FILE *__stream) __wur;$/;"	p	typeref:typename:long int	signature:(FILE * __stream)
ftello	/usr/include/stdio.h	/^#   define ftello /;"	d
ftello	/usr/include/stdio.h	/^extern __off_t ftello (FILE *__stream) __wur;$/;"	p	typeref:typename:__off_t	signature:(FILE * __stream)
ftello64	/usr/include/stdio.h	/^extern __off64_t ftello64 (FILE *__stream) __wur;$/;"	p	typeref:typename:__off64_t	signature:(FILE * __stream)
ftrylockfile	/usr/include/stdio.h	/^extern int ftrylockfile (FILE *__stream) __THROW __wur;$/;"	p	typeref:typename:int	signature:(FILE * __stream)
function_not_supported	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      function_not_supported = 			ENOSYS,$/;"	e	enum:std::errc	access:public
funlockfile	/usr/include/stdio.h	/^extern void funlockfile (FILE *__stream) __THROW;$/;"	p	typeref:typename:void	signature:(FILE * __stream)
fwide	/usr/include/wchar.h	/^extern int fwide (__FILE *__fp, int __mode) __THROW;$/;"	p	typeref:typename:int	signature:(__FILE * __fp,int __mode)
fwprintf	/usr/include/wchar.h	/^extern int fwprintf (__FILE *__restrict __stream,$/;"	p	typeref:typename:int	signature:(__FILE * __restrict __stream,const wchar_t * __restrict __format,...)
fwrite	/usr/include/stdio.h	/^extern size_t fwrite (const void *__restrict __ptr, size_t __size,$/;"	p	typeref:typename:size_t	signature:(const void * __restrict __ptr,size_t __size,size_t __n,FILE * __restrict __s)
fwrite_unlocked	/usr/include/stdio.h	/^extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,$/;"	p	typeref:typename:size_t	signature:(const void * __restrict __ptr,size_t __size,size_t __n,FILE * __restrict __stream)
fwscanf	/usr/include/wchar.h	/^#   define fwscanf /;"	d
fwscanf	/usr/include/wchar.h	/^extern int fwscanf (__FILE *__restrict __stream,$/;"	p	typeref:typename:int	signature:(__FILE * __restrict __stream,const wchar_t * __restrict __format,...)
gcvt	/usr/include/stdlib.h	/^extern char *gcvt (double __value, int __ndigit, char *__buf)$/;"	p	typeref:typename:char *	signature:(double __value,int __ndigit,char * __buf)
get	/usr/include/c++/10/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,bool & __v) const
get	/usr/include/c++/10/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,double & __v) const
get	/usr/include/c++/10/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,float & __v) const
get	/usr/include/c++/10/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,long & __v) const
get	/usr/include/c++/10/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,long double & __v) const
get	/usr/include/c++/10/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,long long & __v) const
get	/usr/include/c++/10/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned int & __v) const
get	/usr/include/c++/10/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned long & __v) const
get	/usr/include/c++/10/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned long long & __v) const
get	/usr/include/c++/10/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned short & __v) const
get	/usr/include/c++/10/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,void * & __v) const
get_allocator	/usr/include/c++/10/bits/basic_string.h	/^      get_allocator() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:allocator_type	access:public	signature:() const
getc	/usr/include/stdio.h	/^extern int getc (FILE *__stream);$/;"	p	typeref:typename:int	signature:(FILE * __stream)
getc_unlocked	/usr/include/stdio.h	/^extern int getc_unlocked (FILE *__stream);$/;"	p	typeref:typename:int	signature:(FILE * __stream)
getchar	/usr/include/stdio.h	/^extern int getchar (void);$/;"	p	typeref:typename:int	signature:(void)
getchar_unlocked	/usr/include/stdio.h	/^extern int getchar_unlocked (void);$/;"	p	typeref:typename:int	signature:(void)
getcpu	/usr/include/x86_64-linux-gnu/bits/sched.h	/^extern int getcpu (unsigned int *, unsigned int *) __THROW;$/;"	p	typeref:typename:int	signature:(unsigned int *,unsigned int *)
getdate	/usr/include/time.h	/^extern struct tm *getdate (const char *__string);$/;"	p	typeref:struct:tm *	signature:(const char * __string)
getdate_r	/usr/include/time.h	/^extern int getdate_r (const char *__restrict __string,$/;"	p	typeref:typename:int	signature:(const char * __restrict __string,struct tm * __restrict __resbufp)
getdelim	/usr/include/stdio.h	/^extern __ssize_t getdelim (char **__restrict __lineptr,$/;"	p	typeref:typename:__ssize_t	signature:(char ** __restrict __lineptr,size_t * __restrict __n,int __delimiter,FILE * __restrict __stream)
getenv	/usr/include/stdlib.h	/^extern char *getenv (const char *__name) __THROW __nonnull ((1)) __wur;$/;"	p	typeref:typename:char *	signature:(const char * __name)
getline	/usr/include/c++/10/bits/basic_string.h	/^    getline(basic_istream<_CharT, _Traits>& __is,$/;"	f	namespace:std	typeref:typename:basic_istream<_CharT,_Traits> &	signature:(basic_istream<_CharT,_Traits> & __is,basic_string<_CharT,_Traits,_Alloc> & __str)
getline	/usr/include/c++/10/bits/basic_string.h	/^    getline(basic_istream<_CharT, _Traits>& __is,$/;"	p	namespace:std	typeref:typename:basic_istream<_CharT,_Traits> &	signature:(basic_istream<_CharT,_Traits> & __is,basic_string<_CharT,_Traits,_Alloc> & __str,_CharT __delim)
getline	/usr/include/c++/10/bits/basic_string.h	/^    getline(basic_istream<_CharT, _Traits>&& __is,$/;"	f	namespace:std	typeref:typename:basic_istream<_CharT,_Traits> &	signature:(basic_istream<_CharT,_Traits> && __is,basic_string<_CharT,_Traits,_Alloc> & __str)
getline	/usr/include/c++/10/bits/basic_string.h	/^    getline(basic_istream<_CharT, _Traits>&& __is,$/;"	f	namespace:std	typeref:typename:basic_istream<_CharT,_Traits> &	signature:(basic_istream<_CharT,_Traits> && __is,basic_string<_CharT,_Traits,_Alloc> & __str,_CharT __delim)
getline	/usr/include/c++/10/bits/basic_string.h	/^    getline(basic_istream<char>& __in, basic_string<char>& __str,$/;"	p	namespace:std	typeref:typename:basic_istream<char> &	signature:(basic_istream<char> & __in,basic_string<char> & __str,char __delim)
getline	/usr/include/c++/10/bits/basic_string.h	/^    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,$/;"	p	namespace:std	typeref:typename:basic_istream<wchar_t> &	signature:(basic_istream<wchar_t> & __in,basic_string<wchar_t> & __str,wchar_t __delim)
getline	/usr/include/stdio.h	/^extern __ssize_t getline (char **__restrict __lineptr,$/;"	p	typeref:typename:__ssize_t	signature:(char ** __restrict __lineptr,size_t * __restrict __n,FILE * __restrict __stream)
getloadavg	/usr/include/stdlib.h	/^extern int getloadavg (double __loadavg[], int __nelem)$/;"	p	typeref:typename:int	signature:(double __loadavg[],int __nelem)
getloc	/usr/include/c++/10/bits/ios_base.h	/^    getloc() const$/;"	f	class:std::ios_base	typeref:typename:locale	access:public	signature:() const
getpt	/usr/include/stdlib.h	/^extern int getpt (void);$/;"	p	typeref:typename:int	signature:(void)
gets	/usr/include/stdio.h	/^extern char *gets (char *__s) __wur __attribute_deprecated__;$/;"	p	typeref:typename:char *	signature:(char * __s)
getsubopt	/usr/include/stdlib.h	/^extern int getsubopt (char **__restrict __optionp,$/;"	p	typeref:typename:int	signature:(char ** __restrict __optionp,char * const * __restrict __tokens,char ** __restrict __valuep)
getw	/usr/include/stdio.h	/^extern int getw (FILE *__stream);$/;"	p	typeref:typename:int	signature:(FILE * __stream)
getwc	/usr/include/wchar.h	/^extern wint_t getwc (__FILE *__stream);$/;"	p	typeref:typename:wint_t	signature:(__FILE * __stream)
getwc_unlocked	/usr/include/wchar.h	/^extern wint_t getwc_unlocked (__FILE *__stream);$/;"	p	typeref:typename:wint_t	signature:(__FILE * __stream)
getwchar	/usr/include/wchar.h	/^extern wint_t getwchar (void);$/;"	p	typeref:typename:wint_t	signature:(void)
getwchar_unlocked	/usr/include/wchar.h	/^extern wint_t getwchar_unlocked (void);$/;"	p	typeref:typename:wint_t	signature:(void)
gid_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __gid_t gid_t;$/;"	t	typeref:typename:__gid_t
global	/usr/include/c++/10/bits/locale_classes.h	/^    global(const locale& __loc);$/;"	p	class:std::locale	typeref:typename:locale	access:public	signature:(const locale & __loc)
gmtime	/usr/include/time.h	/^extern struct tm *gmtime (const time_t *__timer) __THROW;$/;"	p	typeref:struct:tm *	signature:(const time_t * __timer)
gmtime_r	/usr/include/time.h	/^extern struct tm *gmtime_r (const time_t *__restrict __timer,$/;"	p	typeref:struct:tm *	signature:(const time_t * __restrict __timer,struct tm * __restrict __tp)
good	/usr/include/c++/10/bits/basic_ios.h	/^      good() const$/;"	f	class:std::basic_ios	typeref:typename:bool	access:public	signature:() const
goodbit	/usr/include/c++/10/bits/ios_base.h	/^    static const iostate goodbit =	_S_goodbit;$/;"	m	class:std::ios_base	typeref:typename:const iostate	access:public
grantpt	/usr/include/stdlib.h	/^extern int grantpt (int __fd) __THROW;$/;"	p	typeref:typename:int	signature:(int __fd)
graph	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h	/^    static const mask graph 	= _ISalpha | _ISdigit | _ISpunct;$/;"	m	struct:std::ctype_base	typeref:typename:const mask	access:public
greater	/usr/include/c++/10/bits/range_cmp.h	/^  struct greater$/;"	s	namespace:std::ranges
greater	/usr/include/c++/10/bits/stl_function.h	/^    struct greater : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
greater	/usr/include/c++/10/bits/stl_function.h	/^    struct greater<_Tp*> : public binary_function<_Tp*, _Tp*, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp*,_Tp*,bool>
greater	/usr/include/c++/10/bits/stl_function.h	/^    struct greater<void>$/;"	s	namespace:std
greater_equal	/usr/include/c++/10/bits/range_cmp.h	/^  struct greater_equal$/;"	s	namespace:std::ranges
greater_equal	/usr/include/c++/10/bits/stl_function.h	/^    struct greater_equal : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
greater_equal	/usr/include/c++/10/bits/stl_function.h	/^    struct greater_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp*,_Tp*,bool>
greater_equal	/usr/include/c++/10/bits/stl_function.h	/^    struct greater_equal<void>$/;"	s	namespace:std
grouping	/usr/include/c++/10/bits/locale_facets.h	/^      grouping() const$/;"	f	class:std::numpunct	typeref:typename:string	access:public	signature:() const
grouping	/usr/include/locale.h	/^  char *grouping;$/;"	m	struct:lconv	typeref:typename:char *	access:public
has_facet	/usr/include/c++/10/bits/localefwd.h	/^    has_facet(const locale&) throw();$/;"	p	namespace:std	typeref:typename:bool	signature:(const locale &)
hash	/usr/include/c++/10/bits/basic_string.h	/^    struct hash<string>$/;"	s	namespace:std	inherits:__hash_base<size_t,string>
hash	/usr/include/c++/10/bits/basic_string.h	/^    struct hash<u16string>$/;"	s	namespace:std	inherits:__hash_base<size_t,u16string>
hash	/usr/include/c++/10/bits/basic_string.h	/^    struct hash<u32string>$/;"	s	namespace:std	inherits:__hash_base<size_t,u32string>
hash	/usr/include/c++/10/bits/basic_string.h	/^    struct hash<u8string>$/;"	s	namespace:std	inherits:__hash_base<size_t,u8string>
hash	/usr/include/c++/10/bits/basic_string.h	/^    struct hash<wstring>$/;"	s	namespace:std	inherits:__hash_base<size_t,wstring>
hash	/usr/include/c++/10/bits/functional_hash.h	/^      hash(const _Tp& __val)$/;"	f	struct:std::_Fnv_hash_impl	typeref:typename:size_t	access:public	signature:(const _Tp & __val)
hash	/usr/include/c++/10/bits/functional_hash.h	/^      hash(const _Tp& __val)$/;"	f	struct:std::_Hash_impl	typeref:typename:size_t	access:public	signature:(const _Tp & __val)
hash	/usr/include/c++/10/bits/functional_hash.h	/^    hash(const void* __ptr, size_t __clength,$/;"	f	struct:std::_Fnv_hash_impl	typeref:typename:size_t	access:public	signature:(const void * __ptr,size_t __clength,size_t __seed=static_cast<size_t> (2166136261UL))
hash	/usr/include/c++/10/bits/functional_hash.h	/^    hash(const void* __ptr, size_t __clength,$/;"	f	struct:std::_Hash_impl	typeref:typename:size_t	access:public	signature:(const void * __ptr,size_t __clength,size_t __seed=static_cast<size_t> (0xc70f6907UL))
hash	/usr/include/c++/10/bits/functional_hash.h	/^    struct hash : __hash_enum<_Tp>$/;"	s	namespace:std	inherits:__hash_enum<_Tp>
hash	/usr/include/c++/10/bits/functional_hash.h	/^    struct hash<_Tp*> : public __hash_base<size_t, _Tp*>$/;"	s	namespace:std	inherits:__hash_base<size_t,_Tp*>
hash	/usr/include/c++/10/bits/functional_hash.h	/^    struct hash<double> : public __hash_base<size_t, double>$/;"	s	namespace:std	inherits:__hash_base<size_t,double>
hash	/usr/include/c++/10/bits/functional_hash.h	/^    struct hash<float> : public __hash_base<size_t, float>$/;"	s	namespace:std	inherits:__hash_base<size_t,float>
hash	/usr/include/c++/10/bits/functional_hash.h	/^    struct hash<long double>$/;"	s	namespace:std	inherits:__hash_base<size_t,longdouble>
hash	/usr/include/c++/10/bits/functional_hash.h	/^    struct hash<nullptr_t> : public __hash_base<size_t, nullptr_t>$/;"	s	namespace:std	inherits:__hash_base<size_t,nullptr_t>
hash	/usr/include/c++/10/bits/locale_classes.h	/^      hash(const _CharT* __lo, const _CharT* __hi) const$/;"	f	class:std::collate	typeref:typename:long	access:public	signature:(const _CharT * __lo,const _CharT * __hi) const
hex	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags hex =         _S_hex;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
hex	/usr/include/c++/10/bits/ios_base.h	/^  hex(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
hexfloat	/usr/include/c++/10/bits/ios_base.h	/^  hexfloat(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
host_unreachable	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      host_unreachable = 			EHOSTUNREACH,$/;"	e	enum:std::errc	access:public
htobe16	/usr/include/endian.h	/^#  define htobe16(/;"	d	signature:(x)
htobe32	/usr/include/endian.h	/^#  define htobe32(/;"	d	signature:(x)
htobe64	/usr/include/endian.h	/^#  define htobe64(/;"	d	signature:(x)
htole16	/usr/include/endian.h	/^#  define htole16(/;"	d	signature:(x)
htole32	/usr/include/endian.h	/^#  define htole32(/;"	d	signature:(x)
htole64	/usr/include/endian.h	/^#  define htole64(/;"	d	signature:(x)
hypot	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define hypot /;"	d
hypotf	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define hypotf /;"	d
hypotl	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define hypotl /;"	d
id	/usr/include/c++/10/bits/locale_classes.h	/^      static locale::id			id;$/;"	m	class:std::collate	typeref:typename:locale::id	access:public
id	/usr/include/c++/10/bits/locale_classes.h	/^    id() { }$/;"	f	class:std::locale::id	access:public	signature:()
id	/usr/include/c++/10/bits/locale_classes.h	/^    id(const id&);  \/\/ Not defined.$/;"	p	class:std::locale::id	access:private	signature:(const id &)
id	/usr/include/c++/10/bits/locale_classes.h	/^    locale::id collate<_CharT>::id;$/;"	m	class:std::collate<_CharT>	typeref:typename:locale::id
id	/usr/include/c++/10/bits/locale_classes.h	/^  class locale::id$/;"	c	class:std::locale
id	/usr/include/c++/10/bits/locale_facets.h	/^      static locale::id			id;$/;"	m	class:std::ctype	typeref:typename:locale::id	access:public
id	/usr/include/c++/10/bits/locale_facets.h	/^      static locale::id			id;$/;"	m	class:std::num_get	typeref:typename:locale::id	access:public
id	/usr/include/c++/10/bits/locale_facets.h	/^      static locale::id			id;$/;"	m	class:std::numpunct	typeref:typename:locale::id	access:public
id	/usr/include/c++/10/bits/locale_facets.h	/^      static locale::id		id;$/;"	m	class:std::ctype	typeref:typename:locale::id	access:public
id	/usr/include/c++/10/bits/locale_facets.h	/^      static locale::id		id;$/;"	m	class:std::num_put	typeref:typename:locale::id	access:public
id	/usr/include/c++/10/bits/locale_facets.h	/^      static locale::id        id;$/;"	m	class:std::ctype	typeref:typename:locale::id	access:public
id	/usr/include/c++/10/bits/locale_facets.h	/^    locale::id ctype<_CharT>::id;$/;"	m	class:std::ctype<_CharT>	typeref:typename:locale::id
id	/usr/include/c++/10/bits/locale_facets.h	/^    locale::id num_get<_CharT, _InIter>::id;$/;"	m	class:std::num_get<_CharT, _InIter>	typeref:typename:locale::id
id	/usr/include/c++/10/bits/locale_facets.h	/^    locale::id num_put<_CharT, _OutIter>::id;$/;"	m	class:std::num_put<_CharT, _OutIter>	typeref:typename:locale::id
id	/usr/include/c++/10/bits/locale_facets.h	/^    locale::id numpunct<_CharT>::id;$/;"	m	class:std::numpunct<_CharT>	typeref:typename:locale::id
id_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __id_t id_t;$/;"	t	typeref:typename:__id_t
identifier_removed	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      identifier_removed = 			EIDRM,$/;"	e	enum:std::errc	access:public
identity	/usr/include/c++/10/bits/range_cmp.h	/^  struct identity$/;"	s	namespace:std
idtype_t	/usr/include/x86_64-linux-gnu/bits/waitflags.h	/^} idtype_t;$/;"	t	typeref:enum:__anonf56fd07b0103
illegal_byte_sequence	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      illegal_byte_sequence = 			EILSEQ,$/;"	e	enum:std::errc	access:public
imbue	/usr/include/c++/10/bits/basic_ios.h	/^      imbue(const locale& __loc);$/;"	p	class:std::basic_ios	typeref:typename:locale	access:public	signature:(const locale & __loc)
imbue	/usr/include/c++/10/bits/ios_base.h	/^    imbue(const locale& __loc) throw();$/;"	p	class:std::ios_base	typeref:typename:locale	access:public	signature:(const locale & __loc)
imbue_event	/usr/include/c++/10/bits/ios_base.h	/^      imbue_event,$/;"	e	enum:std::ios_base::event	access:public
in	/usr/include/c++/10/bits/ios_base.h	/^    static const openmode in =		_S_in;$/;"	m	class:std::ios_base	typeref:typename:const openmode	access:public
inappropriate_io_control_operation	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      inappropriate_io_control_operation = 	ENOTTY,$/;"	e	enum:std::errc	access:public
incrementable_traits	/usr/include/c++/10/bits/iterator_concepts.h	/^    struct incrementable_traits<_Tp*>$/;"	s	namespace:std
incrementable_traits	/usr/include/c++/10/bits/iterator_concepts.h	/^    struct incrementable_traits<_Tp>$/;"	s	namespace:std
incrementable_traits	/usr/include/c++/10/bits/iterator_concepts.h	/^    struct incrementable_traits<__int128>$/;"	s	namespace:std
incrementable_traits	/usr/include/c++/10/bits/iterator_concepts.h	/^    struct incrementable_traits<const _Iter>$/;"	s	namespace:std	inherits:incrementable_traits<_Iter>
incrementable_traits	/usr/include/c++/10/bits/iterator_concepts.h	/^    struct incrementable_traits<projected<_Iter, _Proj>>$/;"	s	namespace:std
incrementable_traits	/usr/include/c++/10/bits/iterator_concepts.h	/^    struct incrementable_traits<unsigned __int128>$/;"	s	namespace:std
incrementable_traits	/usr/include/c++/10/bits/iterator_concepts.h	/^  template<typename> struct incrementable_traits { };$/;"	s	namespace:std
incrementable_traits	/usr/include/c++/10/bits/stl_iterator.h	/^    struct incrementable_traits<common_iterator<_It, _Sent>>$/;"	s	namespace:std
incrementable_traits	/usr/include/c++/10/bits/stl_iterator.h	/^    struct incrementable_traits<counted_iterator<_It>>$/;"	s	namespace:std
indirect_result_t	/usr/include/c++/10/bits/iterator_concepts.h	/^    using indirect_result_t = invoke_result_t<_Fn, iter_reference_t<_Is>...>;$/;"	t	namespace:std	typeref:typename:invoke_result_t<_Fn,iter_reference_t<_Is>...>
indirectly_readable_traits	/usr/include/c++/10/bits/iterator_concepts.h	/^    struct indirectly_readable_traits<_Iter>$/;"	s	namespace:std
indirectly_readable_traits	/usr/include/c++/10/bits/iterator_concepts.h	/^    struct indirectly_readable_traits<_Tp*>$/;"	s	namespace:std	inherits:__detail::__cond_value_type<_Tp>
indirectly_readable_traits	/usr/include/c++/10/bits/iterator_concepts.h	/^    struct indirectly_readable_traits<_Tp>$/;"	s	namespace:std	inherits:__detail::__cond_value_type<typename_Tp::element_type>
indirectly_readable_traits	/usr/include/c++/10/bits/iterator_concepts.h	/^    struct indirectly_readable_traits<_Tp>$/;"	s	namespace:std	inherits:__detail::__cond_value_type<typename_Tp::value_type>
indirectly_readable_traits	/usr/include/c++/10/bits/iterator_concepts.h	/^    struct indirectly_readable_traits<const _Iter>$/;"	s	namespace:std	inherits:indirectly_readable_traits<_Iter>
indirectly_readable_traits	/usr/include/c++/10/bits/iterator_concepts.h	/^  template<typename> struct indirectly_readable_traits { };$/;"	s	namespace:std
init	/usr/include/c++/10/bits/basic_ios.h	/^      init(basic_streambuf<_CharT, _Traits>* __sb);$/;"	p	class:std::basic_ios	typeref:typename:void	access:protected	signature:(basic_streambuf<_CharT,_Traits> * __sb)
initstate	/usr/include/stdlib.h	/^extern char *initstate (unsigned int __seed, char *__statebuf,$/;"	p	typeref:typename:char *	signature:(unsigned int __seed,char * __statebuf,size_t __statelen)
initstate_r	/usr/include/stdlib.h	/^extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,$/;"	p	typeref:typename:int	signature:(unsigned int __seed,char * __restrict __statebuf,size_t __statelen,struct random_data * __restrict __buf)
ino64_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __ino64_t ino64_t;$/;"	t	typeref:typename:__ino64_t
ino_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __ino64_t ino_t;$/;"	t	typeref:typename:__ino64_t
ino_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __ino_t ino_t;$/;"	t	typeref:typename:__ino_t
input_iterator_tag	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^  struct input_iterator_tag { };$/;"	s	namespace:std
insert	/usr/include/c++/10/bits/basic_string.h	/^	insert(size_type __pos, const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(size_type __pos,const _Tp & __svt)
insert	/usr/include/c++/10/bits/basic_string.h	/^	insert(size_type __pos1, const _Tp& __svt,$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(size_type __pos1,const _Tp & __svt,size_type __pos2,size_type __n=npos)
insert	/usr/include/c++/10/bits/basic_string.h	/^        insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)$/;"	f	class:std::basic_string	typeref:typename:iterator	access:public	signature:(const_iterator __p,_InputIterator __beg,_InputIterator __end)
insert	/usr/include/c++/10/bits/basic_string.h	/^        insert(iterator __p, _InputIterator __beg, _InputIterator __end)$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:(iterator __p,_InputIterator __beg,_InputIterator __end)
insert	/usr/include/c++/10/bits/basic_string.h	/^      insert(__const_iterator __p, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:iterator	access:public	signature:(__const_iterator __p,_CharT __c)
insert	/usr/include/c++/10/bits/basic_string.h	/^      insert(const_iterator __p, initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:iterator	access:public	signature:(const_iterator __p,initializer_list<_CharT> __l)
insert	/usr/include/c++/10/bits/basic_string.h	/^      insert(const_iterator __p, size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:iterator	access:public	signature:(const_iterator __p,size_type __n,_CharT __c)
insert	/usr/include/c++/10/bits/basic_string.h	/^      insert(iterator __p, initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:(iterator __p,initializer_list<_CharT> __l)
insert	/usr/include/c++/10/bits/basic_string.h	/^      insert(iterator __p, size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:(iterator __p,size_type __n,_CharT __c)
insert	/usr/include/c++/10/bits/basic_string.h	/^      insert(size_type __pos, const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,const _CharT * __s)
insert	/usr/include/c++/10/bits/basic_string.h	/^      insert(size_type __pos, const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,const _CharT * __s,size_type __n)
insert	/usr/include/c++/10/bits/basic_string.h	/^      insert(size_type __pos, size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,size_type __n,_CharT __c)
insert	/usr/include/c++/10/bits/basic_string.h	/^      insert(size_type __pos1, const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos1,const basic_string & __str)
insert	/usr/include/c++/10/bits/basic_string.h	/^      insert(size_type __pos1, const basic_string& __str,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos1,const basic_string & __str,size_type __pos2,size_type __n=npos)
insert_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^      insert_iterator() = default;$/;"	p	class:std::insert_iterator	access:public	signature:()
insert_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^      insert_iterator(_Container& __x, _Iter __i)$/;"	f	class:std::insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Container & __x,_Iter __i)
insert_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    class insert_iterator$/;"	c	namespace:std	inherits:iterator<output_iterator_tag,void,void,void,void>
inserter	/usr/include/c++/10/bits/stl_iterator.h	/^    inserter(_Container& __x, _Iterator __i)$/;"	f	namespace:std	typeref:typename:insert_iterator<_Container>	signature:(_Container & __x,_Iterator __i)
inserter	/usr/include/c++/10/bits/stl_iterator.h	/^    inserter(_Container& __x, std::__detail::__range_iter_t<_Container> __i)$/;"	f	namespace:std	typeref:typename:insert_iterator<_Container>	signature:(_Container & __x,std::__detail::__range_iter_t<_Container> __i)
int16_t	/usr/include/x86_64-linux-gnu/bits/stdint-intn.h	/^typedef __int16_t int16_t;$/;"	t	typeref:typename:__int16_t
int32_t	/usr/include/x86_64-linux-gnu/bits/stdint-intn.h	/^typedef __int32_t int32_t;$/;"	t	typeref:typename:__int32_t
int64_t	/usr/include/x86_64-linux-gnu/bits/stdint-intn.h	/^typedef __int64_t int64_t;$/;"	t	typeref:typename:__int64_t
int8_t	/usr/include/x86_64-linux-gnu/bits/stdint-intn.h	/^typedef __int8_t int8_t;$/;"	t	typeref:typename:__int8_t
int_curr_symbol	/usr/include/locale.h	/^  char *int_curr_symbol;$/;"	m	struct:lconv	typeref:typename:char *	access:public
int_fast16_t	/usr/include/stdint.h	/^typedef int			int_fast16_t;$/;"	t	typeref:typename:int
int_fast16_t	/usr/include/stdint.h	/^typedef long int		int_fast16_t;$/;"	t	typeref:typename:long int
int_fast32_t	/usr/include/stdint.h	/^typedef int			int_fast32_t;$/;"	t	typeref:typename:int
int_fast32_t	/usr/include/stdint.h	/^typedef long int		int_fast32_t;$/;"	t	typeref:typename:long int
int_fast64_t	/usr/include/stdint.h	/^typedef long int		int_fast64_t;$/;"	t	typeref:typename:long int
int_fast64_t	/usr/include/stdint.h	/^typedef long long int		int_fast64_t;$/;"	t	typeref:typename:long long int
int_fast8_t	/usr/include/stdint.h	/^typedef signed char		int_fast8_t;$/;"	t	typeref:typename:signed char
int_frac_digits	/usr/include/locale.h	/^  char int_frac_digits;		\/* Int'l fractional digits.  *\/$/;"	m	struct:lconv	typeref:typename:char	access:public
int_least16_t	/usr/include/stdint.h	/^typedef __int_least16_t int_least16_t;$/;"	t	typeref:typename:__int_least16_t
int_least32_t	/usr/include/stdint.h	/^typedef __int_least32_t int_least32_t;$/;"	t	typeref:typename:__int_least32_t
int_least64_t	/usr/include/stdint.h	/^typedef __int_least64_t int_least64_t;$/;"	t	typeref:typename:__int_least64_t
int_least8_t	/usr/include/stdint.h	/^typedef __int_least8_t int_least8_t;$/;"	t	typeref:typename:__int_least8_t
int_n_cs_precedes	/usr/include/locale.h	/^  char int_n_cs_precedes;$/;"	m	struct:lconv	typeref:typename:char	access:public
int_n_sep_by_space	/usr/include/locale.h	/^  char int_n_sep_by_space;$/;"	m	struct:lconv	typeref:typename:char	access:public
int_n_sign_posn	/usr/include/locale.h	/^  char int_n_sign_posn;$/;"	m	struct:lconv	typeref:typename:char	access:public
int_p_cs_precedes	/usr/include/locale.h	/^  char int_p_cs_precedes;$/;"	m	struct:lconv	typeref:typename:char	access:public
int_p_sep_by_space	/usr/include/locale.h	/^  char int_p_sep_by_space;$/;"	m	struct:lconv	typeref:typename:char	access:public
int_p_sign_posn	/usr/include/locale.h	/^  char int_p_sign_posn;$/;"	m	struct:lconv	typeref:typename:char	access:public
int_type	/usr/include/c++/10/bits/basic_ios.h	/^      typedef typename _Traits::int_type             int_type;$/;"	t	class:std::basic_ios	typeref:typename:_Traits::int_type	access:public
int_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef __UINT_LEAST16_TYPE__	    int_type;$/;"	t	struct:std::char_traits	typeref:typename:__UINT_LEAST16_TYPE__	access:public
int_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef __UINT_LEAST32_TYPE__	    int_type;$/;"	t	struct:std::char_traits	typeref:typename:__UINT_LEAST32_TYPE__	access:public
int_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef int               int_type;$/;"	t	struct:std::char_traits	typeref:typename:int	access:public
int_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef make_unsigned<char16_t>::type int_type;$/;"	t	struct:std::char_traits	typeref:typename:make_unsigned<char16_t>::type	access:public
int_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef make_unsigned<char32_t>::type int_type;$/;"	t	struct:std::char_traits	typeref:typename:make_unsigned<char32_t>::type	access:public
int_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef typename _Char_types<_CharT>::int_type    int_type;$/;"	t	struct:__gnu_cxx::char_traits	typeref:typename:_Char_types<_CharT>::int_type	access:public
int_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef uint_least16_t    int_type;$/;"	t	struct:std::char_traits	typeref:typename:uint_least16_t	access:public
int_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef uint_least32_t    int_type;$/;"	t	struct:std::char_traits	typeref:typename:uint_least32_t	access:public
int_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef unsigned int      int_type;$/;"	t	struct:std::char_traits	typeref:typename:unsigned int	access:public
int_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef unsigned long   int_type;$/;"	t	struct:__gnu_cxx::_Char_types	typeref:typename:unsigned long	access:public
int_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef wint_t            int_type;$/;"	t	struct:std::char_traits	typeref:typename:wint_t	access:public
int_type	/usr/include/c++/10/bits/streambuf_iterator.h	/^      typedef typename _Traits::int_type		int_type;$/;"	t	class:std::istreambuf_iterator	typeref:typename:_Traits::int_type	access:public
int_type	/usr/include/c++/10/bits/streambuf_iterator.h	/^      typedef typename traits_type::int_type		   int_type;$/;"	t	function:std::__copy_move_a2	typeref:typename:traits_type::int_type
int_type	/usr/include/c++/10/bits/streambuf_iterator.h	/^      typedef typename traits_type::int_type		   int_type;$/;"	t	function:std::advance	typeref:typename:traits_type::int_type
int_type	/usr/include/c++/10/bits/streambuf_iterator.h	/^      typedef typename traits_type::int_type		   int_type;$/;"	t	function:std::find	typeref:typename:traits_type::int_type
internal	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags internal =    _S_internal;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
internal	/usr/include/c++/10/bits/ios_base.h	/^  internal(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
interrupted	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      interrupted = 				EINTR,$/;"	e	enum:std::errc	access:public
intmax_t	/usr/include/stdint.h	/^typedef __intmax_t		intmax_t;$/;"	t	typeref:typename:__intmax_t
intptr_t	/usr/include/stdint.h	/^typedef int			intptr_t;$/;"	t	typeref:typename:int
intptr_t	/usr/include/stdint.h	/^typedef long int		intptr_t;$/;"	t	typeref:typename:long int
invalid_argument	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      invalid_argument = 			EINVAL,$/;"	e	enum:std::errc	access:public
invalid_seek	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      invalid_seek = 				ESPIPE,$/;"	e	enum:std::errc	access:public
io_errc	/usr/include/c++/10/bits/ios_base.h	/^  enum class io_errc { stream = 1 };$/;"	g	namespace:std
io_error	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      io_error = 				EIO,$/;"	e	enum:std::errc	access:public
ios_base	/usr/include/c++/10/bits/ios_base.h	/^    ios_base() throw ();$/;"	p	class:std::ios_base	access:protected	signature:()
ios_base	/usr/include/c++/10/bits/ios_base.h	/^    ios_base(const ios_base&) = delete;$/;"	p	class:std::ios_base	access:public	signature:(const ios_base &)
ios_base	/usr/include/c++/10/bits/ios_base.h	/^    ios_base(const ios_base&);$/;"	p	class:std::ios_base	access:private	signature:(const ios_base &)
ios_base	/usr/include/c++/10/bits/ios_base.h	/^  class ios_base$/;"	c	namespace:std
iostate	/usr/include/c++/10/bits/ios_base.h	/^    typedef _Ios_Iostate iostate;$/;"	t	class:std::ios_base	typeref:typename:_Ios_Iostate	access:public
iostream_category	/usr/include/c++/10/bits/ios_base.h	/^  const error_category& iostream_category() noexcept;$/;"	p	namespace:std	typeref:typename:const error_category &	signature:()
is	/usr/include/c++/10/bits/locale_facets.h	/^      is(const char* __lo, const char* __hi, mask* __vec) const;$/;"	p	class:std::ctype	typeref:typename:const char *	access:public	signature:(const char * __lo,const char * __hi,mask * __vec) const
is	/usr/include/c++/10/bits/locale_facets.h	/^      is(const char_type *__lo, const char_type *__hi, mask *__vec) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(const char_type * __lo,const char_type * __hi,mask * __vec) const
is	/usr/include/c++/10/bits/locale_facets.h	/^      is(mask __m, char __c) const;$/;"	p	class:std::ctype	typeref:typename:bool	access:public	signature:(mask __m,char __c) const
is	/usr/include/c++/10/bits/locale_facets.h	/^      is(mask __m, char_type __c) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:bool	access:public	signature:(mask __m,char_type __c) const
is	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_inline.h	/^  is(const char* __low, const char* __high, mask* __vec) const$/;"	f	class:std::ctype	typeref:typename:const char *	signature:(const char * __low,const char * __high,mask * __vec) const
is	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_inline.h	/^  is(mask __m, char __c) const$/;"	f	class:std::ctype	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION bool	signature:(mask __m,char __c) const
is_a_directory	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      is_a_directory = 				EISDIR,$/;"	e	enum:std::errc	access:public
is_always_equal	/usr/include/c++/10/bits/alloc_traits.h	/^      using is_always_equal = true_type;$/;"	t	struct:std::allocator_traits	typeref:typename:true_type	access:public
is_always_equal	/usr/include/c++/10/bits/alloc_traits.h	/^      using is_always_equal$/;"	t	struct:std::allocator_traits	typeref:typename:__detected_or_t<typename is_empty<_Alloc>::type,__equal,_Alloc>	access:public
is_always_equal	/usr/include/c++/10/bits/allocator.h	/^      typedef true_type is_always_equal;$/;"	t	class:std::allocator	typeref:typename:true_type	access:public
is_always_equal	/usr/include/c++/10/bits/basic_string.h	/^      if _GLIBCXX17_CONSTEXPR (typename _Alloc_traits::is_always_equal{})$/;"	m	class:std::operator +::_Alloc_traits	typeref:meta:typename	file:
is_error_code_enum	/usr/include/c++/10/bits/ios_base.h	/^  template <> struct is_error_code_enum<io_errc> : public true_type { };$/;"	s	namespace:std	inherits:true_type
is_permutation	/usr/include/c++/10/bits/stl_algobase.h	/^    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_ForwardIterator1 __first1,_ForwardIterator1 __last1,_ForwardIterator2 __first2)
is_transparent	/usr/include/c++/10/bits/range_cmp.h	/^    using is_transparent = __is_transparent;$/;"	t	struct:std::identity	typeref:typename:__is_transparent	access:public
is_transparent	/usr/include/c++/10/bits/range_cmp.h	/^    using is_transparent = __is_transparent;$/;"	t	struct:std::ranges::equal_to	typeref:typename:__is_transparent	access:public
is_transparent	/usr/include/c++/10/bits/range_cmp.h	/^    using is_transparent = __is_transparent;$/;"	t	struct:std::ranges::greater	typeref:typename:__is_transparent	access:public
is_transparent	/usr/include/c++/10/bits/range_cmp.h	/^    using is_transparent = __is_transparent;$/;"	t	struct:std::ranges::greater_equal	typeref:typename:__is_transparent	access:public
is_transparent	/usr/include/c++/10/bits/range_cmp.h	/^    using is_transparent = __is_transparent;$/;"	t	struct:std::ranges::less	typeref:typename:__is_transparent	access:public
is_transparent	/usr/include/c++/10/bits/range_cmp.h	/^    using is_transparent = __is_transparent;$/;"	t	struct:std::ranges::less_equal	typeref:typename:__is_transparent	access:public
is_transparent	/usr/include/c++/10/bits/range_cmp.h	/^    using is_transparent = __is_transparent;$/;"	t	struct:std::ranges::not_equal_to	typeref:typename:__is_transparent	access:public
is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::bit_and	typeref:typename:__is_transparent	access:public
is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::bit_not	typeref:typename:__is_transparent	access:public
is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::bit_or	typeref:typename:__is_transparent	access:public
is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::bit_xor	typeref:typename:__is_transparent	access:public
is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::divides	typeref:typename:__is_transparent	access:public
is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::equal_to	typeref:typename:__is_transparent	access:public
is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::greater	typeref:typename:__is_transparent	access:public
is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::greater_equal	typeref:typename:__is_transparent	access:public
is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::less	typeref:typename:__is_transparent	access:public
is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::less_equal	typeref:typename:__is_transparent	access:public
is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::logical_and	typeref:typename:__is_transparent	access:public
is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::logical_not	typeref:typename:__is_transparent	access:public
is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::logical_or	typeref:typename:__is_transparent	access:public
is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::minus	typeref:typename:__is_transparent	access:public
is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::modulus	typeref:typename:__is_transparent	access:public
is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::multiplies	typeref:typename:__is_transparent	access:public
is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::negate	typeref:typename:__is_transparent	access:public
is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::not_equal_to	typeref:typename:__is_transparent	access:public
is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::plus	typeref:typename:__is_transparent	access:public
isalnum	/usr/include/c++/10/bits/locale_facets.h	/^    isalnum(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
isalnum	/usr/include/c++/10/bits/localefwd.h	/^    isalnum(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
isalnum_l	/usr/include/ctype.h	/^#  define isalnum_l(/;"	d	signature:(c,l)
isalpha	/usr/include/c++/10/bits/locale_facets.h	/^    isalpha(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
isalpha	/usr/include/c++/10/bits/localefwd.h	/^    isalpha(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
isalpha_l	/usr/include/ctype.h	/^#  define isalpha_l(/;"	d	signature:(c,l)
isascii	/usr/include/ctype.h	/^#  define isascii(/;"	d	signature:(c)
isascii	/usr/include/ctype.h	/^extern int isascii (int __c) __THROW;$/;"	p	typeref:typename:int	signature:(int __c)
isascii_l	/usr/include/ctype.h	/^#   define isascii_l(/;"	d	signature:(c,l)
isblank	/usr/include/c++/10/bits/locale_facets.h	/^    isblank(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
isblank	/usr/include/c++/10/bits/localefwd.h	/^    isblank(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
isblank_l	/usr/include/ctype.h	/^#  define isblank_l(/;"	d	signature:(c,l)
iscntrl	/usr/include/c++/10/bits/locale_facets.h	/^    iscntrl(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
iscntrl	/usr/include/c++/10/bits/localefwd.h	/^    iscntrl(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
iscntrl_l	/usr/include/ctype.h	/^#  define iscntrl_l(/;"	d	signature:(c,l)
isctype	/usr/include/ctype.h	/^extern int isctype (int __c, int __mask) __THROW;$/;"	p	typeref:typename:int	signature:(int __c,int __mask)
isdigit	/usr/include/c++/10/bits/locale_facets.h	/^    isdigit(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
isdigit	/usr/include/c++/10/bits/localefwd.h	/^    isdigit(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
isdigit_l	/usr/include/ctype.h	/^#  define isdigit_l(/;"	d	signature:(c,l)
isgraph	/usr/include/c++/10/bits/locale_facets.h	/^    isgraph(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
isgraph	/usr/include/c++/10/bits/localefwd.h	/^    isgraph(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
isgraph_l	/usr/include/ctype.h	/^#  define isgraph_l(/;"	d	signature:(c,l)
isinf	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define isinf /;"	d
isinff	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define isinff /;"	d
isinfl	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define isinfl /;"	d
islower	/usr/include/c++/10/bits/locale_facets.h	/^    islower(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
islower	/usr/include/c++/10/bits/localefwd.h	/^    islower(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
islower_l	/usr/include/ctype.h	/^#  define islower_l(/;"	d	signature:(c,l)
isnan	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define isnan /;"	d
isnanf	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define isnanf /;"	d
isnanl	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define isnanl /;"	d
isprint	/usr/include/c++/10/bits/locale_facets.h	/^    isprint(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
isprint	/usr/include/c++/10/bits/localefwd.h	/^    isprint(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
isprint_l	/usr/include/ctype.h	/^#  define isprint_l(/;"	d	signature:(c,l)
ispunct	/usr/include/c++/10/bits/locale_facets.h	/^    ispunct(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
ispunct	/usr/include/c++/10/bits/localefwd.h	/^    ispunct(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
ispunct_l	/usr/include/ctype.h	/^#  define ispunct_l(/;"	d	signature:(c,l)
isspace	/usr/include/c++/10/bits/locale_facets.h	/^    isspace(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_END_NAMESPACE_LDBL bool	signature:(_CharT __c,const locale & __loc)
isspace	/usr/include/c++/10/bits/localefwd.h	/^    isspace(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
isspace_l	/usr/include/ctype.h	/^#  define isspace_l(/;"	d	signature:(c,l)
istream_type	/usr/include/c++/10/bits/streambuf_iterator.h	/^      typedef basic_istream<_CharT, _Traits>		istream_type;$/;"	t	class:std::istreambuf_iterator	typeref:typename:basic_istream<_CharT,_Traits>	access:public
istreambuf_iterator	/usr/include/c++/10/bits/streambuf_iterator.h	/^      _GLIBCXX_CONSTEXPR istreambuf_iterator() _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::istreambuf_iterator	typeref:typename:_GLIBCXX_CONSTEXPR	access:public	signature:()
istreambuf_iterator	/usr/include/c++/10/bits/streambuf_iterator.h	/^      constexpr istreambuf_iterator(default_sentinel_t) noexcept$/;"	f	class:std::istreambuf_iterator	access:public	signature:(default_sentinel_t)
istreambuf_iterator	/usr/include/c++/10/bits/streambuf_iterator.h	/^      istreambuf_iterator(const istreambuf_iterator&) noexcept = default;$/;"	p	class:std::istreambuf_iterator	access:public	signature:(const istreambuf_iterator &)
istreambuf_iterator	/usr/include/c++/10/bits/streambuf_iterator.h	/^      istreambuf_iterator(istream_type& __s) _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::istreambuf_iterator	access:public	signature:(istream_type & __s)
istreambuf_iterator	/usr/include/c++/10/bits/streambuf_iterator.h	/^      istreambuf_iterator(streambuf_type* __s) _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::istreambuf_iterator	access:public	signature:(streambuf_type * __s)
istreambuf_iterator	/usr/include/c++/10/bits/streambuf_iterator.h	/^    class istreambuf_iterator$/;"	c	namespace:std	inherits:iterator<input_iterator_tag,_CharT,typename_Traits::off_type,_CharT*,_CharT>
isupper	/usr/include/c++/10/bits/locale_facets.h	/^    isupper(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
isupper	/usr/include/c++/10/bits/localefwd.h	/^    isupper(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
isupper_l	/usr/include/ctype.h	/^#  define isupper_l(/;"	d	signature:(c,l)
iswalnum	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^extern int iswalnum (wint_t __wc) __THROW;$/;"	p	typeref:typename:__BEGIN_DECLS int	signature:(wint_t __wc)
iswalnum_l	/usr/include/wctype.h	/^extern int iswalnum_l (wint_t __wc, locale_t __locale) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc,locale_t __locale)
iswalpha	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^extern int iswalpha (wint_t __wc) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc)
iswalpha_l	/usr/include/wctype.h	/^extern int iswalpha_l (wint_t __wc, locale_t __locale) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc,locale_t __locale)
iswblank	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^extern int iswblank (wint_t __wc) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc)
iswblank_l	/usr/include/wctype.h	/^extern int iswblank_l (wint_t __wc, locale_t __locale) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc,locale_t __locale)
iswcntrl	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^extern int iswcntrl (wint_t __wc) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc)
iswcntrl_l	/usr/include/wctype.h	/^extern int iswcntrl_l (wint_t __wc, locale_t __locale) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc,locale_t __locale)
iswctype	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^extern int iswctype (wint_t __wc, wctype_t __desc) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc,wctype_t __desc)
iswctype_l	/usr/include/wctype.h	/^extern int iswctype_l (wint_t __wc, wctype_t __desc, locale_t __locale)$/;"	p	typeref:typename:int	signature:(wint_t __wc,wctype_t __desc,locale_t __locale)
iswdigit	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^extern int iswdigit (wint_t __wc) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc)
iswdigit_l	/usr/include/wctype.h	/^extern int iswdigit_l (wint_t __wc, locale_t __locale) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc,locale_t __locale)
iswgraph	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^extern int iswgraph (wint_t __wc) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc)
iswgraph_l	/usr/include/wctype.h	/^extern int iswgraph_l (wint_t __wc, locale_t __locale) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc,locale_t __locale)
iswlower	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^extern int iswlower (wint_t __wc) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc)
iswlower_l	/usr/include/wctype.h	/^extern int iswlower_l (wint_t __wc, locale_t __locale) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc,locale_t __locale)
iswprint	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^extern int iswprint (wint_t __wc) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc)
iswprint_l	/usr/include/wctype.h	/^extern int iswprint_l (wint_t __wc, locale_t __locale) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc,locale_t __locale)
iswpunct	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^extern int iswpunct (wint_t __wc) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc)
iswpunct_l	/usr/include/wctype.h	/^extern int iswpunct_l (wint_t __wc, locale_t __locale) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc,locale_t __locale)
iswspace	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^extern int iswspace (wint_t __wc) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc)
iswspace_l	/usr/include/wctype.h	/^extern int iswspace_l (wint_t __wc, locale_t __locale) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc,locale_t __locale)
iswupper	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^extern int iswupper (wint_t __wc) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc)
iswupper_l	/usr/include/wctype.h	/^extern int iswupper_l (wint_t __wc, locale_t __locale) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc,locale_t __locale)
iswxdigit	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^extern int iswxdigit (wint_t __wc) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc)
iswxdigit_l	/usr/include/wctype.h	/^extern int iswxdigit_l (wint_t __wc, locale_t __locale) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc,locale_t __locale)
isxdigit	/usr/include/c++/10/bits/locale_facets.h	/^    isxdigit(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
isxdigit	/usr/include/c++/10/bits/localefwd.h	/^    isxdigit(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
isxdigit_l	/usr/include/ctype.h	/^#  define isxdigit_l(/;"	d	signature:(c,l)
it_interval	/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h	/^    struct timespec it_interval;$/;"	m	struct:itimerspec	typeref:struct:timespec	access:public
it_value	/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h	/^    struct timespec it_value;$/;"	m	struct:itimerspec	typeref:struct:timespec	access:public
iter	/usr/include/c++/10/bits/stl_iterator.h	/^      _Iter iter = _Iter();$/;"	m	class:std::insert_iterator	typeref:typename:_Iter	access:protected
iter_common_reference_t	/usr/include/c++/10/bits/iterator_concepts.h	/^    using iter_common_reference_t$/;"	t	namespace:std	typeref:typename:common_reference_t<iter_reference_t<_Tp>,iter_value_t<_Tp> &>
iter_difference_t	/usr/include/c++/10/bits/iterator_concepts.h	/^    using iter_difference_t = __detail::__iter_diff_t<remove_cvref_t<_Tp>>;$/;"	t	namespace:std	typeref:typename:__detail::__iter_diff_t<remove_cvref_t<_Tp>>
iter_move	/usr/include/c++/10/bits/iterator_concepts.h	/^	  && requires(_Tp&& __t) { iter_move(static_cast<_Tp&&>(__t)); };$/;"	p	namespace:std::ranges::__cust_imove	signature:(static_cast<_Tp &&> (__t))
iter_move	/usr/include/c++/10/bits/iterator_concepts.h	/^      inline constexpr __cust_imove::_IMove iter_move{};$/;"	v	namespace:std::ranges::__cust	typeref:typename:__cust_imove::_IMove
iter_move	/usr/include/c++/10/bits/iterator_concepts.h	/^      void iter_move();$/;"	p	namespace:std::ranges::__cust_imove	typeref:typename:void	signature:()
iter_move	/usr/include/c++/10/bits/stl_iterator.h	/^      iter_move(const counted_iterator& __i)$/;"	f	namespace:std	typeref:typename:iter_rvalue_reference_t<_It>	signature:(const counted_iterator & __i)
iter_move	/usr/include/c++/10/bits/stl_iterator.h	/^      iter_move(const move_iterator& __i)$/;"	f	namespace:std	typeref:typename:iter_rvalue_reference_t<_Iterator>	signature:(const move_iterator & __i)
iter_move	/usr/include/c++/10/bits/stl_iterator.h	/^      iter_move(const reverse_iterator& __i)$/;"	f	namespace:std	typeref:typename:iter_rvalue_reference_t<_Iterator>	signature:(const reverse_iterator & __i)
iter_move	/usr/include/c++/10/bits/stl_iterator.h	/^    iter_move(const common_iterator& __i)$/;"	f	namespace:std	typeref:typename:iter_rvalue_reference_t<_It>	signature:(const common_iterator & __i)
iter_reference_t	/usr/include/c++/10/bits/iterator_concepts.h	/^    using iter_reference_t = decltype(*std::declval<_Tp&>());$/;"	t	namespace:std
iter_rvalue_reference_t	/usr/include/c++/10/bits/iterator_concepts.h	/^    using iter_rvalue_reference_t$/;"	t	namespace:std
iter_swap	/usr/include/c++/10/bits/iterator_concepts.h	/^	    iter_swap(static_cast<_Tp&&>(__e1), static_cast<_Up&&>(__e2));$/;"	p	struct:std::ranges::__cust_iswap::_IterSwap	access:public	signature:(static_cast<_Tp &&> (__e1),static_cast<_Up &&> (__e2))
iter_swap	/usr/include/c++/10/bits/iterator_concepts.h	/^	  iter_swap(static_cast<_Tp&&>(__t), static_cast<_Up&&>(__u));$/;"	p	namespace:std::ranges::__cust_iswap	signature:(static_cast<_Tp &&> (__t),static_cast<_Up &&> (__u))
iter_swap	/usr/include/c++/10/bits/iterator_concepts.h	/^	ranges::iter_swap(__i1, __i1);$/;"	p	class:std::ranges	signature:(__i1,__i1)
iter_swap	/usr/include/c++/10/bits/iterator_concepts.h	/^	ranges::iter_swap(__i1, __i2);$/;"	p	class:std::ranges	signature:(__i1,__i2)
iter_swap	/usr/include/c++/10/bits/iterator_concepts.h	/^	ranges::iter_swap(__i2, __i1);$/;"	p	class:std::ranges	signature:(__i2,__i1)
iter_swap	/usr/include/c++/10/bits/iterator_concepts.h	/^	ranges::iter_swap(__i2, __i2);$/;"	p	class:std::ranges	signature:(__i2,__i2)
iter_swap	/usr/include/c++/10/bits/iterator_concepts.h	/^      void iter_swap(_It1, _It2) = delete;$/;"	p	namespace:std::ranges::__cust_iswap	typeref:typename:void	signature:(_It1,_It2)
iter_swap	/usr/include/c++/10/bits/iterator_concepts.h	/^    inline constexpr __cust_iswap::_IterSwap iter_swap{};$/;"	v	namespace:std::ranges::__cust	typeref:typename:__cust_iswap::_IterSwap
iter_swap	/usr/include/c++/10/bits/stl_algobase.h	/^	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)$/;"	f	struct:std::__iter_swap	typeref:typename:void	access:public	signature:(_ForwardIterator1 __a,_ForwardIterator2 __b)
iter_swap	/usr/include/c++/10/bits/stl_algobase.h	/^    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_ForwardIterator1 __a,_ForwardIterator2 __b)
iter_swap	/usr/include/c++/10/bits/stl_iterator.h	/^	iter_swap(const counted_iterator& __x,$/;"	f	namespace:std	typeref:typename:void	signature:(const counted_iterator & __x,const counted_iterator<_It2> & __y)
iter_swap	/usr/include/c++/10/bits/stl_iterator.h	/^	iter_swap(const move_iterator& __x, const move_iterator<_Iter2>& __y)$/;"	f	namespace:std	typeref:typename:void	signature:(const move_iterator & __x,const move_iterator<_Iter2> & __y)
iter_swap	/usr/include/c++/10/bits/stl_iterator.h	/^	iter_swap(const reverse_iterator& __x,$/;"	f	namespace:std	typeref:typename:void	signature:(const reverse_iterator & __x,const reverse_iterator<_Iter2> & __y)
iter_swap	/usr/include/c++/10/bits/stl_iterator.h	/^      iter_swap(const common_iterator& __x,$/;"	f	namespace:std	typeref:typename:void	signature:(const common_iterator & __x,const common_iterator<_It2,_Sent2> & __y)
iter_type	/usr/include/c++/10/bits/locale_facets.h	/^      typedef _InIter			iter_type;$/;"	t	class:std::num_get	typeref:typename:_InIter	access:public
iter_type	/usr/include/c++/10/bits/locale_facets.h	/^      typedef _OutIter		iter_type;$/;"	t	class:std::num_put	typeref:typename:_OutIter	access:public
iter_value_t	/usr/include/c++/10/bits/iterator_concepts.h	/^    using iter_value_t = __detail::__iter_value_t<remove_cvref_t<_Tp>>;$/;"	t	namespace:std	typeref:typename:__detail::__iter_value_t<remove_cvref_t<_Tp>>
iterator	/usr/include/c++/10/bits/basic_string.h	/^      typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;$/;"	t	class:std::basic_string	typeref:typename:__gnu_cxx::__normal_iterator<pointer,basic_string>	access:public
iterator	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^    struct iterator$/;"	s	namespace:std
iterator_category	/usr/include/c++/10/bits/iterator_concepts.h	/^	= !requires { typename _Iter::iterator_category; };$/;"	m	class:std::__detail::_Iter	typeref:meta:typename
iterator_category	/usr/include/c++/10/bits/iterator_concepts.h	/^	requires requires { typename _Iter::iterator_category; }$/;"	m	class:std::__iterator_traits::_Iter	typeref:meta:typename
iterator_category	/usr/include/c++/10/bits/iterator_concepts.h	/^	typename _Iter::iterator_category;$/;"	m	class:std::__detail::_Iter	typeref:meta:typename
iterator_category	/usr/include/c++/10/bits/iterator_concepts.h	/^      using iterator_category = output_iterator_tag;$/;"	t	struct:std::__iterator_traits	typeref:typename:output_iterator_tag	access:public
iterator_category	/usr/include/c++/10/bits/iterator_concepts.h	/^      using iterator_category = typename _Iterator::iterator_category;$/;"	t	struct:std::__iterator_traits	typeref:typename:_Iterator::iterator_category	access:public
iterator_category	/usr/include/c++/10/bits/iterator_concepts.h	/^      using iterator_category = typename __cat<_Iterator>::type;$/;"	t	struct:std::__iterator_traits	typeref:typename:__cat<_Iterator>::type	access:public
iterator_category	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef typename __traits_type::iterator_category iterator_category;$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:__traits_type::iterator_category	access:public
iterator_category	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef typename __traits_type::iterator_category iterator_category;$/;"	t	class:std::move_iterator	typeref:typename:__traits_type::iterator_category	access:public
iterator_category	/usr/include/c++/10/bits/stl_iterator.h	/^      using iterator_category = __detail::__clamp_iter_cat<$/;"	t	struct:std::iterator_traits	typeref:typename:__detail::__clamp_iter_cat<typename iterator_traits<_It>::iterator_category,forward_iterator_tag,input_iterator_tag>	access:public
iterator_category	/usr/include/c++/10/bits/stl_iterator.h	/^      using iterator_category$/;"	t	class:std::move_iterator	typeref:typename:__detail::__clamp_iter_cat<__base_cat,random_access_iterator_tag>	access:public
iterator_category	/usr/include/c++/10/bits/stl_iterator.h	/^      using iterator_category$/;"	t	class:std::reverse_iterator	typeref:typename:__detail::__clamp_iter_cat<typename __traits_type::iterator_category,random_access_iterator_tag>	access:public
iterator_category	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef _Category  iterator_category;$/;"	t	struct:std::iterator	typeref:typename:_Category	access:public
iterator_category	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef random_access_iterator_tag iterator_category;$/;"	t	struct:std::iterator_traits	typeref:typename:random_access_iterator_tag	access:public
iterator_category	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::iterator_category iterator_category;$/;"	t	struct:std::__iterator_traits	typeref:typename:_Iterator::iterator_category	access:public
iterator_category	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::iterator_category iterator_category;$/;"	t	struct:std::iterator_traits	typeref:typename:_Iterator::iterator_category	access:public
iterator_category	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      using iterator_category = random_access_iterator_tag;$/;"	t	struct:std::iterator_traits	typeref:typename:random_access_iterator_tag	access:public
iterator_concept	/usr/include/c++/10/bits/iterator_concepts.h	/^      requires requires { typename __iter_traits<_Iter>::iterator_concept; }$/;"	m	class:std::__detail::__iter_traits<_Iter>	typeref:meta:typename
iterator_concept	/usr/include/c++/10/bits/stl_iterator.h	/^      using iterator_concept = conditional_t<forward_iterator<_It>,$/;"	t	struct:std::iterator_traits	typeref:typename:conditional_t<forward_iterator<_It>,forward_iterator_tag,input_iterator_tag>	access:public
iterator_concept	/usr/include/c++/10/bits/stl_iterator.h	/^      using iterator_concept = input_iterator_tag;$/;"	t	class:std::move_iterator	typeref:typename:input_iterator_tag	access:public
iterator_concept	/usr/include/c++/10/bits/stl_iterator.h	/^      using iterator_concept = std::__detail::__iter_concept<_Iterator>;$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:std::__detail::__iter_concept<_Iterator>	access:public
iterator_concept	/usr/include/c++/10/bits/stl_iterator.h	/^      using iterator_concept$/;"	t	class:std::reverse_iterator	typeref:typename:conditional_t<random_access_iterator<_Iterator>,random_access_iterator_tag,bidirectional_iterator_tag>	access:public
iterator_concept	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      using iterator_concept  = contiguous_iterator_tag;$/;"	t	struct:std::iterator_traits	typeref:typename:contiguous_iterator_tag	access:public
iterator_t	/usr/include/c++/10/bits/range_access.h	/^    using iterator_t = std::__detail::__range_iter_t<_Tp>;$/;"	t	namespace:std::ranges	typeref:typename:std::__detail::__range_iter_t<_Tp>
iterator_traits	/usr/include/c++/10/bits/stl_iterator.h	/^    struct iterator_traits<common_iterator<_It, _Sent>>$/;"	s	namespace:std
iterator_traits	/usr/include/c++/10/bits/stl_iterator.h	/^    struct iterator_traits<counted_iterator<_It>> : iterator_traits<_It>$/;"	s	namespace:std	inherits:iterator_traits<_It>
iterator_traits	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^    struct iterator_traits$/;"	s	namespace:std
iterator_traits	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^    struct iterator_traits$/;"	s	namespace:std	inherits:__iterator_traits<_Iterator>
iterator_traits	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^    struct iterator_traits<_Tp*>$/;"	s	namespace:std
iterator_traits	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^    struct iterator_traits<const _Tp*>$/;"	s	namespace:std
iterator_type	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef _Iterator					iterator_type;$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:_Iterator	access:public
iterator_type	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef _Iterator					iterator_type;$/;"	t	class:std::reverse_iterator	typeref:typename:_Iterator	access:public
iterator_type	/usr/include/c++/10/bits/stl_iterator.h	/^      using iterator_type = _It;$/;"	t	class:std::counted_iterator	typeref:typename:_It	access:public
iterator_type	/usr/include/c++/10/bits/stl_iterator.h	/^      using iterator_type = _Iterator;$/;"	t	class:std::move_iterator	typeref:typename:_Iterator	access:public
itimerspec	/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h	/^struct itimerspec$/;"	s
itimerspec::it_interval	/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h	/^    struct timespec it_interval;$/;"	m	struct:itimerspec	typeref:struct:timespec	access:public
itimerspec::it_value	/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h	/^    struct timespec it_value;$/;"	m	struct:itimerspec	typeref:struct:timespec	access:public
iword	/usr/include/c++/10/bits/ios_base.h	/^    iword(int __ix)$/;"	f	class:std::ios_base	typeref:typename:long &	access:public	signature:(int __ix)
jitcnt	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  __syscall_slong_t jitcnt;	\/* jitter limit exceeded (ro) *\/$/;"	m	struct:timex	typeref:typename:__syscall_slong_t	access:public
jitter	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  __syscall_slong_t jitter;	\/* pps jitter (us) (ro) *\/$/;"	m	struct:timex	typeref:typename:__syscall_slong_t	access:public
jrand48	/usr/include/stdlib.h	/^extern long int jrand48 (unsigned short int __xsubi[3])$/;"	p	typeref:typename:long int	signature:(unsigned short int __xsubi[3])
jrand48_r	/usr/include/stdlib.h	/^extern int jrand48_r (unsigned short int __xsubi[3],$/;"	p	typeref:typename:int	signature:(unsigned short int __xsubi[3],struct drand48_data * __restrict __buffer,long int * __restrict __result)
key_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __key_t key_t;$/;"	t	typeref:typename:__key_t
l64a	/usr/include/stdlib.h	/^extern char *l64a (long int __n) __THROW __wur;$/;"	p	typeref:typename:char *	signature:(long int __n)
labs	/usr/include/stdlib.h	/^extern long int labs (long int __x) __THROW __attribute__ ((__const__)) __wur;$/;"	p	typeref:typename:long int	signature:(long int __x)
lcong48	/usr/include/stdlib.h	/^extern void lcong48 (unsigned short int __param[7]) __THROW __nonnull ((1));$/;"	p	typeref:typename:void	signature:(unsigned short int __param[7])
lcong48_r	/usr/include/stdlib.h	/^extern int lcong48_r (unsigned short int __param[7],$/;"	p	typeref:typename:int	signature:(unsigned short int __param[7],struct drand48_data * __buffer)
lconv	/usr/include/locale.h	/^struct lconv$/;"	s
lconv::__int_n_cs_precedes	/usr/include/locale.h	/^  char __int_n_cs_precedes;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::__int_n_sep_by_space	/usr/include/locale.h	/^  char __int_n_sep_by_space;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::__int_n_sign_posn	/usr/include/locale.h	/^  char __int_n_sign_posn;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::__int_p_cs_precedes	/usr/include/locale.h	/^  char __int_p_cs_precedes;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::__int_p_sep_by_space	/usr/include/locale.h	/^  char __int_p_sep_by_space;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::__int_p_sign_posn	/usr/include/locale.h	/^  char __int_p_sign_posn;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::currency_symbol	/usr/include/locale.h	/^  char *currency_symbol;	\/* Local currency symbol.  *\/$/;"	m	struct:lconv	typeref:typename:char *	access:public
lconv::decimal_point	/usr/include/locale.h	/^  char *decimal_point;		\/* Decimal point character.  *\/$/;"	m	struct:lconv	typeref:typename:char *	access:public
lconv::frac_digits	/usr/include/locale.h	/^  char frac_digits;		\/* Local fractional digits.  *\/$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::grouping	/usr/include/locale.h	/^  char *grouping;$/;"	m	struct:lconv	typeref:typename:char *	access:public
lconv::int_curr_symbol	/usr/include/locale.h	/^  char *int_curr_symbol;$/;"	m	struct:lconv	typeref:typename:char *	access:public
lconv::int_frac_digits	/usr/include/locale.h	/^  char int_frac_digits;		\/* Int'l fractional digits.  *\/$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::int_n_cs_precedes	/usr/include/locale.h	/^  char int_n_cs_precedes;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::int_n_sep_by_space	/usr/include/locale.h	/^  char int_n_sep_by_space;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::int_n_sign_posn	/usr/include/locale.h	/^  char int_n_sign_posn;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::int_p_cs_precedes	/usr/include/locale.h	/^  char int_p_cs_precedes;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::int_p_sep_by_space	/usr/include/locale.h	/^  char int_p_sep_by_space;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::int_p_sign_posn	/usr/include/locale.h	/^  char int_p_sign_posn;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::mon_decimal_point	/usr/include/locale.h	/^  char *mon_decimal_point;	\/* Decimal point character.  *\/$/;"	m	struct:lconv	typeref:typename:char *	access:public
lconv::mon_grouping	/usr/include/locale.h	/^  char *mon_grouping;		\/* Like `grouping' element (above).  *\/$/;"	m	struct:lconv	typeref:typename:char *	access:public
lconv::mon_thousands_sep	/usr/include/locale.h	/^  char *mon_thousands_sep;	\/* Thousands separator.  *\/$/;"	m	struct:lconv	typeref:typename:char *	access:public
lconv::n_cs_precedes	/usr/include/locale.h	/^  char n_cs_precedes;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::n_sep_by_space	/usr/include/locale.h	/^  char n_sep_by_space;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::n_sign_posn	/usr/include/locale.h	/^  char n_sign_posn;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::negative_sign	/usr/include/locale.h	/^  char *negative_sign;		\/* Sign for negative values.  *\/$/;"	m	struct:lconv	typeref:typename:char *	access:public
lconv::p_cs_precedes	/usr/include/locale.h	/^  char p_cs_precedes;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::p_sep_by_space	/usr/include/locale.h	/^  char p_sep_by_space;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::p_sign_posn	/usr/include/locale.h	/^  char p_sign_posn;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::positive_sign	/usr/include/locale.h	/^  char *positive_sign;		\/* Sign for positive values.  *\/$/;"	m	struct:lconv	typeref:typename:char *	access:public
lconv::thousands_sep	/usr/include/locale.h	/^  char *thousands_sep;		\/* Thousands separator.  *\/$/;"	m	struct:lconv	typeref:typename:char *	access:public
ldexpf	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define ldexpf /;"	d
ldexpl	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define ldexpl /;"	d
ldiv	/usr/include/stdlib.h	/^extern ldiv_t ldiv (long int __numer, long int __denom)$/;"	p	typeref:typename:ldiv_t	signature:(long int __numer,long int __denom)
ldiv_t	/usr/include/stdlib.h	/^  } ldiv_t;$/;"	t	typeref:struct:__anonf3b68ce80208
le16toh	/usr/include/endian.h	/^#  define le16toh(/;"	d	signature:(x)
le32toh	/usr/include/endian.h	/^#  define le32toh(/;"	d	signature:(x)
le64toh	/usr/include/endian.h	/^#  define le64toh(/;"	d	signature:(x)
left	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags left =        _S_left;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
left	/usr/include/c++/10/bits/ios_base.h	/^  left(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
length	/usr/include/c++/10/bits/basic_string.h	/^      length() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:() const
length	/usr/include/c++/10/bits/char_traits.h	/^      length(const char_type* __s)$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX17_CONSTEXPR size_t	access:public	signature:(const char_type * __s)
length	/usr/include/c++/10/bits/char_traits.h	/^      length(const char_type* __s);$/;"	p	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX14_CONSTEXPR std::size_t	access:public	signature:(const char_type * __s)
length	/usr/include/c++/10/bits/char_traits.h	/^    length(const char_type* __p)$/;"	f	class:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX14_CONSTEXPR std::size_t	signature:(const char_type * __p)
less	/usr/include/c++/10/bits/range_cmp.h	/^  struct less$/;"	s	namespace:std::ranges
less	/usr/include/c++/10/bits/stl_function.h	/^    struct less : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
less	/usr/include/c++/10/bits/stl_function.h	/^    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp*,_Tp*,bool>
less	/usr/include/c++/10/bits/stl_function.h	/^    struct less<void>$/;"	s	namespace:std
less_equal	/usr/include/c++/10/bits/range_cmp.h	/^  struct less_equal$/;"	s	namespace:std::ranges
less_equal	/usr/include/c++/10/bits/stl_function.h	/^    struct less_equal : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
less_equal	/usr/include/c++/10/bits/stl_function.h	/^    struct less_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp*,_Tp*,bool>
less_equal	/usr/include/c++/10/bits/stl_function.h	/^    struct less_equal<void>$/;"	s	namespace:std
lexicographical_compare	/usr/include/c++/10/bits/stl_algobase.h	/^    lexicographical_compare(_II1 __first1, _II1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2)
lexicographical_compare	/usr/include/c++/10/bits/stl_algobase.h	/^    lexicographical_compare(_II1 __first1, _II1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2,_Compare __comp)
lexicographical_compare_three_way	/usr/include/c++/10/bits/stl_algobase.h	/^    lexicographical_compare_three_way(_InputIter1 __first1,$/;"	f	namespace:std	typeref:typename:auto	signature:(_InputIter1 __first1,_InputIter1 __last1,_InputIter2 __first2,_InputIter2 __last2)
lexicographical_compare_three_way	/usr/include/c++/10/bits/stl_algobase.h	/^    lexicographical_compare_three_way(_InputIter1 __first1,$/;"	f	namespace:std	typeref:typename:decltype (__comp (* __first1,* __first2))	signature:(_InputIter1 __first1,_InputIter1 __last1,_InputIter2 __first2,_InputIter2 __last2,_Comp __comp)
literals	/usr/include/c++/10/bits/basic_string.h	/^  inline namespace literals$/;"	n	namespace:std
literals	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^  inline namespace literals {$/;"	n	namespace:std
llabs	/usr/include/stdlib.h	/^__extension__ extern long long int llabs (long long int __x)$/;"	p	typeref:typename:__extension__ long long int	signature:(long long int __x)
lldiv	/usr/include/stdlib.h	/^__extension__ extern lldiv_t lldiv (long long int __numer,$/;"	p	typeref:typename:__extension__ lldiv_t	signature:(long long int __numer,long long int __denom)
lldiv_t	/usr/include/stdlib.h	/^  } lldiv_t;$/;"	t	typeref:struct:__anonf3b68ce80308
locale	/usr/include/c++/10/bits/locale_classes.h	/^      locale(const locale& __other, _Facet* __f);$/;"	p	class:std::locale	access:public	signature:(const locale & __other,_Facet * __f)
locale	/usr/include/c++/10/bits/locale_classes.h	/^    locale() throw();$/;"	p	class:std::locale	access:public	signature:()
locale	/usr/include/c++/10/bits/locale_classes.h	/^    locale(_Impl*) throw();$/;"	p	class:std::locale	access:private	signature:(_Impl *)
locale	/usr/include/c++/10/bits/locale_classes.h	/^    locale(const char* __s);$/;"	p	class:std::locale	access:public	signature:(const char * __s)
locale	/usr/include/c++/10/bits/locale_classes.h	/^    locale(const locale& __base, const char* __s, category __cat);$/;"	p	class:std::locale	access:public	signature:(const locale & __base,const char * __s,category __cat)
locale	/usr/include/c++/10/bits/locale_classes.h	/^    locale(const locale& __base, const locale& __add, category __cat);$/;"	p	class:std::locale	access:public	signature:(const locale & __base,const locale & __add,category __cat)
locale	/usr/include/c++/10/bits/locale_classes.h	/^    locale(const locale& __base, const std::string& __s, category __cat)$/;"	f	class:std::locale	access:public	signature:(const locale & __base,const std::string & __s,category __cat)
locale	/usr/include/c++/10/bits/locale_classes.h	/^    locale(const locale& __other) throw();$/;"	p	class:std::locale	access:public	signature:(const locale & __other)
locale	/usr/include/c++/10/bits/locale_classes.h	/^    locale(const std::string& __s) : locale(__s.c_str()) { }$/;"	f	class:std::locale	access:public	signature:(const std::string & __s)
locale	/usr/include/c++/10/bits/locale_classes.h	/^  class locale$/;"	c	namespace:std
locale_t	/usr/include/x86_64-linux-gnu/bits/types/locale_t.h	/^typedef __locale_t locale_t;$/;"	t	typeref:typename:__locale_t
localeconv	/usr/include/locale.h	/^extern struct lconv *localeconv (void) __THROW;$/;"	p	typeref:struct:lconv *	signature:(void)
localtime	/usr/include/time.h	/^extern struct tm *localtime (const time_t *__timer) __THROW;$/;"	p	typeref:struct:tm *	signature:(const time_t * __timer)
localtime_r	/usr/include/time.h	/^extern struct tm *localtime_r (const time_t *__restrict __timer,$/;"	p	typeref:struct:tm *	signature:(const time_t * __restrict __timer,struct tm * __restrict __tp)
loff_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __loff_t loff_t;$/;"	t	typeref:typename:__loff_t
log10f	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define log10f /;"	d
log10l	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define log10l /;"	d
logf	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define logf /;"	d
logical_and	/usr/include/c++/10/bits/stl_function.h	/^    struct logical_and : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
logical_and	/usr/include/c++/10/bits/stl_function.h	/^    struct logical_and<void>$/;"	s	namespace:std
logical_not	/usr/include/c++/10/bits/stl_function.h	/^    struct logical_not : public unary_function<_Tp, bool>$/;"	s	namespace:std	inherits:unary_function<_Tp,bool>
logical_not	/usr/include/c++/10/bits/stl_function.h	/^    struct logical_not<void>$/;"	s	namespace:std
logical_or	/usr/include/c++/10/bits/stl_function.h	/^    struct logical_or : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
logical_or	/usr/include/c++/10/bits/stl_function.h	/^    struct logical_or<void>$/;"	s	namespace:std
logl	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define logl /;"	d
lower	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h	/^    static const mask lower 	= _ISlower;$/;"	m	struct:std::ctype_base	typeref:typename:const mask	access:public
lower_bound	/usr/include/c++/10/bits/stl_algobase.h	/^    lower_bound(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __val)
lrand48	/usr/include/stdlib.h	/^extern long int lrand48 (void) __THROW;$/;"	p	typeref:typename:long int	signature:(void)
lrand48_r	/usr/include/stdlib.h	/^extern int lrand48_r (struct drand48_data *__restrict __buffer,$/;"	p	typeref:typename:int	signature:(struct drand48_data * __restrict __buffer,long int * __restrict __result)
lt	/usr/include/c++/10/bits/char_traits.h	/^      lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR bool	access:public	signature:(const char_type & __c1,const char_type & __c2)
lt	/usr/include/c++/10/bits/char_traits.h	/^      lt(const char_type& __c1, const char_type& __c2) noexcept$/;"	f	struct:std::char_traits	typeref:typename:bool	access:public	signature:(const char_type & __c1,const char_type & __c2)
lt	/usr/include/c++/10/bits/char_traits.h	/^      lt(const char_type& __c1, const char_type& __c2)$/;"	f	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR bool	access:public	signature:(const char_type & __c1,const char_type & __c2)
main	src/main.cpp	/^int main(){$/;"	f	typeref:typename:int	signature:()
main	src/secondbin/main.cpp	/^int main(){$/;"	f	typeref:typename:int	signature:()
make_error_code	/usr/include/c++/10/bits/ios_base.h	/^  make_error_code(io_errc __e) noexcept$/;"	f	namespace:std	typeref:typename:error_code	signature:(io_errc __e)
make_error_condition	/usr/include/c++/10/bits/ios_base.h	/^  make_error_condition(io_errc __e) noexcept$/;"	f	namespace:std	typeref:typename:error_condition	signature:(io_errc __e)
make_exception_ptr	/usr/include/c++/10/bits/exception_ptr.h	/^    make_exception_ptr(_Ex __ex) _GLIBCXX_USE_NOEXCEPT$/;"	f	namespace:std	typeref:typename:exception_ptr	signature:(_Ex __ex)
make_exception_ptr	/usr/include/c++/10/bits/exception_ptr.h	/^  exception_ptr make_exception_ptr(_Ex) _GLIBCXX_USE_NOEXCEPT;$/;"	p	namespace:std	typeref:typename:exception_ptr	signature:(_Ex)
make_move_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    make_move_iterator(_Iterator __i)$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator<_Iterator>	signature:(_Iterator __i)
make_pair	/usr/include/c++/10/bits/stl_pair.h	/^    make_pair(_T1 __x, _T2 __y)$/;"	f	namespace:std	typeref:typename:pair<_T1,_T2>	signature:(_T1 __x,_T2 __y)
make_pair	/usr/include/c++/10/bits/stl_pair.h	/^    make_pair(_T1&& __x, _T2&& __y)$/;"	f	namespace:std	typeref:typename:pair<typename __decay_and_strip<_T1>::__type,typename __decay_and_strip<_T2>::__type>	signature:(_T1 && __x,_T2 && __y)
make_reverse_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    make_reverse_iterator(_Iterator __i)$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>	signature:(_Iterator __i)
malloc	/usr/include/stdlib.h	/^extern void *malloc (size_t __size) __THROW __attribute_malloc__$/;"	p	typeref:typename:void *	signature:(size_t __size)
mask	/usr/include/c++/10/bits/locale_facets.h	/^      typedef typename __ctype_abstract_base<_CharT>::mask mask;$/;"	t	class:std::ctype	typeref:typename:__ctype_abstract_base<_CharT>::mask	access:public
mask	/usr/include/c++/10/bits/locale_facets.h	/^      typedef typename ctype<_CharT>::mask  mask;$/;"	t	class:std::ctype_byname	typeref:typename:ctype<_CharT>::mask	access:public
mask	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h	/^    typedef unsigned short 	mask;$/;"	t	struct:std::ctype_base	typeref:typename:unsigned short	access:public
max	/usr/include/c++/10/bits/stl_algobase.h	/^    max(const _Tp& __a, const _Tp& __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR const _Tp &	signature:(const _Tp & __a,const _Tp & __b)
max	/usr/include/c++/10/bits/stl_algobase.h	/^    max(const _Tp& __a, const _Tp& __b, _Compare __comp)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR const _Tp &	signature:(const _Tp & __a,const _Tp & __b,_Compare __comp)
max_align_t	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^} max_align_t;$/;"	t	typeref:struct:__anonf11eee040108
max_size	/usr/include/c++/10/bits/alloc_traits.h	/^      max_size(const _Alloc& __a) noexcept$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const _Alloc & __a)
max_size	/usr/include/c++/10/bits/alloc_traits.h	/^      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const allocator_type & __a)
max_size	/usr/include/c++/10/bits/basic_string.h	/^      max_size() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:() const
max_size	/usr/include/c++/10/ext/alloc_traits.h	/^    static size_type max_size(const _Alloc& __a)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:size_type	access:public	signature:(const _Alloc & __a)
max_size	/usr/include/c++/10/ext/new_allocator.h	/^      max_size() const _GLIBCXX_USE_NOEXCEPT$/;"	f	class:__gnu_cxx::new_allocator	typeref:typename:size_type	access:public	signature:() const
maxerror	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  __syscall_slong_t maxerror;	\/* maximum error (usec) *\/$/;"	m	struct:timex	typeref:typename:__syscall_slong_t	access:public
mblen	/usr/include/stdlib.h	/^extern int mblen (const char *__s, size_t __n) __THROW;$/;"	p	typeref:typename:int	signature:(const char * __s,size_t __n)
mbrlen	/usr/include/wchar.h	/^extern size_t mbrlen (const char *__restrict __s, size_t __n,$/;"	p	typeref:typename:size_t	signature:(const char * __restrict __s,size_t __n,mbstate_t * __restrict __ps)
mbrtowc	/usr/include/wchar.h	/^extern size_t mbrtowc (wchar_t *__restrict __pwc,$/;"	p	typeref:typename:size_t	signature:(wchar_t * __restrict __pwc,const char * __restrict __s,size_t __n,mbstate_t * __restrict __p)
mbsinit	/usr/include/wchar.h	/^extern int mbsinit (const mbstate_t *__ps) __THROW __attribute_pure__;$/;"	p	typeref:typename:int	signature:(const mbstate_t * __ps)
mbsnrtowcs	/usr/include/wchar.h	/^extern size_t mbsnrtowcs (wchar_t *__restrict __dst,$/;"	p	typeref:typename:size_t	signature:(wchar_t * __restrict __dst,const char ** __restrict __src,size_t __nmc,size_t __len,mbstate_t * __restrict __ps)
mbsrtowcs	/usr/include/wchar.h	/^extern size_t mbsrtowcs (wchar_t *__restrict __dst,$/;"	p	typeref:typename:size_t	signature:(wchar_t * __restrict __dst,const char ** __restrict __src,size_t __len,mbstate_t * __restrict __ps)
mbstate_t	/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h	/^typedef __mbstate_t mbstate_t;$/;"	t	typeref:typename:__mbstate_t
mbstowcs	/usr/include/stdlib.h	/^extern size_t mbstowcs (wchar_t *__restrict  __pwcs,$/;"	p	typeref:typename:size_t	signature:(wchar_t * __restrict __pwcs,const char * __restrict __s,size_t __n)
mbtowc	/usr/include/stdlib.h	/^extern int mbtowc (wchar_t *__restrict __pwc,$/;"	p	typeref:typename:int	signature:(wchar_t * __restrict __pwc,const char * __restrict __s,size_t __n)
mem_fun	/usr/include/c++/10/bits/stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)() const)$/;"	f	namespace:std	typeref:typename:const_mem_fun_t<_Ret,_Tp>	signature:(_Ret (_Tp::* __f)()const)
mem_fun	/usr/include/c++/10/bits/stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)())$/;"	f	namespace:std	typeref:typename:mem_fun_t<_Ret,_Tp>	signature:(_Ret (_Tp::* __f)())
mem_fun	/usr/include/c++/10/bits/stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)(_Arg) const)$/;"	f	namespace:std	typeref:typename:const_mem_fun1_t<_Ret,_Tp,_Arg>	signature:(_Ret (_Tp::* __f)(_Arg)const)
mem_fun	/usr/include/c++/10/bits/stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)(_Arg))$/;"	f	namespace:std	typeref:typename:mem_fun1_t<_Ret,_Tp,_Arg>	signature:(_Ret (_Tp::* __f)(_Arg))
mem_fun1_ref_t	/usr/include/c++/10/bits/stl_function.h	/^      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))$/;"	f	class:std::mem_fun1_ref_t	access:public	signature:(_Ret (_Tp::* __pf)(_Arg))
mem_fun1_ref_t	/usr/include/c++/10/bits/stl_function.h	/^    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>$/;"	c	namespace:std	inherits:binary_function<_Tp,_Arg,_Ret>
mem_fun1_t	/usr/include/c++/10/bits/stl_function.h	/^      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))$/;"	f	class:std::mem_fun1_t	access:public	signature:(_Ret (_Tp::* __pf)(_Arg))
mem_fun1_t	/usr/include/c++/10/bits/stl_function.h	/^    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>$/;"	c	namespace:std	inherits:binary_function<_Tp*,_Arg,_Ret>
mem_fun_ref	/usr/include/c++/10/bits/stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)() const)$/;"	f	namespace:std	typeref:typename:const_mem_fun_ref_t<_Ret,_Tp>	signature:(_Ret (_Tp::* __f)()const)
mem_fun_ref	/usr/include/c++/10/bits/stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)())$/;"	f	namespace:std	typeref:typename:mem_fun_ref_t<_Ret,_Tp>	signature:(_Ret (_Tp::* __f)())
mem_fun_ref	/usr/include/c++/10/bits/stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)$/;"	f	namespace:std	typeref:typename:const_mem_fun1_ref_t<_Ret,_Tp,_Arg>	signature:(_Ret (_Tp::* __f)(_Arg)const)
mem_fun_ref	/usr/include/c++/10/bits/stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))$/;"	f	namespace:std	typeref:typename:mem_fun1_ref_t<_Ret,_Tp,_Arg>	signature:(_Ret (_Tp::* __f)(_Arg))
mem_fun_ref_t	/usr/include/c++/10/bits/stl_function.h	/^      mem_fun_ref_t(_Ret (_Tp::*__pf)())$/;"	f	class:std::mem_fun_ref_t	access:public	signature:(_Ret (_Tp::* __pf)())
mem_fun_ref_t	/usr/include/c++/10/bits/stl_function.h	/^    class mem_fun_ref_t : public unary_function<_Tp, _Ret>$/;"	c	namespace:std	inherits:unary_function<_Tp,_Ret>
mem_fun_t	/usr/include/c++/10/bits/stl_function.h	/^      mem_fun_t(_Ret (_Tp::*__pf)())$/;"	f	class:std::mem_fun_t	access:public	signature:(_Ret (_Tp::* __pf)())
mem_fun_t	/usr/include/c++/10/bits/stl_function.h	/^    class mem_fun_t : public unary_function<_Tp*, _Ret>$/;"	c	namespace:std	inherits:unary_function<_Tp*,_Ret>
message_size	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      message_size = 				EMSGSIZE,$/;"	e	enum:std::errc	access:public
messages	/usr/include/c++/10/bits/locale_classes.h	/^    static const category messages	= 1L << 5;$/;"	m	class:std::locale	typeref:typename:const category	access:public
min	/usr/include/c++/10/bits/stl_algobase.h	/^    min(const _Tp& __a, const _Tp& __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR const _Tp &	signature:(const _Tp & __a,const _Tp & __b)
min	/usr/include/c++/10/bits/stl_algobase.h	/^    min(const _Tp& __a, const _Tp& __b, _Compare __comp)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR const _Tp &	signature:(const _Tp & __a,const _Tp & __b,_Compare __comp)
minus	/usr/include/c++/10/bits/stl_function.h	/^    struct minus : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
minus	/usr/include/c++/10/bits/stl_function.h	/^    struct minus<void>$/;"	s	namespace:std
mismatch	/usr/include/c++/10/bits/stl_algobase.h	/^    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR pair<_InputIterator1,_InputIterator2>	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2)
mismatch	/usr/include/c++/10/bits/stl_algobase.h	/^    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR pair<_InputIterator1,_InputIterator2>	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_BinaryPredicate __binary_pred)
mismatch	/usr/include/c++/10/bits/stl_algobase.h	/^    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR pair<_InputIterator1,_InputIterator2>	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2)
mismatch	/usr/include/c++/10/bits/stl_algobase.h	/^    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR pair<_InputIterator1,_InputIterator2>	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_BinaryPredicate __binary_pred)
mkdtemp	/usr/include/stdlib.h	/^extern char *mkdtemp (char *__template) __THROW __nonnull ((1)) __wur;$/;"	p	typeref:typename:char *	signature:(char * __template)
mkostemp	/usr/include/stdlib.h	/^#   define mkostemp /;"	d
mkostemp	/usr/include/stdlib.h	/^extern int mkostemp (char *__template, int __flags) __nonnull ((1)) __wur;$/;"	p	typeref:typename:int	signature:(char * __template,int __flags)
mkostemp64	/usr/include/stdlib.h	/^extern int mkostemp64 (char *__template, int __flags) __nonnull ((1)) __wur;$/;"	p	typeref:typename:int	signature:(char * __template,int __flags)
mkostemps	/usr/include/stdlib.h	/^#   define mkostemps /;"	d
mkostemps	/usr/include/stdlib.h	/^extern int mkostemps (char *__template, int __suffixlen, int __flags)$/;"	p	typeref:typename:int	signature:(char * __template,int __suffixlen,int __flags)
mkostemps64	/usr/include/stdlib.h	/^extern int mkostemps64 (char *__template, int __suffixlen, int __flags)$/;"	p	typeref:typename:int	signature:(char * __template,int __suffixlen,int __flags)
mkstemp	/usr/include/stdlib.h	/^#   define mkstemp /;"	d
mkstemp	/usr/include/stdlib.h	/^extern int mkstemp (char *__template) __nonnull ((1)) __wur;$/;"	p	typeref:typename:int	signature:(char * __template)
mkstemp64	/usr/include/stdlib.h	/^extern int mkstemp64 (char *__template) __nonnull ((1)) __wur;$/;"	p	typeref:typename:int	signature:(char * __template)
mkstemps	/usr/include/stdlib.h	/^#   define mkstemps /;"	d
mkstemps	/usr/include/stdlib.h	/^extern int mkstemps (char *__template, int __suffixlen) __nonnull ((1)) __wur;$/;"	p	typeref:typename:int	signature:(char * __template,int __suffixlen)
mkstemps64	/usr/include/stdlib.h	/^extern int mkstemps64 (char *__template, int __suffixlen)$/;"	p	typeref:typename:int	signature:(char * __template,int __suffixlen)
mktemp	/usr/include/stdlib.h	/^extern char *mktemp (char *__template) __THROW __nonnull ((1));$/;"	p	typeref:typename:char *	signature:(char * __template)
mktime	/usr/include/time.h	/^extern time_t mktime (struct tm *__tp) __THROW;$/;"	p	typeref:typename:time_t	signature:(struct tm * __tp)
mode_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __mode_t mode_t;$/;"	t	typeref:typename:__mode_t
modes	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  unsigned int modes;		\/* mode selector *\/$/;"	m	struct:timex	typeref:typename:unsigned int	access:public
modf	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define modf /;"	d
modff	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define modff /;"	d
modfl	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define modfl /;"	d
modulus	/usr/include/c++/10/bits/stl_function.h	/^    struct modulus : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
modulus	/usr/include/c++/10/bits/stl_function.h	/^    struct modulus<void>$/;"	s	namespace:std
mon_decimal_point	/usr/include/locale.h	/^  char *mon_decimal_point;	\/* Decimal point character.  *\/$/;"	m	struct:lconv	typeref:typename:char *	access:public
mon_grouping	/usr/include/locale.h	/^  char *mon_grouping;		\/* Like `grouping' element (above).  *\/$/;"	m	struct:lconv	typeref:typename:char *	access:public
mon_thousands_sep	/usr/include/locale.h	/^  char *mon_thousands_sep;	\/* Thousands separator.  *\/$/;"	m	struct:lconv	typeref:typename:char *	access:public
monetary	/usr/include/c++/10/bits/locale_classes.h	/^    static const category monetary	= 1L << 4;$/;"	m	class:std::locale	typeref:typename:const category	access:public
move	/usr/include/c++/10/bits/basic_ios.h	/^      move(basic_ios& __rhs)$/;"	f	class:std::basic_ios	typeref:typename:void	access:protected	signature:(basic_ios & __rhs)
move	/usr/include/c++/10/bits/basic_ios.h	/^      move(basic_ios&& __rhs)$/;"	f	class:std::basic_ios	typeref:typename:void	access:protected	signature:(basic_ios && __rhs)
move	/usr/include/c++/10/bits/char_traits.h	/^      move(char_type* __s1, const char_type* __s2, size_t __n)$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR char_type *	access:public	signature:(char_type * __s1,const char_type * __s2,size_t __n)
move	/usr/include/c++/10/bits/char_traits.h	/^      move(char_type* __s1, const char_type* __s2, std::size_t __n);$/;"	p	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR char_type *	access:public	signature:(char_type * __s1,const char_type * __s2,std::size_t __n)
move	/usr/include/c++/10/bits/char_traits.h	/^    move(char_type* __s1, const char_type* __s2, std::size_t __n)$/;"	f	class:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR typename char_traits<_CharT>::char_type *	signature:(char_type * __s1,const char_type * __s2,std::size_t __n)
move	/usr/include/c++/10/bits/move.h	/^    move(_Tp&& __t) noexcept$/;"	f	namespace:std	typeref:typename:std::remove_reference<_Tp>::type &&	signature:(_Tp && __t)
move	/usr/include/c++/10/bits/stl_algobase.h	/^    move(_II __first, _II __last, _OI __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	signature:(_II __first,_II __last,_OI __result)
move_backward	/usr/include/c++/10/bits/stl_algobase.h	/^    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _BI2	signature:(_BI1 __first,_BI1 __last,_BI2 __result)
move_if_noexcept	/usr/include/c++/10/bits/move.h	/^    move_if_noexcept(_Tp& __x) noexcept$/;"	f	namespace:std	typeref:typename:conditional<__move_if_noexcept_cond<_Tp>::value,const _Tp &,_Tp &&>::type	signature:(_Tp & __x)
move_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^	move_iterator(const move_iterator<_Iter>& __i)$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR	access:public	signature:(const move_iterator<_Iter> & __i)
move_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^      move_iterator()$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR	access:public	signature:()
move_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^      move_iterator(iterator_type __i)$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR	access:public	signature:(iterator_type __i)
move_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    class move_iterator$/;"	c	namespace:std
move_sentinel	/usr/include/c++/10/bits/stl_iterator.h	/^	move_sentinel(const move_sentinel<_S2>& __s)$/;"	f	class:std::move_sentinel	typeref:typename:requires convertible_to<const _S2 &,_Sent> 	access:public	signature:(const move_sentinel<_S2> & __s)
move_sentinel	/usr/include/c++/10/bits/stl_iterator.h	/^      move_sentinel()$/;"	f	class:std::move_sentinel	access:public	signature:()
move_sentinel	/usr/include/c++/10/bits/stl_iterator.h	/^      move_sentinel(_Sent __s)$/;"	f	class:std::move_sentinel	access:public	signature:(_Sent __s)
move_sentinel	/usr/include/c++/10/bits/stl_iterator.h	/^    class move_sentinel$/;"	c	namespace:std
mrand48	/usr/include/stdlib.h	/^extern long int mrand48 (void) __THROW;$/;"	p	typeref:typename:long int	signature:(void)
mrand48_r	/usr/include/stdlib.h	/^extern int mrand48_r (struct drand48_data *__restrict __buffer,$/;"	p	typeref:typename:int	signature:(struct drand48_data * __restrict __buffer,long int * __restrict __result)
multiplies	/usr/include/c++/10/bits/stl_function.h	/^    struct multiplies : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
multiplies	/usr/include/c++/10/bits/stl_function.h	/^    struct multiplies<void>$/;"	s	namespace:std
n_cs_precedes	/usr/include/locale.h	/^  char n_cs_precedes;$/;"	m	struct:lconv	typeref:typename:char	access:public
n_sep_by_space	/usr/include/locale.h	/^  char n_sep_by_space;$/;"	m	struct:lconv	typeref:typename:char	access:public
n_sign_posn	/usr/include/locale.h	/^  char n_sign_posn;$/;"	m	struct:lconv	typeref:typename:char	access:public
name	/usr/include/c++/10/bits/locale_classes.h	/^    name() const;$/;"	p	class:std::locale	typeref:typename:_GLIBCXX_DEFAULT_ABI_TAG string	access:public	signature:() const
nanosleep	/usr/include/time.h	/^extern int nanosleep (const struct timespec *__requested_time,$/;"	p	typeref:typename:int	signature:(const struct timespec * __requested_time,struct timespec * __remaining)
narrow	/usr/include/c++/10/bits/basic_ios.h	/^      narrow(char_type __c, char __dfault) const$/;"	f	class:std::basic_ios	typeref:typename:char	access:public	signature:(char_type __c,char __dfault) const
narrow	/usr/include/c++/10/bits/locale_facets.h	/^      narrow(char_type __c, char __dfault) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:char	access:public	signature:(char_type __c,char __dfault) const
narrow	/usr/include/c++/10/bits/locale_facets.h	/^      narrow(char_type __c, char __dfault) const$/;"	f	class:std::ctype	typeref:typename:char	access:public	signature:(char_type __c,char __dfault) const
narrow	/usr/include/c++/10/bits/locale_facets.h	/^      narrow(const char_type* __lo, const char_type* __hi,$/;"	f	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(const char_type * __lo,const char_type * __hi,char __dfault,char * __to) const
narrow	/usr/include/c++/10/bits/locale_facets.h	/^      narrow(const char_type* __lo, const char_type* __hi,$/;"	f	class:std::ctype	typeref:typename:const char_type *	access:public	signature:(const char_type * __lo,const char_type * __hi,char __dfault,char * __to) const
negate	/usr/include/c++/10/bits/stl_function.h	/^    struct negate : public unary_function<_Tp, _Tp>$/;"	s	namespace:std	inherits:unary_function<_Tp,_Tp>
negate	/usr/include/c++/10/bits/stl_function.h	/^    struct negate<void>$/;"	s	namespace:std
negative_sign	/usr/include/locale.h	/^  char *negative_sign;		\/* Sign for negative values.  *\/$/;"	m	struct:lconv	typeref:typename:char *	access:public
nested_exception	/usr/include/c++/10/bits/nested_exception.h	/^    nested_exception() noexcept : _M_ptr(current_exception()) { }$/;"	f	class:std::nested_exception	access:public	signature:()
nested_exception	/usr/include/c++/10/bits/nested_exception.h	/^    nested_exception(const nested_exception&) noexcept = default;$/;"	p	class:std::nested_exception	access:public	signature:(const nested_exception &)
nested_exception	/usr/include/c++/10/bits/nested_exception.h	/^  class nested_exception$/;"	c	namespace:std
nested_ptr	/usr/include/c++/10/bits/nested_exception.h	/^    nested_ptr() const noexcept$/;"	f	class:std::nested_exception	typeref:typename:exception_ptr	access:public	signature:() const
network_down	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      network_down = 				ENETDOWN,$/;"	e	enum:std::errc	access:public
network_reset	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      network_reset = 				ENETRESET,$/;"	e	enum:std::errc	access:public
network_unreachable	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      network_unreachable = 			ENETUNREACH,$/;"	e	enum:std::errc	access:public
new_allocator	/usr/include/c++/10/ext/new_allocator.h	/^	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }$/;"	f	class:__gnu_cxx::new_allocator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const new_allocator<_Tp1> &)
new_allocator	/usr/include/c++/10/ext/new_allocator.h	/^      new_allocator() _GLIBCXX_USE_NOEXCEPT { }$/;"	f	class:__gnu_cxx::new_allocator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:()
new_allocator	/usr/include/c++/10/ext/new_allocator.h	/^      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }$/;"	f	class:__gnu_cxx::new_allocator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const new_allocator &)
new_allocator	/usr/include/c++/10/ext/new_allocator.h	/^    class new_allocator$/;"	c	namespace:__gnu_cxx
newlocale	/usr/include/locale.h	/^extern locale_t newlocale (int __category_mask, const char *__locale,$/;"	p	typeref:typename:locale_t	signature:(int __category_mask,const char * __locale,locale_t __base)
next	/usr/include/c++/10/bits/range_access.h	/^    next(_It __x)$/;"	f	namespace:std::ranges	typeref:typename:_It	signature:(_It __x)
next	/usr/include/c++/10/bits/range_access.h	/^    next(_It __x, _Sent __bound)$/;"	f	namespace:std::ranges	typeref:typename:_It	signature:(_It __x,_Sent __bound)
next	/usr/include/c++/10/bits/range_access.h	/^    next(_It __x, iter_difference_t<_It> __n)$/;"	f	namespace:std::ranges	typeref:typename:_It	signature:(_It __x,iter_difference_t<_It> __n)
next	/usr/include/c++/10/bits/range_access.h	/^    next(_It __x, iter_difference_t<_It> __n, _Sent __bound)$/;"	f	namespace:std::ranges	typeref:typename:_It	signature:(_It __x,iter_difference_t<_It> __n,_Sent __bound)
next	/usr/include/c++/10/bits/stl_iterator_base_funcs.h	/^    next(_InputIterator __x, typename$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR _InputIterator	signature:(_InputIterator __x,typename iterator_traits<_InputIterator>::difference_type __n=1)
nlink_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __nlink_t nlink_t;$/;"	t	typeref:typename:__nlink_t
no_buffer_space	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      no_buffer_space = 			ENOBUFS,$/;"	e	enum:std::errc	access:public
no_child_process	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      no_child_process = 			ECHILD,$/;"	e	enum:std::errc	access:public
no_link	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      no_link = 				ENOLINK,$/;"	e	enum:std::errc	access:public
no_lock_available	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      no_lock_available = 			ENOLCK,$/;"	e	enum:std::errc	access:public
no_message	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      no_message = 				ENOMSG,$/;"	e	enum:std::errc	access:public
no_message_available	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      no_message_available = 			ENODATA,$/;"	e	enum:std::errc	access:public
no_protocol_option	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      no_protocol_option = 			ENOPROTOOPT,$/;"	e	enum:std::errc	access:public
no_space_on_device	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      no_space_on_device = 			ENOSPC,$/;"	e	enum:std::errc	access:public
no_stream_resources	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      no_stream_resources = 			ENOSR,$/;"	e	enum:std::errc	access:public
no_such_device	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      no_such_device = 				ENODEV,$/;"	e	enum:std::errc	access:public
no_such_device_or_address	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      no_such_device_or_address = 		ENXIO,$/;"	e	enum:std::errc	access:public
no_such_file_or_directory	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      no_such_file_or_directory = 		ENOENT,$/;"	e	enum:std::errc	access:public
no_such_process	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      no_such_process = 			ESRCH,$/;"	e	enum:std::errc	access:public
noboolalpha	/usr/include/c++/10/bits/ios_base.h	/^  noboolalpha(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
none	/usr/include/c++/10/bits/locale_classes.h	/^    static const category none		= 0;$/;"	m	class:std::locale	typeref:typename:const category	access:public
noshowbase	/usr/include/c++/10/bits/ios_base.h	/^  noshowbase(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
noshowpoint	/usr/include/c++/10/bits/ios_base.h	/^  noshowpoint(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
noshowpos	/usr/include/c++/10/bits/ios_base.h	/^  noshowpos(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
noskipws	/usr/include/c++/10/bits/ios_base.h	/^  noskipws(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
not1	/usr/include/c++/10/bits/stl_function.h	/^    not1(const _Predicate& __pred)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR unary_negate<_Predicate>	signature:(const _Predicate & __pred)
not2	/usr/include/c++/10/bits/stl_function.h	/^    not2(const _Predicate& __pred)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR binary_negate<_Predicate>	signature:(const _Predicate & __pred)
not_a_directory	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      not_a_directory = 			ENOTDIR,$/;"	e	enum:std::errc	access:public
not_a_socket	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      not_a_socket = 				ENOTSOCK,$/;"	e	enum:std::errc	access:public
not_a_stream	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      not_a_stream = 				ENOSTR,$/;"	e	enum:std::errc	access:public
not_connected	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      not_connected = 				ENOTCONN,$/;"	e	enum:std::errc	access:public
not_enough_memory	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      not_enough_memory = 			ENOMEM,$/;"	e	enum:std::errc	access:public
not_eof	/usr/include/c++/10/bits/char_traits.h	/^      not_eof(const int_type& __c) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR int_type	access:public	signature:(const int_type & __c)
not_eof	/usr/include/c++/10/bits/char_traits.h	/^      not_eof(const int_type& __c) noexcept$/;"	f	struct:std::char_traits	typeref:typename:int_type	access:public	signature:(const int_type & __c)
not_eof	/usr/include/c++/10/bits/char_traits.h	/^      not_eof(const int_type& __c)$/;"	f	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR int_type	access:public	signature:(const int_type & __c)
not_equal_to	/usr/include/c++/10/bits/range_cmp.h	/^  struct not_equal_to$/;"	s	namespace:std::ranges
not_equal_to	/usr/include/c++/10/bits/stl_function.h	/^    struct not_equal_to : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
not_equal_to	/usr/include/c++/10/bits/stl_function.h	/^    struct not_equal_to<void>$/;"	s	namespace:std
not_supported	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      not_supported = 				ENOTSUP,$/;"	e	enum:std::errc	access:public
nounitbuf	/usr/include/c++/10/bits/ios_base.h	/^  nounitbuf(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
nouppercase	/usr/include/c++/10/bits/ios_base.h	/^  nouppercase(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
npos	/usr/include/c++/10/bits/basic_string.h	/^      static const size_type	npos = static_cast<size_type>(-1);$/;"	m	class:std::basic_string	typeref:typename:const size_type	access:public
nrand48	/usr/include/stdlib.h	/^extern long int nrand48 (unsigned short int __xsubi[3])$/;"	p	typeref:typename:long int	signature:(unsigned short int __xsubi[3])
nrand48_r	/usr/include/stdlib.h	/^extern int nrand48_r (unsigned short int __xsubi[3],$/;"	p	typeref:typename:int	signature:(unsigned short int __xsubi[3],struct drand48_data * __restrict __buffer,long int * __restrict __result)
nullptr_t	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^  typedef decltype(nullptr)	nullptr_t;$/;"	t	namespace:std
nullptr_t	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^  typedef decltype(nullptr) nullptr_t;$/;"	t
num_get	/usr/include/c++/10/bits/locale_facets.h	/^      num_get(size_t __refs = 0) : facet(__refs) { }$/;"	f	class:std::num_get	access:public	signature:(size_t __refs=0)
num_get	/usr/include/c++/10/bits/locale_facets.h	/^    class num_get : public locale::facet$/;"	c	namespace:std	inherits:locale::facet
num_put	/usr/include/c++/10/bits/locale_facets.h	/^      num_put(size_t __refs = 0) : facet(__refs) { }$/;"	f	class:std::num_put	access:public	signature:(size_t __refs=0)
num_put	/usr/include/c++/10/bits/locale_facets.h	/^    class num_put : public locale::facet$/;"	c	namespace:std	inherits:locale::facet
numeric	/usr/include/c++/10/bits/locale_classes.h	/^    static const category numeric	= 1L << 1;$/;"	m	class:std::locale	typeref:typename:const category	access:public
numpunct	/usr/include/c++/10/bits/locale_facets.h	/^      numpunct(__c_locale __cloc, size_t __refs = 0)$/;"	f	class:std::numpunct	access:public	signature:(__c_locale __cloc,size_t __refs=0)
numpunct	/usr/include/c++/10/bits/locale_facets.h	/^      numpunct(__cache_type* __cache, size_t __refs = 0)$/;"	f	class:std::numpunct	access:public	signature:(__cache_type * __cache,size_t __refs=0)
numpunct	/usr/include/c++/10/bits/locale_facets.h	/^      numpunct(size_t __refs = 0)$/;"	f	class:std::numpunct	access:public	signature:(size_t __refs=0)
numpunct	/usr/include/c++/10/bits/locale_facets.h	/^    class numpunct : public locale::facet$/;"	c	namespace:std	inherits:locale::facet
numpunct_byname	/usr/include/c++/10/bits/locale_facets.h	/^      numpunct_byname(const char* __s, size_t __refs = 0)$/;"	f	class:std::numpunct_byname	access:public	signature:(const char * __s,size_t __refs=0)
numpunct_byname	/usr/include/c++/10/bits/locale_facets.h	/^      numpunct_byname(const string& __s, size_t __refs = 0)$/;"	f	class:std::numpunct_byname	access:public	signature:(const string & __s,size_t __refs=0)
numpunct_byname	/usr/include/c++/10/bits/locale_facets.h	/^    class numpunct_byname : public numpunct<_CharT>$/;"	c	namespace:std	inherits:numpunct<_CharT>
obstack_printf	/usr/include/stdio.h	/^extern int obstack_printf (struct obstack *__restrict __obstack,$/;"	p	typeref:typename:int	signature:(struct obstack * __restrict __obstack,const char * __restrict __format,...)
obstack_vprintf	/usr/include/stdio.h	/^extern int obstack_vprintf (struct obstack *__restrict __obstack,$/;"	p	typeref:typename:int	signature:(struct obstack * __restrict __obstack,const char * __restrict __format,__gnuc_va_list __args)
oct	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags oct =         _S_oct;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
oct	/usr/include/c++/10/bits/ios_base.h	/^  oct(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
off64_t	/usr/include/stdio.h	/^typedef __off64_t off64_t;$/;"	t	typeref:typename:__off64_t
off64_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __off64_t off64_t;$/;"	t	typeref:typename:__off64_t
off_t	/usr/include/stdio.h	/^typedef __off64_t off_t;$/;"	t	typeref:typename:__off64_t
off_t	/usr/include/stdio.h	/^typedef __off_t off_t;$/;"	t	typeref:typename:__off_t
off_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __off64_t off_t;$/;"	t	typeref:typename:__off64_t
off_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __off_t off_t;$/;"	t	typeref:typename:__off_t
off_type	/usr/include/c++/10/bits/basic_ios.h	/^      typedef typename _Traits::off_type             off_type;$/;"	t	class:std::basic_ios	typeref:typename:_Traits::off_type	access:public
off_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef std::streamoff  off_type;$/;"	t	struct:__gnu_cxx::_Char_types	typeref:typename:std::streamoff	access:public
off_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef streamoff         off_type;$/;"	t	struct:std::char_traits	typeref:typename:streamoff	access:public
off_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef typename _Char_types<_CharT>::off_type    off_type;$/;"	t	struct:__gnu_cxx::char_traits	typeref:typename:_Char_types<_CharT>::off_type	access:public
offset	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  __syscall_slong_t offset;	\/* time offset (usec) *\/$/;"	m	struct:timex	typeref:typename:__syscall_slong_t	access:public
offsetof	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^#define offsetof(/;"	d	signature:(TYPE,MEMBER)
on_exit	/usr/include/stdlib.h	/^extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)$/;"	p	typeref:typename:int	signature:(void (* __func)(int __status,void * __arg),void * __arg)
op	/usr/include/c++/10/backward/binders.h	/^      _Operation op;$/;"	m	class:std::binder1st	typeref:typename:_Operation	access:protected
op	/usr/include/c++/10/backward/binders.h	/^      _Operation op;$/;"	m	class:std::binder2nd	typeref:typename:_Operation	access:protected
open_memstream	/usr/include/stdio.h	/^extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __THROW __wur;$/;"	p	typeref:typename:FILE *	signature:(char ** __bufloc,size_t * __sizeloc)
open_wmemstream	/usr/include/wchar.h	/^extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) __THROW;$/;"	p	typeref:typename:__FILE *	signature:(wchar_t ** __bufloc,size_t * __sizeloc)
openmode	/usr/include/c++/10/bits/ios_base.h	/^    typedef _Ios_Openmode openmode;$/;"	t	class:std::ios_base	typeref:typename:_Ios_Openmode	access:public
operation_canceled	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      operation_canceled = 			ECANCELED,$/;"	e	enum:std::errc	access:public
operation_in_progress	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      operation_in_progress = 			EINPROGRESS,$/;"	e	enum:std::errc	access:public
operation_not_permitted	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      operation_not_permitted = 		EPERM,$/;"	e	enum:std::errc	access:public
operation_not_supported	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      operation_not_supported = 		EOPNOTSUPP,$/;"	e	enum:std::errc	access:public
operation_would_block	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      operation_would_block = 			EWOULDBLOCK,$/;"	e	enum:std::errc	access:public
operator !	/usr/include/c++/10/bits/basic_ios.h	/^      operator!() const$/;"	f	class:std::basic_ios	typeref:typename:bool	access:public	signature:() const
operator !	/usr/include/c++/10/bits/exception_ptr.h	/^      bool operator!() const _GLIBCXX_USE_NOEXCEPT$/;"	p	class:std::__exception_ptr::exception_ptr	typeref:typename:bool	access:public	signature:() const
operator !=	/usr/include/c++/10/bits/allocator.h	/^      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const allocator &,const allocator &)
operator !=	/usr/include/c++/10/bits/allocator.h	/^    operator!=(const allocator<_T1>&, const allocator<_T2>&)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const allocator<_T1> &,const allocator<_T2> &)
operator !=	/usr/include/c++/10/bits/basic_string.h	/^    operator!=(const _CharT* __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator !=	/usr/include/c++/10/bits/basic_string.h	/^    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
operator !=	/usr/include/c++/10/bits/basic_string.h	/^    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator !=	/usr/include/c++/10/bits/exception_ptr.h	/^    operator!=(const exception_ptr&, const exception_ptr&)$/;"	p	namespace:std::__exception_ptr	typeref:typename:bool	signature:(const exception_ptr &,const exception_ptr &)
operator !=	/usr/include/c++/10/bits/locale_classes.h	/^    operator!=(const locale& __other) const throw()$/;"	f	class:std::locale	typeref:typename:bool	access:public	signature:(const locale & __other) const
operator !=	/usr/include/c++/10/bits/postypes.h	/^    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)$/;"	f	namespace:std	typeref:typename:bool	signature:(const fpos<_StateT> & __lhs,const fpos<_StateT> & __rhs)
operator !=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
operator !=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
operator !=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator!=(const move_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_Iterator> & __x,const move_iterator<_Iterator> & __y)
operator !=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator!=(const move_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_IteratorL> & __x,const move_iterator<_IteratorR> & __y)
operator !=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator!=(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
operator !=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator!=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator !=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator!=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator !=	/usr/include/c++/10/bits/stl_pair.h	/^    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
operator !=	/usr/include/c++/10/bits/streambuf_iterator.h	/^    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,$/;"	f	namespace:std	typeref:typename:bool	signature:(const istreambuf_iterator<_CharT,_Traits> & __a,const istreambuf_iterator<_CharT,_Traits> & __b)
operator !=	/usr/include/c++/10/ext/new_allocator.h	/^	operator!=(const new_allocator&, const new_allocator<_Up>&)$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const new_allocator &,const new_allocator<_Up> &)
operator &	/usr/include/c++/10/bits/ios_base.h	/^  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR _Ios_Fmtflags	signature:(_Ios_Fmtflags __a,_Ios_Fmtflags __b)
operator &	/usr/include/c++/10/bits/ios_base.h	/^  operator&(_Ios_Iostate __a, _Ios_Iostate __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR _Ios_Iostate	signature:(_Ios_Iostate __a,_Ios_Iostate __b)
operator &	/usr/include/c++/10/bits/ios_base.h	/^  operator&(_Ios_Openmode __a, _Ios_Openmode __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR _Ios_Openmode	signature:(_Ios_Openmode __a,_Ios_Openmode __b)
operator &=	/usr/include/c++/10/bits/ios_base.h	/^  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)$/;"	f	namespace:std	typeref:typename:const _Ios_Fmtflags &	signature:(_Ios_Fmtflags & __a,_Ios_Fmtflags __b)
operator &=	/usr/include/c++/10/bits/ios_base.h	/^  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)$/;"	f	namespace:std	typeref:typename:const _Ios_Iostate &	signature:(_Ios_Iostate & __a,_Ios_Iostate __b)
operator &=	/usr/include/c++/10/bits/ios_base.h	/^  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)$/;"	f	namespace:std	typeref:typename:const _Ios_Openmode &	signature:(_Ios_Openmode & __a,_Ios_Openmode __b)
operator ()	/usr/include/c++/10/backward/binders.h	/^      operator()(const typename _Operation::first_argument_type& __x) const$/;"	f	class:std::binder2nd	typeref:typename:_Operation::result_type	access:public	signature:(const typename _Operation::first_argument_type & __x) const
operator ()	/usr/include/c++/10/backward/binders.h	/^      operator()(const typename _Operation::second_argument_type& __x) const$/;"	f	class:std::binder1st	typeref:typename:_Operation::result_type	access:public	signature:(const typename _Operation::second_argument_type & __x) const
operator ()	/usr/include/c++/10/backward/binders.h	/^      operator()(typename _Operation::first_argument_type& __x) const$/;"	f	class:std::binder2nd	typeref:typename:_Operation::result_type	access:public	signature:(typename _Operation::first_argument_type & __x) const
operator ()	/usr/include/c++/10/backward/binders.h	/^      operator()(typename _Operation::second_argument_type& __x) const$/;"	f	class:std::binder1st	typeref:typename:_Operation::result_type	access:public	signature:(typename _Operation::second_argument_type & __x) const
operator ()	/usr/include/c++/10/bits/basic_string.h	/^      operator()(const string& __s) const noexcept$/;"	f	struct:std::hash	typeref:typename:size_t	access:public	signature:(const string & __s) const
operator ()	/usr/include/c++/10/bits/basic_string.h	/^      operator()(const u16string& __s) const noexcept$/;"	f	struct:std::hash	typeref:typename:size_t	access:public	signature:(const u16string & __s) const
operator ()	/usr/include/c++/10/bits/basic_string.h	/^      operator()(const u32string& __s) const noexcept$/;"	f	struct:std::hash	typeref:typename:size_t	access:public	signature:(const u32string & __s) const
operator ()	/usr/include/c++/10/bits/basic_string.h	/^      operator()(const u8string& __s) const noexcept$/;"	f	struct:std::hash	typeref:typename:size_t	access:public	signature:(const u8string & __s) const
operator ()	/usr/include/c++/10/bits/basic_string.h	/^      operator()(const wstring& __s) const noexcept$/;"	f	struct:std::hash	typeref:typename:size_t	access:public	signature:(const wstring & __s) const
operator ()	/usr/include/c++/10/bits/functional_hash.h	/^      operator()(_Tp __val) const noexcept$/;"	f	struct:std::__hash_enum	typeref:typename:size_t	access:public	signature:(_Tp __val) const
operator ()	/usr/include/c++/10/bits/functional_hash.h	/^      operator()(_Tp* __p) const noexcept$/;"	f	struct:std::hash	typeref:typename:size_t	access:public	signature:(_Tp * __p) const
operator ()	/usr/include/c++/10/bits/functional_hash.h	/^      operator()(double __val) const noexcept$/;"	f	struct:std::hash	typeref:typename:size_t	access:public	signature:(double __val) const
operator ()	/usr/include/c++/10/bits/functional_hash.h	/^      operator()(float __val) const noexcept$/;"	f	struct:std::hash	typeref:typename:size_t	access:public	signature:(float __val) const
operator ()	/usr/include/c++/10/bits/functional_hash.h	/^      operator()(long double __val) const noexcept;$/;"	p	struct:std::hash	typeref:typename:_GLIBCXX_PURE size_t	access:public	signature:(long double __val) const
operator ()	/usr/include/c++/10/bits/functional_hash.h	/^      operator()(nullptr_t) const noexcept$/;"	f	struct:std::hash	typeref:typename:size_t	access:public	signature:(nullptr_t) const
operator ()	/usr/include/c++/10/bits/iterator_concepts.h	/^	  operator()(_Tp&& __e) const$/;"	f	struct:std::ranges::__cust_imove::_IMove	typeref:typename:__type<_Tp>	access:public	signature:(_Tp && __e) const
operator ()	/usr/include/c++/10/bits/locale_classes.h	/^      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,$/;"	p	class:std::locale	typeref:typename:bool	access:public	signature:(const basic_string<_Char,_Traits,_Alloc> & __s1,const basic_string<_Char,_Traits,_Alloc> & __s2) const
operator ()	/usr/include/c++/10/bits/predefined_ops.h	/^	operator()(_Iterator __it)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_to_val	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator __it)
operator ()	/usr/include/c++/10/bits/predefined_ops.h	/^	operator()(_Iterator __it)$/;"	f	struct:__gnu_cxx::__ops::_Iter_equals_val	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator __it)
operator ()	/usr/include/c++/10/bits/predefined_ops.h	/^	operator()(_Iterator __it)$/;"	f	struct:__gnu_cxx::__ops::_Iter_negate	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator __it)
operator ()	/usr/include/c++/10/bits/predefined_ops.h	/^	operator()(_Iterator __it)$/;"	f	struct:__gnu_cxx::__ops::_Iter_pred	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator __it)
operator ()	/usr/include/c++/10/bits/predefined_ops.h	/^	operator()(_Iterator __it, _Value& __val)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_val	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator __it,_Value & __val)
operator ()	/usr/include/c++/10/bits/predefined_ops.h	/^	operator()(_Iterator2 __it2)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_to_iter	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator2 __it2)
operator ()	/usr/include/c++/10/bits/predefined_ops.h	/^	operator()(_Iterator2 __it2)$/;"	f	struct:__gnu_cxx::__ops::_Iter_equals_iter	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator2 __it2)
operator ()	/usr/include/c++/10/bits/predefined_ops.h	/^	operator()(_Value& __val, _Iterator __it)$/;"	f	struct:__gnu_cxx::__ops::_Val_comp_iter	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Value & __val,_Iterator __it)
operator ()	/usr/include/c++/10/bits/predefined_ops.h	/^        operator()(_Iterator1 __it1, _Iterator2 __it2)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_iter	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(_Iterator1 __it1,_Iterator2 __it2)
operator ()	/usr/include/c++/10/bits/predefined_ops.h	/^      operator()(_Iterator __it, _Value& __val) const$/;"	f	struct:__gnu_cxx::__ops::_Iter_equal_to_val	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator __it,_Value & __val) const
operator ()	/usr/include/c++/10/bits/predefined_ops.h	/^      operator()(_Iterator __it, _Value& __val) const$/;"	f	struct:__gnu_cxx::__ops::_Iter_less_val	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator __it,_Value & __val) const
operator ()	/usr/include/c++/10/bits/predefined_ops.h	/^      operator()(_Iterator1 __it1, _Iterator2 __it2) const$/;"	f	struct:__gnu_cxx::__ops::_Iter_equal_to_iter	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator1 __it1,_Iterator2 __it2) const
operator ()	/usr/include/c++/10/bits/predefined_ops.h	/^      operator()(_Iterator1 __it1, _Iterator2 __it2) const$/;"	f	struct:__gnu_cxx::__ops::_Iter_less_iter	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(_Iterator1 __it1,_Iterator2 __it2) const
operator ()	/usr/include/c++/10/bits/predefined_ops.h	/^      operator()(_Value& __val, _Iterator __it) const$/;"	f	struct:__gnu_cxx::__ops::_Val_less_iter	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Value & __val,_Iterator __it) const
operator ()	/usr/include/c++/10/bits/range_access.h	/^	operator()(_Tp&& __e) const$/;"	f	struct:std::ranges::__cust_access::_CBegin	typeref:typename:auto	access:public	signature:(_Tp && __e) const
operator ()	/usr/include/c++/10/bits/range_access.h	/^	operator()(_Tp&& __e) const$/;"	f	struct:std::ranges::__cust_access::_CData	typeref:typename:auto	access:public	signature:(_Tp && __e) const
operator ()	/usr/include/c++/10/bits/range_access.h	/^	operator()(_Tp&& __e) const$/;"	f	struct:std::ranges::__cust_access::_CEnd	typeref:typename:auto	access:public	signature:(_Tp && __e) const
operator ()	/usr/include/c++/10/bits/range_access.h	/^	operator()(_Tp&& __e) const$/;"	f	struct:std::ranges::__cust_access::_CRBegin	typeref:typename:auto	access:public	signature:(_Tp && __e) const
operator ()	/usr/include/c++/10/bits/range_access.h	/^	operator()(_Tp&& __e) const$/;"	f	struct:std::ranges::__cust_access::_CREnd	typeref:typename:auto	access:public	signature:(_Tp && __e) const
operator ()	/usr/include/c++/10/bits/range_access.h	/^	operator()(_Tp&& __e) const$/;"	f	struct:std::ranges::__cust_access::_SSize	typeref:typename:auto	access:public	signature:(_Tp && __e) const
operator ()	/usr/include/c++/10/bits/range_cmp.h	/^      operator()(_Tp&& __t) const noexcept$/;"	f	struct:std::identity	typeref:typename:_Tp &&	access:public	signature:(_Tp && __t) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t) const$/;"	f	struct:std::bit_not	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t) const$/;"	f	struct:std::logical_not	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t) const$/;"	f	struct:std::negate	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::bit_and	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::bit_or	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::bit_xor	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::divides	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::equal_to	typeref:typename:auto	access:public	signature:(_Tp && __t,_Up && __u) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::greater	typeref:typename:auto	access:public	signature:(_Tp && __t,_Up && __u) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::greater_equal	typeref:typename:auto	access:public	signature:(_Tp && __t,_Up && __u) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::less	typeref:typename:auto	access:public	signature:(_Tp && __t,_Up && __u) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::less_equal	typeref:typename:auto	access:public	signature:(_Tp && __t,_Up && __u) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::logical_and	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::logical_or	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::minus	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::modulus	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::multiplies	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::not_equal_to	typeref:typename:auto	access:public	signature:(_Tp && __t,_Up && __u) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::plus	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp* __t, _Up* __u) const noexcept$/;"	f	struct:std::greater	typeref:typename:bool	access:public	signature:(_Tp * __t,_Up * __u) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp* __t, _Up* __u) const noexcept$/;"	f	struct:std::greater_equal	typeref:typename:bool	access:public	signature:(_Tp * __t,_Up * __u) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp* __t, _Up* __u) const noexcept$/;"	f	struct:std::less	typeref:typename:bool	access:public	signature:(_Tp * __t,_Up * __u) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp* __t, _Up* __u) const noexcept$/;"	f	struct:std::less_equal	typeref:typename:bool	access:public	signature:(_Tp * __t,_Up * __u) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^        operator()(_Pair2& __x) const$/;"	f	struct:std::_Select1st	typeref:typename:_Pair2::first_type &	access:public	signature:(_Pair2 & __x) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^        operator()(const _Pair2& __x) const$/;"	f	struct:std::_Select1st	typeref:typename:const typename _Pair2::first_type &	access:public	signature:(const _Pair2 & __x) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(_Arg __x) const$/;"	f	class:std::pointer_to_unary_function	typeref:typename:_Result	access:public	signature:(_Arg __x) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(_Arg1 __x, _Arg2 __y) const$/;"	f	class:std::pointer_to_binary_function	typeref:typename:_Result	access:public	signature:(_Arg1 __x,_Arg2 __y) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(_Pair& __x) const$/;"	f	struct:std::_Select1st	typeref:typename:_Pair::first_type &	access:public	signature:(_Pair & __x) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(_Pair& __x) const$/;"	f	struct:std::_Select2nd	typeref:typename:_Pair::second_type &	access:public	signature:(_Pair & __x) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(_Tp& __r) const$/;"	f	class:std::mem_fun_ref_t	typeref:typename:_Ret	access:public	signature:(_Tp & __r) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(_Tp& __r, _Arg __x) const$/;"	f	class:std::mem_fun1_ref_t	typeref:typename:_Ret	access:public	signature:(_Tp & __r,_Arg __x) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(_Tp& __x) const$/;"	f	struct:std::_Identity	typeref:typename:_Tp &	access:public	signature:(_Tp & __x) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(_Tp* __p) const$/;"	f	class:std::mem_fun_t	typeref:typename:_Ret	access:public	signature:(_Tp * __p) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(_Tp* __p, _Arg __x) const$/;"	f	class:std::mem_fun1_t	typeref:typename:_Ret	access:public	signature:(_Tp * __p,_Arg __x) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW$/;"	f	struct:std::greater	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(_Tp * __x,_Tp * __y) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW$/;"	f	struct:std::greater_equal	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(_Tp * __x,_Tp * __y) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW$/;"	f	struct:std::less	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(_Tp * __x,_Tp * __y) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW$/;"	f	struct:std::less_equal	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(_Tp * __x,_Tp * __y) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Pair& __x) const$/;"	f	struct:std::_Select1st	typeref:typename:const typename _Pair::first_type &	access:public	signature:(const _Pair & __x) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Pair& __x) const$/;"	f	struct:std::_Select2nd	typeref:typename:const typename _Pair::second_type &	access:public	signature:(const _Pair & __x) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __r) const$/;"	f	class:std::const_mem_fun_ref_t	typeref:typename:_Ret	access:public	signature:(const _Tp & __r) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __r, _Arg __x) const$/;"	f	class:std::const_mem_fun1_ref_t	typeref:typename:_Ret	access:public	signature:(const _Tp & __r,_Arg __x) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x) const$/;"	f	struct:std::_Identity	typeref:typename:const _Tp &	access:public	signature:(const _Tp & __x) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x) const$/;"	f	struct:std::bit_not	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x) const$/;"	f	struct:std::logical_not	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x) const$/;"	f	struct:std::negate	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::bit_and	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::bit_or	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::bit_xor	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::divides	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::equal_to	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::greater	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::greater_equal	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::less	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::less_equal	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::logical_and	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::logical_or	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::minus	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::modulus	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::multiplies	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::not_equal_to	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::plus	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp* __p) const$/;"	f	class:std::const_mem_fun_t	typeref:typename:_Ret	access:public	signature:(const _Tp * __p) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp* __p, _Arg __x) const$/;"	f	class:std::const_mem_fun1_t	typeref:typename:_Ret	access:public	signature:(const _Tp * __p,_Arg __x) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const typename _Predicate::argument_type& __x) const$/;"	f	class:std::unary_negate	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const typename _Predicate::argument_type & __x) const
operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const typename _Predicate::first_argument_type& __x,$/;"	f	class:std::binary_negate	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const typename _Predicate::first_argument_type & __x,const typename _Predicate::second_argument_type & __y) const
operator *	/usr/include/c++/10/bits/iterator_concepts.h	/^      indirect_result_t<_Proj&, _Iter> operator*() const; \/\/ not defined$/;"	p	struct:std::projected	typeref:typename:indirect_result_t<_Proj &,_Iter>	access:public	signature:() const
operator *	/usr/include/c++/10/bits/stl_iterator.h	/^      operator*() const _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR reference	access:public	signature:() const
operator *	/usr/include/c++/10/bits/stl_iterator.h	/^      operator*() const$/;"	f	class:std::counted_iterator	typeref:typename:decltype (auto)	access:public	signature:() const
operator *	/usr/include/c++/10/bits/stl_iterator.h	/^      operator*() const$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reference	access:public	signature:() const
operator *	/usr/include/c++/10/bits/stl_iterator.h	/^      operator*() const$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reference	access:public	signature:() const
operator *	/usr/include/c++/10/bits/stl_iterator.h	/^      operator*()$/;"	f	class:std::back_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR back_insert_iterator &	access:public	signature:()
operator *	/usr/include/c++/10/bits/stl_iterator.h	/^      operator*()$/;"	f	class:std::counted_iterator	typeref:typename:decltype (auto)	access:public	signature:()
operator *	/usr/include/c++/10/bits/stl_iterator.h	/^      operator*()$/;"	f	class:std::front_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR front_insert_iterator &	access:public	signature:()
operator *	/usr/include/c++/10/bits/stl_iterator.h	/^      operator*()$/;"	f	class:std::insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR insert_iterator &	access:public	signature:()
operator *	/usr/include/c++/10/bits/stl_iterator.h	/^    operator*() const requires __detail::__dereferenceable<const _It>$/;"	f	class:std::common_iterator	typeref:typename:decltype (auto)	access:public	signature:() const
operator *	/usr/include/c++/10/bits/stl_iterator.h	/^    operator*()$/;"	f	class:std::common_iterator	typeref:typename:decltype (auto)	access:public	signature:()
operator *	/usr/include/c++/10/bits/streambuf_iterator.h	/^      operator*() const$/;"	f	class:std::istreambuf_iterator	typeref:typename:char_type	access:public	signature:() const
operator *	/usr/include/c++/10/bits/streambuf_iterator.h	/^      operator*()$/;"	f	class:std::ostreambuf_iterator	typeref:typename:ostreambuf_iterator &	access:public	signature:()
operator +	/usr/include/c++/10/bits/basic_string.h	/^    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);$/;"	p	namespace:std	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	signature:(_CharT __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator +	/usr/include/c++/10/bits/basic_string.h	/^    operator+(_CharT __lhs,$/;"	f	namespace:std	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	signature:(_CharT __lhs,basic_string<_CharT,_Traits,_Alloc> && __rhs)
operator +	/usr/include/c++/10/bits/basic_string.h	/^    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,$/;"	f	namespace:std	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	signature:(basic_string<_CharT,_Traits,_Alloc> && __lhs,_CharT __rhs)
operator +	/usr/include/c++/10/bits/basic_string.h	/^    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,$/;"	f	namespace:std	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	signature:(basic_string<_CharT,_Traits,_Alloc> && __lhs,basic_string<_CharT,_Traits,_Alloc> && __rhs)
operator +	/usr/include/c++/10/bits/basic_string.h	/^    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,$/;"	f	namespace:std	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	signature:(basic_string<_CharT,_Traits,_Alloc> && __lhs,const _CharT * __rhs)
operator +	/usr/include/c++/10/bits/basic_string.h	/^    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,$/;"	f	namespace:std	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	signature:(basic_string<_CharT,_Traits,_Alloc> && __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator +	/usr/include/c++/10/bits/basic_string.h	/^    operator+(const _CharT* __lhs,$/;"	f	namespace:std	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	signature:(const _CharT * __lhs,basic_string<_CharT,_Traits,_Alloc> && __rhs)
operator +	/usr/include/c++/10/bits/basic_string.h	/^    operator+(const _CharT* __lhs,$/;"	p	namespace:std	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator +	/usr/include/c++/10/bits/basic_string.h	/^    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)$/;"	f	namespace:std	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,_CharT __rhs)
operator +	/usr/include/c++/10/bits/basic_string.h	/^    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_END_NAMESPACE_CXX11 basic_string<_CharT,_Traits,_Alloc>	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator +	/usr/include/c++/10/bits/basic_string.h	/^    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,basic_string<_CharT,_Traits,_Alloc> && __rhs)
operator +	/usr/include/c++/10/bits/basic_string.h	/^    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
operator +	/usr/include/c++/10/bits/postypes.h	/^      operator+(streamoff __off) const$/;"	f	class:std::fpos	typeref:typename:fpos	access:public	signature:(streamoff __off) const
operator +	/usr/include/c++/10/bits/stl_iterator.h	/^      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator	access:public	signature:(difference_type __n) const
operator +	/usr/include/c++/10/bits/stl_iterator.h	/^      operator+(difference_type __n) const$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator	access:public	signature:(difference_type __n) const
operator +	/usr/include/c++/10/bits/stl_iterator.h	/^      operator+(difference_type __n) const$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator	access:public	signature:(difference_type __n) const
operator +	/usr/include/c++/10/bits/stl_iterator.h	/^      operator+(iter_difference_t<_It> __n) const$/;"	f	class:std::counted_iterator	typeref:typename:counted_iterator	access:public	signature:(iter_difference_t<_It> __n) const
operator +	/usr/include/c++/10/bits/stl_iterator.h	/^      operator+(iter_difference_t<_It> __n, const counted_iterator& __x)$/;"	f	namespace:std	typeref:typename:counted_iterator	signature:(iter_difference_t<_It> __n,const counted_iterator & __x)
operator +	/usr/include/c++/10/bits/stl_iterator.h	/^    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator<_Iterator,_Container>	signature:(typename __normal_iterator<_Iterator,_Container>::difference_type __n,const __normal_iterator<_Iterator,_Container> & __i)
operator +	/usr/include/c++/10/bits/stl_iterator.h	/^    operator+(typename move_iterator<_Iterator>::difference_type __n,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator<_Iterator>	signature:(typename move_iterator<_Iterator>::difference_type __n,const move_iterator<_Iterator> & __x)
operator +	/usr/include/c++/10/bits/stl_iterator.h	/^    operator+(typename reverse_iterator<_Iterator>::difference_type __n,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>	signature:(typename reverse_iterator<_Iterator>::difference_type __n,const reverse_iterator<_Iterator> & __x)
operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^      operator++() _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator &	access:public	signature:()
operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^      operator++()$/;"	f	class:std::back_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR back_insert_iterator &	access:public	signature:()
operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^      operator++()$/;"	f	class:std::counted_iterator	typeref:typename:counted_iterator &	access:public	signature:()
operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^      operator++()$/;"	f	class:std::front_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR front_insert_iterator &	access:public	signature:()
operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^      operator++()$/;"	f	class:std::insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR insert_iterator &	access:public	signature:()
operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^      operator++()$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator &	access:public	signature:()
operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^      operator++()$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator &	access:public	signature:()
operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^      operator++(int) _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator	access:public	signature:(int)
operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^      operator++(int) requires (!forward_iterator<_Iterator>)$/;"	f	class:std::move_iterator	typeref:typename:void	access:public	signature:(int)
operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^      operator++(int) requires forward_iterator<_It>$/;"	f	class:std::counted_iterator	typeref:typename:counted_iterator	access:public	signature:(int)
operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::back_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR back_insert_iterator	access:public	signature:(int)
operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::counted_iterator	typeref:typename:decltype (auto)	access:public	signature:(int)
operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::front_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR front_insert_iterator	access:public	signature:(int)
operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR insert_iterator &	access:public	signature:(int)
operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator	access:public	signature:(int)
operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator	access:public	signature:(int)
operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^    operator++()$/;"	f	class:std::common_iterator	typeref:typename:common_iterator &	access:public	signature:()
operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^    operator++(int)$/;"	f	class:std::common_iterator	typeref:typename:decltype (auto)	access:public	signature:(int)
operator ++	/usr/include/c++/10/bits/streambuf_iterator.h	/^      operator++()$/;"	f	class:std::istreambuf_iterator	typeref:typename:istreambuf_iterator &	access:public	signature:()
operator ++	/usr/include/c++/10/bits/streambuf_iterator.h	/^      operator++()$/;"	f	class:std::ostreambuf_iterator	typeref:typename:ostreambuf_iterator &	access:public	signature:()
operator ++	/usr/include/c++/10/bits/streambuf_iterator.h	/^      operator++(int)$/;"	f	class:std::istreambuf_iterator	typeref:typename:istreambuf_iterator	access:public	signature:(int)
operator ++	/usr/include/c++/10/bits/streambuf_iterator.h	/^      operator++(int)$/;"	f	class:std::ostreambuf_iterator	typeref:typename:ostreambuf_iterator &	access:public	signature:(int)
operator +=	/usr/include/c++/10/bits/basic_string.h	/^	operator+=(const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt)
operator +=	/usr/include/c++/10/bits/basic_string.h	/^      operator+=(_CharT __c)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(_CharT __c)
operator +=	/usr/include/c++/10/bits/basic_string.h	/^      operator+=(const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s)
operator +=	/usr/include/c++/10/bits/basic_string.h	/^      operator+=(const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str)
operator +=	/usr/include/c++/10/bits/basic_string.h	/^      operator+=(initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(initializer_list<_CharT> __l)
operator +=	/usr/include/c++/10/bits/postypes.h	/^      operator+=(streamoff __off)$/;"	f	class:std::fpos	typeref:typename:fpos &	access:public	signature:(streamoff __off)
operator +=	/usr/include/c++/10/bits/stl_iterator.h	/^      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator &	access:public	signature:(difference_type __n)
operator +=	/usr/include/c++/10/bits/stl_iterator.h	/^      operator+=(difference_type __n)$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator &	access:public	signature:(difference_type __n)
operator +=	/usr/include/c++/10/bits/stl_iterator.h	/^      operator+=(difference_type __n)$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator &	access:public	signature:(difference_type __n)
operator +=	/usr/include/c++/10/bits/stl_iterator.h	/^      operator+=(iter_difference_t<_It> __n)$/;"	f	class:std::counted_iterator	typeref:typename:counted_iterator &	access:public	signature:(iter_difference_t<_It> __n)
operator -	/usr/include/c++/10/bits/postypes.h	/^      operator-(const fpos& __other) const$/;"	f	class:std::fpos	typeref:typename:streamoff	access:public	signature:(const fpos & __other) const
operator -	/usr/include/c++/10/bits/postypes.h	/^      operator-(streamoff __off) const$/;"	f	class:std::fpos	typeref:typename:fpos	access:public	signature:(streamoff __off) const
operator -	/usr/include/c++/10/bits/stl_iterator.h	/^	operator-(const counted_iterator& __x,$/;"	f	namespace:std	typeref:typename:iter_difference_t<_It2>	signature:(const counted_iterator & __x,const counted_iterator<_It2> & __y)
operator -	/usr/include/c++/10/bits/stl_iterator.h	/^	operator-(const move_iterator& __x, const move_sentinel<_Sent>& __y)$/;"	f	namespace:std	typeref:typename:iter_difference_t<_Iterator>	signature:(const move_iterator & __x,const move_sentinel<_Sent> & __y)
operator -	/usr/include/c++/10/bits/stl_iterator.h	/^	operator-(const move_sentinel<_Sent>& __x, const move_iterator& __y)$/;"	f	namespace:std	typeref:typename:iter_difference_t<_Iterator>	signature:(const move_sentinel<_Sent> & __x,const move_iterator & __y)
operator -	/usr/include/c++/10/bits/stl_iterator.h	/^      operator-(const common_iterator& __x,$/;"	f	namespace:std	typeref:typename:requires sized_sentinel_for<_Sent,_It2> iter_difference_t<_It2>	signature:(const common_iterator & __x,const common_iterator<_It2,_Sent2> & __y)
operator -	/usr/include/c++/10/bits/stl_iterator.h	/^      operator-(const counted_iterator& __x, default_sentinel_t)$/;"	f	namespace:std	typeref:typename:iter_difference_t<_It>	signature:(const counted_iterator & __x,default_sentinel_t)
operator -	/usr/include/c++/10/bits/stl_iterator.h	/^      operator-(default_sentinel_t, const counted_iterator& __y)$/;"	f	namespace:std	typeref:typename:iter_difference_t<_It>	signature:(default_sentinel_t,const counted_iterator & __y)
operator -	/usr/include/c++/10/bits/stl_iterator.h	/^      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator	access:public	signature:(difference_type __n) const
operator -	/usr/include/c++/10/bits/stl_iterator.h	/^      operator-(difference_type __n) const$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator	access:public	signature:(difference_type __n) const
operator -	/usr/include/c++/10/bits/stl_iterator.h	/^      operator-(difference_type __n) const$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator	access:public	signature:(difference_type __n) const
operator -	/usr/include/c++/10/bits/stl_iterator.h	/^      operator-(iter_difference_t<_It> __n) const$/;"	f	class:std::counted_iterator	typeref:typename:counted_iterator	access:public	signature:(iter_difference_t<_It> __n) const
operator -	/usr/include/c++/10/bits/stl_iterator.h	/^    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX20_CONSTEXPR typename __normal_iterator<_Iterator,_Container>::difference_type	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
operator -	/usr/include/c++/10/bits/stl_iterator.h	/^    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX20_CONSTEXPR auto	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
operator -	/usr/include/c++/10/bits/stl_iterator.h	/^    operator-(const move_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:decltype (__x.base ()-__y.base ())	signature:(const move_iterator<_IteratorL> & __x,const move_iterator<_IteratorR> & __y)
operator -	/usr/include/c++/10/bits/stl_iterator.h	/^    operator-(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:reverse_iterator<_Iterator>::difference_type	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
operator -	/usr/include/c++/10/bits/stl_iterator.h	/^    operator-(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:decltype (__y.base ()-__x.base ())	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator -	/usr/include/c++/10/bits/stl_iterator.h	/^    operator-(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:reverse_iterator<_IteratorL>::difference_type	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator --	/usr/include/c++/10/bits/stl_iterator.h	/^      operator--() _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator &	access:public	signature:()
operator --	/usr/include/c++/10/bits/stl_iterator.h	/^      operator--() requires bidirectional_iterator<_It>$/;"	f	class:std::counted_iterator	typeref:typename:counted_iterator &	access:public	signature:()
operator --	/usr/include/c++/10/bits/stl_iterator.h	/^      operator--()$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator &	access:public	signature:()
operator --	/usr/include/c++/10/bits/stl_iterator.h	/^      operator--()$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator &	access:public	signature:()
operator --	/usr/include/c++/10/bits/stl_iterator.h	/^      operator--(int) _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator	access:public	signature:(int)
operator --	/usr/include/c++/10/bits/stl_iterator.h	/^      operator--(int) requires bidirectional_iterator<_It>$/;"	f	class:std::counted_iterator	typeref:typename:counted_iterator	access:public	signature:(int)
operator --	/usr/include/c++/10/bits/stl_iterator.h	/^      operator--(int)$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator	access:public	signature:(int)
operator --	/usr/include/c++/10/bits/stl_iterator.h	/^      operator--(int)$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator	access:public	signature:(int)
operator -=	/usr/include/c++/10/bits/postypes.h	/^      operator-=(streamoff __off)$/;"	f	class:std::fpos	typeref:typename:fpos &	access:public	signature:(streamoff __off)
operator -=	/usr/include/c++/10/bits/stl_iterator.h	/^      operator-=(difference_type __n) _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator &	access:public	signature:(difference_type __n)
operator -=	/usr/include/c++/10/bits/stl_iterator.h	/^      operator-=(difference_type __n)$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator &	access:public	signature:(difference_type __n)
operator -=	/usr/include/c++/10/bits/stl_iterator.h	/^      operator-=(difference_type __n)$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator &	access:public	signature:(difference_type __n)
operator -=	/usr/include/c++/10/bits/stl_iterator.h	/^      operator-=(iter_difference_t<_It> __n)$/;"	f	class:std::counted_iterator	typeref:typename:counted_iterator &	access:public	signature:(iter_difference_t<_It> __n)
operator ->	/usr/include/c++/10/bits/stl_iterator.h	/^	|| requires(const _Iterator __i) { __i.operator->(); }$/;"	p	class:std::reverse_iterator	typeref:typename:__i.	access:public	signature:()
operator ->	/usr/include/c++/10/bits/stl_iterator.h	/^      operator->() const _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR pointer	access:public	signature:() const
operator ->	/usr/include/c++/10/bits/stl_iterator.h	/^      operator->() const$/;"	f	class:std::common_iterator::_Proxy	typeref:typename:const iter_value_t<_It> *	access:public	signature:() const
operator ->	/usr/include/c++/10/bits/stl_iterator.h	/^      operator->() const$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR pointer	access:public	signature:() const
operator ->	/usr/include/c++/10/bits/stl_iterator.h	/^    operator->() const requires __detail::__common_iter_has_arrow<_It>$/;"	f	class:std::common_iterator	typeref:typename:decltype (auto)	access:public	signature:() const
operator <	/usr/include/c++/10/bits/basic_string.h	/^    operator<(const _CharT* __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator <	/usr/include/c++/10/bits/basic_string.h	/^    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
operator <	/usr/include/c++/10/bits/basic_string.h	/^    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator <	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
operator <	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
operator <	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<(const move_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_Iterator> & __x,const move_iterator<_Iterator> & __y)
operator <	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<(const move_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_IteratorL> & __x,const move_iterator<_IteratorR> & __y)
operator <	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
operator <	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator <	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator <	/usr/include/c++/10/bits/stl_pair.h	/^    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
operator <<	/usr/include/c++/10/bits/basic_string.h	/^    operator<<(basic_ostream<_CharT, _Traits>& __os,$/;"	f	namespace:std	typeref:typename:basic_ostream<_CharT,_Traits> &	signature:(basic_ostream<_CharT,_Traits> & __os,const basic_string<_CharT,_Traits,_Alloc> & __str)
operator <=	/usr/include/c++/10/bits/basic_string.h	/^    operator<=(const _CharT* __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator <=	/usr/include/c++/10/bits/basic_string.h	/^    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
operator <=	/usr/include/c++/10/bits/basic_string.h	/^    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator <=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
operator <=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
operator <=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<=(const move_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_Iterator> & __x,const move_iterator<_Iterator> & __y)
operator <=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<=(const move_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_IteratorL> & __x,const move_iterator<_IteratorR> & __y)
operator <=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<=(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
operator <=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator <=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator <=	/usr/include/c++/10/bits/stl_pair.h	/^    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
operator <=>	/usr/include/c++/10/bits/basic_string.h	/^    operator<=>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:auto	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
operator <=>	/usr/include/c++/10/bits/basic_string.h	/^    operator<=>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:auto	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator <=>	/usr/include/c++/10/bits/stl_iterator.h	/^	operator<=>(const counted_iterator& __x,$/;"	f	namespace:std	typeref:typename:strong_ordering	signature:(const counted_iterator & __x,const counted_iterator<_It2> & __y)
operator <=>	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<=>(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:std::__detail::__synth3way_t<_IteratorR,_IteratorL>	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
operator <=>	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<=>(const move_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:compare_three_way_result_t<_IteratorL,_IteratorR>	signature:(const move_iterator<_IteratorL> & __x,const move_iterator<_IteratorR> & __y)
operator <=>	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<=>(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:compare_three_way_result_t<_IteratorL,_IteratorR>	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator <=>	/usr/include/c++/10/bits/stl_pair.h	/^    operator<=>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	typeref:typename:common_comparison_category_t<__detail::__synth3way_t<_T1>,__detail::__synth3way_t<_T2>>	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
operator =	/usr/include/c++/10/bits/allocator.h	/^      allocator& operator=(const allocator&) = default;$/;"	p	class:std::allocator	typeref:typename:allocator &	access:public	signature:(const allocator &)
operator =	/usr/include/c++/10/bits/basic_ios.h	/^      basic_ios& operator=(const basic_ios&) = delete;$/;"	p	class:std::basic_ios	typeref:typename:basic_ios &	access:protected	signature:(const basic_ios &)
operator =	/usr/include/c++/10/bits/basic_string.h	/^       operator=(const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt)
operator =	/usr/include/c++/10/bits/basic_string.h	/^      operator=(_CharT __c)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(_CharT __c)
operator =	/usr/include/c++/10/bits/basic_string.h	/^      operator=(basic_string&& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(basic_string && __str)
operator =	/usr/include/c++/10/bits/basic_string.h	/^      operator=(const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s)
operator =	/usr/include/c++/10/bits/basic_string.h	/^      operator=(const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str)
operator =	/usr/include/c++/10/bits/basic_string.h	/^      operator=(initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(initializer_list<_CharT> __l)
operator =	/usr/include/c++/10/bits/exception.h	/^    exception& operator=(const exception&) = default;$/;"	p	class:std::exception	typeref:typename:exception &	access:public	signature:(const exception &)
operator =	/usr/include/c++/10/bits/exception.h	/^    exception& operator=(exception&&) = default;$/;"	p	class:std::exception	typeref:typename:exception &	access:public	signature:(exception &&)
operator =	/usr/include/c++/10/bits/exception_ptr.h	/^      operator=(const exception_ptr&) _GLIBCXX_USE_NOEXCEPT;$/;"	p	class:std::__exception_ptr::exception_ptr	typeref:typename:exception_ptr &	access:public	signature:(const exception_ptr &)
operator =	/usr/include/c++/10/bits/exception_ptr.h	/^      operator=(exception_ptr&& __o) noexcept$/;"	f	class:std::__exception_ptr::exception_ptr	typeref:typename:exception_ptr &	access:public	signature:(exception_ptr && __o)
operator =	/usr/include/c++/10/bits/ios_base.h	/^      Init& operator=(const Init&) = default;$/;"	p	class:std::ios_base::Init	typeref:typename:Init &	access:public	signature:(const Init &)
operator =	/usr/include/c++/10/bits/ios_base.h	/^    operator=(const ios_base&) = delete;$/;"	p	class:std::ios_base	typeref:typename:ios_base &	access:public	signature:(const ios_base &)
operator =	/usr/include/c++/10/bits/ios_base.h	/^    operator=(const ios_base&);$/;"	p	class:std::ios_base	typeref:typename:ios_base &	access:private	signature:(const ios_base &)
operator =	/usr/include/c++/10/bits/locale_classes.h	/^    operator=(const _Impl&);  \/\/ Not defined.$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const _Impl &)
operator =	/usr/include/c++/10/bits/locale_classes.h	/^    operator=(const facet&) = delete;$/;"	p	class:std::locale::facet	typeref:typename:facet &	access:private	signature:(const facet &)
operator =	/usr/include/c++/10/bits/locale_classes.h	/^    operator=(const facet&);  \/\/ Not defined.$/;"	p	class:std::locale::facet	typeref:typename:facet &	access:private	signature:(const facet &)
operator =	/usr/include/c++/10/bits/locale_classes.h	/^    operator=(const id&);  \/\/ Not defined.$/;"	p	class:std::locale::id	typeref:typename:void	access:private	signature:(const id &)
operator =	/usr/include/c++/10/bits/locale_classes.h	/^    operator=(const locale& __other) throw();$/;"	p	class:std::locale	typeref:typename:const locale &	access:public	signature:(const locale & __other)
operator =	/usr/include/c++/10/bits/locale_facets.h	/^      operator=(const __numpunct_cache&);$/;"	p	struct:std::__numpunct_cache	typeref:typename:__numpunct_cache &	access:private	signature:(const __numpunct_cache &)
operator =	/usr/include/c++/10/bits/nested_exception.h	/^    nested_exception& operator=(const nested_exception&) noexcept = default;$/;"	p	class:std::nested_exception	typeref:typename:nested_exception &	access:public	signature:(const nested_exception &)
operator =	/usr/include/c++/10/bits/postypes.h	/^      fpos& operator=(const fpos&) = default;$/;"	p	class:std::fpos	typeref:typename:fpos &	access:public	signature:(const fpos &)
operator =	/usr/include/c++/10/bits/stl_iterator.h	/^	operator=(const counted_iterator<_It2>& __x)$/;"	f	class:std::counted_iterator	typeref:typename:requires assignable_from<_It &,const _It2 &> counted_iterator &	access:public	signature:(const counted_iterator<_It2> & __x)
operator =	/usr/include/c++/10/bits/stl_iterator.h	/^	operator=(const move_sentinel<_S2>& __s)$/;"	f	class:std::move_sentinel	typeref:typename:requires assignable_from<_Sent &,const _S2 &> move_sentinel &	access:public	signature:(const move_sentinel<_S2> & __s)
operator =	/usr/include/c++/10/bits/stl_iterator.h	/^      operator=(const common_iterator<_It2, _Sent2>& __x)$/;"	f	class:std::common_iterator	access:public	signature:(const common_iterator<_It2,_Sent2> & __x)
operator =	/usr/include/c++/10/bits/stl_iterator.h	/^      operator=(const typename _Container::value_type& __value)$/;"	f	class:std::back_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR back_insert_iterator &	access:public	signature:(const typename _Container::value_type & __value)
operator =	/usr/include/c++/10/bits/stl_iterator.h	/^      operator=(const typename _Container::value_type& __value)$/;"	f	class:std::front_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR front_insert_iterator &	access:public	signature:(const typename _Container::value_type & __value)
operator =	/usr/include/c++/10/bits/stl_iterator.h	/^      operator=(const typename _Container::value_type& __value)$/;"	f	class:std::insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR insert_iterator &	access:public	signature:(const typename _Container::value_type & __value)
operator =	/usr/include/c++/10/bits/stl_iterator.h	/^      operator=(typename _Container::const_reference __value)$/;"	f	class:std::back_insert_iterator	typeref:typename:back_insert_iterator &	access:public	signature:(typename _Container::const_reference __value)
operator =	/usr/include/c++/10/bits/stl_iterator.h	/^      operator=(typename _Container::const_reference __value)$/;"	f	class:std::front_insert_iterator	typeref:typename:front_insert_iterator &	access:public	signature:(typename _Container::const_reference __value)
operator =	/usr/include/c++/10/bits/stl_iterator.h	/^      operator=(typename _Container::const_reference __value)$/;"	f	class:std::insert_iterator	typeref:typename:insert_iterator &	access:public	signature:(typename _Container::const_reference __value)
operator =	/usr/include/c++/10/bits/stl_iterator.h	/^      operator=(typename _Container::value_type&& __value)$/;"	f	class:std::back_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR back_insert_iterator &	access:public	signature:(typename _Container::value_type && __value)
operator =	/usr/include/c++/10/bits/stl_iterator.h	/^      operator=(typename _Container::value_type&& __value)$/;"	f	class:std::front_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR front_insert_iterator &	access:public	signature:(typename _Container::value_type && __value)
operator =	/usr/include/c++/10/bits/stl_iterator.h	/^      operator=(typename _Container::value_type&& __value)$/;"	f	class:std::insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR insert_iterator &	access:public	signature:(typename _Container::value_type && __value)
operator =	/usr/include/c++/10/bits/stl_iterator.h	/^      reverse_iterator& operator=(const reverse_iterator&) = default;$/;"	p	class:std::reverse_iterator	typeref:typename:reverse_iterator &	access:public	signature:(const reverse_iterator &)
operator =	/usr/include/c++/10/bits/stl_iterator.h	/^    operator=(const common_iterator& __x)$/;"	f	class:std::common_iterator	typeref:typename:common_iterator &	access:public	signature:(const common_iterator & __x)
operator =	/usr/include/c++/10/bits/stl_pair.h	/^	operator=(const pair<_U1, _U2>& __p)$/;"	f	struct:std::pair	access:public	signature:(const pair<_U1,_U2> & __p)
operator =	/usr/include/c++/10/bits/stl_pair.h	/^	operator=(pair<_U1, _U2>&& __p)$/;"	f	struct:std::pair	access:public	signature:(pair<_U1,_U2> && __p)
operator =	/usr/include/c++/10/bits/stl_pair.h	/^      operator=(typename conditional<$/;"	f	struct:std::pair	typeref:typename:_GLIBCXX20_CONSTEXPR pair &	access:public	signature:(typename conditional<__and_<is_copy_assignable<_T1>,is_copy_assignable<_T2>>::value,const pair &,const __nonesuch &>::type __p)
operator =	/usr/include/c++/10/bits/stl_pair.h	/^      operator=(typename conditional<$/;"	f	struct:std::pair	typeref:typename:_GLIBCXX20_CONSTEXPR pair &	access:public	signature:(typename conditional<__and_<is_move_assignable<_T1>,is_move_assignable<_T2>>::value,pair &&,__nonesuch &&>::type __p)
operator =	/usr/include/c++/10/bits/stl_pair.h	/^    __pair_base& operator=(const __pair_base&) = delete;$/;"	p	class:std::__pair_base	typeref:typename:__pair_base &	access:private	signature:(const __pair_base &)
operator =	/usr/include/c++/10/bits/streambuf_iterator.h	/^      operator=(_CharT __c)$/;"	f	class:std::ostreambuf_iterator	typeref:typename:ostreambuf_iterator &	access:public	signature:(_CharT __c)
operator =	/usr/include/c++/10/bits/streambuf_iterator.h	/^      operator=(const istreambuf_iterator&) noexcept = default;$/;"	p	class:std::istreambuf_iterator	typeref:typename:istreambuf_iterator &	access:public	signature:(const istreambuf_iterator &)
operator ==	/usr/include/c++/10/bits/allocator.h	/^      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const allocator &,const allocator &)
operator ==	/usr/include/c++/10/bits/allocator.h	/^    operator==(const allocator<_T1>&, const allocator<_T2>&)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const allocator<_T1> &,const allocator<_T2> &)
operator ==	/usr/include/c++/10/bits/basic_string.h	/^    operator==(const _CharT* __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator ==	/usr/include/c++/10/bits/basic_string.h	/^    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
operator ==	/usr/include/c++/10/bits/basic_string.h	/^    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator ==	/usr/include/c++/10/bits/basic_string.h	/^    operator==(const basic_string<_CharT>& __lhs,$/;"	f	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,bool>::__type	signature:(const basic_string<_CharT> & __lhs,const basic_string<_CharT> & __rhs)
operator ==	/usr/include/c++/10/bits/exception_ptr.h	/^    operator==(const exception_ptr&, const exception_ptr&)$/;"	p	namespace:std::__exception_ptr	typeref:typename:bool	signature:(const exception_ptr &,const exception_ptr &)
operator ==	/usr/include/c++/10/bits/iterator_concepts.h	/^      operator==(unreachable_sentinel_t, const _It&) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(unreachable_sentinel_t,const _It &)
operator ==	/usr/include/c++/10/bits/locale_classes.h	/^    operator==(const locale& __other) const throw();$/;"	p	class:std::locale	typeref:typename:bool	access:public	signature:(const locale & __other) const
operator ==	/usr/include/c++/10/bits/postypes.h	/^    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)$/;"	f	namespace:std	typeref:typename:bool	signature:(const fpos<_StateT> & __lhs,const fpos<_StateT> & __rhs)
operator ==	/usr/include/c++/10/bits/stl_iterator.h	/^	operator==(const counted_iterator& __x,$/;"	f	namespace:std	typeref:typename:bool	signature:(const counted_iterator & __x,const counted_iterator<_It2> & __y)
operator ==	/usr/include/c++/10/bits/stl_iterator.h	/^	operator==(const move_iterator& __x, const move_sentinel<_Sent>& __y)$/;"	f	namespace:std	typeref:typename:bool	signature:(const move_iterator & __x,const move_sentinel<_Sent> & __y)
operator ==	/usr/include/c++/10/bits/stl_iterator.h	/^      operator==(const common_iterator& __x,$/;"	f	namespace:std	typeref:typename:requires sentinel_for<_Sent,_It2> && equality_comparable_with<_It,_It2> bool	signature:(const common_iterator & __x,const common_iterator<_It2,_Sent2> & __y)
operator ==	/usr/include/c++/10/bits/stl_iterator.h	/^      operator==(const common_iterator& __x,$/;"	f	namespace:std	typeref:typename:requires sentinel_for<_Sent,_It2> bool	signature:(const common_iterator & __x,const common_iterator<_It2,_Sent2> & __y)
operator ==	/usr/include/c++/10/bits/stl_iterator.h	/^      operator==(const counted_iterator& __x, default_sentinel_t)$/;"	f	namespace:std	typeref:typename:bool	signature:(const counted_iterator & __x,default_sentinel_t)
operator ==	/usr/include/c++/10/bits/stl_iterator.h	/^    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
operator ==	/usr/include/c++/10/bits/stl_iterator.h	/^    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
operator ==	/usr/include/c++/10/bits/stl_iterator.h	/^    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
operator ==	/usr/include/c++/10/bits/stl_iterator.h	/^    operator==(const move_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_Iterator> & __x,const move_iterator<_Iterator> & __y)
operator ==	/usr/include/c++/10/bits/stl_iterator.h	/^    operator==(const move_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_IteratorL> & __x,const move_iterator<_IteratorR> & __y)
operator ==	/usr/include/c++/10/bits/stl_iterator.h	/^    operator==(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
operator ==	/usr/include/c++/10/bits/stl_iterator.h	/^    operator==(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator ==	/usr/include/c++/10/bits/stl_iterator.h	/^    operator==(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator ==	/usr/include/c++/10/bits/stl_pair.h	/^    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
operator ==	/usr/include/c++/10/bits/streambuf_iterator.h	/^      operator==(const istreambuf_iterator& __i, default_sentinel_t __s)$/;"	f	namespace:std	typeref:typename:bool	signature:(const istreambuf_iterator & __i,default_sentinel_t __s)
operator ==	/usr/include/c++/10/bits/streambuf_iterator.h	/^    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,$/;"	f	namespace:std	typeref:typename:bool	signature:(const istreambuf_iterator<_CharT,_Traits> & __a,const istreambuf_iterator<_CharT,_Traits> & __b)
operator ==	/usr/include/c++/10/ext/new_allocator.h	/^	operator==(const new_allocator&, const new_allocator<_Up>&)$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const new_allocator &,const new_allocator<_Up> &)
operator >	/usr/include/c++/10/bits/basic_string.h	/^    operator>(const _CharT* __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator >	/usr/include/c++/10/bits/basic_string.h	/^    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
operator >	/usr/include/c++/10/bits/basic_string.h	/^    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator >	/usr/include/c++/10/bits/stl_iterator.h	/^    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
operator >	/usr/include/c++/10/bits/stl_iterator.h	/^    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
operator >	/usr/include/c++/10/bits/stl_iterator.h	/^    operator>(const move_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_Iterator> & __x,const move_iterator<_Iterator> & __y)
operator >	/usr/include/c++/10/bits/stl_iterator.h	/^    operator>(const move_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_IteratorL> & __x,const move_iterator<_IteratorR> & __y)
operator >	/usr/include/c++/10/bits/stl_iterator.h	/^    operator>(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
operator >	/usr/include/c++/10/bits/stl_iterator.h	/^    operator>(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator >	/usr/include/c++/10/bits/stl_iterator.h	/^    operator>(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator >	/usr/include/c++/10/bits/stl_pair.h	/^    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
operator >=	/usr/include/c++/10/bits/basic_string.h	/^    operator>=(const _CharT* __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator >=	/usr/include/c++/10/bits/basic_string.h	/^    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
operator >=	/usr/include/c++/10/bits/basic_string.h	/^    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator >=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
operator >=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
operator >=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator>=(const move_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_Iterator> & __x,const move_iterator<_Iterator> & __y)
operator >=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator>=(const move_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_IteratorL> & __x,const move_iterator<_IteratorR> & __y)
operator >=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator>=(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
operator >=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator>=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator >=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator>=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator >=	/usr/include/c++/10/bits/stl_pair.h	/^    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
operator >>	/usr/include/c++/10/bits/basic_string.h	/^    operator>>(basic_istream<_CharT, _Traits>& __is,$/;"	p	namespace:std	typeref:typename:basic_istream<_CharT,_Traits> &	signature:(basic_istream<_CharT,_Traits> & __is,basic_string<_CharT,_Traits,_Alloc> & __str)
operator >>	/usr/include/c++/10/bits/basic_string.h	/^    operator>>(basic_istream<char>& __is, basic_string<char>& __str);$/;"	p	namespace:std	typeref:typename:basic_istream<char> &	signature:(basic_istream<char> & __is,basic_string<char> & __str)
operator []	/usr/include/c++/10/bits/basic_string.h	/^      operator[](size_type __pos)$/;"	f	class:std::basic_string	typeref:typename:reference	access:public	signature:(size_type __pos)
operator []	/usr/include/c++/10/bits/stl_iterator.h	/^      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR reference	access:public	signature:(difference_type __n) const
operator []	/usr/include/c++/10/bits/stl_iterator.h	/^      operator[](difference_type __n) const$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reference	access:public	signature:(difference_type __n) const
operator []	/usr/include/c++/10/bits/stl_iterator.h	/^      operator[](difference_type __n) const$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reference	access:public	signature:(difference_type __n) const
operator []	/usr/include/c++/10/bits/stl_iterator.h	/^      operator[](iter_difference_t<_It> __n) const$/;"	f	class:std::counted_iterator	typeref:typename:decltype (auto)	access:public	signature:(iter_difference_t<_It> __n) const
operator [] 	/usr/include/c++/10/bits/basic_string.h	/^      operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:const_reference	access:public	signature:(size_type __pos) const
operator ^	/usr/include/c++/10/bits/ios_base.h	/^  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR _Ios_Fmtflags	signature:(_Ios_Fmtflags __a,_Ios_Fmtflags __b)
operator ^	/usr/include/c++/10/bits/ios_base.h	/^  operator^(_Ios_Iostate __a, _Ios_Iostate __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR _Ios_Iostate	signature:(_Ios_Iostate __a,_Ios_Iostate __b)
operator ^	/usr/include/c++/10/bits/ios_base.h	/^  operator^(_Ios_Openmode __a, _Ios_Openmode __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR _Ios_Openmode	signature:(_Ios_Openmode __a,_Ios_Openmode __b)
operator ^=	/usr/include/c++/10/bits/ios_base.h	/^  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)$/;"	f	namespace:std	typeref:typename:const _Ios_Fmtflags &	signature:(_Ios_Fmtflags & __a,_Ios_Fmtflags __b)
operator ^=	/usr/include/c++/10/bits/ios_base.h	/^  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)$/;"	f	namespace:std	typeref:typename:const _Ios_Iostate &	signature:(_Ios_Iostate & __a,_Ios_Iostate __b)
operator ^=	/usr/include/c++/10/bits/ios_base.h	/^  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)$/;"	f	namespace:std	typeref:typename:const _Ios_Openmode &	signature:(_Ios_Openmode & __a,_Ios_Openmode __b)
operator __safe_bool	/usr/include/c++/10/bits/exception_ptr.h	/^      operator __safe_bool() const _GLIBCXX_USE_NOEXCEPT;$/;"	p	class:std::__exception_ptr::exception_ptr	access:public	signature:() const
operator __sv_type	/usr/include/c++/10/bits/basic_string.h	/^      operator __sv_type() const noexcept$/;"	f	class:std::basic_string	access:public	signature:() const
operator streamoff	/usr/include/c++/10/bits/postypes.h	/^      operator streamoff() const { return _M_off; }$/;"	f	class:std::fpos	access:public	signature:() const
operator |	/usr/include/c++/10/bits/ios_base.h	/^  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR _Ios_Fmtflags	signature:(_Ios_Fmtflags __a,_Ios_Fmtflags __b)
operator |	/usr/include/c++/10/bits/ios_base.h	/^  operator|(_Ios_Iostate __a, _Ios_Iostate __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR _Ios_Iostate	signature:(_Ios_Iostate __a,_Ios_Iostate __b)
operator |	/usr/include/c++/10/bits/ios_base.h	/^  operator|(_Ios_Openmode __a, _Ios_Openmode __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR _Ios_Openmode	signature:(_Ios_Openmode __a,_Ios_Openmode __b)
operator |=	/usr/include/c++/10/bits/ios_base.h	/^  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)$/;"	f	namespace:std	typeref:typename:const _Ios_Fmtflags &	signature:(_Ios_Fmtflags & __a,_Ios_Fmtflags __b)
operator |=	/usr/include/c++/10/bits/ios_base.h	/^  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)$/;"	f	namespace:std	typeref:typename:const _Ios_Iostate &	signature:(_Ios_Iostate & __a,_Ios_Iostate __b)
operator |=	/usr/include/c++/10/bits/ios_base.h	/^  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)$/;"	f	namespace:std	typeref:typename:const _Ios_Openmode &	signature:(_Ios_Openmode & __a,_Ios_Openmode __b)
operator ~	/usr/include/c++/10/bits/ios_base.h	/^  operator~(_Ios_Fmtflags __a)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR _Ios_Fmtflags	signature:(_Ios_Fmtflags __a)
operator ~	/usr/include/c++/10/bits/ios_base.h	/^  operator~(_Ios_Iostate __a)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR _Ios_Iostate	signature:(_Ios_Iostate __a)
operator ~	/usr/include/c++/10/bits/ios_base.h	/^  operator~(_Ios_Openmode __a)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR _Ios_Openmode	signature:(_Ios_Openmode __a)
ostream_type	/usr/include/c++/10/bits/streambuf_iterator.h	/^      typedef basic_ostream<_CharT, _Traits>   ostream_type;$/;"	t	class:std::ostreambuf_iterator	typeref:typename:basic_ostream<_CharT,_Traits>	access:public
ostreambuf_iterator	/usr/include/c++/10/bits/streambuf_iterator.h	/^      ostreambuf_iterator() noexcept$/;"	f	class:std::ostreambuf_iterator	access:public	signature:()
ostreambuf_iterator	/usr/include/c++/10/bits/streambuf_iterator.h	/^      ostreambuf_iterator(ostream_type& __s) _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::ostreambuf_iterator	access:public	signature:(ostream_type & __s)
ostreambuf_iterator	/usr/include/c++/10/bits/streambuf_iterator.h	/^      ostreambuf_iterator(streambuf_type* __s) _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::ostreambuf_iterator	access:public	signature:(streambuf_type * __s)
ostreambuf_iterator	/usr/include/c++/10/bits/streambuf_iterator.h	/^    class ostreambuf_iterator$/;"	c	namespace:std	inherits:iterator<output_iterator_tag,void,void,void,void>
other	/usr/include/c++/10/bits/allocator.h	/^	{ typedef allocator<_Tp1> other; };$/;"	t	struct:std::allocator::rebind	typeref:typename:allocator<_Tp1>	access:public
other	/usr/include/c++/10/ext/alloc_traits.h	/^      { typedef typename _Alloc::template rebind<_Tp>::other other; };$/;"	t	struct:__gnu_cxx::__alloc_traits::rebind	typeref:typename:_Alloc::template rebind<_Tp>::other	access:public
other	/usr/include/c++/10/ext/alloc_traits.h	/^      { typedef typename _Base_type::template rebind_alloc<_Tp> other; };$/;"	t	struct:__gnu_cxx::__alloc_traits::rebind	typeref:typename:_Base_type::template rebind_alloc<_Tp>	access:public
other	/usr/include/c++/10/ext/new_allocator.h	/^	{ typedef new_allocator<_Tp1> other; };$/;"	t	struct:__gnu_cxx::new_allocator::rebind	typeref:typename:new_allocator<_Tp1>	access:public
out	/usr/include/c++/10/bits/ios_base.h	/^    static const openmode out =		_S_out;$/;"	m	class:std::ios_base	typeref:typename:const openmode	access:public
output_iterator_tag	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^  struct output_iterator_tag { };$/;"	s	namespace:std
owner_dead	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      owner_dead = 				EOWNERDEAD,$/;"	e	enum:std::errc	access:public
p_cs_precedes	/usr/include/locale.h	/^  char p_cs_precedes;$/;"	m	struct:lconv	typeref:typename:char	access:public
p_sep_by_space	/usr/include/locale.h	/^  char p_sep_by_space;$/;"	m	struct:lconv	typeref:typename:char	access:public
p_sign_posn	/usr/include/locale.h	/^  char p_sign_posn;$/;"	m	struct:lconv	typeref:typename:char	access:public
pair	/usr/include/c++/10/bits/stl_pair.h	/^	constexpr pair(_U1&& __x, _U2&& __y)$/;"	f	struct:std::pair	access:public	signature:(_U1 && __x,_U2 && __y)
pair	/usr/include/c++/10/bits/stl_pair.h	/^	constexpr pair(pair<_U1, _U2>&& __p)$/;"	f	struct:std::pair	access:public	signature:(pair<_U1,_U2> && __p)
pair	/usr/include/c++/10/bits/stl_pair.h	/^	explicit constexpr pair(_U1&& __x, _U2&& __y)$/;"	f	struct:std::pair	access:public	signature:(_U1 && __x,_U2 && __y)
pair	/usr/include/c++/10/bits/stl_pair.h	/^	explicit constexpr pair(const pair<_U1, _U2>& __p)$/;"	f	struct:std::pair	access:public	signature:(const pair<_U1,_U2> & __p)
pair	/usr/include/c++/10/bits/stl_pair.h	/^	explicit constexpr pair(pair<_U1, _U2>&& __p)$/;"	f	struct:std::pair	access:public	signature:(pair<_U1,_U2> && __p)
pair	/usr/include/c++/10/bits/stl_pair.h	/^	pair(const pair<_U1, _U2>& __p)$/;"	f	struct:std::pair	access:public	signature:(const pair<_U1,_U2> & __p)
pair	/usr/include/c++/10/bits/stl_pair.h	/^        constexpr pair(const pair<_U1, _U2>& __p)$/;"	f	struct:std::pair	access:public	signature:(const pair<_U1,_U2> & __p)
pair	/usr/include/c++/10/bits/stl_pair.h	/^        pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);$/;"	p	struct:std::pair	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(piecewise_construct_t,tuple<_Args1...>,tuple<_Args2...>)
pair	/usr/include/c++/10/bits/stl_pair.h	/^        pair(tuple<_Args1...>&, tuple<_Args2...>&,$/;"	p	struct:std::pair	typeref:typename:_GLIBCXX20_CONSTEXPR	access:private	signature:(tuple<_Args1...> &,tuple<_Args2...> &,_Index_tuple<_Indexes1...>,_Index_tuple<_Indexes2...>)
pair	/usr/include/c++/10/bits/stl_pair.h	/^       constexpr pair(_U1&& __x, const _T2& __y)$/;"	f	struct:std::pair	access:public	signature:(_U1 && __x,const _T2 & __y)
pair	/usr/include/c++/10/bits/stl_pair.h	/^       constexpr pair(const _T1& __x, _U2&& __y)$/;"	f	struct:std::pair	access:public	signature:(const _T1 & __x,_U2 && __y)
pair	/usr/include/c++/10/bits/stl_pair.h	/^       explicit constexpr pair(_U1&& __x, const _T2& __y)$/;"	f	struct:std::pair	access:public	signature:(_U1 && __x,const _T2 & __y)
pair	/usr/include/c++/10/bits/stl_pair.h	/^       explicit pair(const _T1& __x, _U2&& __y)$/;"	f	struct:std::pair	access:public	signature:(const _T1 & __x,_U2 && __y)
pair	/usr/include/c++/10/bits/stl_pair.h	/^      _GLIBCXX_CONSTEXPR pair()$/;"	f	struct:std::pair	typeref:typename:_GLIBCXX_CONSTEXPR	access:public	signature:()
pair	/usr/include/c++/10/bits/stl_pair.h	/^      constexpr pair(const _T1& __a, const _T2& __b)$/;"	f	struct:std::pair	access:public	signature:(const _T1 & __a,const _T2 & __b)
pair	/usr/include/c++/10/bits/stl_pair.h	/^      constexpr pair(const pair&) = default;	\/\/\/< Copy constructor$/;"	p	struct:std::pair	access:public	signature:(const pair &)
pair	/usr/include/c++/10/bits/stl_pair.h	/^      constexpr pair(pair&&) = default;		\/\/\/< Move constructor$/;"	p	struct:std::pair	access:public	signature:(pair &&)
pair	/usr/include/c++/10/bits/stl_pair.h	/^      explicit constexpr pair()$/;"	f	struct:std::pair	access:public	signature:()
pair	/usr/include/c++/10/bits/stl_pair.h	/^      explicit constexpr pair(const _T1& __a, const _T2& __b)$/;"	f	struct:std::pair	access:public	signature:(const _T1 & __a,const _T2 & __b)
pair	/usr/include/c++/10/bits/stl_pair.h	/^      pair(const _T1& __a, const _T2& __b)$/;"	f	struct:std::pair	access:public	signature:(const _T1 & __a,const _T2 & __b)
pair	/usr/include/c++/10/bits/stl_pair.h	/^    struct pair$/;"	s	namespace:std	inherits:__pair_base<_T1,_T2>
pair	/usr/include/c++/10/bits/stl_pair.h	/^  template<typename _T1, typename _T2> pair(_T1, _T2) -> pair<_T1, _T2>;$/;"	p	namespace:std	signature:(_T1,_T2)
pclose	/usr/include/stdio.h	/^extern int pclose (FILE *__stream);$/;"	p	typeref:typename:int	signature:(FILE * __stream)
permission_denied	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      permission_denied = 			EACCES,$/;"	e	enum:std::errc	access:public
perror	/usr/include/stdio.h	/^extern void perror (const char *__s);$/;"	p	typeref:typename:void	signature:(const char * __s)
pid_t	/usr/include/sched.h	/^typedef __pid_t pid_t;$/;"	t	typeref:typename:__pid_t
pid_t	/usr/include/time.h	/^typedef __pid_t pid_t;$/;"	t	typeref:typename:__pid_t
pid_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __pid_t pid_t;$/;"	t	typeref:typename:__pid_t
piecewise_construct	/usr/include/c++/10/bits/stl_pair.h	/^  _GLIBCXX17_INLINE constexpr piecewise_construct_t piecewise_construct =$/;"	v	namespace:std	typeref:typename:_GLIBCXX17_INLINE piecewise_construct_t
piecewise_construct_t	/usr/include/c++/10/bits/stl_pair.h	/^  struct piecewise_construct_t { explicit piecewise_construct_t() = default; };$/;"	p	struct:std::piecewise_construct_t	access:public	signature:()
piecewise_construct_t	/usr/include/c++/10/bits/stl_pair.h	/^  struct piecewise_construct_t { explicit piecewise_construct_t() = default; };$/;"	s	namespace:std
plus	/usr/include/c++/10/bits/stl_function.h	/^    struct plus : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
plus	/usr/include/c++/10/bits/stl_function.h	/^    struct plus<void>$/;"	s	namespace:std
pointer	/usr/include/c++/10/bits/alloc_traits.h	/^      using pointer = _Tp*;$/;"	t	struct:std::allocator_traits	typeref:typename:_Tp *	access:public
pointer	/usr/include/c++/10/bits/alloc_traits.h	/^      using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;$/;"	t	struct:std::allocator_traits	typeref:typename:__detected_or_t<value_type *,__pointer,_Alloc>	access:public
pointer	/usr/include/c++/10/bits/allocator.h	/^      typedef _Tp*       pointer;$/;"	t	class:std::allocator	typeref:typename:_Tp *	access:public
pointer	/usr/include/c++/10/bits/allocator.h	/^      typedef void*       pointer;$/;"	t	class:std::allocator	typeref:typename:void *	access:public
pointer	/usr/include/c++/10/bits/basic_string.h	/^      typedef typename _Alloc_traits::pointer		pointer;$/;"	t	class:std::basic_string	typeref:typename:_Alloc_traits::pointer	access:public
pointer	/usr/include/c++/10/bits/iterator_concepts.h	/^      template<typename _Iter> requires requires { typename _Iter::pointer; }$/;"	m	class:std::__iterator_traits::_Iter	typeref:meta:typename
pointer	/usr/include/c++/10/bits/iterator_concepts.h	/^      using pointer	      = typename __ptr<_Iterator>::type;$/;"	t	struct:std::__iterator_traits	typeref:typename:__ptr<_Iterator>::type	access:public
pointer	/usr/include/c++/10/bits/iterator_concepts.h	/^      using pointer	      = void;$/;"	t	struct:std::__iterator_traits	typeref:typename:void	access:public
pointer	/usr/include/c++/10/bits/ptr_traits.h	/^      typedef _Tp* pointer;$/;"	t	struct:std::pointer_traits	typeref:typename:_Tp *	access:public
pointer	/usr/include/c++/10/bits/ptr_traits.h	/^      using pointer = _Ptr;$/;"	t	struct:std::pointer_traits	typeref:typename:_Ptr	access:public
pointer	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef _Iterator					pointer;$/;"	t	class:std::move_iterator	typeref:typename:_Iterator	access:public
pointer	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef typename __traits_type::pointer		pointer;$/;"	t	class:std::reverse_iterator	typeref:typename:__traits_type::pointer	access:public
pointer	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef typename __traits_type::pointer   	pointer;$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:__traits_type::pointer	access:public
pointer	/usr/include/c++/10/bits/stl_iterator.h	/^      using pointer = _Iterator;$/;"	t	class:std::move_iterator	typeref:typename:_Iterator	access:public
pointer	/usr/include/c++/10/bits/stl_iterator.h	/^      using pointer = typename __ptr<_It>::type;$/;"	t	struct:std::iterator_traits	typeref:typename:__ptr<_It>::type	access:public
pointer	/usr/include/c++/10/bits/stl_iterator.h	/^      using pointer = void;$/;"	t	struct:std::iterator_traits	typeref:typename:void	access:public
pointer	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef _Pointer   pointer;$/;"	t	struct:std::iterator	typeref:typename:_Pointer	access:public
pointer	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef _Tp*                        pointer;$/;"	t	struct:std::iterator_traits	typeref:typename:_Tp *	access:public
pointer	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef const _Tp*                  pointer;$/;"	t	struct:std::iterator_traits	typeref:typename:const _Tp *	access:public
pointer	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::pointer           pointer;$/;"	t	struct:std::__iterator_traits	typeref:typename:_Iterator::pointer	access:public
pointer	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::pointer           pointer;$/;"	t	struct:std::iterator_traits	typeref:typename:_Iterator::pointer	access:public
pointer	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      using pointer	      = _Tp*;$/;"	t	struct:std::iterator_traits	typeref:typename:_Tp *	access:public
pointer	/usr/include/c++/10/ext/alloc_traits.h	/^    typedef typename _Alloc::pointer                pointer;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc::pointer	access:public
pointer	/usr/include/c++/10/ext/alloc_traits.h	/^    typedef typename _Base_type::pointer            pointer;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Base_type::pointer	access:public
pointer	/usr/include/c++/10/ext/new_allocator.h	/^      typedef _Tp*       pointer;$/;"	t	class:__gnu_cxx::new_allocator	typeref:typename:_Tp *	access:public
pointer_to	/usr/include/c++/10/bits/ptr_traits.h	/^      pointer_to(__make_not_void<element_type>& __e)$/;"	f	struct:std::pointer_traits	typeref:typename:_Ptr	access:public	signature:(__make_not_void<element_type> & __e)
pointer_to	/usr/include/c++/10/bits/ptr_traits.h	/^      pointer_to(__make_not_void<element_type>& __r) noexcept$/;"	f	struct:std::pointer_traits	typeref:typename:_GLIBCXX20_CONSTEXPR pointer	access:public	signature:(__make_not_void<element_type> & __r)
pointer_to_binary_function	/usr/include/c++/10/bits/stl_function.h	/^      pointer_to_binary_function() { }$/;"	f	class:std::pointer_to_binary_function	access:public	signature:()
pointer_to_binary_function	/usr/include/c++/10/bits/stl_function.h	/^      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))$/;"	f	class:std::pointer_to_binary_function	access:public	signature:(_Result (* __x)(_Arg1,_Arg2))
pointer_to_binary_function	/usr/include/c++/10/bits/stl_function.h	/^    class pointer_to_binary_function$/;"	c	namespace:std	inherits:binary_function<_Arg1,_Arg2,_Result>
pointer_to_unary_function	/usr/include/c++/10/bits/stl_function.h	/^      pointer_to_unary_function() { }$/;"	f	class:std::pointer_to_unary_function	access:public	signature:()
pointer_to_unary_function	/usr/include/c++/10/bits/stl_function.h	/^      pointer_to_unary_function(_Result (*__x)(_Arg))$/;"	f	class:std::pointer_to_unary_function	access:public	signature:(_Result (* __x)(_Arg))
pointer_to_unary_function	/usr/include/c++/10/bits/stl_function.h	/^    class pointer_to_unary_function : public unary_function<_Arg, _Result>$/;"	c	namespace:std	inherits:unary_function<_Arg,_Result>
pointer_traits	/usr/include/c++/10/bits/ptr_traits.h	/^    struct pointer_traits$/;"	s	namespace:std
pointer_traits	/usr/include/c++/10/bits/ptr_traits.h	/^    struct pointer_traits<_Tp*>$/;"	s	namespace:std
pop_back	/usr/include/c++/10/bits/basic_string.h	/^      pop_back() noexcept$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:()
popen	/usr/include/stdio.h	/^extern FILE *popen (const char *__command, const char *__modes) __wur;$/;"	p	typeref:typename:FILE *	signature:(const char * __command,const char * __modes)
pos_type	/usr/include/c++/10/bits/basic_ios.h	/^      typedef typename _Traits::pos_type             pos_type;$/;"	t	class:std::basic_ios	typeref:typename:_Traits::pos_type	access:public
pos_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef std::streampos  pos_type;$/;"	t	struct:__gnu_cxx::_Char_types	typeref:typename:std::streampos	access:public
pos_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef streampos         pos_type;$/;"	t	struct:std::char_traits	typeref:typename:streampos	access:public
pos_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef typename _Char_types<_CharT>::pos_type    pos_type;$/;"	t	struct:__gnu_cxx::char_traits	typeref:typename:_Char_types<_CharT>::pos_type	access:public
pos_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef u16streampos      pos_type;$/;"	t	struct:std::char_traits	typeref:typename:u16streampos	access:public
pos_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef u32streampos      pos_type;$/;"	t	struct:std::char_traits	typeref:typename:u32streampos	access:public
pos_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef u8streampos       pos_type;$/;"	t	struct:std::char_traits	typeref:typename:u8streampos	access:public
pos_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef wstreampos        pos_type;$/;"	t	struct:std::char_traits	typeref:typename:wstreampos	access:public
positive_sign	/usr/include/locale.h	/^  char *positive_sign;		\/* Sign for positive values.  *\/$/;"	m	struct:lconv	typeref:typename:char *	access:public
posix_memalign	/usr/include/stdlib.h	/^extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)$/;"	p	typeref:typename:int	signature:(void ** __memptr,size_t __alignment,size_t __size)
posix_openpt	/usr/include/stdlib.h	/^extern int posix_openpt (int __oflag) __wur;$/;"	p	typeref:typename:int	signature:(int __oflag)
powf	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define powf /;"	d
powl	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define powl /;"	d
ppsfreq	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  __syscall_slong_t ppsfreq;	\/* pps frequency (scaled ppm) (ro) *\/$/;"	m	struct:timex	typeref:typename:__syscall_slong_t	access:public
precision	/usr/include/c++/10/bits/ios_base.h	/^    precision() const$/;"	f	class:std::ios_base	typeref:typename:streamsize	access:public	signature:() const
precision	/usr/include/c++/10/bits/ios_base.h	/^    precision(streamsize __prec)$/;"	f	class:std::ios_base	typeref:typename:streamsize	access:public	signature:(streamsize __prec)
precision	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  __syscall_slong_t precision;	\/* clock precision (usec) (ro) *\/$/;"	m	struct:timex	typeref:typename:__syscall_slong_t	access:public
prev	/usr/include/c++/10/bits/range_access.h	/^    prev(_It __x)$/;"	f	namespace:std::ranges	typeref:typename:_It	signature:(_It __x)
prev	/usr/include/c++/10/bits/range_access.h	/^    prev(_It __x, iter_difference_t<_It> __n)$/;"	f	namespace:std::ranges	typeref:typename:_It	signature:(_It __x,iter_difference_t<_It> __n)
prev	/usr/include/c++/10/bits/range_access.h	/^    prev(_It __x, iter_difference_t<_It> __n, _It __bound)$/;"	f	namespace:std::ranges	typeref:typename:_It	signature:(_It __x,iter_difference_t<_It> __n,_It __bound)
prev	/usr/include/c++/10/bits/stl_iterator_base_funcs.h	/^    prev(_BidirectionalIterator __x, typename$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR _BidirectionalIterator	signature:(_BidirectionalIterator __x,typename iterator_traits<_BidirectionalIterator>::difference_type __n=1)
print	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h	/^    static const mask print 	= _ISprint;$/;"	m	struct:std::ctype_base	typeref:typename:const mask	access:public
print_world	src/lib.c	/^void print_world(){$/;"	f	typeref:typename:void	signature:()
print_world	src/lib.h	/^void print_world();$/;"	p	typeref:typename:void	signature:()
printf	/usr/include/stdio.h	/^extern int printf (const char *__restrict __format, ...);$/;"	p	typeref:typename:int	signature:(const char * __restrict __format,...)
projected	/usr/include/c++/10/bits/iterator_concepts.h	/^    struct projected$/;"	s	namespace:std
propagate_on_container_copy_assignment	/usr/include/c++/10/bits/alloc_traits.h	/^      using propagate_on_container_copy_assignment = false_type;$/;"	t	struct:std::allocator_traits	typeref:typename:false_type	access:public
propagate_on_container_copy_assignment	/usr/include/c++/10/bits/alloc_traits.h	/^      using propagate_on_container_copy_assignment$/;"	t	struct:std::allocator_traits	typeref:typename:__detected_or_t<false_type,__pocca,_Alloc>	access:public
propagate_on_container_move_assignment	/usr/include/c++/10/bits/alloc_traits.h	/^      using propagate_on_container_move_assignment = true_type;$/;"	t	struct:std::allocator_traits	typeref:typename:true_type	access:public
propagate_on_container_move_assignment	/usr/include/c++/10/bits/alloc_traits.h	/^      using propagate_on_container_move_assignment$/;"	t	struct:std::allocator_traits	typeref:typename:__detected_or_t<false_type,__pocma,_Alloc>	access:public
propagate_on_container_move_assignment	/usr/include/c++/10/bits/allocator.h	/^      typedef true_type propagate_on_container_move_assignment;$/;"	t	class:std::allocator	typeref:typename:true_type	access:public
propagate_on_container_move_assignment	/usr/include/c++/10/ext/new_allocator.h	/^      typedef std::true_type propagate_on_container_move_assignment;$/;"	t	class:__gnu_cxx::new_allocator	typeref:typename:std::true_type	access:public
propagate_on_container_swap	/usr/include/c++/10/bits/alloc_traits.h	/^      using propagate_on_container_swap = false_type;$/;"	t	struct:std::allocator_traits	typeref:typename:false_type	access:public
propagate_on_container_swap	/usr/include/c++/10/bits/alloc_traits.h	/^      using propagate_on_container_swap$/;"	t	struct:std::allocator_traits	typeref:typename:__detected_or_t<false_type,__pocs,_Alloc>	access:public
protocol_error	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      protocol_error = 				EPROTO,$/;"	e	enum:std::errc	access:public
protocol_not_supported	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      protocol_not_supported = 			EPROTONOSUPPORT,$/;"	e	enum:std::errc	access:public
pselect	/usr/include/x86_64-linux-gnu/sys/select.h	/^extern int pselect (int __nfds, fd_set *__restrict __readfds,$/;"	p	typeref:typename:int	signature:(int __nfds,fd_set * __restrict __readfds,fd_set * __restrict __writefds,fd_set * __restrict __exceptfds,const struct timespec * __restrict __timeout,const __sigset_t * __restrict __sigmask)
pthread_atfork	/usr/include/pthread.h	/^extern int pthread_atfork (void (*__prepare) (void),$/;"	p	typeref:typename:int	signature:(void (* __prepare)(void),void (* __parent)(void),void (* __child)(void))
pthread_attr_destroy	/usr/include/pthread.h	/^extern int pthread_attr_destroy (pthread_attr_t *__attr)$/;"	p	typeref:typename:int	signature:(pthread_attr_t * __attr)
pthread_attr_getaffinity_np	/usr/include/pthread.h	/^extern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,$/;"	p	typeref:typename:int	signature:(const pthread_attr_t * __attr,size_t __cpusetsize,cpu_set_t * __cpuset)
pthread_attr_getdetachstate	/usr/include/pthread.h	/^extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,$/;"	p	typeref:typename:int	signature:(const pthread_attr_t * __attr,int * __detachstate)
pthread_attr_getguardsize	/usr/include/pthread.h	/^extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,$/;"	p	typeref:typename:int	signature:(const pthread_attr_t * __attr,size_t * __guardsize)
pthread_attr_getinheritsched	/usr/include/pthread.h	/^extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict$/;"	p	typeref:typename:int	signature:(const pthread_attr_t * __restrict __attr,int * __restrict __inherit)
pthread_attr_getschedparam	/usr/include/pthread.h	/^extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,$/;"	p	typeref:typename:int	signature:(const pthread_attr_t * __restrict __attr,struct sched_param * __restrict __param)
pthread_attr_getschedpolicy	/usr/include/pthread.h	/^extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict$/;"	p	typeref:typename:int	signature:(const pthread_attr_t * __restrict __attr,int * __restrict __policy)
pthread_attr_getscope	/usr/include/pthread.h	/^extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,$/;"	p	typeref:typename:int	signature:(const pthread_attr_t * __restrict __attr,int * __restrict __scope)
pthread_attr_getstack	/usr/include/pthread.h	/^extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,$/;"	p	typeref:typename:int	signature:(const pthread_attr_t * __restrict __attr,void ** __restrict __stackaddr,size_t * __restrict __stacksize)
pthread_attr_getstackaddr	/usr/include/pthread.h	/^extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict$/;"	p	typeref:typename:int	signature:(const pthread_attr_t * __restrict __attr,void ** __restrict __stackaddr)
pthread_attr_getstacksize	/usr/include/pthread.h	/^extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict$/;"	p	typeref:typename:int	signature:(const pthread_attr_t * __restrict __attr,size_t * __restrict __stacksize)
pthread_attr_init	/usr/include/pthread.h	/^extern int pthread_attr_init (pthread_attr_t *__attr) __THROW __nonnull ((1));$/;"	p	typeref:typename:int	signature:(pthread_attr_t * __attr)
pthread_attr_setaffinity_np	/usr/include/pthread.h	/^extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,$/;"	p	typeref:typename:int	signature:(pthread_attr_t * __attr,size_t __cpusetsize,const cpu_set_t * __cpuset)
pthread_attr_setdetachstate	/usr/include/pthread.h	/^extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,$/;"	p	typeref:typename:int	signature:(pthread_attr_t * __attr,int __detachstate)
pthread_attr_setguardsize	/usr/include/pthread.h	/^extern int pthread_attr_setguardsize (pthread_attr_t *__attr,$/;"	p	typeref:typename:int	signature:(pthread_attr_t * __attr,size_t __guardsize)
pthread_attr_setinheritsched	/usr/include/pthread.h	/^extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,$/;"	p	typeref:typename:int	signature:(pthread_attr_t * __attr,int __inherit)
pthread_attr_setschedparam	/usr/include/pthread.h	/^extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,$/;"	p	typeref:typename:int	signature:(pthread_attr_t * __restrict __attr,const struct sched_param * __restrict __param)
pthread_attr_setschedpolicy	/usr/include/pthread.h	/^extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)$/;"	p	typeref:typename:int	signature:(pthread_attr_t * __attr,int __policy)
pthread_attr_setscope	/usr/include/pthread.h	/^extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)$/;"	p	typeref:typename:int	signature:(pthread_attr_t * __attr,int __scope)
pthread_attr_setstack	/usr/include/pthread.h	/^extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,$/;"	p	typeref:typename:int	signature:(pthread_attr_t * __attr,void * __stackaddr,size_t __stacksize)
pthread_attr_setstackaddr	/usr/include/pthread.h	/^extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,$/;"	p	typeref:typename:int	signature:(pthread_attr_t * __attr,void * __stackaddr)
pthread_attr_setstacksize	/usr/include/pthread.h	/^extern int pthread_attr_setstacksize (pthread_attr_t *__attr,$/;"	p	typeref:typename:int	signature:(pthread_attr_t * __attr,size_t __stacksize)
pthread_attr_t	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^typedef union pthread_attr_t pthread_attr_t;$/;"	t	typeref:union:pthread_attr_t
pthread_attr_t	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^union pthread_attr_t$/;"	u
pthread_attr_t::__align	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  long int __align;$/;"	m	union:pthread_attr_t	typeref:typename:long int	access:public
pthread_attr_t::__size	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_ATTR_T];$/;"	m	union:pthread_attr_t	typeref:typename:char[]	access:public
pthread_barrier_destroy	/usr/include/pthread.h	/^extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)$/;"	p	typeref:typename:int	signature:(pthread_barrier_t * __barrier)
pthread_barrier_init	/usr/include/pthread.h	/^extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,$/;"	p	typeref:typename:int	signature:(pthread_barrier_t * __restrict __barrier,const pthread_barrierattr_t * __restrict __attr,unsigned int __count)
pthread_barrier_t	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^} pthread_barrier_t;$/;"	t	typeref:union:__anone9c15396070a
pthread_barrier_wait	/usr/include/pthread.h	/^extern int pthread_barrier_wait (pthread_barrier_t *__barrier)$/;"	p	typeref:typename:int	signature:(pthread_barrier_t * __barrier)
pthread_barrierattr_destroy	/usr/include/pthread.h	/^extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)$/;"	p	typeref:typename:int	signature:(pthread_barrierattr_t * __attr)
pthread_barrierattr_getpshared	/usr/include/pthread.h	/^extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *$/;"	p	typeref:typename:int	signature:(const pthread_barrierattr_t * __restrict __attr,int * __restrict __pshared)
pthread_barrierattr_init	/usr/include/pthread.h	/^extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)$/;"	p	typeref:typename:int	signature:(pthread_barrierattr_t * __attr)
pthread_barrierattr_setpshared	/usr/include/pthread.h	/^extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,$/;"	p	typeref:typename:int	signature:(pthread_barrierattr_t * __attr,int __pshared)
pthread_barrierattr_t	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^} pthread_barrierattr_t;$/;"	t	typeref:union:__anone9c15396080a
pthread_cancel	/usr/include/pthread.h	/^extern int pthread_cancel (pthread_t __th);$/;"	p	typeref:typename:int	signature:(pthread_t __th)
pthread_cleanup_pop	/usr/include/pthread.h	/^#  define pthread_cleanup_pop(/;"	d	signature:(execute)
pthread_cleanup_pop	/usr/include/pthread.h	/^# define pthread_cleanup_pop(/;"	d	signature:(execute)
pthread_cleanup_pop_restore_np	/usr/include/pthread.h	/^#   define pthread_cleanup_pop_restore_np(/;"	d	signature:(execute)
pthread_cleanup_pop_restore_np	/usr/include/pthread.h	/^#  define pthread_cleanup_pop_restore_np(/;"	d	signature:(execute)
pthread_cleanup_push	/usr/include/pthread.h	/^#  define pthread_cleanup_push(/;"	d	signature:(routine,arg)
pthread_cleanup_push	/usr/include/pthread.h	/^# define pthread_cleanup_push(/;"	d	signature:(routine,arg)
pthread_cleanup_push_defer_np	/usr/include/pthread.h	/^#   define pthread_cleanup_push_defer_np(/;"	d	signature:(routine,arg)
pthread_cleanup_push_defer_np	/usr/include/pthread.h	/^#  define pthread_cleanup_push_defer_np(/;"	d	signature:(routine,arg)
pthread_clockjoin_np	/usr/include/pthread.h	/^extern int pthread_clockjoin_np (pthread_t __th, void **__thread_return,$/;"	p	typeref:typename:int	signature:(pthread_t __th,void ** __thread_return,clockid_t __clockid,const struct timespec * __abstime)
pthread_cond_broadcast	/usr/include/pthread.h	/^extern int pthread_cond_broadcast (pthread_cond_t *__cond)$/;"	p	typeref:typename:int	signature:(pthread_cond_t * __cond)
pthread_cond_clockwait	/usr/include/pthread.h	/^extern int pthread_cond_clockwait (pthread_cond_t *__restrict __cond,$/;"	p	typeref:typename:int	signature:(pthread_cond_t * __restrict __cond,pthread_mutex_t * __restrict __mutex,__clockid_t __clock_id,const struct timespec * __restrict __abstime)
pthread_cond_destroy	/usr/include/pthread.h	/^extern int pthread_cond_destroy (pthread_cond_t *__cond)$/;"	p	typeref:typename:int	signature:(pthread_cond_t * __cond)
pthread_cond_init	/usr/include/pthread.h	/^extern int pthread_cond_init (pthread_cond_t *__restrict __cond,$/;"	p	typeref:typename:int	signature:(pthread_cond_t * __restrict __cond,const pthread_condattr_t * __restrict __cond_attr)
pthread_cond_signal	/usr/include/pthread.h	/^extern int pthread_cond_signal (pthread_cond_t *__cond)$/;"	p	typeref:typename:int	signature:(pthread_cond_t * __cond)
pthread_cond_t	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^} pthread_cond_t;$/;"	t	typeref:union:__anone9c15396040a
pthread_cond_timedwait	/usr/include/pthread.h	/^extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,$/;"	p	typeref:typename:int	signature:(pthread_cond_t * __restrict __cond,pthread_mutex_t * __restrict __mutex,const struct timespec * __restrict __abstime)
pthread_cond_wait	/usr/include/pthread.h	/^extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,$/;"	p	typeref:typename:int	signature:(pthread_cond_t * __restrict __cond,pthread_mutex_t * __restrict __mutex)
pthread_condattr_destroy	/usr/include/pthread.h	/^extern int pthread_condattr_destroy (pthread_condattr_t *__attr)$/;"	p	typeref:typename:int	signature:(pthread_condattr_t * __attr)
pthread_condattr_getclock	/usr/include/pthread.h	/^extern int pthread_condattr_getclock (const pthread_condattr_t *$/;"	p	typeref:typename:int	signature:(const pthread_condattr_t * __restrict __attr,__clockid_t * __restrict __clock_id)
pthread_condattr_getpshared	/usr/include/pthread.h	/^extern int pthread_condattr_getpshared (const pthread_condattr_t *$/;"	p	typeref:typename:int	signature:(const pthread_condattr_t * __restrict __attr,int * __restrict __pshared)
pthread_condattr_init	/usr/include/pthread.h	/^extern int pthread_condattr_init (pthread_condattr_t *__attr)$/;"	p	typeref:typename:int	signature:(pthread_condattr_t * __attr)
pthread_condattr_setclock	/usr/include/pthread.h	/^extern int pthread_condattr_setclock (pthread_condattr_t *__attr,$/;"	p	typeref:typename:int	signature:(pthread_condattr_t * __attr,__clockid_t __clock_id)
pthread_condattr_setpshared	/usr/include/pthread.h	/^extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,$/;"	p	typeref:typename:int	signature:(pthread_condattr_t * __attr,int __pshared)
pthread_condattr_t	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^} pthread_condattr_t;$/;"	t	typeref:union:__anone9c15396020a
pthread_create	/usr/include/pthread.h	/^extern int pthread_create (pthread_t *__restrict __newthread,$/;"	p	typeref:typename:__BEGIN_DECLS int	signature:(pthread_t * __restrict __newthread,const pthread_attr_t * __restrict __attr,void * (* __start_routine)(void *),void * __restrict __arg)
pthread_detach	/usr/include/pthread.h	/^extern int pthread_detach (pthread_t __th) __THROW;$/;"	p	typeref:typename:int	signature:(pthread_t __th)
pthread_equal	/usr/include/pthread.h	/^extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)$/;"	p	typeref:typename:int	signature:(pthread_t __thread1,pthread_t __thread2)
pthread_exit	/usr/include/pthread.h	/^extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));$/;"	p	typeref:typename:void	signature:(void * __retval)
pthread_getaffinity_np	/usr/include/pthread.h	/^extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,$/;"	p	typeref:typename:int	signature:(pthread_t __th,size_t __cpusetsize,cpu_set_t * __cpuset)
pthread_getattr_default_np	/usr/include/pthread.h	/^extern int pthread_getattr_default_np (pthread_attr_t *__attr)$/;"	p	typeref:typename:int	signature:(pthread_attr_t * __attr)
pthread_getattr_np	/usr/include/pthread.h	/^extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)$/;"	p	typeref:typename:int	signature:(pthread_t __th,pthread_attr_t * __attr)
pthread_getconcurrency	/usr/include/pthread.h	/^extern int pthread_getconcurrency (void) __THROW;$/;"	p	typeref:typename:int	signature:(void)
pthread_getcpuclockid	/usr/include/pthread.h	/^extern int pthread_getcpuclockid (pthread_t __thread_id,$/;"	p	typeref:typename:int	signature:(pthread_t __thread_id,__clockid_t * __clock_id)
pthread_getname_np	/usr/include/pthread.h	/^extern int pthread_getname_np (pthread_t __target_thread, char *__buf,$/;"	p	typeref:typename:int	signature:(pthread_t __target_thread,char * __buf,size_t __buflen)
pthread_getschedparam	/usr/include/pthread.h	/^extern int pthread_getschedparam (pthread_t __target_thread,$/;"	p	typeref:typename:int	signature:(pthread_t __target_thread,int * __restrict __policy,struct sched_param * __restrict __param)
pthread_getspecific	/usr/include/pthread.h	/^extern void *pthread_getspecific (pthread_key_t __key) __THROW;$/;"	p	typeref:typename:void *	signature:(pthread_key_t __key)
pthread_join	/usr/include/pthread.h	/^extern int pthread_join (pthread_t __th, void **__thread_return);$/;"	p	typeref:typename:int	signature:(pthread_t __th,void ** __thread_return)
pthread_key_create	/usr/include/pthread.h	/^extern int pthread_key_create (pthread_key_t *__key,$/;"	p	typeref:typename:int	signature:(pthread_key_t * __key,void (* __destr_function)(void *))
pthread_key_delete	/usr/include/pthread.h	/^extern int pthread_key_delete (pthread_key_t __key) __THROW;$/;"	p	typeref:typename:int	signature:(pthread_key_t __key)
pthread_key_t	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^typedef unsigned int pthread_key_t;$/;"	t	typeref:typename:unsigned int
pthread_mutex_clocklock	/usr/include/pthread.h	/^extern int pthread_mutex_clocklock (pthread_mutex_t *__restrict __mutex,$/;"	p	typeref:typename:int	signature:(pthread_mutex_t * __restrict __mutex,clockid_t __clockid,const struct timespec * __restrict __abstime)
pthread_mutex_consistent	/usr/include/pthread.h	/^extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)$/;"	p	typeref:typename:int	signature:(pthread_mutex_t * __mutex)
pthread_mutex_consistent_np	/usr/include/pthread.h	/^extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)$/;"	p	typeref:typename:int	signature:(pthread_mutex_t * __mutex)
pthread_mutex_destroy	/usr/include/pthread.h	/^extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)$/;"	p	typeref:typename:int	signature:(pthread_mutex_t * __mutex)
pthread_mutex_getprioceiling	/usr/include/pthread.h	/^extern int pthread_mutex_getprioceiling (const pthread_mutex_t *$/;"	p	typeref:typename:int	signature:(const pthread_mutex_t * __restrict __mutex,int * __restrict __prioceiling)
pthread_mutex_init	/usr/include/pthread.h	/^extern int pthread_mutex_init (pthread_mutex_t *__mutex,$/;"	p	typeref:typename:int	signature:(pthread_mutex_t * __mutex,const pthread_mutexattr_t * __mutexattr)
pthread_mutex_lock	/usr/include/pthread.h	/^extern int pthread_mutex_lock (pthread_mutex_t *__mutex)$/;"	p	typeref:typename:int	signature:(pthread_mutex_t * __mutex)
pthread_mutex_setprioceiling	/usr/include/pthread.h	/^extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,$/;"	p	typeref:typename:int	signature:(pthread_mutex_t * __restrict __mutex,int __prioceiling,int * __restrict __old_ceiling)
pthread_mutex_t	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^} pthread_mutex_t;$/;"	t	typeref:union:__anone9c15396030a
pthread_mutex_timedlock	/usr/include/pthread.h	/^extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,$/;"	p	typeref:typename:int	signature:(pthread_mutex_t * __restrict __mutex,const struct timespec * __restrict __abstime)
pthread_mutex_trylock	/usr/include/pthread.h	/^extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)$/;"	p	typeref:typename:int	signature:(pthread_mutex_t * __mutex)
pthread_mutex_unlock	/usr/include/pthread.h	/^extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)$/;"	p	typeref:typename:int	signature:(pthread_mutex_t * __mutex)
pthread_mutexattr_destroy	/usr/include/pthread.h	/^extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)$/;"	p	typeref:typename:int	signature:(pthread_mutexattr_t * __attr)
pthread_mutexattr_getprioceiling	/usr/include/pthread.h	/^extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *$/;"	p	typeref:typename:int	signature:(const pthread_mutexattr_t * __restrict __attr,int * __restrict __prioceiling)
pthread_mutexattr_getprotocol	/usr/include/pthread.h	/^extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *$/;"	p	typeref:typename:int	signature:(const pthread_mutexattr_t * __restrict __attr,int * __restrict __protocol)
pthread_mutexattr_getpshared	/usr/include/pthread.h	/^extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *$/;"	p	typeref:typename:int	signature:(const pthread_mutexattr_t * __restrict __attr,int * __restrict __pshared)
pthread_mutexattr_getrobust	/usr/include/pthread.h	/^extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,$/;"	p	typeref:typename:int	signature:(const pthread_mutexattr_t * __attr,int * __robustness)
pthread_mutexattr_getrobust_np	/usr/include/pthread.h	/^extern int pthread_mutexattr_getrobust_np (const pthread_mutexattr_t *__attr,$/;"	p	typeref:typename:int	signature:(const pthread_mutexattr_t * __attr,int * __robustness)
pthread_mutexattr_gettype	/usr/include/pthread.h	/^extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict$/;"	p	typeref:typename:int	signature:(const pthread_mutexattr_t * __restrict __attr,int * __restrict __kind)
pthread_mutexattr_init	/usr/include/pthread.h	/^extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)$/;"	p	typeref:typename:int	signature:(pthread_mutexattr_t * __attr)
pthread_mutexattr_setprioceiling	/usr/include/pthread.h	/^extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,$/;"	p	typeref:typename:int	signature:(pthread_mutexattr_t * __attr,int __prioceiling)
pthread_mutexattr_setprotocol	/usr/include/pthread.h	/^extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,$/;"	p	typeref:typename:int	signature:(pthread_mutexattr_t * __attr,int __protocol)
pthread_mutexattr_setpshared	/usr/include/pthread.h	/^extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,$/;"	p	typeref:typename:int	signature:(pthread_mutexattr_t * __attr,int __pshared)
pthread_mutexattr_setrobust	/usr/include/pthread.h	/^extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,$/;"	p	typeref:typename:int	signature:(pthread_mutexattr_t * __attr,int __robustness)
pthread_mutexattr_setrobust_np	/usr/include/pthread.h	/^extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *__attr,$/;"	p	typeref:typename:int	signature:(pthread_mutexattr_t * __attr,int __robustness)
pthread_mutexattr_settype	/usr/include/pthread.h	/^extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)$/;"	p	typeref:typename:int	signature:(pthread_mutexattr_t * __attr,int __kind)
pthread_mutexattr_t	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^} pthread_mutexattr_t;$/;"	t	typeref:union:__anone9c15396010a
pthread_once	/usr/include/pthread.h	/^extern int pthread_once (pthread_once_t *__once_control,$/;"	p	typeref:typename:int	signature:(pthread_once_t * __once_control,void (* __init_routine)(void))
pthread_once_t	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^typedef int __ONCE_ALIGNMENT pthread_once_t;$/;"	t	typeref:typename:int __ONCE_ALIGNMENT
pthread_rwlock_clockrdlock	/usr/include/pthread.h	/^extern int pthread_rwlock_clockrdlock (pthread_rwlock_t *__restrict __rwlock,$/;"	p	typeref:typename:int	signature:(pthread_rwlock_t * __restrict __rwlock,clockid_t __clockid,const struct timespec * __restrict __abstime)
pthread_rwlock_clockwrlock	/usr/include/pthread.h	/^extern int pthread_rwlock_clockwrlock (pthread_rwlock_t *__restrict __rwlock,$/;"	p	typeref:typename:int	signature:(pthread_rwlock_t * __restrict __rwlock,clockid_t __clockid,const struct timespec * __restrict __abstime)
pthread_rwlock_destroy	/usr/include/pthread.h	/^extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)$/;"	p	typeref:typename:int	signature:(pthread_rwlock_t * __rwlock)
pthread_rwlock_init	/usr/include/pthread.h	/^extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,$/;"	p	typeref:typename:int	signature:(pthread_rwlock_t * __restrict __rwlock,const pthread_rwlockattr_t * __restrict __attr)
pthread_rwlock_rdlock	/usr/include/pthread.h	/^extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)$/;"	p	typeref:typename:int	signature:(pthread_rwlock_t * __rwlock)
pthread_rwlock_t	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^} pthread_rwlock_t;$/;"	t	typeref:union:__anone9c15396050a
pthread_rwlock_timedrdlock	/usr/include/pthread.h	/^extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,$/;"	p	typeref:typename:int	signature:(pthread_rwlock_t * __restrict __rwlock,const struct timespec * __restrict __abstime)
pthread_rwlock_timedwrlock	/usr/include/pthread.h	/^extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,$/;"	p	typeref:typename:int	signature:(pthread_rwlock_t * __restrict __rwlock,const struct timespec * __restrict __abstime)
pthread_rwlock_tryrdlock	/usr/include/pthread.h	/^extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)$/;"	p	typeref:typename:int	signature:(pthread_rwlock_t * __rwlock)
pthread_rwlock_trywrlock	/usr/include/pthread.h	/^extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)$/;"	p	typeref:typename:int	signature:(pthread_rwlock_t * __rwlock)
pthread_rwlock_unlock	/usr/include/pthread.h	/^extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)$/;"	p	typeref:typename:int	signature:(pthread_rwlock_t * __rwlock)
pthread_rwlock_wrlock	/usr/include/pthread.h	/^extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)$/;"	p	typeref:typename:int	signature:(pthread_rwlock_t * __rwlock)
pthread_rwlockattr_destroy	/usr/include/pthread.h	/^extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)$/;"	p	typeref:typename:int	signature:(pthread_rwlockattr_t * __attr)
pthread_rwlockattr_getkind_np	/usr/include/pthread.h	/^extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *$/;"	p	typeref:typename:int	signature:(const pthread_rwlockattr_t * __restrict __attr,int * __restrict __pref)
pthread_rwlockattr_getpshared	/usr/include/pthread.h	/^extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *$/;"	p	typeref:typename:int	signature:(const pthread_rwlockattr_t * __restrict __attr,int * __restrict __pshared)
pthread_rwlockattr_init	/usr/include/pthread.h	/^extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)$/;"	p	typeref:typename:int	signature:(pthread_rwlockattr_t * __attr)
pthread_rwlockattr_setkind_np	/usr/include/pthread.h	/^extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,$/;"	p	typeref:typename:int	signature:(pthread_rwlockattr_t * __attr,int __pref)
pthread_rwlockattr_setpshared	/usr/include/pthread.h	/^extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,$/;"	p	typeref:typename:int	signature:(pthread_rwlockattr_t * __attr,int __pshared)
pthread_rwlockattr_t	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^} pthread_rwlockattr_t;$/;"	t	typeref:union:__anone9c15396060a
pthread_self	/usr/include/pthread.h	/^extern pthread_t pthread_self (void) __THROW __attribute__ ((__const__));$/;"	p	typeref:typename:pthread_t	signature:(void)
pthread_setaffinity_np	/usr/include/pthread.h	/^extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,$/;"	p	typeref:typename:int	signature:(pthread_t __th,size_t __cpusetsize,const cpu_set_t * __cpuset)
pthread_setattr_default_np	/usr/include/pthread.h	/^extern int pthread_setattr_default_np (const pthread_attr_t *__attr)$/;"	p	typeref:typename:int	signature:(const pthread_attr_t * __attr)
pthread_setcancelstate	/usr/include/pthread.h	/^extern int pthread_setcancelstate (int __state, int *__oldstate);$/;"	p	typeref:typename:int	signature:(int __state,int * __oldstate)
pthread_setcanceltype	/usr/include/pthread.h	/^extern int pthread_setcanceltype (int __type, int *__oldtype);$/;"	p	typeref:typename:int	signature:(int __type,int * __oldtype)
pthread_setconcurrency	/usr/include/pthread.h	/^extern int pthread_setconcurrency (int __level) __THROW;$/;"	p	typeref:typename:int	signature:(int __level)
pthread_setname_np	/usr/include/pthread.h	/^extern int pthread_setname_np (pthread_t __target_thread, const char *__name)$/;"	p	typeref:typename:int	signature:(pthread_t __target_thread,const char * __name)
pthread_setschedparam	/usr/include/pthread.h	/^extern int pthread_setschedparam (pthread_t __target_thread, int __policy,$/;"	p	typeref:typename:int	signature:(pthread_t __target_thread,int __policy,const struct sched_param * __param)
pthread_setschedprio	/usr/include/pthread.h	/^extern int pthread_setschedprio (pthread_t __target_thread, int __prio)$/;"	p	typeref:typename:int	signature:(pthread_t __target_thread,int __prio)
pthread_setspecific	/usr/include/pthread.h	/^extern int pthread_setspecific (pthread_key_t __key,$/;"	p	typeref:typename:int	signature:(pthread_key_t __key,const void * __pointer)
pthread_spin_destroy	/usr/include/pthread.h	/^extern int pthread_spin_destroy (pthread_spinlock_t *__lock)$/;"	p	typeref:typename:int	signature:(pthread_spinlock_t * __lock)
pthread_spin_init	/usr/include/pthread.h	/^extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)$/;"	p	typeref:typename:int	signature:(pthread_spinlock_t * __lock,int __pshared)
pthread_spin_lock	/usr/include/pthread.h	/^extern int pthread_spin_lock (pthread_spinlock_t *__lock)$/;"	p	typeref:typename:int	signature:(pthread_spinlock_t * __lock)
pthread_spin_trylock	/usr/include/pthread.h	/^extern int pthread_spin_trylock (pthread_spinlock_t *__lock)$/;"	p	typeref:typename:int	signature:(pthread_spinlock_t * __lock)
pthread_spin_unlock	/usr/include/pthread.h	/^extern int pthread_spin_unlock (pthread_spinlock_t *__lock)$/;"	p	typeref:typename:int	signature:(pthread_spinlock_t * __lock)
pthread_spinlock_t	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^typedef volatile int pthread_spinlock_t;$/;"	t	typeref:typename:volatile int
pthread_t	/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^typedef unsigned long int pthread_t;$/;"	t	typeref:typename:unsigned long int
pthread_testcancel	/usr/include/pthread.h	/^extern void pthread_testcancel (void);$/;"	p	typeref:typename:void	signature:(void)
pthread_timedjoin_np	/usr/include/pthread.h	/^extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,$/;"	p	typeref:typename:int	signature:(pthread_t __th,void ** __thread_return,const struct timespec * __abstime)
pthread_tryjoin_np	/usr/include/pthread.h	/^extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) __THROW;$/;"	p	typeref:typename:int	signature:(pthread_t __th,void ** __thread_return)
pthread_yield	/usr/include/pthread.h	/^extern int pthread_yield (void) __THROW;$/;"	p	typeref:typename:int	signature:(void)
ptr_fun	/usr/include/c++/10/bits/stl_function.h	/^    ptr_fun(_Result (*__x)(_Arg))$/;"	f	namespace:std	typeref:typename:pointer_to_unary_function<_Arg,_Result>	signature:(_Result (* __x)(_Arg))
ptr_fun	/usr/include/c++/10/bits/stl_function.h	/^    ptr_fun(_Result (*__x)(_Arg1, _Arg2))$/;"	f	namespace:std	typeref:typename:pointer_to_binary_function<_Arg1,_Arg2,_Result>	signature:(_Result (* __x)(_Arg1,_Arg2))
ptrdiff_t	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^  typedef __PTRDIFF_TYPE__	ptrdiff_t;$/;"	t	namespace:std	typeref:typename:__PTRDIFF_TYPE__
ptrdiff_t	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^typedef __PTRDIFF_TYPE__ ptrdiff_t;$/;"	t	typeref:typename:__PTRDIFF_TYPE__
ptsname	/usr/include/stdlib.h	/^extern char *ptsname (int __fd) __THROW __wur;$/;"	p	typeref:typename:char *	signature:(int __fd)
ptsname_r	/usr/include/stdlib.h	/^extern int ptsname_r (int __fd, char *__buf, size_t __buflen)$/;"	p	typeref:typename:int	signature:(int __fd,char * __buf,size_t __buflen)
punct	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h	/^    static const mask punct 	= _ISpunct;$/;"	m	struct:std::ctype_base	typeref:typename:const mask	access:public
push_back	/usr/include/c++/10/bits/basic_string.h	/^      push_back(_CharT __c)$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:(_CharT __c)
put	/usr/include/c++/10/bits/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const$/;"	f	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,bool __v) const
put	/usr/include/c++/10/bits/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill, double __v) const$/;"	f	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,double __v) const
put	/usr/include/c++/10/bits/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill, long __v) const$/;"	f	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,long __v) const
put	/usr/include/c++/10/bits/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill, long long __v) const$/;"	f	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,long long __v) const
put	/usr/include/c++/10/bits/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,const void * __v) const
put	/usr/include/c++/10/bits/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,long double __v) const
put	/usr/include/c++/10/bits/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,unsigned long __v) const
put	/usr/include/c++/10/bits/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,unsigned long long __v) const
putc	/usr/include/stdio.h	/^extern int putc (int __c, FILE *__stream);$/;"	p	typeref:typename:int	signature:(int __c,FILE * __stream)
putc_unlocked	/usr/include/stdio.h	/^extern int putc_unlocked (int __c, FILE *__stream);$/;"	p	typeref:typename:int	signature:(int __c,FILE * __stream)
putchar	/usr/include/stdio.h	/^extern int putchar (int __c);$/;"	p	typeref:typename:int	signature:(int __c)
putchar_unlocked	/usr/include/stdio.h	/^extern int putchar_unlocked (int __c);$/;"	p	typeref:typename:int	signature:(int __c)
putenv	/usr/include/stdlib.h	/^extern int putenv (char *__string) __THROW __nonnull ((1));$/;"	p	typeref:typename:int	signature:(char * __string)
puts	/usr/include/stdio.h	/^extern int puts (const char *__s);$/;"	p	typeref:typename:int	signature:(const char * __s)
putw	/usr/include/stdio.h	/^extern int putw (int __w, FILE *__stream);$/;"	p	typeref:typename:int	signature:(int __w,FILE * __stream)
putwc	/usr/include/wchar.h	/^extern wint_t putwc (wchar_t __wc, __FILE *__stream);$/;"	p	typeref:typename:wint_t	signature:(wchar_t __wc,__FILE * __stream)
putwc_unlocked	/usr/include/wchar.h	/^extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);$/;"	p	typeref:typename:wint_t	signature:(wchar_t __wc,__FILE * __stream)
putwchar	/usr/include/wchar.h	/^extern wint_t putwchar (wchar_t __wc);$/;"	p	typeref:typename:wint_t	signature:(wchar_t __wc)
putwchar_unlocked	/usr/include/wchar.h	/^extern wint_t putwchar_unlocked (wchar_t __wc);$/;"	p	typeref:typename:wint_t	signature:(wchar_t __wc)
pword	/usr/include/c++/10/bits/ios_base.h	/^    pword(int __ix)$/;"	f	class:std::ios_base	typeref:typename:void * &	access:public	signature:(int __ix)
qecvt	/usr/include/stdlib.h	/^extern char *qecvt (long double __value, int __ndigit,$/;"	p	typeref:typename:char *	signature:(long double __value,int __ndigit,int * __restrict __decpt,int * __restrict __sign)
qecvt_r	/usr/include/stdlib.h	/^extern int qecvt_r (long double __value, int __ndigit,$/;"	p	typeref:typename:int	signature:(long double __value,int __ndigit,int * __restrict __decpt,int * __restrict __sign,char * __restrict __buf,size_t __len)
qfcvt	/usr/include/stdlib.h	/^extern char *qfcvt (long double __value, int __ndigit,$/;"	p	typeref:typename:char *	signature:(long double __value,int __ndigit,int * __restrict __decpt,int * __restrict __sign)
qfcvt_r	/usr/include/stdlib.h	/^extern int qfcvt_r (long double __value, int __ndigit,$/;"	p	typeref:typename:int	signature:(long double __value,int __ndigit,int * __restrict __decpt,int * __restrict __sign,char * __restrict __buf,size_t __len)
qfpclass	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define qfpclass /;"	d
qgcvt	/usr/include/stdlib.h	/^extern char *qgcvt (long double __value, int __ndigit, char *__buf)$/;"	p	typeref:typename:char *	signature:(long double __value,int __ndigit,char * __buf)
qsort	/usr/include/stdlib.h	/^extern void qsort (void *__base, size_t __nmemb, size_t __size,$/;"	p	typeref:typename:void	signature:(void * __base,size_t __nmemb,size_t __size,__compar_fn_t __compar)
qsort_r	/usr/include/stdlib.h	/^extern void qsort_r (void *__base, size_t __nmemb, size_t __size,$/;"	p	typeref:typename:void	signature:(void * __base,size_t __nmemb,size_t __size,__compar_d_fn_t __compar,void * __arg)
quad_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __quad_t quad_t;$/;"	t	typeref:typename:__quad_t
quick_exit	/usr/include/stdlib.h	/^extern void quick_exit (int __status) __THROW __attribute__ ((__noreturn__));$/;"	p	typeref:typename:void	signature:(int __status)
quot	/usr/include/stdlib.h	/^    int quot;			\/* Quotient.  *\/$/;"	m	struct:__anonf3b68ce80108	typeref:typename:int	access:public
quot	/usr/include/stdlib.h	/^    long int quot;		\/* Quotient.  *\/$/;"	m	struct:__anonf3b68ce80208	typeref:typename:long int	access:public
quot	/usr/include/stdlib.h	/^    long long int quot;		\/* Quotient.  *\/$/;"	m	struct:__anonf3b68ce80308	typeref:typename:long long int	access:public
rand	/usr/include/stdlib.h	/^extern int rand (void) __THROW;$/;"	p	typeref:typename:int	signature:(void)
rand_deg	/usr/include/stdlib.h	/^    int rand_deg;		\/* Degree of random number generator.  *\/$/;"	m	struct:random_data	typeref:typename:int	access:public
rand_r	/usr/include/stdlib.h	/^extern int rand_r (unsigned int *__seed) __THROW;$/;"	p	typeref:typename:int	signature:(unsigned int * __seed)
rand_sep	/usr/include/stdlib.h	/^    int rand_sep;		\/* Distance between front and rear.  *\/$/;"	m	struct:random_data	typeref:typename:int	access:public
rand_type	/usr/include/stdlib.h	/^    int rand_type;		\/* Type of random number generator.  *\/$/;"	m	struct:random_data	typeref:typename:int	access:public
random	/usr/include/stdlib.h	/^extern long int random (void) __THROW;$/;"	p	typeref:typename:long int	signature:(void)
random_access_iterator_tag	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^  struct random_access_iterator_tag : public bidirectional_iterator_tag { };$/;"	s	namespace:std	inherits:bidirectional_iterator_tag
random_data	/usr/include/stdlib.h	/^struct random_data$/;"	s
random_data::end_ptr	/usr/include/stdlib.h	/^    int32_t *end_ptr;		\/* Pointer behind state table.  *\/$/;"	m	struct:random_data	typeref:typename:int32_t *	access:public
random_data::fptr	/usr/include/stdlib.h	/^    int32_t *fptr;		\/* Front pointer.  *\/$/;"	m	struct:random_data	typeref:typename:int32_t *	access:public
random_data::rand_deg	/usr/include/stdlib.h	/^    int rand_deg;		\/* Degree of random number generator.  *\/$/;"	m	struct:random_data	typeref:typename:int	access:public
random_data::rand_sep	/usr/include/stdlib.h	/^    int rand_sep;		\/* Distance between front and rear.  *\/$/;"	m	struct:random_data	typeref:typename:int	access:public
random_data::rand_type	/usr/include/stdlib.h	/^    int rand_type;		\/* Type of random number generator.  *\/$/;"	m	struct:random_data	typeref:typename:int	access:public
random_data::rptr	/usr/include/stdlib.h	/^    int32_t *rptr;		\/* Rear pointer.  *\/$/;"	m	struct:random_data	typeref:typename:int32_t *	access:public
random_data::state	/usr/include/stdlib.h	/^    int32_t *state;		\/* Array of state values.  *\/$/;"	m	struct:random_data	typeref:typename:int32_t *	access:public
random_r	/usr/include/stdlib.h	/^extern int random_r (struct random_data *__restrict __buf,$/;"	p	typeref:typename:int	signature:(struct random_data * __restrict __buf,int32_t * __restrict __result)
range_difference_t	/usr/include/c++/10/bits/range_access.h	/^    using range_difference_t = iter_difference_t<iterator_t<_Range>>;$/;"	t	namespace:std::ranges	typeref:typename:iter_difference_t<iterator_t<_Range>>
range_reference_t	/usr/include/c++/10/bits/range_access.h	/^    using range_reference_t = iter_reference_t<iterator_t<_Range>>;$/;"	t	namespace:std::ranges	typeref:typename:iter_reference_t<iterator_t<_Range>>
range_rvalue_reference_t	/usr/include/c++/10/bits/range_access.h	/^    using range_rvalue_reference_t$/;"	t	namespace:std::ranges	typeref:typename:iter_rvalue_reference_t<iterator_t<_Range>>
range_size_t	/usr/include/c++/10/bits/range_access.h	/^    using range_size_t = decltype(ranges::size(std::declval<_Range&>()));$/;"	t	namespace:std::ranges
range_value_t	/usr/include/c++/10/bits/range_access.h	/^    using range_value_t = iter_value_t<iterator_t<_Range>>;$/;"	t	namespace:std::ranges	typeref:typename:iter_value_t<iterator_t<_Range>>
ranges	/usr/include/c++/10/bits/iterator_concepts.h	/^  namespace ranges$/;"	n	namespace:std
ranges	/usr/include/c++/10/bits/iterator_concepts.h	/^  namespace ranges::__detail$/;"	n	namespace:std
ranges	/usr/include/c++/10/bits/iterator_concepts.h	/^namespace ranges$/;"	n	namespace:std
ranges	/usr/include/c++/10/bits/range_access.h	/^namespace ranges$/;"	n	namespace:std
ranges	/usr/include/c++/10/bits/range_cmp.h	/^namespace ranges$/;"	n	namespace:std
rbegin	/usr/include/c++/10/bits/basic_string.h	/^      rbegin() _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:reverse_iterator	access:public	signature:()
rbegin	/usr/include/c++/10/bits/basic_string.h	/^      rbegin() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:const_reverse_iterator	access:public	signature:() const
rbegin	/usr/include/c++/10/bits/range_access.h	/^    inline constexpr __cust_access::_RBegin rbegin{};$/;"	v	namespace:std::ranges::__cust	typeref:typename:__cust_access::_RBegin
rbegin	/usr/include/c++/10/bits/range_access.h	/^    rbegin(_Container& __cont) -> decltype(__cont.rbegin())$/;"	f	namespace:std	typeref:typename:decltype (__cont.rbegin ())	signature:(_Container & __cont)
rbegin	/usr/include/c++/10/bits/range_access.h	/^    rbegin(_Tp (&__arr)[_Nm])$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator<_Tp * >	signature:(_Tp (& __arr)[_Nm])
rbegin	/usr/include/c++/10/bits/range_access.h	/^    rbegin(const _Container& __cont) -> decltype(__cont.rbegin())$/;"	f	namespace:std	typeref:typename:decltype (__cont.rbegin ())	signature:(const _Container & __cont)
rbegin	/usr/include/c++/10/bits/range_access.h	/^    rbegin(initializer_list<_Tp> __il)$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator<const _Tp * >	signature:(initializer_list<_Tp> __il)
rbegin	/usr/include/c++/10/bits/range_access.h	/^    void rbegin(auto&) = delete;$/;"	p	namespace:std::ranges::__cust_access	typeref:typename:void	signature:(auto &)
rbegin	/usr/include/c++/10/bits/range_access.h	/^    void rbegin(const auto&) = delete;$/;"	p	namespace:std::ranges::__cust_access	typeref:typename:void	signature:(const auto &)
rdbuf	/usr/include/c++/10/bits/basic_ios.h	/^      rdbuf() const$/;"	f	class:std::basic_ios	typeref:typename:basic_streambuf<_CharT,_Traits> *	access:public	signature:() const
rdbuf	/usr/include/c++/10/bits/basic_ios.h	/^      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);$/;"	p	class:std::basic_ios	typeref:typename:basic_streambuf<_CharT,_Traits> *	access:public	signature:(basic_streambuf<_CharT,_Traits> * __sb)
rdstate	/usr/include/c++/10/bits/basic_ios.h	/^      rdstate() const$/;"	f	class:std::basic_ios	typeref:typename:iostate	access:public	signature:() const
read	/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h	/^  cookie_read_function_t *read;		\/* Read bytes.  *\/$/;"	m	struct:_IO_cookie_io_functions_t	typeref:typename:cookie_read_function_t *	access:public
read_only_file_system	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      read_only_file_system = 			EROFS,$/;"	e	enum:std::errc	access:public
realloc	/usr/include/stdlib.h	/^extern void *realloc (void *__ptr, size_t __size)$/;"	p	typeref:typename:void *	signature:(void * __ptr,size_t __size)
reallocarray	/usr/include/stdlib.h	/^extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)$/;"	p	typeref:typename:void *	signature:(void * __ptr,size_t __nmemb,size_t __size)
realpath	/usr/include/stdlib.h	/^extern char *realpath (const char *__restrict __name,$/;"	p	typeref:typename:char *	signature:(const char * __restrict __name,char * __restrict __resolved)
rebind	/usr/include/c++/10/bits/allocator.h	/^	struct rebind$/;"	s	class:std::allocator	access:public
rebind	/usr/include/c++/10/bits/ptr_traits.h	/^        using rebind = _Up*;$/;"	t	struct:std::pointer_traits	typeref:typename:_Up *	access:public
rebind	/usr/include/c++/10/bits/ptr_traits.h	/^        using rebind = typename __rebind<_Ptr, _Up>::type;$/;"	t	struct:std::pointer_traits	typeref:typename:__rebind<_Ptr,_Up>::type	access:public
rebind	/usr/include/c++/10/ext/alloc_traits.h	/^      struct rebind$/;"	s	struct:__gnu_cxx::__alloc_traits	access:public
rebind	/usr/include/c++/10/ext/new_allocator.h	/^	struct rebind$/;"	s	class:__gnu_cxx::new_allocator	access:public
rebind_alloc	/usr/include/c++/10/bits/alloc_traits.h	/^	using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;$/;"	t	struct:std::allocator_traits	typeref:typename:__alloc_rebind<_Alloc,_Tp>	access:public
rebind_alloc	/usr/include/c++/10/bits/alloc_traits.h	/^	using rebind_alloc = allocator<_Up>;$/;"	t	struct:std::allocator_traits	typeref:typename:allocator<_Up>	access:public
rebind_traits	/usr/include/c++/10/bits/alloc_traits.h	/^	using rebind_traits = allocator_traits<allocator<_Up>>;$/;"	t	struct:std::allocator_traits	typeref:typename:allocator_traits<allocator<_Up>>	access:public
rebind_traits	/usr/include/c++/10/bits/alloc_traits.h	/^	using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;$/;"	t	struct:std::allocator_traits	typeref:typename:allocator_traits<rebind_alloc<_Tp>>	access:public
reference	/usr/include/c++/10/bits/allocator.h	/^      typedef _Tp&       reference;$/;"	t	class:std::allocator	typeref:typename:_Tp &	access:public
reference	/usr/include/c++/10/bits/basic_string.h	/^      typedef typename _Alloc_traits::reference		reference;$/;"	t	class:std::basic_string	typeref:typename:_Alloc_traits::reference	access:public
reference	/usr/include/c++/10/bits/iterator_concepts.h	/^	typename _Iter::reference;$/;"	m	class:std::__detail::_Iter	typeref:meta:typename
reference	/usr/include/c++/10/bits/iterator_concepts.h	/^      template<typename _Iter> requires requires { typename _Iter::reference; }$/;"	m	class:std::__iterator_traits::_Iter	typeref:meta:typename
reference	/usr/include/c++/10/bits/iterator_concepts.h	/^      using reference	      = typename _Iterator::reference;$/;"	t	struct:std::__iterator_traits	typeref:typename:_Iterator::reference	access:public
reference	/usr/include/c++/10/bits/iterator_concepts.h	/^      using reference	      = typename __ref<_Iterator>::type;$/;"	t	struct:std::__iterator_traits	typeref:typename:__ref<_Iterator>::type	access:public
reference	/usr/include/c++/10/bits/iterator_concepts.h	/^      using reference	      = void;$/;"	t	struct:std::__iterator_traits	typeref:typename:void	access:public
reference	/usr/include/c++/10/bits/stl_iterator.h	/^			 __base_ref>::type		reference;$/;"	t	class:std::move_iterator	typeref:typename:conditional<is_reference<__base_ref>::value,typename remove_reference<__base_ref>::type &&,__base_ref>::type	access:public
reference	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef typename __traits_type::reference		reference;$/;"	t	class:std::reverse_iterator	typeref:typename:__traits_type::reference	access:public
reference	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef typename __traits_type::reference 	reference;$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:__traits_type::reference	access:public
reference	/usr/include/c++/10/bits/stl_iterator.h	/^      using reference = iter_reference_t<_It>;$/;"	t	struct:std::iterator_traits	typeref:typename:iter_reference_t<_It>	access:public
reference	/usr/include/c++/10/bits/stl_iterator.h	/^      using reference = iter_rvalue_reference_t<_Iterator>;$/;"	t	class:std::move_iterator	typeref:typename:iter_rvalue_reference_t<_Iterator>	access:public
reference	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef _Reference reference;$/;"	t	struct:std::iterator	typeref:typename:_Reference	access:public
reference	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef _Tp&                        reference;$/;"	t	struct:std::iterator_traits	typeref:typename:_Tp &	access:public
reference	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef const _Tp&                  reference;$/;"	t	struct:std::iterator_traits	typeref:typename:const _Tp &	access:public
reference	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::reference         reference;$/;"	t	struct:std::__iterator_traits	typeref:typename:_Iterator::reference	access:public
reference	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::reference         reference;$/;"	t	struct:std::iterator_traits	typeref:typename:_Iterator::reference	access:public
reference	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      using reference	      = _Tp&;$/;"	t	struct:std::iterator_traits	typeref:typename:_Tp &	access:public
reference	/usr/include/c++/10/bits/streambuf_iterator.h	/^      typedef _CharT& reference; \/\/ Changed to _CharT by LWG 445$/;"	t	class:std::istreambuf_iterator	typeref:typename:_CharT &	access:public
reference	/usr/include/c++/10/ext/alloc_traits.h	/^    typedef typename _Alloc::reference              reference;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc::reference	access:public
reference	/usr/include/c++/10/ext/alloc_traits.h	/^    typedef value_type&                             reference;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:value_type &	access:public
reference	/usr/include/c++/10/ext/new_allocator.h	/^      typedef _Tp&       reference;$/;"	t	class:__gnu_cxx::new_allocator	typeref:typename:_Tp &	access:public
register_callback	/usr/include/c++/10/bits/ios_base.h	/^    register_callback(event_callback __fn, int __index);$/;"	p	class:std::ios_base	typeref:typename:void	access:public	signature:(event_callback __fn,int __index)
register_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef int register_t __attribute__ ((__mode__ (__word__)));$/;"	t	typeref:typename:int
register_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef int register_t;$/;"	t	typeref:typename:int
rem	/usr/include/stdlib.h	/^    int rem;			\/* Remainder.  *\/$/;"	m	struct:__anonf3b68ce80108	typeref:typename:int	access:public
rem	/usr/include/stdlib.h	/^    long int rem;		\/* Remainder.  *\/$/;"	m	struct:__anonf3b68ce80208	typeref:typename:long int	access:public
rem	/usr/include/stdlib.h	/^    long long int rem;		\/* Remainder.  *\/$/;"	m	struct:__anonf3b68ce80308	typeref:typename:long long int	access:public
remove	/usr/include/stdio.h	/^extern int remove (const char *__filename) __THROW;$/;"	p	typeref:typename:int	signature:(const char * __filename)
rename	/usr/include/stdio.h	/^extern int rename (const char *__old, const char *__new) __THROW;$/;"	p	typeref:typename:int	signature:(const char * __old,const char * __new)
renameat	/usr/include/stdio.h	/^extern int renameat (int __oldfd, const char *__old, int __newfd,$/;"	p	typeref:typename:int	signature:(int __oldfd,const char * __old,int __newfd,const char * __new)
renameat2	/usr/include/stdio.h	/^extern int renameat2 (int __oldfd, const char *__old, int __newfd,$/;"	p	typeref:typename:int	signature:(int __oldfd,const char * __old,int __newfd,const char * __new,unsigned int __flags)
rend	/usr/include/c++/10/bits/basic_string.h	/^      rend() _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:reverse_iterator	access:public	signature:()
rend	/usr/include/c++/10/bits/basic_string.h	/^      rend() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:const_reverse_iterator	access:public	signature:() const
rend	/usr/include/c++/10/bits/range_access.h	/^    inline constexpr __cust_access::_REnd rend{};$/;"	v	namespace:std::ranges::__cust	typeref:typename:__cust_access::_REnd
rend	/usr/include/c++/10/bits/range_access.h	/^    rend(_Container& __cont) -> decltype(__cont.rend())$/;"	f	namespace:std	typeref:typename:decltype (__cont.rend ())	signature:(_Container & __cont)
rend	/usr/include/c++/10/bits/range_access.h	/^    rend(_Tp (&__arr)[_Nm])$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator<_Tp * >	signature:(_Tp (& __arr)[_Nm])
rend	/usr/include/c++/10/bits/range_access.h	/^    rend(const _Container& __cont) -> decltype(__cont.rend())$/;"	f	namespace:std	typeref:typename:decltype (__cont.rend ())	signature:(const _Container & __cont)
rend	/usr/include/c++/10/bits/range_access.h	/^    rend(initializer_list<_Tp> __il)$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator<const _Tp * >	signature:(initializer_list<_Tp> __il)
rend	/usr/include/c++/10/bits/range_access.h	/^    void rend(auto&) = delete;$/;"	p	namespace:std::ranges::__cust_access	typeref:typename:void	signature:(auto &)
rend	/usr/include/c++/10/bits/range_access.h	/^    void rend(const auto&) = delete;$/;"	p	namespace:std::ranges::__cust_access	typeref:typename:void	signature:(const auto &)
replace	/usr/include/c++/10/bits/basic_string.h	/^	replace(const_iterator __i1, const_iterator __i2, const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(const_iterator __i1,const_iterator __i2,const _Tp & __svt)
replace	/usr/include/c++/10/bits/basic_string.h	/^	replace(size_type __pos, size_type __n, const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(size_type __pos,size_type __n,const _Tp & __svt)
replace	/usr/include/c++/10/bits/basic_string.h	/^	replace(size_type __pos1, size_type __n1, const _Tp& __svt,$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(size_type __pos1,size_type __n1,const _Tp & __svt,size_type __pos2,size_type __n2=npos)
replace	/usr/include/c++/10/bits/basic_string.h	/^        replace(const_iterator __i1, const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const_iterator __i1,const_iterator __i2,_InputIterator __k1,_InputIterator __k2)
replace	/usr/include/c++/10/bits/basic_string.h	/^        replace(iterator __i1, iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:__enable_if_not_native_iterator<_InputIterator>::__type	access:public	signature:(iterator __i1,iterator __i2,_InputIterator __k1,_InputIterator __k2)
replace	/usr/include/c++/10/bits/basic_string.h	/^      basic_string& replace(const_iterator __i1, const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const_iterator __i1,const_iterator __i2,initializer_list<_CharT> __l)
replace	/usr/include/c++/10/bits/basic_string.h	/^      replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(__const_iterator __i1,__const_iterator __i2,const _CharT * __s)
replace	/usr/include/c++/10/bits/basic_string.h	/^      replace(__const_iterator __i1, __const_iterator __i2, size_type __n,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(__const_iterator __i1,__const_iterator __i2,size_type __n,_CharT __c)
replace	/usr/include/c++/10/bits/basic_string.h	/^      replace(__const_iterator __i1, __const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(__const_iterator __i1,__const_iterator __i2,_CharT * __k1,_CharT * __k2)
replace	/usr/include/c++/10/bits/basic_string.h	/^      replace(__const_iterator __i1, __const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(__const_iterator __i1,__const_iterator __i2,const _CharT * __k1,const _CharT * __k2)
replace	/usr/include/c++/10/bits/basic_string.h	/^      replace(__const_iterator __i1, __const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(__const_iterator __i1,__const_iterator __i2,const _CharT * __s,size_type __n)
replace	/usr/include/c++/10/bits/basic_string.h	/^      replace(__const_iterator __i1, __const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(__const_iterator __i1,__const_iterator __i2,const basic_string & __str)
replace	/usr/include/c++/10/bits/basic_string.h	/^      replace(__const_iterator __i1, __const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(__const_iterator __i1,__const_iterator __i2,const_iterator __k1,const_iterator __k2)
replace	/usr/include/c++/10/bits/basic_string.h	/^      replace(__const_iterator __i1, __const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(__const_iterator __i1,__const_iterator __i2,iterator __k1,iterator __k2)
replace	/usr/include/c++/10/bits/basic_string.h	/^      replace(size_type __pos, size_type __n, const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,size_type __n,const basic_string & __str)
replace	/usr/include/c++/10/bits/basic_string.h	/^      replace(size_type __pos, size_type __n1, const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,size_type __n1,const _CharT * __s)
replace	/usr/include/c++/10/bits/basic_string.h	/^      replace(size_type __pos, size_type __n1, const _CharT* __s,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,size_type __n1,const _CharT * __s,size_type __n2)
replace	/usr/include/c++/10/bits/basic_string.h	/^      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,size_type __n1,size_type __n2,_CharT __c)
replace	/usr/include/c++/10/bits/basic_string.h	/^      replace(size_type __pos1, size_type __n1, const basic_string& __str,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos1,size_type __n1,const basic_string & __str,size_type __pos2,size_type __n2=npos)
reserve	/usr/include/c++/10/bits/basic_string.h	/^      reserve(size_type __res_arg = 0);$/;"	p	class:std::basic_string	typeref:typename:void	access:public	signature:(size_type __res_arg=0)
resize	/usr/include/c++/10/bits/basic_string.h	/^      resize(size_type __n)$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:(size_type __n)
resize	/usr/include/c++/10/bits/basic_string.h	/^      resize(size_type __n, _CharT __c);$/;"	p	class:std::basic_string	typeref:typename:void	access:public	signature:(size_type __n,_CharT __c)
resource_deadlock_would_occur	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      resource_deadlock_would_occur = 		EDEADLK,$/;"	e	enum:std::errc	access:public
resource_unavailable_try_again	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      resource_unavailable_try_again = 		EAGAIN,$/;"	e	enum:std::errc	access:public
result_out_of_range	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      result_out_of_range = 			ERANGE,$/;"	e	enum:std::errc	access:public
result_type	/usr/include/c++/10/bits/stl_function.h	/^      typedef _Result 	result_type;  $/;"	t	struct:std::unary_function	typeref:typename:_Result	access:public
result_type	/usr/include/c++/10/bits/stl_function.h	/^      typedef _Result 	result_type;$/;"	t	struct:std::binary_function	typeref:typename:_Result	access:public
rethrow_exception	/usr/include/c++/10/bits/exception_ptr.h	/^  void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(exception_ptr)
rethrow_if_nested	/usr/include/c++/10/bits/nested_exception.h	/^    rethrow_if_nested(const _Ex& __ex)$/;"	f	namespace:std	typeref:typename:void	signature:(const _Ex & __ex)
rethrow_nested	/usr/include/c++/10/bits/nested_exception.h	/^    rethrow_nested() const$/;"	f	class:std::nested_exception	typeref:typename:void	access:public	signature:() const
reverse_iterator	/usr/include/c++/10/bits/basic_string.h	/^      typedef std::reverse_iterator<iterator>		reverse_iterator;$/;"	t	class:std::basic_string	typeref:typename:std::reverse_iterator<iterator>	access:public
reverse_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^        reverse_iterator(const reverse_iterator<_Iter>& __x)$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR	access:public	signature:(const reverse_iterator<_Iter> & __x)
reverse_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^      reverse_iterator() : current() { }$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR	access:public	signature:()
reverse_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^      reverse_iterator(const reverse_iterator& __x)$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR	access:public	signature:(const reverse_iterator & __x)
reverse_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^      reverse_iterator(iterator_type __x) : current(__x) { }$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR	access:public	signature:(iterator_type __x)
reverse_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    class reverse_iterator$/;"	c	namespace:std	inherits:iterator<typenameiterator_traits<_Iterator>::iterator_category,typenameiterator_traits<_Iterator>::value_type,typenameiterator_traits<_Iterator>::difference_type,typenameiterator_traits<_Iterator>::pointer,typenameiterator_traits<_Iterator>::reference>
rewind	/usr/include/stdio.h	/^extern void rewind (FILE *__stream);$/;"	p	typeref:typename:void	signature:(FILE * __stream)
rfind	/usr/include/c++/10/bits/basic_string.h	/^	rfind(const _Tp& __svt, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=npos) const
rfind	/usr/include/c++/10/bits/basic_string.h	/^      rfind(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT;$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=npos) const
rfind	/usr/include/c++/10/bits/basic_string.h	/^      rfind(const _CharT* __s, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=npos) const
rfind	/usr/include/c++/10/bits/basic_string.h	/^      rfind(const _CharT* __s, size_type __pos, size_type __n) const$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
rfind	/usr/include/c++/10/bits/basic_string.h	/^      rfind(const basic_string& __str, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=npos) const
right	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags right =       _S_right;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
right	/usr/include/c++/10/bits/ios_base.h	/^  right(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
rpmatch	/usr/include/stdlib.h	/^extern int rpmatch (const char *__response) __THROW __nonnull ((1)) __wur;$/;"	p	typeref:typename:int	signature:(const char * __response)
rptr	/usr/include/stdlib.h	/^    int32_t *rptr;		\/* Rear pointer.  *\/$/;"	m	struct:random_data	typeref:typename:int32_t *	access:public
rune_t	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^typedef _BSD_RUNE_T_ rune_t;$/;"	t	typeref:typename:_BSD_RUNE_T_
rune_t	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^typedef __rune_t        rune_t;$/;"	t	typeref:typename:__rune_t
scan_is	/usr/include/c++/10/bits/locale_facets.h	/^      scan_is(mask __m, const char* __lo, const char* __hi) const;$/;"	p	class:std::ctype	typeref:typename:const char *	access:public	signature:(mask __m,const char * __lo,const char * __hi) const
scan_is	/usr/include/c++/10/bits/locale_facets.h	/^      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
scan_is	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_inline.h	/^  scan_is(mask __m, const char* __low, const char* __high) const$/;"	f	class:std::ctype	typeref:typename:const char *	signature:(mask __m,const char * __low,const char * __high) const
scan_not	/usr/include/c++/10/bits/locale_facets.h	/^      scan_not(mask __m, const char* __lo, const char* __hi) const;$/;"	p	class:std::ctype	typeref:typename:const char *	access:public	signature:(mask __m,const char * __lo,const char * __hi) const
scan_not	/usr/include/c++/10/bits/locale_facets.h	/^      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
scan_not	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_inline.h	/^  scan_not(mask __m, const char* __low, const char* __high) const$/;"	f	class:std::ctype	typeref:typename:const char *	signature:(mask __m,const char * __low,const char * __high) const
scanf	/usr/include/stdio.h	/^#  define scanf /;"	d
scanf	/usr/include/stdio.h	/^extern int scanf (const char *__restrict __format, ...) __wur;$/;"	p	typeref:typename:int	signature:(const char * __restrict __format,...)
sched_get_priority_max	/usr/include/sched.h	/^extern int sched_get_priority_max (int __algorithm) __THROW;$/;"	p	typeref:typename:int	signature:(int __algorithm)
sched_get_priority_min	/usr/include/sched.h	/^extern int sched_get_priority_min (int __algorithm) __THROW;$/;"	p	typeref:typename:int	signature:(int __algorithm)
sched_getaffinity	/usr/include/sched.h	/^extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,$/;"	p	typeref:typename:int	signature:(__pid_t __pid,size_t __cpusetsize,cpu_set_t * __cpuset)
sched_getcpu	/usr/include/x86_64-linux-gnu/bits/sched.h	/^extern int sched_getcpu (void) __THROW;$/;"	p	typeref:typename:int	signature:(void)
sched_getparam	/usr/include/sched.h	/^extern int sched_getparam (__pid_t __pid, struct sched_param *__param) __THROW;$/;"	p	typeref:typename:int	signature:(__pid_t __pid,struct sched_param * __param)
sched_getscheduler	/usr/include/sched.h	/^extern int sched_getscheduler (__pid_t __pid) __THROW;$/;"	p	typeref:typename:int	signature:(__pid_t __pid)
sched_param	/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h	/^struct sched_param$/;"	s
sched_param::sched_priority	/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h	/^  int sched_priority;$/;"	m	struct:sched_param	typeref:typename:int	access:public
sched_priority	/usr/include/sched.h	/^#define sched_priority /;"	d
sched_priority	/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h	/^  int sched_priority;$/;"	m	struct:sched_param	typeref:typename:int	access:public
sched_rr_get_interval	/usr/include/sched.h	/^extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) __THROW;$/;"	p	typeref:typename:int	signature:(__pid_t __pid,struct timespec * __t)
sched_setaffinity	/usr/include/sched.h	/^extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,$/;"	p	typeref:typename:int	signature:(__pid_t __pid,size_t __cpusetsize,const cpu_set_t * __cpuset)
sched_setparam	/usr/include/sched.h	/^extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)$/;"	p	typeref:typename:__BEGIN_DECLS int	signature:(__pid_t __pid,const struct sched_param * __param)
sched_setscheduler	/usr/include/sched.h	/^extern int sched_setscheduler (__pid_t __pid, int __policy,$/;"	p	typeref:typename:int	signature:(__pid_t __pid,int __policy,const struct sched_param * __param)
sched_yield	/usr/include/sched.h	/^extern int sched_yield (void) __THROW;$/;"	p	typeref:typename:int	signature:(void)
scientific	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags scientific =  _S_scientific;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
scientific	/usr/include/c++/10/bits/ios_base.h	/^  scientific(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
second	/usr/include/c++/10/bits/stl_pair.h	/^      _T2 second;                \/\/\/< The second member$/;"	m	struct:std::pair	typeref:typename:_T2	access:public
second_argument_type	/usr/include/c++/10/bits/stl_function.h	/^      typedef _Arg2 	second_argument_type;$/;"	t	struct:std::binary_function	typeref:typename:_Arg2	access:public
second_type	/usr/include/c++/10/bits/stl_pair.h	/^      typedef _T2 second_type;   \/\/\/< The type of the `second` member$/;"	t	struct:std::pair	typeref:typename:_T2	access:public
secure_getenv	/usr/include/stdlib.h	/^extern char *secure_getenv (const char *__name)$/;"	p	typeref:typename:char *	signature:(const char * __name)
seed48	/usr/include/stdlib.h	/^extern unsigned short int *seed48 (unsigned short int __seed16v[3])$/;"	p	typeref:typename:unsigned short int *	signature:(unsigned short int __seed16v[3])
seed48_r	/usr/include/stdlib.h	/^extern int seed48_r (unsigned short int __seed16v[3],$/;"	p	typeref:typename:int	signature:(unsigned short int __seed16v[3],struct drand48_data * __buffer)
seek	/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h	/^  cookie_seek_function_t *seek;		\/* Seek\/tell file position.  *\/$/;"	m	struct:_IO_cookie_io_functions_t	typeref:typename:cookie_seek_function_t *	access:public
seekdir	/usr/include/c++/10/bits/ios_base.h	/^    typedef _Ios_Seekdir seekdir;$/;"	t	class:std::ios_base	typeref:typename:_Ios_Seekdir	access:public
select	/usr/include/x86_64-linux-gnu/sys/select.h	/^extern int select (int __nfds, fd_set *__restrict __readfds,$/;"	p	typeref:typename:__BEGIN_DECLS int	signature:(int __nfds,fd_set * __restrict __readfds,fd_set * __restrict __writefds,fd_set * __restrict __exceptfds,struct timeval * __restrict __timeout)
select_on_container_copy_construction	/usr/include/c++/10/bits/alloc_traits.h	/^      select_on_container_copy_construction(const _Alloc& __rhs)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR _Alloc	access:public	signature:(const _Alloc & __rhs)
select_on_container_copy_construction	/usr/include/c++/10/bits/alloc_traits.h	/^      select_on_container_copy_construction(const allocator_type& __rhs)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR allocator_type	access:public	signature:(const allocator_type & __rhs)
sentinel_t	/usr/include/c++/10/bits/range_access.h	/^    using sentinel_t = decltype(ranges::end(std::declval<_Range&>()));$/;"	t	namespace:std::ranges
set_rdbuf	/usr/include/c++/10/bits/basic_ios.h	/^      set_rdbuf(basic_streambuf<_CharT, _Traits>* __sb)$/;"	f	class:std::basic_ios	typeref:typename:void	access:protected	signature:(basic_streambuf<_CharT,_Traits> * __sb)
setbuf	/usr/include/stdio.h	/^extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __THROW;$/;"	p	typeref:typename:void	signature:(FILE * __restrict __stream,char * __restrict __buf)
setbuffer	/usr/include/stdio.h	/^extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,$/;"	p	typeref:typename:void	signature:(FILE * __restrict __stream,char * __restrict __buf,size_t __size)
setenv	/usr/include/stdlib.h	/^extern int setenv (const char *__name, const char *__value, int __replace)$/;"	p	typeref:typename:int	signature:(const char * __name,const char * __value,int __replace)
setf	/usr/include/c++/10/bits/ios_base.h	/^    setf(fmtflags __fmtfl)$/;"	f	class:std::ios_base	typeref:typename:fmtflags	access:public	signature:(fmtflags __fmtfl)
setf	/usr/include/c++/10/bits/ios_base.h	/^    setf(fmtflags __fmtfl, fmtflags __mask)$/;"	f	class:std::ios_base	typeref:typename:fmtflags	access:public	signature:(fmtflags __fmtfl,fmtflags __mask)
setlinebuf	/usr/include/stdio.h	/^extern void setlinebuf (FILE *__stream) __THROW;$/;"	p	typeref:typename:void	signature:(FILE * __stream)
setlocale	/usr/include/locale.h	/^extern char *setlocale (int __category, const char *__locale) __THROW;$/;"	p	typeref:typename:char *	signature:(int __category,const char * __locale)
setns	/usr/include/x86_64-linux-gnu/bits/sched.h	/^extern int setns (int __fd, int __nstype) __THROW;$/;"	p	typeref:typename:int	signature:(int __fd,int __nstype)
setstate	/usr/include/c++/10/bits/basic_ios.h	/^      setstate(iostate __state)$/;"	f	class:std::basic_ios	typeref:typename:void	access:public	signature:(iostate __state)
setstate	/usr/include/stdlib.h	/^extern char *setstate (char *__statebuf) __THROW __nonnull ((1));$/;"	p	typeref:typename:char *	signature:(char * __statebuf)
setstate_r	/usr/include/stdlib.h	/^extern int setstate_r (char *__restrict __statebuf,$/;"	p	typeref:typename:int	signature:(char * __restrict __statebuf,struct random_data * __restrict __buf)
setvbuf	/usr/include/stdio.h	/^extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,$/;"	p	typeref:typename:int	signature:(FILE * __restrict __stream,char * __restrict __buf,int __modes,size_t __n)
shift	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  int shift;			\/* interval duration (s) (shift) (ro) *\/$/;"	m	struct:timex	typeref:typename:int	access:public
showbase	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags showbase =    _S_showbase;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
showbase	/usr/include/c++/10/bits/ios_base.h	/^  showbase(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
showpoint	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags showpoint =   _S_showpoint;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
showpoint	/usr/include/c++/10/bits/ios_base.h	/^  showpoint(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
showpos	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags showpos =     _S_showpos;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
showpos	/usr/include/c++/10/bits/ios_base.h	/^  showpos(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
shrink_to_fit	/usr/include/c++/10/bits/basic_string.h	/^      shrink_to_fit() noexcept$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:()
sigset_t	/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h	/^typedef __sigset_t sigset_t;$/;"	t	typeref:typename:__sigset_t
sincos	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define sincos /;"	d
sincosf	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define sincosf /;"	d
sincosl	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define sincosl /;"	d
sinf	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define sinf /;"	d
sinhf	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define sinhf /;"	d
sinhl	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define sinhl /;"	d
sinl	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define sinl /;"	d
size	/usr/include/c++/10/bits/basic_string.h	/^      size() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:() const
size	/usr/include/c++/10/bits/range_access.h	/^      && requires(_Tp& __t) { ranges::size(__t); };$/;"	p	class:std::ranges::ranges	signature:(__t)
size	/usr/include/c++/10/bits/range_access.h	/^    inline constexpr __cust_access::_Size size{};$/;"	v	namespace:std::ranges::__cust	typeref:typename:__cust_access::_Size
size	/usr/include/c++/10/bits/range_access.h	/^    size(const _Container& __cont) noexcept(noexcept(__cont.size()))$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Container & __cont)
size	/usr/include/c++/10/bits/range_access.h	/^    size(const _Tp (&)[_Nm]) noexcept$/;"	f	namespace:std	typeref:typename:size_t	signature:(const _Tp (&)[_Nm])
size	/usr/include/c++/10/bits/range_access.h	/^    void size(auto&) = delete;$/;"	p	namespace:std::ranges::__cust_access	typeref:typename:void	signature:(auto &)
size	/usr/include/c++/10/bits/range_access.h	/^    void size(const auto&) = delete;$/;"	p	namespace:std::ranges::__cust_access	typeref:typename:void	signature:(const auto &)
size_t	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^  typedef __SIZE_TYPE__ 	size_t;$/;"	t	namespace:std	typeref:typename:__SIZE_TYPE__
size_t	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^typedef __SIZE_TYPE__ size_t;$/;"	t	typeref:typename:__SIZE_TYPE__
size_type	/usr/include/c++/10/bits/alloc_traits.h	/^      using size_type = std::size_t;$/;"	t	struct:std::allocator_traits	typeref:typename:std::size_t	access:public
size_type	/usr/include/c++/10/bits/alloc_traits.h	/^      using size_type = typename _Size<_Alloc, difference_type>::type;$/;"	t	struct:std::allocator_traits	typeref:typename:_Size<_Alloc,difference_type>::type	access:public
size_type	/usr/include/c++/10/bits/allocator.h	/^      typedef size_t      size_type;$/;"	t	class:std::allocator	typeref:typename:size_t	access:public
size_type	/usr/include/c++/10/bits/allocator.h	/^      typedef size_t     size_type;$/;"	t	class:std::allocator	typeref:typename:size_t	access:public
size_type	/usr/include/c++/10/bits/basic_string.h	/^      typedef typename _Alloc_traits::size_type		size_type;$/;"	t	class:std::basic_string	typeref:typename:_Alloc_traits::size_type	access:public
size_type	/usr/include/c++/10/ext/alloc_traits.h	/^    typedef typename _Alloc::size_type              size_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc::size_type	access:public
size_type	/usr/include/c++/10/ext/alloc_traits.h	/^    typedef typename _Base_type::size_type          size_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Base_type::size_type	access:public
size_type	/usr/include/c++/10/ext/new_allocator.h	/^      typedef std::size_t     size_type;$/;"	t	class:__gnu_cxx::new_allocator	typeref:typename:std::size_t	access:public
skipws	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags skipws =      _S_skipws;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
skipws	/usr/include/c++/10/bits/ios_base.h	/^  skipws(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
snprintf	/usr/include/stdio.h	/^extern int snprintf (char *__restrict __s, size_t __maxlen,$/;"	p	typeref:typename:int	signature:(char * __restrict __s,size_t __maxlen,const char * __restrict __format,...)
space	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h	/^    static const mask space 	= _ISspace;$/;"	m	struct:std::ctype_base	typeref:typename:const mask	access:public
sprintf	/usr/include/stdio.h	/^extern int sprintf (char *__restrict __s,$/;"	p	typeref:typename:int	signature:(char * __restrict __s,const char * __restrict __format,...)
sqrtf	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define sqrtf /;"	d
sqrtl	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define sqrtl /;"	d
srand	/usr/include/stdlib.h	/^extern void srand (unsigned int __seed) __THROW;$/;"	p	typeref:typename:void	signature:(unsigned int __seed)
srand48	/usr/include/stdlib.h	/^extern void srand48 (long int __seedval) __THROW;$/;"	p	typeref:typename:void	signature:(long int __seedval)
srand48_r	/usr/include/stdlib.h	/^extern int srand48_r (long int __seedval, struct drand48_data *__buffer)$/;"	p	typeref:typename:int	signature:(long int __seedval,struct drand48_data * __buffer)
srandom	/usr/include/stdlib.h	/^extern void srandom (unsigned int __seed) __THROW;$/;"	p	typeref:typename:void	signature:(unsigned int __seed)
srandom_r	/usr/include/stdlib.h	/^extern int srandom_r (unsigned int __seed, struct random_data *__buf)$/;"	p	typeref:typename:int	signature:(unsigned int __seed,struct random_data * __buf)
sscanf	/usr/include/stdio.h	/^#  define sscanf /;"	d
sscanf	/usr/include/stdio.h	/^extern int sscanf (const char *__restrict __s,$/;"	p	typeref:typename:int	signature:(const char * __restrict __s,const char * __restrict __format,...)
ssize	/usr/include/c++/10/bits/range_access.h	/^    inline constexpr __cust_access::_SSize ssize{};$/;"	v	namespace:std::ranges::__cust	typeref:typename:__cust_access::_SSize
ssize	/usr/include/c++/10/bits/range_access.h	/^    ssize(const _Container& __cont)$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Container & __cont)
ssize	/usr/include/c++/10/bits/range_access.h	/^    ssize(const _Tp (&)[_Num]) noexcept$/;"	f	namespace:std	typeref:typename:ptrdiff_t	signature:(const _Tp (&)[_Num])
ssize_t	/usr/include/stdio.h	/^typedef __ssize_t ssize_t;$/;"	t	typeref:typename:__ssize_t
ssize_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __ssize_t ssize_t;$/;"	t	typeref:typename:__ssize_t
ssize_t	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^typedef long ssize_t;$/;"	t	typeref:typename:long
stabil	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  __syscall_slong_t stabil;	\/* pps stability (scaled ppm) (ro) *\/$/;"	m	struct:timex	typeref:typename:__syscall_slong_t	access:public
starts_with	/usr/include/c++/10/bits/basic_string.h	/^      starts_with(_CharT __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(_CharT __x) const
starts_with	/usr/include/c++/10/bits/basic_string.h	/^      starts_with(basic_string_view<_CharT, _Traits> __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(basic_string_view<_CharT,_Traits> __x) const
starts_with	/usr/include/c++/10/bits/basic_string.h	/^      starts_with(const _CharT* __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(const _CharT * __x) const
state	/usr/include/c++/10/bits/postypes.h	/^      state() const$/;"	f	class:std::fpos	typeref:typename:_StateT	access:public	signature:() const
state	/usr/include/c++/10/bits/postypes.h	/^      state(_StateT __st)$/;"	f	class:std::fpos	typeref:typename:void	access:public	signature:(_StateT __st)
state	/usr/include/stdlib.h	/^    int32_t *state;		\/* Array of state values.  *\/$/;"	m	struct:random_data	typeref:typename:int32_t *	access:public
state_not_recoverable	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      state_not_recoverable = 			ENOTRECOVERABLE,$/;"	e	enum:std::errc	access:public
state_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef mbstate_t         state_type;$/;"	t	struct:std::char_traits	typeref:typename:mbstate_t	access:public
state_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef std::mbstate_t  state_type;$/;"	t	struct:__gnu_cxx::_Char_types	typeref:typename:std::mbstate_t	access:public
state_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef typename _Char_types<_CharT>::state_type  state_type;$/;"	t	struct:__gnu_cxx::char_traits	typeref:typename:_Char_types<_CharT>::state_type	access:public
status	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  int status;			\/* clock command\/status *\/$/;"	m	struct:timex	typeref:typename:int	access:public
stbcnt	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  __syscall_slong_t stbcnt;	\/* stability limit exceeded (ro) *\/$/;"	m	struct:timex	typeref:typename:__syscall_slong_t	access:public
std	/usr/include/c++/10/backward/binders.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/c++/10/bits/alloc_traits.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/c++/10/bits/allocator.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/c++/10/bits/basic_ios.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/c++/10/bits/basic_string.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/c++/10/bits/char_traits.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/c++/10/bits/charconv.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/c++/10/bits/cpp_type_traits.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/c++/10/bits/cxxabi_init_exception.h	/^namespace std$/;"	n
std	/usr/include/c++/10/bits/exception.h	/^namespace std$/;"	n
std	/usr/include/c++/10/bits/exception_ptr.h	/^namespace std $/;"	n
std	/usr/include/c++/10/bits/functexcept.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/c++/10/bits/functional_hash.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/c++/10/bits/hash_bytes.h	/^namespace std$/;"	n
std	/usr/include/c++/10/bits/ios_base.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/c++/10/bits/iterator_concepts.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/c++/10/bits/locale_classes.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/c++/10/bits/locale_facets.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/c++/10/bits/localefwd.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/c++/10/bits/memoryfwd.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/c++/10/bits/move.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/c++/10/bits/nested_exception.h	/^namespace std$/;"	n
std	/usr/include/c++/10/bits/ostream_insert.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/c++/10/bits/postypes.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/c++/10/bits/ptr_traits.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/c++/10/bits/range_access.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/c++/10/bits/range_cmp.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/c++/10/bits/std_abs.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/c++/10/bits/stl_algobase.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/c++/10/bits/stl_construct.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/c++/10/bits/stl_function.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/c++/10/bits/stl_iterator.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/c++/10/bits/stl_iterator_base_funcs.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/c++/10/bits/stl_pair.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/c++/10/bits/streambuf_iterator.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/c++/10/bits/stringfwd.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/c++/10/debug/debug.h	/^namespace std$/;"	n
std	/usr/include/x86_64-linux-gnu/c++/10/bits/c++allocator.h	/^namespace std$/;"	n
std	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^namespace std$/;"	n
std	/usr/include/x86_64-linux-gnu/c++/10/bits/c++locale.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_inline.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std::_Construct	/usr/include/c++/10/bits/stl_construct.h	/^    _Construct(_T1* __p, const _T2& __value)$/;"	f	namespace:std	typeref:typename:void	signature:(_T1 * __p,const _T2 & __value)
std::_Construct	/usr/include/c++/10/bits/stl_construct.h	/^    _Construct(_Tp* __p, _Args&&... __args)$/;"	f	namespace:std	typeref:typename:void	signature:(_Tp * __p,_Args &&...__args)
std::_Construct_novalue	/usr/include/c++/10/bits/stl_construct.h	/^    _Construct_novalue(_T1* __p)$/;"	f	namespace:std	typeref:typename:void	signature:(_T1 * __p)
std::_Destroy	/usr/include/c++/10/bits/alloc_traits.h	/^    _Destroy(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,_Allocator & __alloc)
std::_Destroy	/usr/include/c++/10/bits/alloc_traits.h	/^    _Destroy(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,allocator<_Tp> &)
std::_Destroy	/usr/include/c++/10/bits/stl_construct.h	/^    _Destroy(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_ForwardIterator __first,_ForwardIterator __last)
std::_Destroy	/usr/include/c++/10/bits/stl_construct.h	/^    _Destroy(_ForwardIterator __first, _ForwardIterator __last);$/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_ForwardIterator __first,_ForwardIterator __last)
std::_Destroy	/usr/include/c++/10/bits/stl_construct.h	/^    _Destroy(_Tp* __pointer)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR void	signature:(_Tp * __pointer)
std::_Destroy_aux	/usr/include/c++/10/bits/stl_construct.h	/^    struct _Destroy_aux$/;"	s	namespace:std
std::_Destroy_aux	/usr/include/c++/10/bits/stl_construct.h	/^    struct _Destroy_aux<true>$/;"	s	namespace:std
std::_Destroy_aux::__destroy	/usr/include/c++/10/bits/stl_construct.h	/^	__destroy(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	struct:std::_Destroy_aux	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(_ForwardIterator __first,_ForwardIterator __last)
std::_Destroy_aux::__destroy	/usr/include/c++/10/bits/stl_construct.h	/^        __destroy(_ForwardIterator, _ForwardIterator) { }$/;"	f	struct:std::_Destroy_aux	typeref:typename:void	access:public	signature:(_ForwardIterator,_ForwardIterator)
std::_Destroy_n	/usr/include/c++/10/bits/stl_construct.h	/^    _Destroy_n(_ForwardIterator __first, _Size __count)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_ForwardIterator __first,_Size __count)
std::_Destroy_n_aux	/usr/include/c++/10/bits/stl_construct.h	/^    struct _Destroy_n_aux$/;"	s	namespace:std
std::_Destroy_n_aux	/usr/include/c++/10/bits/stl_construct.h	/^    struct _Destroy_n_aux<true>$/;"	s	namespace:std
std::_Destroy_n_aux::__destroy_n	/usr/include/c++/10/bits/stl_construct.h	/^	__destroy_n(_ForwardIterator __first, _Size __count)$/;"	f	struct:std::_Destroy_n_aux	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	access:public	signature:(_ForwardIterator __first,_Size __count)
std::_Destroy_n_aux::__destroy_n	/usr/include/c++/10/bits/stl_construct.h	/^        __destroy_n(_ForwardIterator __first, _Size __count)$/;"	f	struct:std::_Destroy_n_aux	typeref:typename:_ForwardIterator	access:public	signature:(_ForwardIterator __first,_Size __count)
std::_Fnv_hash_bytes	/usr/include/c++/10/bits/hash_bytes.h	/^  _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);$/;"	p	namespace:std	typeref:typename:size_t	signature:(const void * __ptr,size_t __len,size_t __seed)
std::_Fnv_hash_impl	/usr/include/c++/10/bits/functional_hash.h	/^  struct _Fnv_hash_impl$/;"	s	namespace:std
std::_Fnv_hash_impl::__hash_combine	/usr/include/c++/10/bits/functional_hash.h	/^      __hash_combine(const _Tp& __val, size_t __hash)$/;"	f	struct:std::_Fnv_hash_impl	typeref:typename:size_t	access:public	signature:(const _Tp & __val,size_t __hash)
std::_Fnv_hash_impl::hash	/usr/include/c++/10/bits/functional_hash.h	/^      hash(const _Tp& __val)$/;"	f	struct:std::_Fnv_hash_impl	typeref:typename:size_t	access:public	signature:(const _Tp & __val)
std::_Fnv_hash_impl::hash	/usr/include/c++/10/bits/functional_hash.h	/^    hash(const void* __ptr, size_t __clength,$/;"	f	struct:std::_Fnv_hash_impl	typeref:typename:size_t	access:public	signature:(const void * __ptr,size_t __clength,size_t __seed=static_cast<size_t> (2166136261UL))
std::_GLIBCXX_DEPRECATED	/usr/include/c++/10/backward/binders.h	/^    } _GLIBCXX_DEPRECATED;$/;"	v	namespace:std	typeref:class:std::binder1st
std::_GLIBCXX_DEPRECATED	/usr/include/c++/10/backward/binders.h	/^    } _GLIBCXX_DEPRECATED;$/;"	v	namespace:std	typeref:class:std::binder2nd
std::_Hash_bytes	/usr/include/c++/10/bits/hash_bytes.h	/^  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);$/;"	p	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION size_t	signature:(const void * __ptr,size_t __len,size_t __seed)
std::_Hash_impl	/usr/include/c++/10/bits/functional_hash.h	/^  struct _Hash_impl$/;"	s	namespace:std
std::_Hash_impl::__hash_combine	/usr/include/c++/10/bits/functional_hash.h	/^      __hash_combine(const _Tp& __val, size_t __hash)$/;"	f	struct:std::_Hash_impl	typeref:typename:size_t	access:public	signature:(const _Tp & __val,size_t __hash)
std::_Hash_impl::hash	/usr/include/c++/10/bits/functional_hash.h	/^      hash(const _Tp& __val)$/;"	f	struct:std::_Hash_impl	typeref:typename:size_t	access:public	signature:(const _Tp & __val)
std::_Hash_impl::hash	/usr/include/c++/10/bits/functional_hash.h	/^    hash(const void* __ptr, size_t __clength,$/;"	f	struct:std::_Hash_impl	typeref:typename:size_t	access:public	signature:(const void * __ptr,size_t __clength,size_t __seed=static_cast<size_t> (0xc70f6907UL))
std::_Identity	/usr/include/c++/10/bits/stl_function.h	/^    struct _Identity$/;"	s	namespace:std	inherits:unary_function<_Tp,_Tp>
std::_Identity	/usr/include/c++/10/bits/stl_function.h	/^  template<typename _Tp> struct _Identity<const _Tp> : _Identity<_Tp> { };$/;"	s	namespace:std	inherits:_Identity<_Tp>
std::_Identity::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(_Tp& __x) const$/;"	f	struct:std::_Identity	typeref:typename:_Tp &	access:public	signature:(_Tp & __x) const
std::_Identity::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x) const$/;"	f	struct:std::_Identity	typeref:typename:const _Tp &	access:public	signature:(const _Tp & __x) const
std::_Ios_Fmtflags	/usr/include/c++/10/bits/ios_base.h	/^  enum _Ios_Fmtflags $/;"	g	namespace:std
std::_Ios_Iostate	/usr/include/c++/10/bits/ios_base.h	/^  enum _Ios_Iostate$/;"	g	namespace:std
std::_Ios_Openmode	/usr/include/c++/10/bits/ios_base.h	/^  enum _Ios_Openmode $/;"	g	namespace:std
std::_Ios_Seekdir	/usr/include/c++/10/bits/ios_base.h	/^  enum _Ios_Seekdir $/;"	g	namespace:std
std::_Nested_exception	/usr/include/c++/10/bits/nested_exception.h	/^    struct _Nested_exception : public _Except, public nested_exception$/;"	s	namespace:std	inherits:_Except,nested_exception
std::_Nested_exception::_Nested_exception	/usr/include/c++/10/bits/nested_exception.h	/^      explicit _Nested_exception(_Except&& __ex)$/;"	f	struct:std::_Nested_exception	access:public	signature:(_Except && __ex)
std::_Nested_exception::_Nested_exception	/usr/include/c++/10/bits/nested_exception.h	/^      explicit _Nested_exception(const _Except& __ex)$/;"	f	struct:std::_Nested_exception	access:public	signature:(const _Except & __ex)
std::_PCC	/usr/include/c++/10/bits/stl_pair.h	/^    struct _PCC$/;"	s	namespace:std
std::_PCC	/usr/include/c++/10/bits/stl_pair.h	/^    struct _PCC<false, _T1, _T2>$/;"	s	namespace:std
std::_PCC::_ConstructiblePair	/usr/include/c++/10/bits/stl_pair.h	/^      static constexpr bool _ConstructiblePair()$/;"	f	struct:std::_PCC	typeref:typename:bool	access:public	signature:()
std::_PCC::_CopyMovePair	/usr/include/c++/10/bits/stl_pair.h	/^      static constexpr bool _CopyMovePair()$/;"	f	struct:std::_PCC	typeref:typename:bool	access:public	signature:()
std::_PCC::_ImplicitlyConvertiblePair	/usr/include/c++/10/bits/stl_pair.h	/^      static constexpr bool _ImplicitlyConvertiblePair()$/;"	f	struct:std::_PCC	typeref:typename:bool	access:public	signature:()
std::_PCC::_ImplicitlyMoveConvertiblePair	/usr/include/c++/10/bits/stl_pair.h	/^      static constexpr bool _ImplicitlyMoveConvertiblePair()$/;"	f	struct:std::_PCC	typeref:typename:bool	access:public	signature:()
std::_PCC::_MoveConstructiblePair	/usr/include/c++/10/bits/stl_pair.h	/^      static constexpr bool _MoveConstructiblePair()$/;"	f	struct:std::_PCC	typeref:typename:bool	access:public	signature:()
std::_PCC::_MoveCopyPair	/usr/include/c++/10/bits/stl_pair.h	/^      static constexpr bool _MoveCopyPair()$/;"	f	struct:std::_PCC	typeref:typename:bool	access:public	signature:()
std::_RequireAllocator	/usr/include/c++/10/bits/alloc_traits.h	/^    using _RequireAllocator$/;"	t	namespace:std	typeref:typename:enable_if<__is_allocator<_Alloc>::value,_Alloc>::type
std::_RequireInputIter	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^    using _RequireInputIter =$/;"	t	namespace:std	typeref:typename:__enable_if_t<is_convertible<__iterator_category_t<_InIter>,input_iterator_tag>::value>
std::_RequireNotAllocator	/usr/include/c++/10/bits/alloc_traits.h	/^    using _RequireNotAllocator$/;"	t	namespace:std	typeref:typename:enable_if<!__is_allocator<_Alloc> _Alloc>::type
std::_S_adjustfield	/usr/include/c++/10/bits/ios_base.h	/^      _S_adjustfield 	= _S_left | _S_right | _S_internal,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_app	/usr/include/c++/10/bits/ios_base.h	/^      _S_app 		= 1L << 0,$/;"	e	enum:std::_Ios_Openmode	access:public
std::_S_ate	/usr/include/c++/10/bits/ios_base.h	/^      _S_ate 		= 1L << 1,$/;"	e	enum:std::_Ios_Openmode	access:public
std::_S_badbit	/usr/include/c++/10/bits/ios_base.h	/^      _S_badbit 		= 1L << 0,$/;"	e	enum:std::_Ios_Iostate	access:public
std::_S_basefield	/usr/include/c++/10/bits/ios_base.h	/^      _S_basefield 	= _S_dec | _S_oct | _S_hex,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_beg	/usr/include/c++/10/bits/ios_base.h	/^      _S_beg = 0,$/;"	e	enum:std::_Ios_Seekdir	access:public
std::_S_bin	/usr/include/c++/10/bits/ios_base.h	/^      _S_bin 		= 1L << 2,$/;"	e	enum:std::_Ios_Openmode	access:public
std::_S_boolalpha	/usr/include/c++/10/bits/ios_base.h	/^      _S_boolalpha 	= 1L << 0,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_cur	/usr/include/c++/10/bits/ios_base.h	/^      _S_cur = _GLIBCXX_STDIO_SEEK_CUR,$/;"	e	enum:std::_Ios_Seekdir	access:public
std::_S_dec	/usr/include/c++/10/bits/ios_base.h	/^      _S_dec 		= 1L << 1,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_end	/usr/include/c++/10/bits/ios_base.h	/^      _S_end = _GLIBCXX_STDIO_SEEK_END,$/;"	e	enum:std::_Ios_Seekdir	access:public
std::_S_eofbit	/usr/include/c++/10/bits/ios_base.h	/^      _S_eofbit 		= 1L << 1,$/;"	e	enum:std::_Ios_Iostate	access:public
std::_S_failbit	/usr/include/c++/10/bits/ios_base.h	/^      _S_failbit		= 1L << 2,$/;"	e	enum:std::_Ios_Iostate	access:public
std::_S_fixed	/usr/include/c++/10/bits/ios_base.h	/^      _S_fixed 		= 1L << 2,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_floatfield	/usr/include/c++/10/bits/ios_base.h	/^      _S_floatfield 	= _S_scientific | _S_fixed,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_goodbit	/usr/include/c++/10/bits/ios_base.h	/^      _S_goodbit 		= 0,$/;"	e	enum:std::_Ios_Iostate	access:public
std::_S_hex	/usr/include/c++/10/bits/ios_base.h	/^      _S_hex 		= 1L << 3,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_in	/usr/include/c++/10/bits/ios_base.h	/^      _S_in 		= 1L << 3,$/;"	e	enum:std::_Ios_Openmode	access:public
std::_S_internal	/usr/include/c++/10/bits/ios_base.h	/^      _S_internal 	= 1L << 4,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_ios_fmtflags_end	/usr/include/c++/10/bits/ios_base.h	/^      _S_ios_fmtflags_end = 1L << 16,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_ios_fmtflags_max	/usr/include/c++/10/bits/ios_base.h	/^      _S_ios_fmtflags_max = __INT_MAX__,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_ios_fmtflags_min	/usr/include/c++/10/bits/ios_base.h	/^      _S_ios_fmtflags_min = ~__INT_MAX__$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_ios_iostate_end	/usr/include/c++/10/bits/ios_base.h	/^      _S_ios_iostate_end = 1L << 16,$/;"	e	enum:std::_Ios_Iostate	access:public
std::_S_ios_iostate_max	/usr/include/c++/10/bits/ios_base.h	/^      _S_ios_iostate_max = __INT_MAX__,$/;"	e	enum:std::_Ios_Iostate	access:public
std::_S_ios_iostate_min	/usr/include/c++/10/bits/ios_base.h	/^      _S_ios_iostate_min = ~__INT_MAX__$/;"	e	enum:std::_Ios_Iostate	access:public
std::_S_ios_openmode_end	/usr/include/c++/10/bits/ios_base.h	/^      _S_ios_openmode_end = 1L << 16,$/;"	e	enum:std::_Ios_Openmode	access:public
std::_S_ios_openmode_max	/usr/include/c++/10/bits/ios_base.h	/^      _S_ios_openmode_max = __INT_MAX__,$/;"	e	enum:std::_Ios_Openmode	access:public
std::_S_ios_openmode_min	/usr/include/c++/10/bits/ios_base.h	/^      _S_ios_openmode_min = ~__INT_MAX__$/;"	e	enum:std::_Ios_Openmode	access:public
std::_S_ios_seekdir_end	/usr/include/c++/10/bits/ios_base.h	/^      _S_ios_seekdir_end = 1L << 16 $/;"	e	enum:std::_Ios_Seekdir	access:public
std::_S_left	/usr/include/c++/10/bits/ios_base.h	/^      _S_left 		= 1L << 5,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_oct	/usr/include/c++/10/bits/ios_base.h	/^      _S_oct 		= 1L << 6,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_out	/usr/include/c++/10/bits/ios_base.h	/^      _S_out 		= 1L << 4,$/;"	e	enum:std::_Ios_Openmode	access:public
std::_S_right	/usr/include/c++/10/bits/ios_base.h	/^      _S_right 		= 1L << 7,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_scientific	/usr/include/c++/10/bits/ios_base.h	/^      _S_scientific 	= 1L << 8,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_showbase	/usr/include/c++/10/bits/ios_base.h	/^      _S_showbase 	= 1L << 9,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_showpoint	/usr/include/c++/10/bits/ios_base.h	/^      _S_showpoint 	= 1L << 10,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_showpos	/usr/include/c++/10/bits/ios_base.h	/^      _S_showpos 	= 1L << 11,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_skipws	/usr/include/c++/10/bits/ios_base.h	/^      _S_skipws 	= 1L << 12,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_trunc	/usr/include/c++/10/bits/ios_base.h	/^      _S_trunc 		= 1L << 5,$/;"	e	enum:std::_Ios_Openmode	access:public
std::_S_unitbuf	/usr/include/c++/10/bits/ios_base.h	/^      _S_unitbuf 	= 1L << 13,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_uppercase	/usr/include/c++/10/bits/ios_base.h	/^      _S_uppercase 	= 1L << 14,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_Select1st	/usr/include/c++/10/bits/stl_function.h	/^    struct _Select1st$/;"	s	namespace:std	inherits:unary_function<_Pair,typename_Pair::first_type>
std::_Select1st::operator ()	/usr/include/c++/10/bits/stl_function.h	/^        operator()(_Pair2& __x) const$/;"	f	struct:std::_Select1st	typeref:typename:_Pair2::first_type &	access:public	signature:(_Pair2 & __x) const
std::_Select1st::operator ()	/usr/include/c++/10/bits/stl_function.h	/^        operator()(const _Pair2& __x) const$/;"	f	struct:std::_Select1st	typeref:typename:const typename _Pair2::first_type &	access:public	signature:(const _Pair2 & __x) const
std::_Select1st::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(_Pair& __x) const$/;"	f	struct:std::_Select1st	typeref:typename:_Pair::first_type &	access:public	signature:(_Pair & __x) const
std::_Select1st::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Pair& __x) const$/;"	f	struct:std::_Select1st	typeref:typename:const typename _Pair::first_type &	access:public	signature:(const _Pair & __x) const
std::_Select2nd	/usr/include/c++/10/bits/stl_function.h	/^    struct _Select2nd$/;"	s	namespace:std	inherits:unary_function<_Pair,typename_Pair::second_type>
std::_Select2nd::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(_Pair& __x) const$/;"	f	struct:std::_Select2nd	typeref:typename:_Pair::second_type &	access:public	signature:(_Pair & __x) const
std::_Select2nd::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Pair& __x) const$/;"	f	struct:std::_Select2nd	typeref:typename:const typename _Pair::second_type &	access:public	signature:(const _Pair & __x) const
std::_Tp::difference_type	/usr/include/c++/10/bits/iterator_concepts.h	/^  template<typename _Tp> requires requires { typename _Tp::difference_type; }$/;"	m	class:std::_Tp	typeref:meta:typename
std::_Tp::element_type	/usr/include/c++/10/bits/iterator_concepts.h	/^  template<typename _Tp> requires requires { typename _Tp::element_type; }$/;"	m	class:std::_Tp	typeref:meta:typename
std::_Tp::value_type	/usr/include/c++/10/bits/iterator_concepts.h	/^  template<typename _Tp> requires requires { typename _Tp::value_type; }$/;"	m	class:std::_Tp	typeref:meta:typename
std::__add_grouping	/usr/include/c++/10/bits/locale_facets.h	/^    __add_grouping(_CharT* __s, _CharT __sep,$/;"	p	namespace:std	typeref:typename:_CharT *	signature:(_CharT * __s,_CharT __sep,const char * __gbeg,size_t __gsize,const _CharT * __first,const _CharT * __last)
std::__addressof	/usr/include/c++/10/bits/move.h	/^    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION _GLIBCXX_CONSTEXPR _Tp *	signature:(_Tp & __r)
std::__advance	/usr/include/c++/10/bits/stl_iterator_base_funcs.h	/^    __advance(_BidirectionalIterator& __i, _Distance __n,$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR void	signature:(_BidirectionalIterator & __i,_Distance __n,bidirectional_iterator_tag)
std::__advance	/usr/include/c++/10/bits/stl_iterator_base_funcs.h	/^    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR void	signature:(_InputIterator & __i,_Distance __n,input_iterator_tag)
std::__advance	/usr/include/c++/10/bits/stl_iterator_base_funcs.h	/^    __advance(_RandomAccessIterator& __i, _Distance __n,$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR void	signature:(_RandomAccessIterator & __i,_Distance __n,random_access_iterator_tag)
std::__alloc_neq	/usr/include/c++/10/bits/allocator.h	/^    struct __alloc_neq$/;"	s	namespace:std
std::__alloc_neq	/usr/include/c++/10/bits/allocator.h	/^    struct __alloc_neq<_Alloc, false>$/;"	s	namespace:std
std::__alloc_neq::_S_do_it	/usr/include/c++/10/bits/allocator.h	/^      _S_do_it(const _Alloc& __one, const _Alloc& __two)$/;"	f	struct:std::__alloc_neq	typeref:typename:bool	access:public	signature:(const _Alloc & __one,const _Alloc & __two)
std::__alloc_neq::_S_do_it	/usr/include/c++/10/bits/allocator.h	/^      _S_do_it(const _Alloc&, const _Alloc&)$/;"	f	struct:std::__alloc_neq	typeref:typename:bool	access:public	signature:(const _Alloc &,const _Alloc &)
std::__alloc_on_copy	/usr/include/c++/10/bits/alloc_traits.h	/^    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR void	signature:(_Alloc & __one,const _Alloc & __two)
std::__alloc_on_copy	/usr/include/c++/10/bits/alloc_traits.h	/^    __alloc_on_copy(const _Alloc& __a)$/;"	f	namespace:std	typeref:typename:_Alloc	signature:(const _Alloc & __a)
std::__alloc_on_move	/usr/include/c++/10/bits/alloc_traits.h	/^    __alloc_on_move(_Alloc& __one, _Alloc& __two)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR void	signature:(_Alloc & __one,_Alloc & __two)
std::__alloc_on_swap	/usr/include/c++/10/bits/alloc_traits.h	/^    __alloc_on_swap(_Alloc& __one, _Alloc& __two)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR void	signature:(_Alloc & __one,_Alloc & __two)
std::__alloc_rebind	/usr/include/c++/10/bits/alloc_traits.h	/^    using __alloc_rebind$/;"	t	namespace:std	typeref:typename:__allocator_traits_base::template __rebind<_Alloc,_Up>::type
std::__alloc_swap	/usr/include/c++/10/bits/allocator.h	/^    struct __alloc_swap$/;"	s	namespace:std
std::__alloc_swap	/usr/include/c++/10/bits/allocator.h	/^    struct __alloc_swap<_Alloc, false>$/;"	s	namespace:std
std::__alloc_swap::_S_do_it	/usr/include/c++/10/bits/allocator.h	/^      _S_do_it(_Alloc& __one, _Alloc& __two) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::__alloc_swap	typeref:typename:void	access:public	signature:(_Alloc & __one,_Alloc & __two)
std::__alloc_swap::_S_do_it	/usr/include/c++/10/bits/allocator.h	/^    { static void _S_do_it(_Alloc&, _Alloc&) _GLIBCXX_NOEXCEPT { } };$/;"	f	struct:std::__alloc_swap	typeref:typename:void	access:public	signature:(_Alloc &,_Alloc &)
std::__allocator_base	/usr/include/x86_64-linux-gnu/c++/10/bits/c++allocator.h	/^    using __allocator_base = __gnu_cxx::new_allocator<_Tp>;$/;"	t	namespace:std	typeref:typename:__gnu_cxx::new_allocator<_Tp>
std::__allocator_traits_base	/usr/include/c++/10/bits/alloc_traits.h	/^  struct __allocator_traits_base$/;"	s	namespace:std
std::__allocator_traits_base::__c_pointer	/usr/include/c++/10/bits/alloc_traits.h	/^      using __c_pointer = typename _Tp::const_pointer;$/;"	t	struct:std::__allocator_traits_base	typeref:typename:_Tp::const_pointer	access:protected
std::__allocator_traits_base::__cv_pointer	/usr/include/c++/10/bits/alloc_traits.h	/^      using __cv_pointer = typename _Tp::const_void_pointer;$/;"	t	struct:std::__allocator_traits_base	typeref:typename:_Tp::const_void_pointer	access:protected
std::__allocator_traits_base::__equal	/usr/include/c++/10/bits/alloc_traits.h	/^      using __equal = typename _Tp::is_always_equal;$/;"	t	struct:std::__allocator_traits_base	typeref:typename:_Tp::is_always_equal	access:protected
std::__allocator_traits_base::__pocca	/usr/include/c++/10/bits/alloc_traits.h	/^      using __pocca = typename _Tp::propagate_on_container_copy_assignment;$/;"	t	struct:std::__allocator_traits_base	typeref:typename:_Tp::propagate_on_container_copy_assignment	access:protected
std::__allocator_traits_base::__pocma	/usr/include/c++/10/bits/alloc_traits.h	/^      using __pocma = typename _Tp::propagate_on_container_move_assignment;$/;"	t	struct:std::__allocator_traits_base	typeref:typename:_Tp::propagate_on_container_move_assignment	access:protected
std::__allocator_traits_base::__pocs	/usr/include/c++/10/bits/alloc_traits.h	/^      using __pocs = typename _Tp::propagate_on_container_swap;$/;"	t	struct:std::__allocator_traits_base	typeref:typename:_Tp::propagate_on_container_swap	access:protected
std::__allocator_traits_base::__pointer	/usr/include/c++/10/bits/alloc_traits.h	/^      using __pointer = typename _Tp::pointer;$/;"	t	struct:std::__allocator_traits_base	typeref:typename:_Tp::pointer	access:protected
std::__allocator_traits_base::__rebind	/usr/include/c++/10/bits/alloc_traits.h	/^      struct __rebind : __replace_first_arg<_Tp, _Up> { };$/;"	s	struct:std::__allocator_traits_base	inherits:__replace_first_arg<_Tp,_Up>	access:public
std::__allocator_traits_base::__rebind	/usr/include/c++/10/bits/alloc_traits.h	/^      struct __rebind<_Tp, _Up,$/;"	s	struct:std::__allocator_traits_base	access:public
std::__allocator_traits_base::__rebind::type	/usr/include/c++/10/bits/alloc_traits.h	/^      { using type = typename _Tp::template rebind<_Up>::other; };$/;"	t	struct:std::__allocator_traits_base::__rebind	typeref:typename:_Tp::template rebind<_Up>::other	access:public
std::__allocator_traits_base::__v_pointer	/usr/include/c++/10/bits/alloc_traits.h	/^      using __v_pointer = typename _Tp::void_pointer;$/;"	t	struct:std::__allocator_traits_base	typeref:typename:_Tp::void_pointer	access:protected
std::__are_same	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __are_same$/;"	s	namespace:std
std::__are_same	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __are_same<_Tp, _Tp>$/;"	s	namespace:std
std::__are_same::__anond8428c390203	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__are_same	access:public
std::__are_same::__anond8428c390303	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__are_same	access:public
std::__are_same::__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^      typedef __false_type __type;$/;"	t	struct:std::__are_same	typeref:typename:__false_type	access:public
std::__are_same::__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^      typedef __true_type __type;$/;"	t	struct:std::__are_same	typeref:typename:__true_type	access:public
std::__are_same::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__are_same::__anond8428c390203	access:public
std::__are_same::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__are_same::__anond8428c390303	access:public
std::__c_locale	/usr/include/x86_64-linux-gnu/c++/10/bits/c++locale.h	/^  typedef __locale_t		__c_locale;$/;"	t	namespace:std	typeref:typename:__locale_t
std::__check_facet	/usr/include/c++/10/bits/basic_ios.h	/^    __check_facet(const _Facet* __f)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION const _Facet &	signature:(const _Facet * __f)
std::__constant_char_array_p	/usr/include/c++/10/bits/char_traits.h	/^    __constant_char_array_p(const _CharT* __a, size_t __n)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_ALWAYS_INLINE bool	signature:(const _CharT * __a,size_t __n)
std::__constant_string_p	/usr/include/c++/10/bits/char_traits.h	/^    __constant_string_p(const _CharT* __s)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION _GLIBCXX_ALWAYS_INLINE bool	signature:(const _CharT * __s)
std::__convert_from_v	/usr/include/x86_64-linux-gnu/c++/10/bits/c++locale.h	/^  __convert_from_v(const __c_locale& __cloc __attribute__ ((__unused__)),$/;"	f	namespace:std	typeref:typename:int	signature:(const __c_locale & __cloc,char * __out,const int __size,const char * __fmt,...)
std::__convert_to_v	/usr/include/c++/10/bits/locale_facets.h	/^    __convert_to_v(const char*, _Tp&, ios_base::iostate&,$/;"	p	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION void	signature:(const char *,_Tp &,ios_base::iostate &,const __c_locale &)
std::__convert_to_v	/usr/include/c++/10/bits/locale_facets.h	/^    __convert_to_v(const char*, double&, ios_base::iostate&,$/;"	p	namespace:std	typeref:typename:void	signature:(const char *,double &,ios_base::iostate &,const __c_locale &)
std::__convert_to_v	/usr/include/c++/10/bits/locale_facets.h	/^    __convert_to_v(const char*, float&, ios_base::iostate&,$/;"	p	namespace:std	typeref:typename:void	signature:(const char *,float &,ios_base::iostate &,const __c_locale &)
std::__convert_to_v	/usr/include/c++/10/bits/locale_facets.h	/^    __convert_to_v(const char*, long double&, ios_base::iostate&,$/;"	p	namespace:std	typeref:typename:void	signature:(const char *,long double &,ios_base::iostate &,const __c_locale &)
std::__copy_move	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __copy_move$/;"	s	namespace:std
std::__copy_move	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __copy_move<_IsMove, true, random_access_iterator_tag>$/;"	s	namespace:std
std::__copy_move	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __copy_move<false, false, random_access_iterator_tag>$/;"	s	namespace:std
std::__copy_move	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __copy_move<true, false, _Category>$/;"	s	namespace:std
std::__copy_move	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __copy_move<true, false, random_access_iterator_tag>$/;"	s	namespace:std
std::__copy_move::__copy_m	/usr/include/c++/10/bits/stl_algobase.h	/^	__copy_m(_II __first, _II __last, _OI __result)$/;"	f	struct:std::__copy_move	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	access:public	signature:(_II __first,_II __last,_OI __result)
std::__copy_move::__copy_m	/usr/include/c++/10/bits/stl_algobase.h	/^	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)$/;"	f	struct:std::__copy_move	typeref:typename:_GLIBCXX20_CONSTEXPR _Tp *	access:public	signature:(const _Tp * __first,const _Tp * __last,_Tp * __result)
std::__copy_move_a	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_a(_II __first, _II __last, _OI __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	signature:(_II __first,_II __last,_OI __result)
std::__copy_move_a	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_a(_II, _II,$/;"	p	namespace:std	typeref:typename:__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat>	signature:(_II,_II,const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> &)
std::__copy_move_a	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,$/;"	p	namespace:std	typeref:typename:_OI	signature:(const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> &,const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> &,_OI)
std::__copy_move_a1	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,$/;"	p	namespace:std	typeref:typename:_GLIBCXX_STD_C::_Deque_iterator<_OTp,_OTp &,_OTp * >	signature:(_GLIBCXX_STD_C::_Deque_iterator<_ITp,_IRef,_IPtr>,_GLIBCXX_STD_C::_Deque_iterator<_ITp,_IRef,_IPtr>,_GLIBCXX_STD_C::_Deque_iterator<_OTp,_OTp &,_OTp * >)
std::__copy_move_a1	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,$/;"	p	namespace:std	typeref:typename:_GLIBCXX_END_NAMESPACE_CONTAINER _OI	signature:(_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Ref,_Ptr>,_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Ref,_Ptr>,_OI)
std::__copy_move_a1	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_a1(_II __first, _II __last, _OI __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	signature:(_II __first,_II __last,_OI __result)
std::__copy_move_a1	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_a1(_II, _II, _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);$/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_random_access_iter<_II>::__value,_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Tp &,_Tp * >>::__type	signature:(_II,_II,_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Tp &,_Tp * >)
std::__copy_move_a2	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_a2(_CharT*, _CharT*,$/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,ostreambuf_iterator<_CharT,char_traits<_CharT>>>::__type	signature:(_CharT *,_CharT *,ostreambuf_iterator<_CharT,char_traits<_CharT>>)
std::__copy_move_a2	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_a2(_II __first, _II __last, _OI __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	signature:(_II __first,_II __last,_OI __result)
std::__copy_move_a2	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_a2(const _CharT*, const _CharT*,$/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,ostreambuf_iterator<_CharT,char_traits<_CharT>>>::__type	signature:(const _CharT *,const _CharT *,ostreambuf_iterator<_CharT,char_traits<_CharT>>)
std::__copy_move_a2	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,$/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,_CharT * >::__type	signature:(istreambuf_iterator<_CharT,char_traits<_CharT>>,istreambuf_iterator<_CharT,char_traits<_CharT>>,_CharT *)
std::__copy_move_a2	/usr/include/c++/10/bits/streambuf_iterator.h	/^    __copy_move_a2(_CharT* __first, _CharT* __last,$/;"	f	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,ostreambuf_iterator<_CharT>>::__type	signature:(_CharT * __first,_CharT * __last,ostreambuf_iterator<_CharT> __result)
std::__copy_move_a2	/usr/include/c++/10/bits/streambuf_iterator.h	/^    __copy_move_a2(const _CharT* __first, const _CharT* __last,$/;"	f	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,ostreambuf_iterator<_CharT>>::__type	signature:(const _CharT * __first,const _CharT * __last,ostreambuf_iterator<_CharT> __result)
std::__copy_move_a2	/usr/include/c++/10/bits/streambuf_iterator.h	/^    __copy_move_a2(istreambuf_iterator<_CharT> __first,$/;"	f	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,_CharT * >::__type	signature:(istreambuf_iterator<_CharT> __first,istreambuf_iterator<_CharT> __last,_CharT * __result)
std::__copy_move_backward	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __copy_move_backward$/;"	s	namespace:std
std::__copy_move_backward	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>$/;"	s	namespace:std
std::__copy_move_backward	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __copy_move_backward<false, false, random_access_iterator_tag>$/;"	s	namespace:std
std::__copy_move_backward	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __copy_move_backward<true, false, _Category>$/;"	s	namespace:std
std::__copy_move_backward	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __copy_move_backward<true, false, random_access_iterator_tag>$/;"	s	namespace:std
std::__copy_move_backward::__copy_move_b	/usr/include/c++/10/bits/stl_algobase.h	/^	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	struct:std::__copy_move_backward	typeref:typename:_GLIBCXX20_CONSTEXPR _BI2	access:public	signature:(_BI1 __first,_BI1 __last,_BI2 __result)
std::__copy_move_backward::__copy_move_b	/usr/include/c++/10/bits/stl_algobase.h	/^	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)$/;"	f	struct:std::__copy_move_backward	typeref:typename:_GLIBCXX20_CONSTEXPR _Tp *	access:public	signature:(const _Tp * __first,const _Tp * __last,_Tp * __result)
std::__copy_move_backward_a	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_backward_a($/;"	p	namespace:std	typeref:typename:_OI	signature:(const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> &,const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> &,_OI)
std::__copy_move_backward_a	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_backward_a(_II __first, _II __last, _OI __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	signature:(_II __first,_II __last,_OI __result)
std::__copy_move_backward_a	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_backward_a(_II, _II,$/;"	p	namespace:std	typeref:typename:__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat>	signature:(_II,_II,const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> &)
std::__copy_move_backward_a1	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_backward_a1($/;"	p	namespace:std	typeref:typename:_GLIBCXX_STD_C::_Deque_iterator<_OTp,_OTp &,_OTp * >	signature:(_GLIBCXX_STD_C::_Deque_iterator<_ITp,_IRef,_IPtr>,_GLIBCXX_STD_C::_Deque_iterator<_ITp,_IRef,_IPtr>,_GLIBCXX_STD_C::_Deque_iterator<_OTp,_OTp &,_OTp * >)
std::__copy_move_backward_a1	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _BI2	signature:(_BI1 __first,_BI1 __last,_BI2 __result)
std::__copy_move_backward_a1	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_backward_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,$/;"	p	namespace:std	typeref:typename:_OI	signature:(_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Ref,_Ptr>,_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Ref,_Ptr>,_OI)
std::__copy_move_backward_a1	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_backward_a1(_II, _II,$/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_random_access_iter<_II>::__value,_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Tp &,_Tp * >>::__type	signature:(_II,_II,_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Tp &,_Tp * >)
std::__copy_move_backward_a2	/usr/include/c++/10/bits/stl_algobase.h	/^    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _BI2	signature:(_BI1 __first,_BI1 __last,_BI2 __result)
std::__copy_n_a	/usr/include/c++/10/bits/streambuf_iterator.h	/^    __copy_n_a(istreambuf_iterator<_CharT> __it, _Size __n, _CharT* __result)$/;"	f	namespace:std	typeref:typename:__enable_if_t<__is_char<_CharT>::__value,_CharT * >	signature:(istreambuf_iterator<_CharT> __it,_Size __n,_CharT * __result)
std::__count_if	/usr/include/c++/10/bits/stl_algobase.h	/^    __count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR typename iterator_traits<_InputIterator>::difference_type	signature:(_InputIterator __first,_InputIterator __last,_Predicate __pred)
std::__ctype_abstract_base	/usr/include/c++/10/bits/locale_facets.h	/^    class __ctype_abstract_base : public locale::facet, public ctype_base$/;"	c	namespace:std	inherits:locale::facet,ctype_base
std::__ctype_abstract_base::__ctype_abstract_base	/usr/include/c++/10/bits/locale_facets.h	/^      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }$/;"	f	class:std::__ctype_abstract_base	access:protected	signature:(size_t __refs=0)
std::__ctype_abstract_base::char_type	/usr/include/c++/10/bits/locale_facets.h	/^      typedef _CharT char_type;$/;"	t	class:std::__ctype_abstract_base	typeref:typename:_CharT	access:public
std::__ctype_abstract_base::do_is	/usr/include/c++/10/bits/locale_facets.h	/^      do_is(const char_type* __lo, const char_type* __hi,$/;"	p	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(const char_type * __lo,const char_type * __hi,mask * __vec) const
std::__ctype_abstract_base::do_is	/usr/include/c++/10/bits/locale_facets.h	/^      do_is(mask __m, char_type __c) const = 0;$/;"	p	class:std::__ctype_abstract_base	typeref:typename:bool	access:protected	signature:(mask __m,char_type __c) const
std::__ctype_abstract_base::do_narrow	/usr/include/c++/10/bits/locale_facets.h	/^      do_narrow(char_type __c, char __dfault) const = 0;$/;"	p	class:std::__ctype_abstract_base	typeref:typename:char	access:protected	signature:(char_type __c,char __dfault) const
std::__ctype_abstract_base::do_narrow	/usr/include/c++/10/bits/locale_facets.h	/^      do_narrow(const char_type* __lo, const char_type* __hi,$/;"	p	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(const char_type * __lo,const char_type * __hi,char __dfault,char * __to) const
std::__ctype_abstract_base::do_scan_is	/usr/include/c++/10/bits/locale_facets.h	/^      do_scan_is(mask __m, const char_type* __lo,$/;"	p	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
std::__ctype_abstract_base::do_scan_not	/usr/include/c++/10/bits/locale_facets.h	/^      do_scan_not(mask __m, const char_type* __lo,$/;"	p	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
std::__ctype_abstract_base::do_tolower	/usr/include/c++/10/bits/locale_facets.h	/^      do_tolower(char_type __c) const = 0;$/;"	p	class:std::__ctype_abstract_base	typeref:typename:char_type	access:protected	signature:(char_type __c) const
std::__ctype_abstract_base::do_tolower	/usr/include/c++/10/bits/locale_facets.h	/^      do_tolower(char_type* __lo, const char_type* __hi) const = 0;$/;"	p	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(char_type * __lo,const char_type * __hi) const
std::__ctype_abstract_base::do_toupper	/usr/include/c++/10/bits/locale_facets.h	/^      do_toupper(char_type __c) const = 0;$/;"	p	class:std::__ctype_abstract_base	typeref:typename:char_type	access:protected	signature:(char_type __c) const
std::__ctype_abstract_base::do_toupper	/usr/include/c++/10/bits/locale_facets.h	/^      do_toupper(char_type* __lo, const char_type* __hi) const = 0;$/;"	p	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(char_type * __lo,const char_type * __hi) const
std::__ctype_abstract_base::do_widen	/usr/include/c++/10/bits/locale_facets.h	/^      do_widen(char __c) const = 0;$/;"	p	class:std::__ctype_abstract_base	typeref:typename:char_type	access:protected	signature:(char __c) const
std::__ctype_abstract_base::do_widen	/usr/include/c++/10/bits/locale_facets.h	/^      do_widen(const char* __lo, const char* __hi, char_type* __to) const = 0;$/;"	p	class:std::__ctype_abstract_base	typeref:typename:const char *	access:protected	signature:(const char * __lo,const char * __hi,char_type * __to) const
std::__ctype_abstract_base::is	/usr/include/c++/10/bits/locale_facets.h	/^      is(const char_type *__lo, const char_type *__hi, mask *__vec) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(const char_type * __lo,const char_type * __hi,mask * __vec) const
std::__ctype_abstract_base::is	/usr/include/c++/10/bits/locale_facets.h	/^      is(mask __m, char_type __c) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:bool	access:public	signature:(mask __m,char_type __c) const
std::__ctype_abstract_base::narrow	/usr/include/c++/10/bits/locale_facets.h	/^      narrow(char_type __c, char __dfault) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:char	access:public	signature:(char_type __c,char __dfault) const
std::__ctype_abstract_base::narrow	/usr/include/c++/10/bits/locale_facets.h	/^      narrow(const char_type* __lo, const char_type* __hi,$/;"	f	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(const char_type * __lo,const char_type * __hi,char __dfault,char * __to) const
std::__ctype_abstract_base::scan_is	/usr/include/c++/10/bits/locale_facets.h	/^      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
std::__ctype_abstract_base::scan_not	/usr/include/c++/10/bits/locale_facets.h	/^      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
std::__ctype_abstract_base::tolower	/usr/include/c++/10/bits/locale_facets.h	/^      tolower(char_type __c) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:char_type	access:public	signature:(char_type __c) const
std::__ctype_abstract_base::tolower	/usr/include/c++/10/bits/locale_facets.h	/^      tolower(char_type* __lo, const char_type* __hi) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(char_type * __lo,const char_type * __hi) const
std::__ctype_abstract_base::toupper	/usr/include/c++/10/bits/locale_facets.h	/^      toupper(char_type *__lo, const char_type* __hi) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(char_type * __lo,const char_type * __hi) const
std::__ctype_abstract_base::toupper	/usr/include/c++/10/bits/locale_facets.h	/^      toupper(char_type __c) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:char_type	access:public	signature:(char_type __c) const
std::__ctype_abstract_base::widen	/usr/include/c++/10/bits/locale_facets.h	/^      widen(char __c) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:char_type	access:public	signature:(char __c) const
std::__ctype_abstract_base::widen	/usr/include/c++/10/bits/locale_facets.h	/^      widen(const char* __lo, const char* __hi, char_type* __to) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:const char *	access:public	signature:(const char * __lo,const char * __hi,char_type * __to) const
std::__ctype_abstract_base::~__ctype_abstract_base	/usr/include/c++/10/bits/locale_facets.h	/^      ~__ctype_abstract_base() { }$/;"	f	class:std::__ctype_abstract_base	access:protected	signature:()
std::__cxx11	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }$/;"	n	namespace:std
std::__cxx1998	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^  namespace __cxx1998$/;"	n	namespace:std
std::__cxx1998::__cxx11	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }$/;"	n	namespace:std::__cxx1998
std::__debug	/usr/include/c++/10/debug/debug.h	/^  namespace __debug { } $/;"	n	namespace:std
std::__debug	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^  inline namespace __debug { }$/;"	n	namespace:std
std::__detail	/usr/include/c++/10/bits/basic_string.h	/^  namespace __detail::__variant$/;"	n	namespace:std
std::__detail	/usr/include/c++/10/bits/char_traits.h	/^  namespace __detail$/;"	n	namespace:std
std::__detail	/usr/include/c++/10/bits/charconv.h	/^namespace __detail$/;"	n	namespace:std
std::__detail	/usr/include/c++/10/bits/iterator_concepts.h	/^  namespace __detail { using ranges::__detail::__is_signed_integer_like; }$/;"	n	namespace:std
std::__detail	/usr/include/c++/10/bits/iterator_concepts.h	/^  namespace __detail$/;"	n	namespace:std
std::__detail	/usr/include/c++/10/bits/stl_iterator.h	/^  namespace __detail$/;"	n	namespace:std
std::__detail::_Iter::difference_type	/usr/include/c++/10/bits/iterator_concepts.h	/^	typename _Iter::difference_type;$/;"	m	class:std::__detail::_Iter	typeref:meta:typename
std::__detail::_Iter::iterator_category	/usr/include/c++/10/bits/iterator_concepts.h	/^	= !requires { typename _Iter::iterator_category; };$/;"	m	class:std::__detail::_Iter	typeref:meta:typename
std::__detail::_Iter::iterator_category	/usr/include/c++/10/bits/iterator_concepts.h	/^	typename _Iter::iterator_category;$/;"	m	class:std::__detail::_Iter	typeref:meta:typename
std::__detail::_Iter::reference	/usr/include/c++/10/bits/iterator_concepts.h	/^	typename _Iter::reference;$/;"	m	class:std::__detail::_Iter	typeref:meta:typename
std::__detail::_Iter::value_type	/usr/include/c++/10/bits/iterator_concepts.h	/^	typename _Iter::value_type;$/;"	m	class:std::__detail::_Iter	typeref:meta:typename
std::__detail::__char_traits_cmp_cat	/usr/include/c++/10/bits/char_traits.h	/^      __char_traits_cmp_cat(int __cmp) noexcept$/;"	f	namespace:std::__detail	typeref:typename:auto	signature:(int __cmp)
std::__detail::__clamp_iter_cat	/usr/include/c++/10/bits/stl_iterator.h	/^      using __clamp_iter_cat$/;"	t	namespace:std::__detail	typeref:typename:conditional_t<derived_from<_Cat,_Limit>,_Limit,_Otherwise>
std::__detail::__cond_value_type	/usr/include/c++/10/bits/iterator_concepts.h	/^      struct __cond_value_type<_Tp>$/;"	s	namespace:std::__detail
std::__detail::__cond_value_type	/usr/include/c++/10/bits/iterator_concepts.h	/^    template<typename> struct __cond_value_type { };$/;"	s	namespace:std::__detail
std::__detail::__cond_value_type::value_type	/usr/include/c++/10/bits/iterator_concepts.h	/^      { using value_type = remove_cv_t<_Tp>; };$/;"	t	struct:std::__detail::__cond_value_type	typeref:typename:remove_cv_t<_Tp>	access:public
std::__detail::__decay_copy	/usr/include/c++/10/bits/iterator_concepts.h	/^      __decay_copy(_Tp&& __t)$/;"	f	namespace:std::__detail	typeref:typename:decay_t<_Tp>	signature:(_Tp && __t)
std::__detail::__iter_concept	/usr/include/c++/10/bits/iterator_concepts.h	/^      using __iter_concept = typename __iter_concept_impl<_Iter>::type;$/;"	t	namespace:std::__detail	typeref:typename:__iter_concept_impl<_Iter>::type
std::__detail::__iter_concept_impl	/usr/include/c++/10/bits/iterator_concepts.h	/^      struct __iter_concept_impl$/;"	s	namespace:std::__detail
std::__detail::__iter_concept_impl	/usr/include/c++/10/bits/iterator_concepts.h	/^      struct __iter_concept_impl<_Iter>$/;"	s	namespace:std::__detail
std::__detail::__iter_concept_impl::type	/usr/include/c++/10/bits/iterator_concepts.h	/^      { using type = random_access_iterator_tag; };$/;"	t	struct:std::__detail::__iter_concept_impl	typeref:typename:random_access_iterator_tag	access:public
std::__detail::__iter_concept_impl::type	/usr/include/c++/10/bits/iterator_concepts.h	/^      { using type = typename __iter_traits<_Iter>::iterator_category; };$/;"	t	struct:std::__detail::__iter_concept_impl	typeref:typename:__iter_traits<_Iter>::iterator_category	access:public
std::__detail::__iter_concept_impl::type	/usr/include/c++/10/bits/iterator_concepts.h	/^      { using type = typename __iter_traits<_Iter>::iterator_concept; };$/;"	t	struct:std::__detail::__iter_concept_impl	typeref:typename:__iter_traits<_Iter>::iterator_concept	access:public
std::__detail::__iter_diff_t	/usr/include/c++/10/bits/iterator_concepts.h	/^      using __iter_diff_t = typename$/;"	t	namespace:std::__detail	typeref:typename:__iter_traits<_Tp,incrementable_traits<_Tp>>::difference_type
std::__detail::__iter_traits	/usr/include/c++/10/bits/iterator_concepts.h	/^      using __iter_traits = typename __iter_traits_impl<_Iter, _Tp>::type;$/;"	t	namespace:std::__detail	typeref:typename:__iter_traits_impl<_Iter,_Tp>::type
std::__detail::__iter_traits<_Iter>::iterator_concept	/usr/include/c++/10/bits/iterator_concepts.h	/^      requires requires { typename __iter_traits<_Iter>::iterator_concept; }$/;"	m	class:std::__detail::__iter_traits<_Iter>	typeref:meta:typename
std::__detail::__iter_traits_impl	/usr/include/c++/10/bits/iterator_concepts.h	/^      struct __iter_traits_impl$/;"	s	namespace:std::__detail
std::__detail::__iter_traits_impl	/usr/include/c++/10/bits/iterator_concepts.h	/^      struct __iter_traits_impl<_Iter, _Tp>$/;"	s	namespace:std::__detail
std::__detail::__iter_traits_impl::type	/usr/include/c++/10/bits/iterator_concepts.h	/^      { using type = _Tp; };$/;"	t	struct:std::__detail::__iter_traits_impl	typeref:typename:_Tp	access:public
std::__detail::__iter_traits_impl::type	/usr/include/c++/10/bits/iterator_concepts.h	/^      { using type = iterator_traits<_Iter>; };$/;"	t	struct:std::__detail::__iter_traits_impl	typeref:typename:iterator_traits<_Iter>	access:public
std::__detail::__iter_value_t	/usr/include/c++/10/bits/iterator_concepts.h	/^      using __iter_value_t = typename$/;"	t	namespace:std::__detail	typeref:typename:__iter_traits<_Tp,indirectly_readable_traits<_Tp>>::value_type
std::__detail::__range_iter_t	/usr/include/c++/10/bits/iterator_concepts.h	/^      using __range_iter_t$/;"	t	namespace:std::__detail
std::__detail::__to_chars_10_impl	/usr/include/c++/10/bits/charconv.h	/^    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept$/;"	f	namespace:std::__detail	typeref:typename:void	signature:(char * __first,unsigned __len,_Tp __val)
std::__detail::__to_chars_len	/usr/include/c++/10/bits/charconv.h	/^    __to_chars_len(_Tp __value, int __base = 10) noexcept$/;"	f	namespace:std::__detail	typeref:typename:_GLIBCXX14_CONSTEXPR unsigned	signature:(_Tp __value,int __base=10)
std::__detail::__variant	/usr/include/c++/10/bits/basic_string.h	/^  namespace __detail::__variant$/;"	n	namespace:std::__detail
std::__detail::__variant::_Never_valueless_alt	/usr/include/c++/10/bits/basic_string.h	/^      struct _Never_valueless_alt<std::basic_string<_Tp, _Traits, _Alloc>>$/;"	s	namespace:std::__detail::__variant	inherits:__and_<is_nothrow_move_constructible<std::basic_string<_Tp,_Traits,_Alloc>>,is_nothrow_move_assignable<std::basic_string<_Tp,_Traits,_Alloc>>>::type
std::__detail::__with_ref	/usr/include/c++/10/bits/iterator_concepts.h	/^      using __with_ref = _Tp&;$/;"	t	namespace:std::__detail	typeref:typename:_Tp &
std::__detail::begin	/usr/include/c++/10/bits/iterator_concepts.h	/^    void begin(auto&) = delete;$/;"	p	namespace:std::__detail	typeref:typename:void	signature:(auto &)
std::__detail::begin	/usr/include/c++/10/bits/iterator_concepts.h	/^    void begin(const auto&) = delete;$/;"	p	namespace:std::__detail	typeref:typename:void	signature:(const auto &)
std::__detail::incrementable_traits<_Iter>::difference_type	/usr/include/c++/10/bits/iterator_concepts.h	/^	  typename incrementable_traits<_Iter>::difference_type;$/;"	m	class:std::__detail::incrementable_traits<_Iter>	typeref:meta:typename
std::__detail::indirectly_readable_traits<_Iter>::value_type	/usr/include/c++/10/bits/iterator_concepts.h	/^	  typename indirectly_readable_traits<_Iter>::value_type;$/;"	m	class:std::__detail::indirectly_readable_traits<_Iter>	typeref:meta:typename
std::__distance	/usr/include/c++/10/bits/stl_iterator_base_funcs.h	/^    __distance(_GLIBCXX_STD_C::_List_const_iterator<_Tp>,$/;"	p	namespace:std	typeref:typename:ptrdiff_t	signature:(_GLIBCXX_STD_C::_List_const_iterator<_Tp>,_GLIBCXX_STD_C::_List_const_iterator<_Tp>,input_iterator_tag)
std::__distance	/usr/include/c++/10/bits/stl_iterator_base_funcs.h	/^    __distance(_GLIBCXX_STD_C::_List_iterator<_Tp>,$/;"	p	namespace:std	typeref:typename:ptrdiff_t	signature:(_GLIBCXX_STD_C::_List_iterator<_Tp>,_GLIBCXX_STD_C::_List_iterator<_Tp>,input_iterator_tag)
std::__distance	/usr/include/c++/10/bits/stl_iterator_base_funcs.h	/^    __distance(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_END_NAMESPACE_CONTAINER _GLIBCXX14_CONSTEXPR typename iterator_traits<_InputIterator>::difference_type	signature:(_InputIterator __first,_InputIterator __last,input_iterator_tag)
std::__distance	/usr/include/c++/10/bits/stl_iterator_base_funcs.h	/^    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR typename iterator_traits<_RandomAccessIterator>::difference_type	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,random_access_iterator_tag)
std::__do_alloc_on_copy	/usr/include/c++/10/bits/alloc_traits.h	/^    __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)$/;"	f	namespace:std	typeref:typename:void	signature:(_Alloc & __one,const _Alloc & __two,true_type)
std::__do_alloc_on_copy	/usr/include/c++/10/bits/alloc_traits.h	/^    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)$/;"	f	namespace:std	typeref:typename:void	signature:(_Alloc &,const _Alloc &,false_type)
std::__do_alloc_on_move	/usr/include/c++/10/bits/alloc_traits.h	/^    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)$/;"	f	namespace:std	typeref:typename:void	signature:(_Alloc & __one,_Alloc & __two,true_type)
std::__do_alloc_on_move	/usr/include/c++/10/bits/alloc_traits.h	/^    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)$/;"	f	namespace:std	typeref:typename:void	signature:(_Alloc &,_Alloc &,false_type)
std::__do_alloc_on_swap	/usr/include/c++/10/bits/alloc_traits.h	/^    inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)$/;"	f	namespace:std	typeref:typename:void	signature:(_Alloc & __one,_Alloc & __two,true_type)
std::__do_alloc_on_swap	/usr/include/c++/10/bits/alloc_traits.h	/^    inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)$/;"	f	namespace:std	typeref:typename:void	signature:(_Alloc &,_Alloc &,false_type)
std::__equal	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __equal$/;"	s	namespace:std
std::__equal	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __equal<true>$/;"	s	namespace:std
std::__equal4	/usr/include/c++/10/bits/stl_algobase.h	/^    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2)
std::__equal4	/usr/include/c++/10/bits/stl_algobase.h	/^    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2,_BinaryPredicate __binary_pred)
std::__equal::equal	/usr/include/c++/10/bits/stl_algobase.h	/^	equal(_II1 __first1, _II1 __last1, _II2 __first2)$/;"	f	struct:std::__equal	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_II1 __first1,_II1 __last1,_II2 __first2)
std::__equal::equal	/usr/include/c++/10/bits/stl_algobase.h	/^	equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)$/;"	f	struct:std::__equal	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(const _Tp * __first1,const _Tp * __last1,const _Tp * __first2)
std::__equal_aux	/usr/include/c++/10/bits/stl_algobase.h	/^    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2)
std::__equal_aux	/usr/include/c++/10/bits/stl_algobase.h	/^    __equal_aux(_II1, _II1,$/;"	p	namespace:std	typeref:typename:bool	signature:(_II1,_II1,const::__gnu_debug::_Safe_iterator<_II2,_Seq2,_Cat2> &)
std::__equal_aux	/usr/include/c++/10/bits/stl_algobase.h	/^    __equal_aux(const ::__gnu_debug::_Safe_iterator<_II1, _Seq1, _Cat1>&,$/;"	p	namespace:std	typeref:typename:bool	signature:(const::__gnu_debug::_Safe_iterator<_II1,_Seq1,_Cat1> &,const::__gnu_debug::_Safe_iterator<_II1,_Seq1,_Cat1> &,_II2)
std::__equal_aux	/usr/include/c++/10/bits/stl_algobase.h	/^    __equal_aux(const ::__gnu_debug::_Safe_iterator<_II1, _Seq1, _Cat1>&,$/;"	p	namespace:std	typeref:typename:bool	signature:(const::__gnu_debug::_Safe_iterator<_II1,_Seq1,_Cat1> &,const::__gnu_debug::_Safe_iterator<_II1,_Seq1,_Cat1> &,const::__gnu_debug::_Safe_iterator<_II2,_Seq2,_Cat2> &)
std::__equal_aux1	/usr/include/c++/10/bits/stl_algobase.h	/^    __equal_aux1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,$/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_random_access_iter<_II>::__value,bool>::__type	signature:(_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Ref,_Ptr>,_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Ref,_Ptr>,_II)
std::__equal_aux1	/usr/include/c++/10/bits/stl_algobase.h	/^    __equal_aux1(_GLIBCXX_STD_C::_Deque_iterator<_Tp1, _Ref1, _Ptr1>,$/;"	p	namespace:std	typeref:typename:bool	signature:(_GLIBCXX_STD_C::_Deque_iterator<_Tp1,_Ref1,_Ptr1>,_GLIBCXX_STD_C::_Deque_iterator<_Tp1,_Ref1,_Ptr1>,_GLIBCXX_STD_C::_Deque_iterator<_Tp2,_Ref2,_Ptr2>)
std::__equal_aux1	/usr/include/c++/10/bits/stl_algobase.h	/^    __equal_aux1(_II, _II,$/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_random_access_iter<_II>::__value,bool>::__type	signature:(_II,_II,_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Ref,_Ptr>)
std::__equal_aux1	/usr/include/c++/10/bits/stl_algobase.h	/^    __equal_aux1(_II1 __first1, _II1 __last1, _II2 __first2)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2)
std::__exception_ptr	/usr/include/c++/10/bits/exception_ptr.h	/^  namespace __exception_ptr$/;"	n	namespace:std
std::__exception_ptr::__dest_thunk	/usr/include/c++/10/bits/exception_ptr.h	/^      __dest_thunk(void* __x)$/;"	f	namespace:std::__exception_ptr	typeref:typename:void	signature:(void * __x)
std::__exception_ptr::exception_ptr	/usr/include/c++/10/bits/exception_ptr.h	/^    class exception_ptr$/;"	c	namespace:std::__exception_ptr
std::__exception_ptr::exception_ptr::_M_addref	/usr/include/c++/10/bits/exception_ptr.h	/^      void _M_addref() _GLIBCXX_USE_NOEXCEPT;$/;"	p	class:std::__exception_ptr::exception_ptr	typeref:typename:void	access:private	signature:()
std::__exception_ptr::exception_ptr::_M_exception_object	/usr/include/c++/10/bits/exception_ptr.h	/^      void* _M_exception_object;$/;"	m	class:std::__exception_ptr::exception_ptr	typeref:typename:void *	access:private
std::__exception_ptr::exception_ptr::_M_get	/usr/include/c++/10/bits/exception_ptr.h	/^      void *_M_get() const _GLIBCXX_NOEXCEPT __attribute__ ((__pure__));$/;"	p	class:std::__exception_ptr::exception_ptr	typeref:typename:void *	access:private	signature:() const
std::__exception_ptr::exception_ptr::_M_release	/usr/include/c++/10/bits/exception_ptr.h	/^      void _M_release() _GLIBCXX_USE_NOEXCEPT;$/;"	p	class:std::__exception_ptr::exception_ptr	typeref:typename:void	access:private	signature:()
std::__exception_ptr::exception_ptr::_M_safe_bool_dummy	/usr/include/c++/10/bits/exception_ptr.h	/^      void _M_safe_bool_dummy() _GLIBCXX_USE_NOEXCEPT$/;"	p	class:std::__exception_ptr::exception_ptr	typeref:typename:void	access:public	signature:()
std::__exception_ptr::exception_ptr::__safe_bool	/usr/include/c++/10/bits/exception_ptr.h	/^      typedef void (exception_ptr::*__safe_bool)();$/;"	t	class:std::__exception_ptr::exception_ptr	typeref:typename:void (exception_ptr::*)()	access:public
std::__exception_ptr::exception_ptr::exception_ptr	/usr/include/c++/10/bits/exception_ptr.h	/^      exception_ptr(exception_ptr&& __o) noexcept$/;"	f	class:std::__exception_ptr::exception_ptr	access:public	signature:(exception_ptr && __o)
std::__exception_ptr::exception_ptr::exception_ptr	/usr/include/c++/10/bits/exception_ptr.h	/^      exception_ptr(nullptr_t) noexcept$/;"	f	class:std::__exception_ptr::exception_ptr	access:public	signature:(nullptr_t)
std::__exception_ptr::exception_ptr::operator !	/usr/include/c++/10/bits/exception_ptr.h	/^      bool operator!() const _GLIBCXX_USE_NOEXCEPT$/;"	p	class:std::__exception_ptr::exception_ptr	typeref:typename:bool	access:public	signature:() const
std::__exception_ptr::exception_ptr::operator =	/usr/include/c++/10/bits/exception_ptr.h	/^      operator=(const exception_ptr&) _GLIBCXX_USE_NOEXCEPT;$/;"	p	class:std::__exception_ptr::exception_ptr	typeref:typename:exception_ptr &	access:public	signature:(const exception_ptr &)
std::__exception_ptr::exception_ptr::operator =	/usr/include/c++/10/bits/exception_ptr.h	/^      operator=(exception_ptr&& __o) noexcept$/;"	f	class:std::__exception_ptr::exception_ptr	typeref:typename:exception_ptr &	access:public	signature:(exception_ptr && __o)
std::__exception_ptr::exception_ptr::operator __safe_bool	/usr/include/c++/10/bits/exception_ptr.h	/^      operator __safe_bool() const _GLIBCXX_USE_NOEXCEPT;$/;"	p	class:std::__exception_ptr::exception_ptr	access:public	signature:() const
std::__exception_ptr::exception_ptr::swap	/usr/include/c++/10/bits/exception_ptr.h	/^      swap(exception_ptr&) _GLIBCXX_USE_NOEXCEPT;$/;"	p	class:std::__exception_ptr::exception_ptr	typeref:typename:void	access:public	signature:(exception_ptr &)
std::__exception_ptr::operator !=	/usr/include/c++/10/bits/exception_ptr.h	/^    operator!=(const exception_ptr&, const exception_ptr&)$/;"	p	namespace:std::__exception_ptr	typeref:typename:bool	signature:(const exception_ptr &,const exception_ptr &)
std::__exception_ptr::operator ==	/usr/include/c++/10/bits/exception_ptr.h	/^    operator==(const exception_ptr&, const exception_ptr&)$/;"	p	namespace:std::__exception_ptr	typeref:typename:bool	signature:(const exception_ptr &,const exception_ptr &)
std::__exception_ptr::swap	/usr/include/c++/10/bits/exception_ptr.h	/^    swap(exception_ptr& __lhs, exception_ptr& __rhs)$/;"	f	namespace:std::__exception_ptr	typeref:typename:void	signature:(exception_ptr & __lhs,exception_ptr & __rhs)
std::__exchange	/usr/include/c++/10/bits/move.h	/^    __exchange(_Tp& __obj, _Up&& __new_val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _Tp	signature:(_Tp & __obj,_Up && __new_val)
std::__false_type	/usr/include/c++/10/bits/cpp_type_traits.h	/^  struct __false_type { };$/;"	s	namespace:std
std::__fill_a	/usr/include/c++/10/bits/stl_algobase.h	/^    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_FIte __first,_FIte __last,const _Tp & __value)
std::__fill_a	/usr/include/c++/10/bits/stl_algobase.h	/^    __fill_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,$/;"	p	namespace:std	typeref:typename:void	signature:(const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> &,const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> &,const _Tp &)
std::__fill_a1	/usr/include/c++/10/bits/stl_algobase.h	/^    __fill_a1(::__gnu_cxx::__normal_iterator<_Ite, _Cont> __first,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(::__gnu_cxx::__normal_iterator<_Ite,_Cont> __first,::__gnu_cxx::__normal_iterator<_Ite,_Cont> __last,const _Tp & __value)
std::__fill_a1	/usr/include/c++/10/bits/stl_algobase.h	/^    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR typename __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value,void>::__type	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __value)
std::__fill_a1	/usr/include/c++/10/bits/stl_algobase.h	/^    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR typename __gnu_cxx::__enable_if<__is_byte<_Tp>::__value,void>::__type	signature:(_Tp * __first,_Tp * __last,const _Tp & __c)
std::__fill_a1	/usr/include/c++/10/bits/stl_algobase.h	/^    __fill_a1(const _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>&,$/;"	p	namespace:std	typeref:typename:void	signature:(const _GLIBCXX_STD_C::_Deque_iterator<_Tp,_Tp &,_Tp * > &,const _GLIBCXX_STD_C::_Deque_iterator<_Tp,_Tp &,_Tp * > &,const _VTp &)
std::__fill_n_a	/usr/include/c++/10/bits/stl_algobase.h	/^    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OutputIterator	signature:(_OutputIterator __first,_Size __n,const _Tp & __value,std::input_iterator_tag)
std::__fill_n_a	/usr/include/c++/10/bits/stl_algobase.h	/^    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OutputIterator	signature:(_OutputIterator __first,_Size __n,const _Tp & __value,std::output_iterator_tag)
std::__fill_n_a	/usr/include/c++/10/bits/stl_algobase.h	/^    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OutputIterator	signature:(_OutputIterator __first,_Size __n,const _Tp & __value,std::random_access_iterator_tag)
std::__fill_n_a1	/usr/include/c++/10/bits/stl_algobase.h	/^    __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR typename __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value,_OutputIterator>::__type	signature:(_OutputIterator __first,_Size __n,const _Tp & __value)
std::__find_if	/usr/include/c++/10/bits/stl_algobase.h	/^    __find_if(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_END_NAMESPACE_ALGO _GLIBCXX20_CONSTEXPR _InputIterator	signature:(_InputIterator __first,_InputIterator __last,_Predicate __pred,input_iterator_tag)
std::__find_if	/usr/include/c++/10/bits/stl_algobase.h	/^    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _Iterator	signature:(_Iterator __first,_Iterator __last,_Predicate __pred)
std::__find_if	/usr/include/c++/10/bits/stl_algobase.h	/^    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _RandomAccessIterator	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Predicate __pred,random_access_iterator_tag)
std::__get_first_arg	/usr/include/c++/10/bits/ptr_traits.h	/^    struct __get_first_arg$/;"	s	namespace:std
std::__get_first_arg	/usr/include/c++/10/bits/ptr_traits.h	/^    struct __get_first_arg<_Template<_Tp, _Types...>>$/;"	s	namespace:std
std::__get_first_arg::type	/usr/include/c++/10/bits/ptr_traits.h	/^    { using type = _Tp; };$/;"	t	struct:std::__get_first_arg	typeref:typename:_Tp	access:public
std::__get_first_arg::type	/usr/include/c++/10/bits/ptr_traits.h	/^    { using type = __undefined; };$/;"	t	struct:std::__get_first_arg	typeref:typename:__undefined	access:public
std::__get_first_arg_t	/usr/include/c++/10/bits/ptr_traits.h	/^    using __get_first_arg_t = typename __get_first_arg<_Tp>::type;$/;"	t	namespace:std	typeref:typename:__get_first_arg<_Tp>::type
std::__gnu_cxx_ldbl128	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^  inline namespace __gnu_cxx_ldbl128 { }$/;"	n	namespace:std
std::__hash_base	/usr/include/c++/10/bits/functional_hash.h	/^    struct __hash_base$/;"	s	namespace:std
std::__hash_base::_GLIBCXX17_DEPRECATED	/usr/include/c++/10/bits/functional_hash.h	/^      typedef _Arg      argument_type _GLIBCXX17_DEPRECATED;$/;"	t	struct:std::__hash_base	typeref:typename:_Arg argument_type	access:public
std::__hash_base::_GLIBCXX17_DEPRECATED	/usr/include/c++/10/bits/functional_hash.h	/^      typedef _Result     result_type _GLIBCXX17_DEPRECATED;$/;"	t	struct:std::__hash_base	typeref:typename:_Result result_type	access:public
std::__hash_enum	/usr/include/c++/10/bits/functional_hash.h	/^    struct __hash_enum$/;"	s	namespace:std
std::__hash_enum	/usr/include/c++/10/bits/functional_hash.h	/^    struct __hash_enum<_Tp, true> : public __hash_base<size_t, _Tp>$/;"	s	namespace:std	inherits:__hash_base<size_t,_Tp>
std::__hash_enum::__hash_enum	/usr/include/c++/10/bits/functional_hash.h	/^      __hash_enum(__hash_enum&&);$/;"	p	struct:std::__hash_enum	access:private	signature:(__hash_enum &&)
std::__hash_enum::operator ()	/usr/include/c++/10/bits/functional_hash.h	/^      operator()(_Tp __val) const noexcept$/;"	f	struct:std::__hash_enum	typeref:typename:size_t	access:public	signature:(_Tp __val) const
std::__hash_enum::~__hash_enum	/usr/include/c++/10/bits/functional_hash.h	/^      ~__hash_enum();$/;"	p	struct:std::__hash_enum	access:private	signature:()
std::__is_alloc_insertable_impl	/usr/include/c++/10/bits/alloc_traits.h	/^    struct __is_alloc_insertable_impl$/;"	s	namespace:std	inherits:false_type
std::__is_alloc_insertable_impl	/usr/include/c++/10/bits/alloc_traits.h	/^    struct __is_alloc_insertable_impl<_Alloc, _Tp, _ValueT,$/;"	s	namespace:std	inherits:true_type
std::__is_allocator	/usr/include/c++/10/bits/alloc_traits.h	/^    struct __is_allocator : false_type { };$/;"	s	namespace:std	inherits:false_type
std::__is_allocator	/usr/include/c++/10/bits/alloc_traits.h	/^    struct __is_allocator<_Alloc,$/;"	s	namespace:std	inherits:true_type
std::__is_arithmetic	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_arithmetic$/;"	s	namespace:std	inherits:__traitor<__is_integer<_Tp>,__is_floating<_Tp>>
std::__is_byte	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_byte$/;"	s	namespace:std
std::__is_byte	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_byte<byte>$/;"	s	namespace:std
std::__is_byte	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_byte<char8_t>$/;"	s	namespace:std
std::__is_byte	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_byte<char>$/;"	s	namespace:std
std::__is_byte	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_byte<signed char>$/;"	s	namespace:std
std::__is_byte	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_byte<unsigned char>$/;"	s	namespace:std
std::__is_byte::__anond8428c392003	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__is_byte	access:public
std::__is_byte::__anond8428c392103	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_byte	access:public
std::__is_byte::__anond8428c392203	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_byte	access:public
std::__is_byte::__anond8428c392303	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_byte	access:public
std::__is_byte::__anond8428c392403	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_byte	access:public
std::__is_byte::__anond8428c392503	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_byte	access:public
std::__is_byte::__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^      typedef __false_type __type;$/;"	t	struct:std::__is_byte	typeref:typename:__false_type	access:public
std::__is_byte::__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^      typedef __true_type __type;$/;"	t	struct:std::__is_byte	typeref:typename:__true_type	access:public
std::__is_byte::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__is_byte::__anond8428c392003	access:public
std::__is_byte::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_byte::__anond8428c392103	access:public
std::__is_byte::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_byte::__anond8428c392203	access:public
std::__is_byte::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_byte::__anond8428c392303	access:public
std::__is_byte::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_byte::__anond8428c392403	access:public
std::__is_byte::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_byte::__anond8428c392503	access:public
std::__is_char	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_char$/;"	s	namespace:std
std::__is_char	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_char<char>$/;"	s	namespace:std
std::__is_char	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_char<wchar_t>$/;"	s	namespace:std
std::__is_char::__anond8428c391d03	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__is_char	access:public
std::__is_char::__anond8428c391e03	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_char	access:public
std::__is_char::__anond8428c391f03	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_char	access:public
std::__is_char::__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^      typedef __false_type __type;$/;"	t	struct:std::__is_char	typeref:typename:__false_type	access:public
std::__is_char::__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^      typedef __true_type __type;$/;"	t	struct:std::__is_char	typeref:typename:__true_type	access:public
std::__is_char::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__is_char::__anond8428c391d03	access:public
std::__is_char::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_char::__anond8428c391e03	access:public
std::__is_char::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_char::__anond8428c391f03	access:public
std::__is_copy_insertable	/usr/include/c++/10/bits/alloc_traits.h	/^    struct __is_copy_insertable$/;"	s	namespace:std	inherits:__is_alloc_insertable_impl<_Alloc,typename_Alloc::value_typeconst&>::type
std::__is_copy_insertable	/usr/include/c++/10/bits/alloc_traits.h	/^    struct __is_copy_insertable<allocator<_Tp>>$/;"	s	namespace:std	inherits:is_copy_constructible<_Tp>
std::__is_fast_hash	/usr/include/c++/10/bits/basic_string.h	/^    struct __is_fast_hash<hash<string>> : std::false_type$/;"	s	namespace:std	inherits:std::false_type
std::__is_fast_hash	/usr/include/c++/10/bits/basic_string.h	/^    struct __is_fast_hash<hash<u16string>> : std::false_type$/;"	s	namespace:std	inherits:std::false_type
std::__is_fast_hash	/usr/include/c++/10/bits/basic_string.h	/^    struct __is_fast_hash<hash<u32string>> : std::false_type$/;"	s	namespace:std	inherits:std::false_type
std::__is_fast_hash	/usr/include/c++/10/bits/basic_string.h	/^    struct __is_fast_hash<hash<u8string>> : std::false_type$/;"	s	namespace:std	inherits:std::false_type
std::__is_fast_hash	/usr/include/c++/10/bits/basic_string.h	/^    struct __is_fast_hash<hash<wstring>> : std::false_type$/;"	s	namespace:std	inherits:std::false_type
std::__is_fast_hash	/usr/include/c++/10/bits/functional_hash.h	/^    struct __is_fast_hash : public std::true_type$/;"	s	namespace:std	inherits:std::true_type
std::__is_fast_hash	/usr/include/c++/10/bits/functional_hash.h	/^    struct __is_fast_hash<hash<long double>> : public std::false_type$/;"	s	namespace:std	inherits:std::false_type
std::__is_floating	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_floating$/;"	s	namespace:std
std::__is_floating	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_floating<double>$/;"	s	namespace:std
std::__is_floating	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_floating<float>$/;"	s	namespace:std
std::__is_floating	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_floating<long double>$/;"	s	namespace:std
std::__is_floating::__anond8428c391703	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__is_floating	access:public
std::__is_floating::__anond8428c391803	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_floating	access:public
std::__is_floating::__anond8428c391903	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_floating	access:public
std::__is_floating::__anond8428c391a03	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_floating	access:public
std::__is_floating::__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^      typedef __false_type __type;$/;"	t	struct:std::__is_floating	typeref:typename:__false_type	access:public
std::__is_floating::__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^      typedef __true_type __type;$/;"	t	struct:std::__is_floating	typeref:typename:__true_type	access:public
std::__is_floating::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__is_floating::__anond8428c391703	access:public
std::__is_floating::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_floating::__anond8428c391803	access:public
std::__is_floating::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_floating::__anond8428c391903	access:public
std::__is_floating::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_floating::__anond8428c391a03	access:public
std::__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer$/;"	s	namespace:std
std::__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer<bool>$/;"	s	namespace:std
std::__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer<char16_t>$/;"	s	namespace:std
std::__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer<char32_t>$/;"	s	namespace:std
std::__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer<char8_t>$/;"	s	namespace:std
std::__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer<char>$/;"	s	namespace:std
std::__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer<int>$/;"	s	namespace:std
std::__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer<long long>$/;"	s	namespace:std
std::__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer<long>$/;"	s	namespace:std
std::__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer<short>$/;"	s	namespace:std
std::__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer<signed char>$/;"	s	namespace:std
std::__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer<unsigned char>$/;"	s	namespace:std
std::__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer<unsigned int>$/;"	s	namespace:std
std::__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer<unsigned long long>$/;"	s	namespace:std
std::__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer<unsigned long>$/;"	s	namespace:std
std::__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer<unsigned short>$/;"	s	namespace:std
std::__is_integer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_integer<wchar_t>$/;"	s	namespace:std
std::__is_integer::__anond8428c390603	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__anond8428c390703	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__anond8428c390803	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__anond8428c390903	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__anond8428c390a03	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__anond8428c390b03	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__anond8428c390c03	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__anond8428c390d03	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__anond8428c390e03	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__anond8428c390f03	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__anond8428c391003	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__anond8428c391103	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__anond8428c391203	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__anond8428c391303	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__anond8428c391403	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__anond8428c391503	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__anond8428c391603	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^      typedef __false_type __type;$/;"	t	struct:std::__is_integer	typeref:typename:__false_type	access:public
std::__is_integer::__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^      typedef __true_type __type;$/;"	t	struct:std::__is_integer	typeref:typename:__true_type	access:public
std::__is_integer::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__is_integer::__anond8428c390603	access:public
std::__is_integer::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anond8428c390703	access:public
std::__is_integer::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anond8428c390803	access:public
std::__is_integer::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anond8428c390903	access:public
std::__is_integer::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anond8428c390a03	access:public
std::__is_integer::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anond8428c390b03	access:public
std::__is_integer::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anond8428c390c03	access:public
std::__is_integer::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anond8428c390d03	access:public
std::__is_integer::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anond8428c390e03	access:public
std::__is_integer::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anond8428c390f03	access:public
std::__is_integer::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anond8428c391003	access:public
std::__is_integer::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anond8428c391103	access:public
std::__is_integer::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anond8428c391203	access:public
std::__is_integer::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anond8428c391303	access:public
std::__is_integer::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anond8428c391403	access:public
std::__is_integer::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anond8428c391503	access:public
std::__is_integer::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anond8428c391603	access:public
std::__is_memcmp_ordered	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_memcmp_ordered$/;"	s	namespace:std
std::__is_memcmp_ordered	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_memcmp_ordered<_Tp, false>$/;"	s	namespace:std
std::__is_memcmp_ordered::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      static const bool __value = _Tp(-1) > _Tp(1); \/\/ is unsigned$/;"	m	struct:std::__is_memcmp_ordered	typeref:typename:const bool	access:public
std::__is_memcmp_ordered::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      static const bool __value = false;$/;"	m	struct:std::__is_memcmp_ordered	typeref:typename:const bool	access:public
std::__is_memcmp_ordered_with	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_memcmp_ordered_with$/;"	s	namespace:std
std::__is_memcmp_ordered_with	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_memcmp_ordered_with<_Tp, _Up, false>$/;"	s	namespace:std
std::__is_memcmp_ordered_with	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_memcmp_ordered_with<_Tp, std::byte, _SameSize>$/;"	s	namespace:std
std::__is_memcmp_ordered_with	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_memcmp_ordered_with<std::byte, _Up, _SameSize>$/;"	s	namespace:std
std::__is_memcmp_ordered_with	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_memcmp_ordered_with<std::byte, std::byte, true>$/;"	s	namespace:std
std::__is_memcmp_ordered_with::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      static const bool __value = __is_memcmp_ordered<_Tp>::__value$/;"	m	struct:std::__is_memcmp_ordered_with	typeref:typename:const bool	access:public
std::__is_memcmp_ordered_with::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      static const bool __value = false;$/;"	m	struct:std::__is_memcmp_ordered_with	typeref:typename:const bool	access:public
std::__is_memcmp_ordered_with::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^    { static constexpr bool __value = false; };$/;"	m	struct:std::__is_memcmp_ordered_with	typeref:typename:bool	access:public
std::__is_memcmp_ordered_with::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^    { static constexpr bool __value = true; };$/;"	m	struct:std::__is_memcmp_ordered_with	typeref:typename:bool	access:public
std::__is_move_insertable	/usr/include/c++/10/bits/alloc_traits.h	/^    struct __is_move_insertable$/;"	s	namespace:std	inherits:__is_alloc_insertable_impl<_Alloc,typename_Alloc::value_type>::type
std::__is_move_insertable	/usr/include/c++/10/bits/alloc_traits.h	/^    struct __is_move_insertable<allocator<_Tp>>$/;"	s	namespace:std	inherits:is_move_constructible<_Tp>
std::__is_move_iterator	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_move_iterator$/;"	s	namespace:std
std::__is_move_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    struct __is_move_iterator<move_iterator<_Iterator> >$/;"	s	namespace:std
std::__is_move_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    struct __is_move_iterator<reverse_iterator<_Iterator> >$/;"	s	namespace:std	inherits:__is_move_iterator<_Iterator>
std::__is_move_iterator::__anon45a010bb0203	/usr/include/c++/10/bits/stl_iterator.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_move_iterator	access:public
std::__is_move_iterator::__anond8428c392a03	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__is_move_iterator	access:public
std::__is_move_iterator::__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^      typedef __false_type __type;$/;"	t	struct:std::__is_move_iterator	typeref:typename:__false_type	access:public
std::__is_move_iterator::__type	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef __true_type __type;$/;"	t	struct:std::__is_move_iterator	typeref:typename:__true_type	access:public
std::__is_move_iterator::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__is_move_iterator::__anond8428c392a03	access:public
std::__is_move_iterator::__value	/usr/include/c++/10/bits/stl_iterator.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_move_iterator::__anon45a010bb0203	access:public
std::__is_nonvolatile_trivially_copyable	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_nonvolatile_trivially_copyable$/;"	s	namespace:std
std::__is_nonvolatile_trivially_copyable	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_nonvolatile_trivially_copyable<volatile _Tp>$/;"	s	namespace:std
std::__is_nonvolatile_trivially_copyable::__anond8428c392603	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = __is_trivially_copyable(_Tp) };$/;"	g	struct:std::__is_nonvolatile_trivially_copyable	access:public
std::__is_nonvolatile_trivially_copyable::__anond8428c392703	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__is_nonvolatile_trivially_copyable	access:public
std::__is_nonvolatile_trivially_copyable::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__is_nonvolatile_trivially_copyable::__anond8428c392703	access:public
std::__is_nonvolatile_trivially_copyable::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = __is_trivially_copyable(_Tp) };$/;"	e	enum:std::__is_nonvolatile_trivially_copyable::__anond8428c392603	access:public
std::__is_permutation	/usr/include/c++/10/bits/stl_algobase.h	/^    __is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_ForwardIterator1 __first1,_ForwardIterator1 __last1,_ForwardIterator2 __first2,_BinaryPredicate __pred)
std::__is_pointer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_pointer$/;"	s	namespace:std
std::__is_pointer	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_pointer<_Tp*>$/;"	s	namespace:std
std::__is_pointer::__anond8428c391b03	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__is_pointer	access:public
std::__is_pointer::__anond8428c391c03	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_pointer	access:public
std::__is_pointer::__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^      typedef __false_type __type;$/;"	t	struct:std::__is_pointer	typeref:typename:__false_type	access:public
std::__is_pointer::__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^      typedef __true_type __type;$/;"	t	struct:std::__is_pointer	typeref:typename:__true_type	access:public
std::__is_pointer::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__is_pointer::__anond8428c391b03	access:public
std::__is_pointer::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_pointer::__anond8428c391c03	access:public
std::__is_random_access_iter	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^    struct __is_random_access_iter$/;"	s	namespace:std
std::__is_random_access_iter	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^    struct __is_random_access_iter$/;"	s	namespace:std	inherits:is_base_of<random_access_iterator_tag,_Cat>
std::__is_random_access_iter::_Base	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef is_base_of<random_access_iterator_tag, _Cat> _Base;$/;"	t	struct:std::__is_random_access_iter	typeref:typename:is_base_of<random_access_iterator_tag,_Cat>	access:public
std::__is_random_access_iter::__anon82e621690103	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      enum { __value = _Base::value };$/;"	g	struct:std::__is_random_access_iter	access:public
std::__is_random_access_iter::__anon82e621690203	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^    { enum { __value = __is_base_of(random_access_iterator_tag, _Cat) }; };$/;"	g	struct:std::__is_random_access_iter	access:public
std::__is_random_access_iter::__value	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      enum { __value = _Base::value };$/;"	e	enum:std::__is_random_access_iter::__anon82e621690103	access:public
std::__is_random_access_iter::__value	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^    { enum { __value = __is_base_of(random_access_iterator_tag, _Cat) }; };$/;"	e	enum:std::__is_random_access_iter::__anon82e621690203	access:public
std::__is_scalar	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_scalar$/;"	s	namespace:std	inherits:__traitor<__is_arithmetic<_Tp>,__is_pointer<_Tp>>
std::__is_void	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_void$/;"	s	namespace:std
std::__is_void	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __is_void<void>$/;"	s	namespace:std
std::__is_void::__anond8428c390403	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__is_void	access:public
std::__is_void::__anond8428c390503	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_void	access:public
std::__is_void::__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^      typedef __false_type __type;$/;"	t	struct:std::__is_void	typeref:typename:__false_type	access:public
std::__is_void::__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^      typedef __true_type __type;$/;"	t	struct:std::__is_void	typeref:typename:__true_type	access:public
std::__is_void::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__is_void::__anond8428c390403	access:public
std::__is_void::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_void::__anond8428c390503	access:public
std::__iter_key_t	/usr/include/c++/10/bits/stl_iterator.h	/^    using __iter_key_t = remove_const_t<$/;"	t	namespace:std	typeref:typename:remove_const_t<typename iterator_traits<_InputIterator>::value_type::first_type>
std::__iter_swap	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __iter_swap$/;"	s	namespace:std
std::__iter_swap	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __iter_swap<true>$/;"	s	namespace:std
std::__iter_swap::iter_swap	/usr/include/c++/10/bits/stl_algobase.h	/^	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)$/;"	f	struct:std::__iter_swap	typeref:typename:void	access:public	signature:(_ForwardIterator1 __a,_ForwardIterator2 __b)
std::__iter_to_alloc_t	/usr/include/c++/10/bits/stl_iterator.h	/^    using __iter_to_alloc_t =$/;"	t	namespace:std	typeref:typename:pair<add_const_t<__iter_key_t<_InputIterator>>,__iter_val_t<_InputIterator>>
std::__iter_val_t	/usr/include/c++/10/bits/stl_iterator.h	/^    using __iter_val_t =$/;"	t	namespace:std	typeref:typename:iterator_traits<_InputIterator>::value_type::second_type
std::__iterator_category	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^    __iterator_category(const _Iter&)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR typename iterator_traits<_Iter>::iterator_category	signature:(const _Iter &)
std::__iterator_category_t	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^    using __iterator_category_t$/;"	t	namespace:std	typeref:typename:iterator_traits<_Iter>::iterator_category
std::__iterator_traits	/usr/include/c++/10/bits/iterator_concepts.h	/^    struct __iterator_traits<_Iterator, void>$/;"	s	namespace:std
std::__iterator_traits	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^    struct __iterator_traits { };$/;"	s	namespace:std
std::__iterator_traits	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^    struct __iterator_traits<_Iterator,$/;"	s	namespace:std
std::__iterator_traits::_Iter::iterator_category	/usr/include/c++/10/bits/iterator_concepts.h	/^	requires requires { typename _Iter::iterator_category; }$/;"	m	class:std::__iterator_traits::_Iter	typeref:meta:typename
std::__iterator_traits::_Iter::pointer	/usr/include/c++/10/bits/iterator_concepts.h	/^      template<typename _Iter> requires requires { typename _Iter::pointer; }$/;"	m	class:std::__iterator_traits::_Iter	typeref:meta:typename
std::__iterator_traits::_Iter::reference	/usr/include/c++/10/bits/iterator_concepts.h	/^      template<typename _Iter> requires requires { typename _Iter::reference; }$/;"	m	class:std::__iterator_traits::_Iter	typeref:meta:typename
std::__iterator_traits::__cat	/usr/include/c++/10/bits/iterator_concepts.h	/^	struct __cat$/;"	s	struct:std::__iterator_traits	access:private
std::__iterator_traits::__cat	/usr/include/c++/10/bits/iterator_concepts.h	/^	struct __cat<_Iter>$/;"	s	struct:std::__iterator_traits	access:private
std::__iterator_traits::__cat::type	/usr/include/c++/10/bits/iterator_concepts.h	/^	{ using type = bidirectional_iterator_tag; };$/;"	t	struct:std::__iterator_traits::__cat	typeref:typename:bidirectional_iterator_tag	access:public
std::__iterator_traits::__cat::type	/usr/include/c++/10/bits/iterator_concepts.h	/^	{ using type = forward_iterator_tag; };$/;"	t	struct:std::__iterator_traits::__cat	typeref:typename:forward_iterator_tag	access:public
std::__iterator_traits::__cat::type	/usr/include/c++/10/bits/iterator_concepts.h	/^	{ using type = input_iterator_tag; };$/;"	t	struct:std::__iterator_traits::__cat	typeref:typename:input_iterator_tag	access:public
std::__iterator_traits::__cat::type	/usr/include/c++/10/bits/iterator_concepts.h	/^	{ using type = random_access_iterator_tag; };$/;"	t	struct:std::__iterator_traits::__cat	typeref:typename:random_access_iterator_tag	access:public
std::__iterator_traits::__cat::type	/usr/include/c++/10/bits/iterator_concepts.h	/^	{ using type = typename _Iter::iterator_category; };$/;"	t	struct:std::__iterator_traits::__cat	typeref:typename:_Iter::iterator_category	access:public
std::__iterator_traits::__diff	/usr/include/c++/10/bits/iterator_concepts.h	/^	struct __diff$/;"	s	struct:std::__iterator_traits	access:private
std::__iterator_traits::__diff	/usr/include/c++/10/bits/iterator_concepts.h	/^	struct __diff<_Iter>$/;"	s	struct:std::__iterator_traits	access:private
std::__iterator_traits::__diff::type	/usr/include/c++/10/bits/iterator_concepts.h	/^	  using type = typename incrementable_traits<_Iter>::difference_type;$/;"	t	struct:std::__iterator_traits::__diff	typeref:typename:incrementable_traits<_Iter>::difference_type	access:public
std::__iterator_traits::__diff::type	/usr/include/c++/10/bits/iterator_concepts.h	/^	{ using type = void; };$/;"	t	struct:std::__iterator_traits::__diff	typeref:typename:void	access:public
std::__iterator_traits::__ptr	/usr/include/c++/10/bits/iterator_concepts.h	/^	struct __ptr$/;"	s	struct:std::__iterator_traits	access:private
std::__iterator_traits::__ptr	/usr/include/c++/10/bits/iterator_concepts.h	/^	struct __ptr<_Iter>$/;"	s	struct:std::__iterator_traits	access:private
std::__iterator_traits::__ptr::type	/usr/include/c++/10/bits/iterator_concepts.h	/^	{ using type = decltype(std::declval<_Iter&>().operator->()); };$/;"	t	struct:std::__iterator_traits::__ptr	access:public
std::__iterator_traits::__ptr::type	/usr/include/c++/10/bits/iterator_concepts.h	/^	{ using type = typename _Iter::pointer; };$/;"	t	struct:std::__iterator_traits::__ptr	typeref:typename:_Iter::pointer	access:public
std::__iterator_traits::__ptr::type	/usr/include/c++/10/bits/iterator_concepts.h	/^	{ using type = void; };$/;"	t	struct:std::__iterator_traits::__ptr	typeref:typename:void	access:public
std::__iterator_traits::__ref	/usr/include/c++/10/bits/iterator_concepts.h	/^	struct __ref$/;"	s	struct:std::__iterator_traits	access:private
std::__iterator_traits::__ref	/usr/include/c++/10/bits/iterator_concepts.h	/^	struct __ref<_Iter>$/;"	s	struct:std::__iterator_traits	access:private
std::__iterator_traits::__ref::type	/usr/include/c++/10/bits/iterator_concepts.h	/^	{ using type = iter_reference_t<_Iter>; };$/;"	t	struct:std::__iterator_traits::__ref	typeref:typename:iter_reference_t<_Iter>	access:public
std::__iterator_traits::__ref::type	/usr/include/c++/10/bits/iterator_concepts.h	/^	{ using type = typename _Iter::reference; };$/;"	t	struct:std::__iterator_traits::__ref	typeref:typename:_Iter::reference	access:public
std::__iterator_traits::difference_type	/usr/include/c++/10/bits/iterator_concepts.h	/^      using difference_type   = typename _Iterator::difference_type;$/;"	t	struct:std::__iterator_traits	typeref:typename:_Iterator::difference_type	access:public
std::__iterator_traits::difference_type	/usr/include/c++/10/bits/iterator_concepts.h	/^      using difference_type   = typename __diff<_Iterator>::type;$/;"	t	struct:std::__iterator_traits	typeref:typename:__diff<_Iterator>::type	access:public
std::__iterator_traits::difference_type	/usr/include/c++/10/bits/iterator_concepts.h	/^      using difference_type$/;"	t	struct:std::__iterator_traits	typeref:typename:incrementable_traits<_Iterator>::difference_type	access:public
std::__iterator_traits::difference_type	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::difference_type   difference_type;$/;"	t	struct:std::__iterator_traits	typeref:typename:_Iterator::difference_type	access:public
std::__iterator_traits::incrementable_traits<_Iter>::difference_type	/usr/include/c++/10/bits/iterator_concepts.h	/^	{ typename incrementable_traits<_Iter>::difference_type; }$/;"	m	class:std::__iterator_traits::incrementable_traits<_Iter>	typeref:meta:typename
std::__iterator_traits::iterator_category	/usr/include/c++/10/bits/iterator_concepts.h	/^      using iterator_category = output_iterator_tag;$/;"	t	struct:std::__iterator_traits	typeref:typename:output_iterator_tag	access:public
std::__iterator_traits::iterator_category	/usr/include/c++/10/bits/iterator_concepts.h	/^      using iterator_category = typename _Iterator::iterator_category;$/;"	t	struct:std::__iterator_traits	typeref:typename:_Iterator::iterator_category	access:public
std::__iterator_traits::iterator_category	/usr/include/c++/10/bits/iterator_concepts.h	/^      using iterator_category = typename __cat<_Iterator>::type;$/;"	t	struct:std::__iterator_traits	typeref:typename:__cat<_Iterator>::type	access:public
std::__iterator_traits::iterator_category	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::iterator_category iterator_category;$/;"	t	struct:std::__iterator_traits	typeref:typename:_Iterator::iterator_category	access:public
std::__iterator_traits::pointer	/usr/include/c++/10/bits/iterator_concepts.h	/^      using pointer	      = typename __ptr<_Iterator>::type;$/;"	t	struct:std::__iterator_traits	typeref:typename:__ptr<_Iterator>::type	access:public
std::__iterator_traits::pointer	/usr/include/c++/10/bits/iterator_concepts.h	/^      using pointer	      = void;$/;"	t	struct:std::__iterator_traits	typeref:typename:void	access:public
std::__iterator_traits::pointer	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::pointer           pointer;$/;"	t	struct:std::__iterator_traits	typeref:typename:_Iterator::pointer	access:public
std::__iterator_traits::reference	/usr/include/c++/10/bits/iterator_concepts.h	/^      using reference	      = typename _Iterator::reference;$/;"	t	struct:std::__iterator_traits	typeref:typename:_Iterator::reference	access:public
std::__iterator_traits::reference	/usr/include/c++/10/bits/iterator_concepts.h	/^      using reference	      = typename __ref<_Iterator>::type;$/;"	t	struct:std::__iterator_traits	typeref:typename:__ref<_Iterator>::type	access:public
std::__iterator_traits::reference	/usr/include/c++/10/bits/iterator_concepts.h	/^      using reference	      = void;$/;"	t	struct:std::__iterator_traits	typeref:typename:void	access:public
std::__iterator_traits::reference	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::reference         reference;$/;"	t	struct:std::__iterator_traits	typeref:typename:_Iterator::reference	access:public
std::__iterator_traits::value_type	/usr/include/c++/10/bits/iterator_concepts.h	/^      using value_type	      = typename _Iterator::value_type;$/;"	t	struct:std::__iterator_traits	typeref:typename:_Iterator::value_type	access:public
std::__iterator_traits::value_type	/usr/include/c++/10/bits/iterator_concepts.h	/^      using value_type	      = void;$/;"	t	struct:std::__iterator_traits	typeref:typename:void	access:public
std::__iterator_traits::value_type	/usr/include/c++/10/bits/iterator_concepts.h	/^      using value_type$/;"	t	struct:std::__iterator_traits	typeref:typename:indirectly_readable_traits<_Iterator>::value_type	access:public
std::__iterator_traits::value_type	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::value_type        value_type;$/;"	t	struct:std::__iterator_traits	typeref:typename:_Iterator::value_type	access:public
std::__lc_rai	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __lc_rai$/;"	s	namespace:std
std::__lc_rai	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>$/;"	s	namespace:std
std::__lc_rai::__cnd2	/usr/include/c++/10/bits/stl_algobase.h	/^	__cnd2(_II __first, _II __last)$/;"	f	struct:std::__lc_rai	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_II __first,_II __last)
std::__lc_rai::__cnd2	/usr/include/c++/10/bits/stl_algobase.h	/^	__cnd2(_RAI, _RAI)$/;"	f	struct:std::__lc_rai	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_RAI,_RAI)
std::__lc_rai::__newlast1	/usr/include/c++/10/bits/stl_algobase.h	/^	__newlast1(_II1, _II1 __last1, _II2, _II2)$/;"	f	struct:std::__lc_rai	typeref:typename:_GLIBCXX20_CONSTEXPR _II1	access:public	signature:(_II1,_II1 __last1,_II2,_II2)
std::__lc_rai::__newlast1	/usr/include/c++/10/bits/stl_algobase.h	/^	__newlast1(_RAI1 __first1, _RAI1 __last1,$/;"	f	struct:std::__lc_rai	typeref:typename:_GLIBCXX20_CONSTEXPR _RAI1	access:public	signature:(_RAI1 __first1,_RAI1 __last1,_RAI2 __first2,_RAI2 __last2)
std::__lexicographical_compare	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __lexicographical_compare$/;"	s	namespace:std
std::__lexicographical_compare	/usr/include/c++/10/bits/stl_algobase.h	/^    struct __lexicographical_compare<true>$/;"	s	namespace:std
std::__lexicographical_compare::__lc	/usr/include/c++/10/bits/stl_algobase.h	/^	__lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)$/;"	f	struct:std::__lexicographical_compare	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2)
std::__lexicographical_compare::__lc	/usr/include/c++/10/bits/stl_algobase.h	/^	__lc(const _Tp* __first1, const _Tp* __last1,$/;"	f	struct:std::__lexicographical_compare	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(const _Tp * __first1,const _Tp * __last1,const _Up * __first2,const _Up * __last2)
std::__lexicographical_compare_aux	/usr/include/c++/10/bits/stl_algobase.h	/^    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2)
std::__lexicographical_compare_impl	/usr/include/c++/10/bits/stl_algobase.h	/^    __lexicographical_compare_impl(_II1 __first1, _II1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2,_Compare __comp)
std::__lg	/usr/include/c++/10/bits/stl_algobase.h	/^  __lg(int __n)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR int	signature:(int __n)
std::__lg	/usr/include/c++/10/bits/stl_algobase.h	/^  __lg(long __n)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR long	signature:(long __n)
std::__lg	/usr/include/c++/10/bits/stl_algobase.h	/^  __lg(long long __n)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR long long	signature:(long long __n)
std::__lg	/usr/include/c++/10/bits/stl_algobase.h	/^  __lg(unsigned __n)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR unsigned	signature:(unsigned __n)
std::__lg	/usr/include/c++/10/bits/stl_algobase.h	/^  __lg(unsigned long __n)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR unsigned long	signature:(unsigned long __n)
std::__lg	/usr/include/c++/10/bits/stl_algobase.h	/^  __lg(unsigned long long __n)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR unsigned long long	signature:(unsigned long long __n)
std::__lower_bound	/usr/include/c++/10/bits/stl_algobase.h	/^    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __val,_Compare __comp)
std::__make_move_if_noexcept_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    __make_move_if_noexcept_iterator(_Iterator __i)$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR _ReturnType	signature:(_Iterator __i)
std::__make_move_if_noexcept_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    __make_move_if_noexcept_iterator(_Tp* __i)$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR _ReturnType	signature:(_Tp * __i)
std::__make_not_void	/usr/include/c++/10/bits/ptr_traits.h	/^    using __make_not_void$/;"	t	namespace:std	typeref:typename:conditional<is_void<_Tp>::value,__undefined,_Tp>::type
std::__make_reverse_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    __make_reverse_iterator(_Iterator __i)$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>	signature:(_Iterator __i)
std::__memcmp	/usr/include/c++/10/bits/stl_algobase.h	/^    __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION _GLIBCXX14_CONSTEXPR int	signature:(const _Tp * __first1,const _Up * __first2,size_t __num)
std::__memcmpable	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __memcmpable$/;"	s	namespace:std
std::__memcmpable	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __memcmpable<_Tp*, _Tp*>$/;"	s	namespace:std	inherits:__is_nonvolatile_trivially_copyable<_Tp>
std::__memcmpable	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __memcmpable<_Tp*, const _Tp*>$/;"	s	namespace:std	inherits:__is_nonvolatile_trivially_copyable<_Tp>
std::__memcmpable	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __memcmpable<const _Tp*, _Tp*>$/;"	s	namespace:std	inherits:__is_nonvolatile_trivially_copyable<_Tp>
std::__memcmpable::__anond8428c392903	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__memcmpable	access:public
std::__memcmpable::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__memcmpable::__anond8428c392903	access:public
std::__memcpyable	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __memcpyable$/;"	s	namespace:std
std::__memcpyable	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __memcpyable<_Tp*, _Tp*>$/;"	s	namespace:std	inherits:__is_nonvolatile_trivially_copyable<_Tp>
std::__memcpyable	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __memcpyable<_Tp*, const _Tp*>$/;"	s	namespace:std	inherits:__is_nonvolatile_trivially_copyable<_Tp>
std::__memcpyable::__anond8428c392803	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__memcpyable	access:public
std::__memcpyable::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__memcpyable::__anond8428c392803	access:public
std::__min_cmp	/usr/include/c++/10/bits/stl_algobase.h	/^    __min_cmp(_Tp __x, _Tp __y)$/;"	f	namespace:std	typeref:typename:auto	signature:(_Tp __x,_Tp __y)
std::__min_cmp::_Res::_M_min	/usr/include/c++/10/bits/stl_algobase.h	/^	_Tp _M_min;$/;"	m	struct:std::__min_cmp::_Res	typeref:typename:_Tp	access:public
std::__mismatch	/usr/include/c++/10/bits/stl_algobase.h	/^    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR pair<_InputIterator1,_InputIterator2>	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_BinaryPredicate __binary_pred)
std::__mismatch	/usr/include/c++/10/bits/stl_algobase.h	/^    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR pair<_InputIterator1,_InputIterator2>	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_BinaryPredicate __binary_pred)
std::__miter_base	/usr/include/c++/10/bits/cpp_type_traits.h	/^    __miter_base(_Iterator __it)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _Iterator	signature:(_Iterator __it)
std::__miter_base	/usr/include/c++/10/bits/stl_iterator.h	/^    __miter_base(move_iterator<_Iterator> __it)$/;"	f	namespace:std	typeref:typename:decltype (__miter_base (__it.base ()))	signature:(move_iterator<_Iterator> __it)
std::__miter_base	/usr/include/c++/10/bits/stl_iterator.h	/^    __miter_base(reverse_iterator<_Iterator> __it)$/;"	f	namespace:std	typeref:typename:decltype (__make_reverse_iterator (__miter_base (__it.base ())))	signature:(reverse_iterator<_Iterator> __it)
std::__move_if_noexcept_cond	/usr/include/c++/10/bits/move.h	/^    struct __move_if_noexcept_cond$/;"	s	namespace:std	inherits:__and_<__not_<is_nothrow_move_constructible<_Tp>>,is_copy_constructible<_Tp>>::type
std::__niter_base	/usr/include/c++/10/bits/stl_algobase.h	/^    __niter_base(_Iterator __it)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _Iterator	signature:(_Iterator __it)
std::__niter_base	/usr/include/c++/10/bits/stl_iterator.h	/^    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION _GLIBCXX20_CONSTEXPR _Iterator	signature:(__gnu_cxx::__normal_iterator<_Iterator,_Container> __it)
std::__niter_base	/usr/include/c++/10/bits/stl_iterator.h	/^    __niter_base(move_iterator<_Iterator> __it)$/;"	f	namespace:std	typeref:typename:decltype (make_move_iterator (__niter_base (__it.base ())))	signature:(move_iterator<_Iterator> __it)
std::__niter_base	/usr/include/c++/10/bits/stl_iterator.h	/^    __niter_base(reverse_iterator<_Iterator> __it)$/;"	f	namespace:std	typeref:typename:decltype (__make_reverse_iterator (__niter_base (__it.base ())))	signature:(reverse_iterator<_Iterator> __it)
std::__niter_wrap	/usr/include/c++/10/bits/stl_algobase.h	/^    __niter_wrap(_From __from, _To __res)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _From	signature:(_From __from,_To __res)
std::__niter_wrap	/usr/include/c++/10/bits/stl_algobase.h	/^    __niter_wrap(const _Iterator&, _Iterator __res)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _Iterator	signature:(const _Iterator &,_Iterator __res)
std::__num_base	/usr/include/c++/10/bits/locale_facets.h	/^  class __num_base$/;"	c	namespace:std
std::__num_base::_S_atoms_in	/usr/include/c++/10/bits/locale_facets.h	/^    static const char* _S_atoms_in;$/;"	m	class:std::__num_base	typeref:typename:const char *	access:public
std::__num_base::_S_atoms_out	/usr/include/c++/10/bits/locale_facets.h	/^    static const char* _S_atoms_out;$/;"	m	class:std::__num_base	typeref:typename:const char *	access:public
std::__num_base::_S_format_float	/usr/include/c++/10/bits/locale_facets.h	/^    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw();$/;"	p	class:std::__num_base	typeref:typename:void	access:public	signature:(const ios_base & __io,char * __fptr,char __mod)
std::__num_base::_S_iE	/usr/include/c++/10/bits/locale_facets.h	/^      _S_iE = _S_izero + 20,$/;"	e	enum:std::__num_base::__anon4f18faa40203	access:public
std::__num_base::_S_iX	/usr/include/c++/10/bits/locale_facets.h	/^      _S_iX,$/;"	e	enum:std::__num_base::__anon4f18faa40203	access:public
std::__num_base::_S_ie	/usr/include/c++/10/bits/locale_facets.h	/^      _S_ie = _S_izero + 14,$/;"	e	enum:std::__num_base::__anon4f18faa40203	access:public
std::__num_base::_S_iend	/usr/include/c++/10/bits/locale_facets.h	/^      _S_iend = 26$/;"	e	enum:std::__num_base::__anon4f18faa40203	access:public
std::__num_base::_S_iminus	/usr/include/c++/10/bits/locale_facets.h	/^      _S_iminus,$/;"	e	enum:std::__num_base::__anon4f18faa40203	access:public
std::__num_base::_S_iplus	/usr/include/c++/10/bits/locale_facets.h	/^      _S_iplus,$/;"	e	enum:std::__num_base::__anon4f18faa40203	access:public
std::__num_base::_S_ix	/usr/include/c++/10/bits/locale_facets.h	/^      _S_ix,$/;"	e	enum:std::__num_base::__anon4f18faa40203	access:public
std::__num_base::_S_izero	/usr/include/c++/10/bits/locale_facets.h	/^      _S_izero,$/;"	e	enum:std::__num_base::__anon4f18faa40203	access:public
std::__num_base::_S_oE	/usr/include/c++/10/bits/locale_facets.h	/^	_S_oE = _S_oudigits + 14, \/\/ For scientific notation, 'E'$/;"	e	enum:std::__num_base::__anon4f18faa40103	access:public
std::__num_base::_S_oX	/usr/include/c++/10/bits/locale_facets.h	/^	_S_oX,$/;"	e	enum:std::__num_base::__anon4f18faa40103	access:public
std::__num_base::_S_odigits	/usr/include/c++/10/bits/locale_facets.h	/^	_S_odigits,$/;"	e	enum:std::__num_base::__anon4f18faa40103	access:public
std::__num_base::_S_odigits_end	/usr/include/c++/10/bits/locale_facets.h	/^	_S_odigits_end = _S_odigits + 16,$/;"	e	enum:std::__num_base::__anon4f18faa40103	access:public
std::__num_base::_S_oe	/usr/include/c++/10/bits/locale_facets.h	/^	_S_oe = _S_odigits + 14,  \/\/ For scientific notation, 'e'$/;"	e	enum:std::__num_base::__anon4f18faa40103	access:public
std::__num_base::_S_oend	/usr/include/c++/10/bits/locale_facets.h	/^	_S_oend = _S_oudigits_end$/;"	e	enum:std::__num_base::__anon4f18faa40103	access:public
std::__num_base::_S_ominus	/usr/include/c++/10/bits/locale_facets.h	/^	_S_ominus,$/;"	e	enum:std::__num_base::__anon4f18faa40103	access:public
std::__num_base::_S_oplus	/usr/include/c++/10/bits/locale_facets.h	/^	_S_oplus,$/;"	e	enum:std::__num_base::__anon4f18faa40103	access:public
std::__num_base::_S_oudigits	/usr/include/c++/10/bits/locale_facets.h	/^	_S_oudigits = _S_odigits_end,$/;"	e	enum:std::__num_base::__anon4f18faa40103	access:public
std::__num_base::_S_oudigits_end	/usr/include/c++/10/bits/locale_facets.h	/^	_S_oudigits_end = _S_oudigits + 16,$/;"	e	enum:std::__num_base::__anon4f18faa40103	access:public
std::__num_base::_S_ox	/usr/include/c++/10/bits/locale_facets.h	/^	_S_ox,$/;"	e	enum:std::__num_base::__anon4f18faa40103	access:public
std::__num_base::__anon4f18faa40103	/usr/include/c++/10/bits/locale_facets.h	/^      {$/;"	g	class:std::__num_base	access:public
std::__num_base::__anon4f18faa40203	/usr/include/c++/10/bits/locale_facets.h	/^    {$/;"	g	class:std::__num_base	access:public
std::__numpunct_cache	/usr/include/c++/10/bits/locale_facets.h	/^    struct __numpunct_cache : public locale::facet$/;"	s	namespace:std	inherits:locale::facet
std::__numpunct_cache::_M_allocated	/usr/include/c++/10/bits/locale_facets.h	/^      bool				_M_allocated;$/;"	m	struct:std::__numpunct_cache	typeref:typename:bool	access:public
std::__numpunct_cache::_M_atoms_in	/usr/include/c++/10/bits/locale_facets.h	/^      _CharT				_M_atoms_in[__num_base::_S_iend];$/;"	m	struct:std::__numpunct_cache	typeref:typename:_CharT[]	access:public
std::__numpunct_cache::_M_atoms_out	/usr/include/c++/10/bits/locale_facets.h	/^      _CharT				_M_atoms_out[__num_base::_S_oend];$/;"	m	struct:std::__numpunct_cache	typeref:typename:_CharT[]	access:public
std::__numpunct_cache::_M_cache	/usr/include/c++/10/bits/locale_facets.h	/^      _M_cache(const locale& __loc);$/;"	p	struct:std::__numpunct_cache	typeref:typename:void	access:public	signature:(const locale & __loc)
std::__numpunct_cache::_M_decimal_point	/usr/include/c++/10/bits/locale_facets.h	/^      _CharT				_M_decimal_point;$/;"	m	struct:std::__numpunct_cache	typeref:typename:_CharT	access:public
std::__numpunct_cache::_M_falsename	/usr/include/c++/10/bits/locale_facets.h	/^      const _CharT*			_M_falsename;$/;"	m	struct:std::__numpunct_cache	typeref:typename:const _CharT *	access:public
std::__numpunct_cache::_M_falsename_size	/usr/include/c++/10/bits/locale_facets.h	/^      size_t                            _M_falsename_size;$/;"	m	struct:std::__numpunct_cache	typeref:typename:size_t	access:public
std::__numpunct_cache::_M_grouping	/usr/include/c++/10/bits/locale_facets.h	/^      const char*			_M_grouping;$/;"	m	struct:std::__numpunct_cache	typeref:typename:const char *	access:public
std::__numpunct_cache::_M_grouping_size	/usr/include/c++/10/bits/locale_facets.h	/^      size_t                            _M_grouping_size;$/;"	m	struct:std::__numpunct_cache	typeref:typename:size_t	access:public
std::__numpunct_cache::_M_thousands_sep	/usr/include/c++/10/bits/locale_facets.h	/^      _CharT				_M_thousands_sep;$/;"	m	struct:std::__numpunct_cache	typeref:typename:_CharT	access:public
std::__numpunct_cache::_M_truename	/usr/include/c++/10/bits/locale_facets.h	/^      const _CharT*			_M_truename;$/;"	m	struct:std::__numpunct_cache	typeref:typename:const _CharT *	access:public
std::__numpunct_cache::_M_truename_size	/usr/include/c++/10/bits/locale_facets.h	/^      size_t                            _M_truename_size;$/;"	m	struct:std::__numpunct_cache	typeref:typename:size_t	access:public
std::__numpunct_cache::_M_use_grouping	/usr/include/c++/10/bits/locale_facets.h	/^      bool				_M_use_grouping;$/;"	m	struct:std::__numpunct_cache	typeref:typename:bool	access:public
std::__numpunct_cache::__numpunct_cache	/usr/include/c++/10/bits/locale_facets.h	/^      __numpunct_cache(const __numpunct_cache&);$/;"	p	struct:std::__numpunct_cache	access:private	signature:(const __numpunct_cache &)
std::__numpunct_cache::__numpunct_cache	/usr/include/c++/10/bits/locale_facets.h	/^      __numpunct_cache(size_t __refs = 0)$/;"	f	struct:std::__numpunct_cache	access:public	signature:(size_t __refs=0)
std::__numpunct_cache::operator =	/usr/include/c++/10/bits/locale_facets.h	/^      operator=(const __numpunct_cache&);$/;"	p	struct:std::__numpunct_cache	typeref:typename:__numpunct_cache &	access:private	signature:(const __numpunct_cache &)
std::__numpunct_cache::~__numpunct_cache	/usr/include/c++/10/bits/locale_facets.h	/^      ~__numpunct_cache();$/;"	p	struct:std::__numpunct_cache	access:public	signature:()
std::__numpunct_cache::~__numpunct_cache	/usr/include/c++/10/bits/locale_facets.h	/^    __numpunct_cache<_CharT>::~__numpunct_cache()$/;"	f	class:std::__numpunct_cache	signature:()
std::__ostream_fill	/usr/include/c++/10/bits/ostream_insert.h	/^    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)$/;"	f	namespace:std	typeref:typename:void	signature:(basic_ostream<_CharT,_Traits> & __out,streamsize __n)
std::__ostream_insert	/usr/include/c++/10/bits/ostream_insert.h	/^    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,$/;"	f	namespace:std	typeref:typename:basic_ostream<_CharT,_Traits> &	signature:(basic_ostream<_CharT,_Traits> & __out,const _CharT * __s,streamsize __n)
std::__ostream_write	/usr/include/c++/10/bits/ostream_insert.h	/^    __ostream_write(basic_ostream<_CharT, _Traits>& __out,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION void	signature:(basic_ostream<_CharT,_Traits> & __out,const _CharT * __s,streamsize __n)
std::__pad	/usr/include/c++/10/bits/locale_facets.h	/^    struct __pad$/;"	s	namespace:std
std::__pad::_S_pad	/usr/include/c++/10/bits/locale_facets.h	/^      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,$/;"	p	struct:std::__pad	typeref:typename:void	access:public	signature:(ios_base & __io,_CharT __fill,_CharT * __news,const _CharT * __olds,streamsize __newlen,streamsize __oldlen)
std::__pair_base	/usr/include/c++/10/bits/stl_pair.h	/^  template<typename _U1, typename _U2> class __pair_base$/;"	c	namespace:std
std::__pair_base::__pair_base	/usr/include/c++/10/bits/stl_pair.h	/^    __pair_base() = default;$/;"	p	class:std::__pair_base	access:private	signature:()
std::__pair_base::__pair_base	/usr/include/c++/10/bits/stl_pair.h	/^    __pair_base(const __pair_base&) = default;$/;"	p	class:std::__pair_base	access:private	signature:(const __pair_base &)
std::__pair_base::operator =	/usr/include/c++/10/bits/stl_pair.h	/^    __pair_base& operator=(const __pair_base&) = delete;$/;"	p	class:std::__pair_base	typeref:typename:__pair_base &	access:private	signature:(const __pair_base &)
std::__pair_base::~__pair_base	/usr/include/c++/10/bits/stl_pair.h	/^    ~__pair_base() = default;$/;"	p	class:std::__pair_base	access:private	signature:()
std::__parallel	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^  inline namespace __parallel { }$/;"	n	namespace:std
std::__poison_hash	/usr/include/c++/10/bits/functional_hash.h	/^    struct __poison_hash$/;"	s	namespace:std
std::__poison_hash	/usr/include/c++/10/bits/functional_hash.h	/^    struct __poison_hash<_Tp, __void_t<decltype(hash<_Tp>()(declval<_Tp>()))>>$/;"	s	namespace:std
std::__poison_hash::__enable_hash_call	/usr/include/c++/10/bits/functional_hash.h	/^      static constexpr bool __enable_hash_call = false;$/;"	m	struct:std::__poison_hash	typeref:typename:bool	access:public
std::__poison_hash::__enable_hash_call	/usr/include/c++/10/bits/functional_hash.h	/^      static constexpr bool __enable_hash_call = true;$/;"	m	struct:std::__poison_hash	typeref:typename:bool	access:public
std::__poison_hash::__poison_hash	/usr/include/c++/10/bits/functional_hash.h	/^      __poison_hash(__poison_hash&&);$/;"	p	struct:std::__poison_hash	access:private	signature:(__poison_hash &&)
std::__poison_hash::~__poison_hash	/usr/include/c++/10/bits/functional_hash.h	/^      ~__poison_hash();$/;"	p	struct:std::__poison_hash	access:private	signature:()
std::__ptr_rebind	/usr/include/c++/10/bits/ptr_traits.h	/^    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;$/;"	t	namespace:std	typeref:typename:pointer_traits<_Ptr>::template rebind<_Tp>
std::__replace_first_arg	/usr/include/c++/10/bits/ptr_traits.h	/^    struct __replace_first_arg$/;"	s	namespace:std
std::__replace_first_arg	/usr/include/c++/10/bits/ptr_traits.h	/^    struct __replace_first_arg<_Template<_Tp, _Types...>, _Up>$/;"	s	namespace:std
std::__replace_first_arg::type	/usr/include/c++/10/bits/ptr_traits.h	/^    { using type = _Template<_Up, _Types...>; };$/;"	t	struct:std::__replace_first_arg	typeref:typename:_Template<_Up,_Types...>	access:public
std::__replace_first_arg_t	/usr/include/c++/10/bits/ptr_traits.h	/^    using __replace_first_arg_t = typename __replace_first_arg<_Tp, _Up>::type;$/;"	t	namespace:std	typeref:typename:__replace_first_arg<_Tp,_Up>::type
std::__replacement_assert	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^  __replacement_assert(const char* __file, int __line,$/;"	f	namespace:std	typeref:typename:void	signature:(const char * __file,int __line,const char * __function,const char * __condition)
std::__rethrow_if_nested_cond	/usr/include/c++/10/bits/nested_exception.h	/^    using __rethrow_if_nested_cond = typename enable_if<$/;"	t	namespace:std
std::__rethrow_if_nested_impl	/usr/include/c++/10/bits/nested_exception.h	/^    __rethrow_if_nested_impl(const _Ex* __ptr)$/;"	f	namespace:std	typeref:typename:__rethrow_if_nested_cond<_Ex>	signature:(const _Ex * __ptr)
std::__rethrow_if_nested_impl	/usr/include/c++/10/bits/nested_exception.h	/^  __rethrow_if_nested_impl(const void*)$/;"	f	namespace:std	typeref:typename:void	signature:(const void *)
std::__shrink_to_fit_aux	/usr/include/c++/10/bits/allocator.h	/^    struct __shrink_to_fit_aux$/;"	s	namespace:std
std::__shrink_to_fit_aux	/usr/include/c++/10/bits/allocator.h	/^    struct __shrink_to_fit_aux<_Tp, true>$/;"	s	namespace:std
std::__shrink_to_fit_aux::_S_do_it	/usr/include/c++/10/bits/allocator.h	/^      _S_do_it(_Tp& __c) noexcept$/;"	f	struct:std::__shrink_to_fit_aux	typeref:typename:bool	access:public	signature:(_Tp & __c)
std::__shrink_to_fit_aux::_S_do_it	/usr/include/c++/10/bits/allocator.h	/^    { static bool _S_do_it(_Tp&) noexcept { return false; } };$/;"	f	struct:std::__shrink_to_fit_aux	typeref:typename:bool	access:public	signature:(_Tp &)
std::__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(__GLIBCXX_TYPE_INT_N_0 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_0	signature:(__GLIBCXX_TYPE_INT_N_0 __n)
std::__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(__GLIBCXX_TYPE_INT_N_1 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_1	signature:(__GLIBCXX_TYPE_INT_N_1 __n)
std::__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(__GLIBCXX_TYPE_INT_N_2 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_2	signature:(__GLIBCXX_TYPE_INT_N_2 __n)
std::__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(__GLIBCXX_TYPE_INT_N_3 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_3	signature:(__GLIBCXX_TYPE_INT_N_3 __n)
std::__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(__float128 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR long long	signature:(__float128 __n)
std::__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(double __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR long long	signature:(double __n)
std::__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(float __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR long long	signature:(float __n)
std::__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(int __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR int	signature:(int __n)
std::__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(long __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR long	signature:(long __n)
std::__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(long double __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR long long	signature:(long double __n)
std::__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(long long __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR long long	signature:(long long __n)
std::__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_0 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_0	signature:(unsigned __GLIBCXX_TYPE_INT_N_0 __n)
std::__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_1 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_1	signature:(unsigned __GLIBCXX_TYPE_INT_N_1 __n)
std::__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_2 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_2	signature:(unsigned __GLIBCXX_TYPE_INT_N_2 __n)
std::__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_3 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_3	signature:(unsigned __GLIBCXX_TYPE_INT_N_3 __n)
std::__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(unsigned __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR unsigned	signature:(unsigned __n)
std::__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(unsigned long __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR unsigned long	signature:(unsigned long __n)
std::__size_to_integer	/usr/include/c++/10/bits/stl_algobase.h	/^  __size_to_integer(unsigned long long __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR unsigned long long	signature:(unsigned long long __n)
std::__throw_bad_alloc	/usr/include/c++/10/bits/functexcept.h	/^  __throw_bad_alloc(void) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(void)
std::__throw_bad_cast	/usr/include/c++/10/bits/functexcept.h	/^  __throw_bad_cast(void) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(void)
std::__throw_bad_exception	/usr/include/c++/10/bits/functexcept.h	/^  __throw_bad_exception(void) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION void	signature:(void)
std::__throw_bad_function_call	/usr/include/c++/10/bits/functexcept.h	/^  __throw_bad_function_call() __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:()
std::__throw_bad_typeid	/usr/include/c++/10/bits/functexcept.h	/^  __throw_bad_typeid(void) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(void)
std::__throw_domain_error	/usr/include/c++/10/bits/functexcept.h	/^  __throw_domain_error(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
std::__throw_future_error	/usr/include/c++/10/bits/functexcept.h	/^  __throw_future_error(int) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(int)
std::__throw_invalid_argument	/usr/include/c++/10/bits/functexcept.h	/^  __throw_invalid_argument(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
std::__throw_ios_failure	/usr/include/c++/10/bits/functexcept.h	/^  __throw_ios_failure(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
std::__throw_ios_failure	/usr/include/c++/10/bits/functexcept.h	/^  __throw_ios_failure(const char*, int) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *,int)
std::__throw_length_error	/usr/include/c++/10/bits/functexcept.h	/^  __throw_length_error(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
std::__throw_logic_error	/usr/include/c++/10/bits/functexcept.h	/^  __throw_logic_error(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
std::__throw_out_of_range	/usr/include/c++/10/bits/functexcept.h	/^  __throw_out_of_range(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
std::__throw_out_of_range_fmt	/usr/include/c++/10/bits/functexcept.h	/^  __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__))$/;"	p	namespace:std	typeref:typename:void	signature:(const char *,...)
std::__throw_overflow_error	/usr/include/c++/10/bits/functexcept.h	/^  __throw_overflow_error(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
std::__throw_range_error	/usr/include/c++/10/bits/functexcept.h	/^  __throw_range_error(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
std::__throw_runtime_error	/usr/include/c++/10/bits/functexcept.h	/^  __throw_runtime_error(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
std::__throw_system_error	/usr/include/c++/10/bits/functexcept.h	/^  __throw_system_error(int) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(int)
std::__throw_underflow_error	/usr/include/c++/10/bits/functexcept.h	/^  __throw_underflow_error(const char*) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
std::__throw_with_nested_impl	/usr/include/c++/10/bits/nested_exception.h	/^    __throw_with_nested_impl(_Tp&& __t, false_type)$/;"	f	namespace:std	typeref:typename:void	signature:(_Tp && __t,false_type)
std::__throw_with_nested_impl	/usr/include/c++/10/bits/nested_exception.h	/^    __throw_with_nested_impl(_Tp&& __t, true_type)$/;"	f	namespace:std	typeref:typename:void	signature:(_Tp && __t,true_type)
std::__to_address	/usr/include/c++/10/bits/ptr_traits.h	/^    __to_address(_Tp* __ptr) noexcept$/;"	f	namespace:std	typeref:typename:_Tp *	signature:(_Tp * __ptr)
std::__to_address	/usr/include/c++/10/bits/ptr_traits.h	/^    __to_address(const _Ptr& __ptr) noexcept$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Ptr & __ptr)
std::__to_address	/usr/include/c++/10/bits/ptr_traits.h	/^    __to_address(const _Ptr& __ptr)$/;"	f	namespace:std	typeref:typename:std::pointer_traits<_Ptr>::element_type *	signature:(const _Ptr & __ptr)
std::__to_address	/usr/include/c++/10/bits/ptr_traits.h	/^    __to_address(const _Ptr& __ptr, _None...) noexcept$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Ptr & __ptr,_None...)
std::__traitor	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __traitor$/;"	s	namespace:std
std::__traitor::__anond8428c390103	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };$/;"	g	struct:std::__traitor	access:public
std::__traitor::__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^      typedef typename __truth_type<__value>::__type __type;$/;"	t	struct:std::__traitor	typeref:typename:__truth_type<__value>::__type	access:public
std::__traitor::__value	/usr/include/c++/10/bits/cpp_type_traits.h	/^      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };$/;"	e	enum:std::__traitor::__anond8428c390103	access:public
std::__true_type	/usr/include/c++/10/bits/cpp_type_traits.h	/^  struct __true_type { };$/;"	s	namespace:std
std::__truth_type	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __truth_type$/;"	s	namespace:std
std::__truth_type	/usr/include/c++/10/bits/cpp_type_traits.h	/^    struct __truth_type<true>$/;"	s	namespace:std
std::__truth_type::__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^    { typedef __false_type __type; };$/;"	t	struct:std::__truth_type	typeref:typename:__false_type	access:public
std::__truth_type::__type	/usr/include/c++/10/bits/cpp_type_traits.h	/^    { typedef __true_type __type; };$/;"	t	struct:std::__truth_type	typeref:typename:__true_type	access:public
std::__write	/usr/include/c++/10/bits/locale_facets.h	/^    __write(_OutIter __s, const _CharT* __ws, int __len)$/;"	f	namespace:std	typeref:typename:_OutIter	signature:(_OutIter __s,const _CharT * __ws,int __len)
std::__write	/usr/include/c++/10/bits/locale_facets.h	/^    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)$/;"	f	namespace:std	typeref:typename:ostreambuf_iterator<_CharT>	signature:(ostreambuf_iterator<_CharT> __s,const _CharT * __ws,int __len)
std::abs	/usr/include/c++/10/bits/std_abs.h	/^  abs(__GLIBCXX_TYPE_INT_N_0 __x) { return __x >= 0 ? __x : -__x; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_0	signature:(__GLIBCXX_TYPE_INT_N_0 __x)
std::abs	/usr/include/c++/10/bits/std_abs.h	/^  abs(__GLIBCXX_TYPE_INT_N_1 __x) { return __x >= 0 ? __x : -__x; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_1	signature:(__GLIBCXX_TYPE_INT_N_1 __x)
std::abs	/usr/include/c++/10/bits/std_abs.h	/^  abs(__GLIBCXX_TYPE_INT_N_2 __x) { return __x >= 0 ? __x : -__x; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_2	signature:(__GLIBCXX_TYPE_INT_N_2 __x)
std::abs	/usr/include/c++/10/bits/std_abs.h	/^  abs(__GLIBCXX_TYPE_INT_N_3 __x) { return __x >= 0 ? __x : -__x; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_3	signature:(__GLIBCXX_TYPE_INT_N_3 __x)
std::abs	/usr/include/c++/10/bits/std_abs.h	/^  abs(__float128 __x)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR __float128	signature:(__float128 __x)
std::abs	/usr/include/c++/10/bits/std_abs.h	/^  abs(double __x)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR double	signature:(double __x)
std::abs	/usr/include/c++/10/bits/std_abs.h	/^  abs(float __x)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR float	signature:(float __x)
std::abs	/usr/include/c++/10/bits/std_abs.h	/^  abs(long __i) { return __builtin_labs(__i); }$/;"	f	namespace:std	typeref:typename:long	signature:(long __i)
std::abs	/usr/include/c++/10/bits/std_abs.h	/^  abs(long double __x)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR long double	signature:(long double __x)
std::abs	/usr/include/c++/10/bits/std_abs.h	/^  abs(long long __x) { return __builtin_llabs (__x); }$/;"	f	namespace:std	typeref:typename:long long	signature:(long long __x)
std::address_family_not_supported	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      address_family_not_supported = 		EAFNOSUPPORT,$/;"	e	enum:std::errc	access:public
std::address_in_use	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      address_in_use = 				EADDRINUSE,$/;"	e	enum:std::errc	access:public
std::address_not_available	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      address_not_available = 			EADDRNOTAVAIL,$/;"	e	enum:std::errc	access:public
std::addressof	/usr/include/c++/10/bits/move.h	/^    addressof(_Tp& __r) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR _Tp *	signature:(_Tp & __r)
std::addressof	/usr/include/c++/10/bits/move.h	/^    const _Tp* addressof(const _Tp&&) = delete;$/;"	p	namespace:std	typeref:typename:const _Tp *	signature:(const _Tp &&)
std::advance	/usr/include/c++/10/bits/stl_iterator_base_funcs.h	/^    advance(_InputIterator& __i, _Distance __n)$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR void	signature:(_InputIterator & __i,_Distance __n)
std::advance	/usr/include/c++/10/bits/streambuf_iterator.h	/^    advance(istreambuf_iterator<_CharT>& __i, _Distance __n)$/;"	f	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,void>::__type	signature:(istreambuf_iterator<_CharT> & __i,_Distance __n)
std::allocator	/usr/include/c++/10/bits/allocator.h	/^    class allocator : public __allocator_base<_Tp>$/;"	c	namespace:std	inherits:__allocator_base<_Tp>
std::allocator	/usr/include/c++/10/bits/allocator.h	/^    class allocator<const _Tp>$/;"	c	namespace:std
std::allocator	/usr/include/c++/10/bits/allocator.h	/^    class allocator<const volatile _Tp>$/;"	c	namespace:std
std::allocator	/usr/include/c++/10/bits/allocator.h	/^    class allocator<void>$/;"	c	namespace:std
std::allocator	/usr/include/c++/10/bits/allocator.h	/^    class allocator<volatile _Tp>$/;"	c	namespace:std
std::allocator::allocate	/usr/include/c++/10/bits/allocator.h	/^      allocate(size_t __n)$/;"	f	class:std::allocator	typeref:typename:_Tp *	access:public	signature:(size_t __n)
std::allocator::allocator	/usr/include/c++/10/bits/allocator.h	/^	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }$/;"	f	class:std::allocator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const allocator<_Tp1> &)
std::allocator::allocator	/usr/include/c++/10/bits/allocator.h	/^	allocator(const allocator<_Up>&) { }$/;"	f	class:std::allocator	access:public	signature:(const allocator<_Up> &)
std::allocator::allocator	/usr/include/c++/10/bits/allocator.h	/^      allocator() = default;$/;"	p	class:std::allocator	access:public	signature:()
std::allocator::allocator	/usr/include/c++/10/bits/allocator.h	/^      allocator() _GLIBCXX_NOTHROW { }$/;"	f	class:std::allocator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:()
std::allocator::allocator	/usr/include/c++/10/bits/allocator.h	/^      allocator(const allocator& __a) _GLIBCXX_NOTHROW$/;"	f	class:std::allocator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const allocator & __a)
std::allocator::allocator	/usr/include/c++/10/bits/allocator.h	/^      template<typename _Up> allocator(const allocator<_Up>&) { }$/;"	f	class:std::allocator	access:public	signature:(const allocator<_Up> &)
std::allocator::const_pointer	/usr/include/c++/10/bits/allocator.h	/^      typedef const _Tp* const_pointer;$/;"	t	class:std::allocator	typeref:typename:const _Tp *	access:public
std::allocator::const_pointer	/usr/include/c++/10/bits/allocator.h	/^      typedef const void* const_pointer;$/;"	t	class:std::allocator	typeref:typename:const void *	access:public
std::allocator::const_reference	/usr/include/c++/10/bits/allocator.h	/^      typedef const _Tp& const_reference;$/;"	t	class:std::allocator	typeref:typename:const _Tp &	access:public
std::allocator::construct	/usr/include/c++/10/bits/allocator.h	/^	construct(_Up* __p, _Args&&... __args)$/;"	f	class:std::allocator	typeref:typename:void	access:public	signature:(_Up * __p,_Args &&...__args)
std::allocator::deallocate	/usr/include/c++/10/bits/allocator.h	/^      deallocate(_Tp* __p, size_t __n)$/;"	f	class:std::allocator	typeref:typename:void	access:public	signature:(_Tp * __p,size_t __n)
std::allocator::destroy	/usr/include/c++/10/bits/allocator.h	/^	destroy(_Up* __p)$/;"	f	class:std::allocator	typeref:typename:void	access:public	signature:(_Up * __p)
std::allocator::difference_type	/usr/include/c++/10/bits/allocator.h	/^      typedef ptrdiff_t   difference_type;$/;"	t	class:std::allocator	typeref:typename:ptrdiff_t	access:public
std::allocator::difference_type	/usr/include/c++/10/bits/allocator.h	/^      typedef ptrdiff_t  difference_type;$/;"	t	class:std::allocator	typeref:typename:ptrdiff_t	access:public
std::allocator::is_always_equal	/usr/include/c++/10/bits/allocator.h	/^      typedef true_type is_always_equal;$/;"	t	class:std::allocator	typeref:typename:true_type	access:public
std::allocator::operator =	/usr/include/c++/10/bits/allocator.h	/^      allocator& operator=(const allocator&) = default;$/;"	p	class:std::allocator	typeref:typename:allocator &	access:public	signature:(const allocator &)
std::allocator::pointer	/usr/include/c++/10/bits/allocator.h	/^      typedef _Tp*       pointer;$/;"	t	class:std::allocator	typeref:typename:_Tp *	access:public
std::allocator::pointer	/usr/include/c++/10/bits/allocator.h	/^      typedef void*       pointer;$/;"	t	class:std::allocator	typeref:typename:void *	access:public
std::allocator::propagate_on_container_move_assignment	/usr/include/c++/10/bits/allocator.h	/^      typedef true_type propagate_on_container_move_assignment;$/;"	t	class:std::allocator	typeref:typename:true_type	access:public
std::allocator::rebind	/usr/include/c++/10/bits/allocator.h	/^	struct rebind$/;"	s	class:std::allocator	access:public
std::allocator::rebind::other	/usr/include/c++/10/bits/allocator.h	/^	{ typedef allocator<_Tp1> other; };$/;"	t	struct:std::allocator::rebind	typeref:typename:allocator<_Tp1>	access:public
std::allocator::reference	/usr/include/c++/10/bits/allocator.h	/^      typedef _Tp&       reference;$/;"	t	class:std::allocator	typeref:typename:_Tp &	access:public
std::allocator::size_type	/usr/include/c++/10/bits/allocator.h	/^      typedef size_t      size_type;$/;"	t	class:std::allocator	typeref:typename:size_t	access:public
std::allocator::size_type	/usr/include/c++/10/bits/allocator.h	/^      typedef size_t     size_type;$/;"	t	class:std::allocator	typeref:typename:size_t	access:public
std::allocator::value_type	/usr/include/c++/10/bits/allocator.h	/^      typedef _Tp        value_type;$/;"	t	class:std::allocator	typeref:typename:_Tp	access:public
std::allocator::value_type	/usr/include/c++/10/bits/allocator.h	/^      typedef _Tp value_type;$/;"	t	class:std::allocator	typeref:typename:_Tp	access:public
std::allocator::value_type	/usr/include/c++/10/bits/allocator.h	/^      typedef void        value_type;$/;"	t	class:std::allocator	typeref:typename:void	access:public
std::allocator::~allocator	/usr/include/c++/10/bits/allocator.h	/^      ~allocator() _GLIBCXX_NOTHROW { }$/;"	f	class:std::allocator	access:public	signature:()
std::allocator_traits	/usr/include/c++/10/bits/alloc_traits.h	/^    struct allocator_traits : __allocator_traits_base$/;"	s	namespace:std	inherits:__allocator_traits_base
std::allocator_traits	/usr/include/c++/10/bits/alloc_traits.h	/^    struct allocator_traits<allocator<_Tp>>$/;"	s	namespace:std
std::allocator_traits::_Diff	/usr/include/c++/10/bits/alloc_traits.h	/^	struct _Diff$/;"	s	struct:std::allocator_traits	access:private
std::allocator_traits::_Diff	/usr/include/c++/10/bits/alloc_traits.h	/^	struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>$/;"	s	struct:std::allocator_traits	access:private
std::allocator_traits::_Diff::type	/usr/include/c++/10/bits/alloc_traits.h	/^	{ using type = typename _A2::difference_type; };$/;"	t	struct:std::allocator_traits::_Diff	typeref:typename:_A2::difference_type	access:public
std::allocator_traits::_Diff::type	/usr/include/c++/10/bits/alloc_traits.h	/^	{ using type = typename pointer_traits<_PtrT>::difference_type; };$/;"	t	struct:std::allocator_traits::_Diff	typeref:typename:pointer_traits<_PtrT>::difference_type	access:public
std::allocator_traits::_Ptr	/usr/include/c++/10/bits/alloc_traits.h	/^	struct _Ptr$/;"	s	struct:std::allocator_traits	access:private
std::allocator_traits::_Ptr	/usr/include/c++/10/bits/alloc_traits.h	/^	struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>$/;"	s	struct:std::allocator_traits	access:private
std::allocator_traits::_Ptr::type	/usr/include/c++/10/bits/alloc_traits.h	/^	  using type = _Func<_Alloc>;$/;"	t	struct:std::allocator_traits::_Ptr	typeref:typename:_Func<_Alloc>	access:public
std::allocator_traits::_Ptr::type	/usr/include/c++/10/bits/alloc_traits.h	/^	  using type = typename pointer_traits<pointer>::template rebind<_Tp>;$/;"	t	struct:std::allocator_traits::_Ptr	typeref:typename:pointer_traits<pointer>::template rebind<_Tp>	access:public
std::allocator_traits::_S_allocate	/usr/include/c++/10/bits/alloc_traits.h	/^	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)$/;"	f	struct:std::allocator_traits	typeref:typename:decltype (__a.allocate (__n,__hint))	access:private	signature:(_Alloc2 & __a,size_type __n,const_void_pointer __hint,int)
std::allocator_traits::_S_allocate	/usr/include/c++/10/bits/alloc_traits.h	/^	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)$/;"	f	struct:std::allocator_traits	typeref:typename:pointer	access:private	signature:(_Alloc2 & __a,size_type __n,const_void_pointer,...)
std::allocator_traits::_S_construct	/usr/include/c++/10/bits/alloc_traits.h	/^	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX14_CONSTEXPR _Require<__has_construct<_Tp,_Args...>>	access:private	signature:(_Alloc & __a,_Tp * __p,_Args &&...__args)
std::allocator_traits::_S_construct	/usr/include/c++/10/bits/alloc_traits.h	/^	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX14_CONSTEXPR _Require<__and_<__not_<__has_construct<_Tp,_Args...>>,is_constructible<_Tp,_Args...>>>	access:private	signature:(_Alloc &,_Tp * __p,_Args &&...__args)
std::allocator_traits::_S_destroy	/usr/include/c++/10/bits/alloc_traits.h	/^	_S_destroy(_Alloc2& __a, _Tp* __p, int)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:private	signature:(_Alloc2 & __a,_Tp * __p,int)
std::allocator_traits::_S_destroy	/usr/include/c++/10/bits/alloc_traits.h	/^	_S_destroy(_Alloc2&, _Tp* __p, ...)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX14_CONSTEXPR void	access:private	signature:(_Alloc2 &,_Tp * __p,...)
std::allocator_traits::_S_max_size	/usr/include/c++/10/bits/alloc_traits.h	/^	_S_max_size(_Alloc2& __a, int)$/;"	f	struct:std::allocator_traits	typeref:typename:decltype (__a.max_size ())	access:private	signature:(_Alloc2 & __a,int)
std::allocator_traits::_S_max_size	/usr/include/c++/10/bits/alloc_traits.h	/^	_S_max_size(_Alloc2&, ...)$/;"	f	struct:std::allocator_traits	typeref:typename:size_type	access:private	signature:(_Alloc2 &,...)
std::allocator_traits::_S_select	/usr/include/c++/10/bits/alloc_traits.h	/^	_S_select(_Alloc2& __a, ...)$/;"	f	struct:std::allocator_traits	typeref:typename:_Alloc2	access:private	signature:(_Alloc2 & __a,...)
std::allocator_traits::_S_select	/usr/include/c++/10/bits/alloc_traits.h	/^	_S_select(_Alloc2& __a, int)$/;"	f	struct:std::allocator_traits	typeref:typename:decltype (__a.select_on_container_copy_construction ())	access:private	signature:(_Alloc2 & __a,int)
std::allocator_traits::_Size	/usr/include/c++/10/bits/alloc_traits.h	/^	struct _Size : make_unsigned<_DiffT> { };$/;"	s	struct:std::allocator_traits	inherits:make_unsigned<_DiffT>	access:private
std::allocator_traits::_Size	/usr/include/c++/10/bits/alloc_traits.h	/^	struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>$/;"	s	struct:std::allocator_traits	access:private
std::allocator_traits::_Size::type	/usr/include/c++/10/bits/alloc_traits.h	/^	{ using type = typename _A2::size_type; };$/;"	t	struct:std::allocator_traits::_Size	typeref:typename:_A2::size_type	access:public
std::allocator_traits::__construct_helper	/usr/include/c++/10/bits/alloc_traits.h	/^	struct __construct_helper$/;"	s	struct:std::allocator_traits	access:private
std::allocator_traits::__construct_helper::__test	/usr/include/c++/10/bits/alloc_traits.h	/^	    static false_type __test(...);$/;"	p	struct:std::allocator_traits::__construct_helper	typeref:typename:false_type	access:public	signature:(...)
std::allocator_traits::__construct_helper::__test	/usr/include/c++/10/bits/alloc_traits.h	/^	    static true_type __test(int);$/;"	p	struct:std::allocator_traits::__construct_helper	typeref:typename:true_type	access:public	signature:(int)
std::allocator_traits::__construct_helper::type	/usr/include/c++/10/bits/alloc_traits.h	/^	  using type = decltype(__test<_Alloc>(0));$/;"	t	struct:std::allocator_traits::__construct_helper	access:public
std::allocator_traits::__has_construct	/usr/include/c++/10/bits/alloc_traits.h	/^	using __has_construct$/;"	t	struct:std::allocator_traits	typeref:typename:__construct_helper<_Tp,_Args...>::type	access:private
std::allocator_traits::allocate	/usr/include/c++/10/bits/alloc_traits.h	/^      allocate(_Alloc& __a, size_type __n)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR pointer	access:public	signature:(_Alloc & __a,size_type __n)
std::allocator_traits::allocate	/usr/include/c++/10/bits/alloc_traits.h	/^      allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR pointer	access:public	signature:(_Alloc & __a,size_type __n,const_void_pointer __hint)
std::allocator_traits::allocate	/usr/include/c++/10/bits/alloc_traits.h	/^      allocate(allocator_type& __a, size_type __n)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR pointer	access:public	signature:(allocator_type & __a,size_type __n)
std::allocator_traits::allocate	/usr/include/c++/10/bits/alloc_traits.h	/^      allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR pointer	access:public	signature:(allocator_type & __a,size_type __n,const_void_pointer __hint)
std::allocator_traits::allocator_type	/usr/include/c++/10/bits/alloc_traits.h	/^      typedef _Alloc allocator_type;$/;"	t	struct:std::allocator_traits	typeref:typename:_Alloc	access:public
std::allocator_traits::allocator_type	/usr/include/c++/10/bits/alloc_traits.h	/^      using allocator_type = allocator<_Tp>;$/;"	t	struct:std::allocator_traits	typeref:typename:allocator<_Tp>	access:public
std::allocator_traits::const_pointer	/usr/include/c++/10/bits/alloc_traits.h	/^      using const_pointer = const _Tp*;$/;"	t	struct:std::allocator_traits	typeref:typename:const _Tp *	access:public
std::allocator_traits::const_pointer	/usr/include/c++/10/bits/alloc_traits.h	/^      using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;$/;"	t	struct:std::allocator_traits	typeref:typename:_Ptr<__c_pointer,const value_type>::type	access:public
std::allocator_traits::const_void_pointer	/usr/include/c++/10/bits/alloc_traits.h	/^      using const_void_pointer = const void*;$/;"	t	struct:std::allocator_traits	typeref:typename:const void *	access:public
std::allocator_traits::const_void_pointer	/usr/include/c++/10/bits/alloc_traits.h	/^      using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;$/;"	t	struct:std::allocator_traits	typeref:typename:_Ptr<__cv_pointer,const void>::type	access:public
std::allocator_traits::construct	/usr/include/c++/10/bits/alloc_traits.h	/^	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR auto	access:public	signature:(_Alloc & __a,_Tp * __p,_Args &&...__args)
std::allocator_traits::construct	/usr/include/c++/10/bits/alloc_traits.h	/^	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(allocator_type & __a,_Up * __p,_Args &&...__args)
std::allocator_traits::deallocate	/usr/include/c++/10/bits/alloc_traits.h	/^      deallocate(_Alloc& __a, pointer __p, size_type __n)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(_Alloc & __a,pointer __p,size_type __n)
std::allocator_traits::deallocate	/usr/include/c++/10/bits/alloc_traits.h	/^      deallocate(allocator_type& __a, pointer __p, size_type __n)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(allocator_type & __a,pointer __p,size_type __n)
std::allocator_traits::destroy	/usr/include/c++/10/bits/alloc_traits.h	/^	destroy(_Alloc& __a, _Tp* __p)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(_Alloc & __a,_Tp * __p)
std::allocator_traits::destroy	/usr/include/c++/10/bits/alloc_traits.h	/^	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(allocator_type & __a,_Up * __p)
std::allocator_traits::difference_type	/usr/include/c++/10/bits/alloc_traits.h	/^      using difference_type = std::ptrdiff_t;$/;"	t	struct:std::allocator_traits	typeref:typename:std::ptrdiff_t	access:public
std::allocator_traits::difference_type	/usr/include/c++/10/bits/alloc_traits.h	/^      using difference_type = typename _Diff<_Alloc, pointer>::type;$/;"	t	struct:std::allocator_traits	typeref:typename:_Diff<_Alloc,pointer>::type	access:public
std::allocator_traits::is_always_equal	/usr/include/c++/10/bits/alloc_traits.h	/^      using is_always_equal = true_type;$/;"	t	struct:std::allocator_traits	typeref:typename:true_type	access:public
std::allocator_traits::is_always_equal	/usr/include/c++/10/bits/alloc_traits.h	/^      using is_always_equal$/;"	t	struct:std::allocator_traits	typeref:typename:__detected_or_t<typename is_empty<_Alloc>::type,__equal,_Alloc>	access:public
std::allocator_traits::max_size	/usr/include/c++/10/bits/alloc_traits.h	/^      max_size(const _Alloc& __a) noexcept$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const _Alloc & __a)
std::allocator_traits::max_size	/usr/include/c++/10/bits/alloc_traits.h	/^      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const allocator_type & __a)
std::allocator_traits::pointer	/usr/include/c++/10/bits/alloc_traits.h	/^      using pointer = _Tp*;$/;"	t	struct:std::allocator_traits	typeref:typename:_Tp *	access:public
std::allocator_traits::pointer	/usr/include/c++/10/bits/alloc_traits.h	/^      using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;$/;"	t	struct:std::allocator_traits	typeref:typename:__detected_or_t<value_type *,__pointer,_Alloc>	access:public
std::allocator_traits::propagate_on_container_copy_assignment	/usr/include/c++/10/bits/alloc_traits.h	/^      using propagate_on_container_copy_assignment = false_type;$/;"	t	struct:std::allocator_traits	typeref:typename:false_type	access:public
std::allocator_traits::propagate_on_container_copy_assignment	/usr/include/c++/10/bits/alloc_traits.h	/^      using propagate_on_container_copy_assignment$/;"	t	struct:std::allocator_traits	typeref:typename:__detected_or_t<false_type,__pocca,_Alloc>	access:public
std::allocator_traits::propagate_on_container_move_assignment	/usr/include/c++/10/bits/alloc_traits.h	/^      using propagate_on_container_move_assignment = true_type;$/;"	t	struct:std::allocator_traits	typeref:typename:true_type	access:public
std::allocator_traits::propagate_on_container_move_assignment	/usr/include/c++/10/bits/alloc_traits.h	/^      using propagate_on_container_move_assignment$/;"	t	struct:std::allocator_traits	typeref:typename:__detected_or_t<false_type,__pocma,_Alloc>	access:public
std::allocator_traits::propagate_on_container_swap	/usr/include/c++/10/bits/alloc_traits.h	/^      using propagate_on_container_swap = false_type;$/;"	t	struct:std::allocator_traits	typeref:typename:false_type	access:public
std::allocator_traits::propagate_on_container_swap	/usr/include/c++/10/bits/alloc_traits.h	/^      using propagate_on_container_swap$/;"	t	struct:std::allocator_traits	typeref:typename:__detected_or_t<false_type,__pocs,_Alloc>	access:public
std::allocator_traits::rebind_alloc	/usr/include/c++/10/bits/alloc_traits.h	/^	using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;$/;"	t	struct:std::allocator_traits	typeref:typename:__alloc_rebind<_Alloc,_Tp>	access:public
std::allocator_traits::rebind_alloc	/usr/include/c++/10/bits/alloc_traits.h	/^	using rebind_alloc = allocator<_Up>;$/;"	t	struct:std::allocator_traits	typeref:typename:allocator<_Up>	access:public
std::allocator_traits::rebind_traits	/usr/include/c++/10/bits/alloc_traits.h	/^	using rebind_traits = allocator_traits<allocator<_Up>>;$/;"	t	struct:std::allocator_traits	typeref:typename:allocator_traits<allocator<_Up>>	access:public
std::allocator_traits::rebind_traits	/usr/include/c++/10/bits/alloc_traits.h	/^	using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;$/;"	t	struct:std::allocator_traits	typeref:typename:allocator_traits<rebind_alloc<_Tp>>	access:public
std::allocator_traits::select_on_container_copy_construction	/usr/include/c++/10/bits/alloc_traits.h	/^      select_on_container_copy_construction(const _Alloc& __rhs)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR _Alloc	access:public	signature:(const _Alloc & __rhs)
std::allocator_traits::select_on_container_copy_construction	/usr/include/c++/10/bits/alloc_traits.h	/^      select_on_container_copy_construction(const allocator_type& __rhs)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR allocator_type	access:public	signature:(const allocator_type & __rhs)
std::allocator_traits::size_type	/usr/include/c++/10/bits/alloc_traits.h	/^      using size_type = std::size_t;$/;"	t	struct:std::allocator_traits	typeref:typename:std::size_t	access:public
std::allocator_traits::size_type	/usr/include/c++/10/bits/alloc_traits.h	/^      using size_type = typename _Size<_Alloc, difference_type>::type;$/;"	t	struct:std::allocator_traits	typeref:typename:_Size<_Alloc,difference_type>::type	access:public
std::allocator_traits::value_type	/usr/include/c++/10/bits/alloc_traits.h	/^      typedef typename _Alloc::value_type value_type;$/;"	t	struct:std::allocator_traits	typeref:typename:_Alloc::value_type	access:public
std::allocator_traits::value_type	/usr/include/c++/10/bits/alloc_traits.h	/^      using value_type = _Tp;$/;"	t	struct:std::allocator_traits	typeref:typename:_Tp	access:public
std::allocator_traits::void_pointer	/usr/include/c++/10/bits/alloc_traits.h	/^      using void_pointer = typename _Ptr<__v_pointer, void>::type;$/;"	t	struct:std::allocator_traits	typeref:typename:_Ptr<__v_pointer,void>::type	access:public
std::allocator_traits::void_pointer	/usr/include/c++/10/bits/alloc_traits.h	/^      using void_pointer = void*;$/;"	t	struct:std::allocator_traits	typeref:typename:void *	access:public
std::already_connected	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      already_connected = 			EISCONN,$/;"	e	enum:std::errc	access:public
std::argument_list_too_long	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      argument_list_too_long = 			E2BIG,$/;"	e	enum:std::errc	access:public
std::argument_out_of_domain	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      argument_out_of_domain = 			EDOM,$/;"	e	enum:std::errc	access:public
std::back_insert_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    class back_insert_iterator$/;"	c	namespace:std	inherits:iterator<output_iterator_tag,void,void,void,void>
std::back_insert_iterator::back_insert_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^      back_insert_iterator(_Container& __x)$/;"	f	class:std::back_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Container & __x)
std::back_insert_iterator::back_insert_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^      constexpr back_insert_iterator() noexcept : container(nullptr) { }$/;"	f	class:std::back_insert_iterator	access:public	signature:()
std::back_insert_iterator::container	/usr/include/c++/10/bits/stl_iterator.h	/^      _Container* container;$/;"	m	class:std::back_insert_iterator	typeref:typename:_Container *	access:protected
std::back_insert_iterator::container_type	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef _Container          container_type;$/;"	t	class:std::back_insert_iterator	typeref:typename:_Container	access:public
std::back_insert_iterator::difference_type	/usr/include/c++/10/bits/stl_iterator.h	/^      using difference_type = ptrdiff_t;$/;"	t	class:std::back_insert_iterator	typeref:typename:ptrdiff_t	access:public
std::back_insert_iterator::operator *	/usr/include/c++/10/bits/stl_iterator.h	/^      operator*()$/;"	f	class:std::back_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR back_insert_iterator &	access:public	signature:()
std::back_insert_iterator::operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^      operator++()$/;"	f	class:std::back_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR back_insert_iterator &	access:public	signature:()
std::back_insert_iterator::operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::back_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR back_insert_iterator	access:public	signature:(int)
std::back_insert_iterator::operator =	/usr/include/c++/10/bits/stl_iterator.h	/^      operator=(const typename _Container::value_type& __value)$/;"	f	class:std::back_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR back_insert_iterator &	access:public	signature:(const typename _Container::value_type & __value)
std::back_insert_iterator::operator =	/usr/include/c++/10/bits/stl_iterator.h	/^      operator=(typename _Container::const_reference __value)$/;"	f	class:std::back_insert_iterator	typeref:typename:back_insert_iterator &	access:public	signature:(typename _Container::const_reference __value)
std::back_insert_iterator::operator =	/usr/include/c++/10/bits/stl_iterator.h	/^      operator=(typename _Container::value_type&& __value)$/;"	f	class:std::back_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR back_insert_iterator &	access:public	signature:(typename _Container::value_type && __value)
std::back_inserter	/usr/include/c++/10/bits/stl_iterator.h	/^    back_inserter(_Container& __x)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR back_insert_iterator<_Container>	signature:(_Container & __x)
std::bad_address	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      bad_address = 				EFAULT,$/;"	e	enum:std::errc	access:public
std::bad_file_descriptor	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      bad_file_descriptor = 			EBADF,$/;"	e	enum:std::errc	access:public
std::bad_message	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      bad_message = 				EBADMSG,$/;"	e	enum:std::errc	access:public
std::basic_ios	/usr/include/c++/10/bits/basic_ios.h	/^    class basic_ios : public ios_base$/;"	c	namespace:std	inherits:ios_base
std::basic_ios::_M_cache_locale	/usr/include/c++/10/bits/basic_ios.h	/^      _M_cache_locale(const locale& __loc);$/;"	p	class:std::basic_ios	typeref:typename:void	access:protected	signature:(const locale & __loc)
std::basic_ios::_M_ctype	/usr/include/c++/10/bits/basic_ios.h	/^      const __ctype_type*                            _M_ctype;$/;"	m	class:std::basic_ios	typeref:typename:const __ctype_type *	access:protected
std::basic_ios::_M_fill	/usr/include/c++/10/bits/basic_ios.h	/^      mutable char_type                              _M_fill;$/;"	m	class:std::basic_ios	typeref:typename:char_type	access:protected
std::basic_ios::_M_fill_init	/usr/include/c++/10/bits/basic_ios.h	/^      mutable bool                                   _M_fill_init;$/;"	m	class:std::basic_ios	typeref:typename:bool	access:protected
std::basic_ios::_M_num_get	/usr/include/c++/10/bits/basic_ios.h	/^      const __num_get_type*                          _M_num_get;$/;"	m	class:std::basic_ios	typeref:typename:const __num_get_type *	access:protected
std::basic_ios::_M_num_put	/usr/include/c++/10/bits/basic_ios.h	/^      const __num_put_type*                          _M_num_put;$/;"	m	class:std::basic_ios	typeref:typename:const __num_put_type *	access:protected
std::basic_ios::_M_setstate	/usr/include/c++/10/bits/basic_ios.h	/^      _M_setstate(iostate __state)$/;"	f	class:std::basic_ios	typeref:typename:void	access:public	signature:(iostate __state)
std::basic_ios::_M_streambuf	/usr/include/c++/10/bits/basic_ios.h	/^      basic_streambuf<_CharT, _Traits>*              _M_streambuf;$/;"	m	class:std::basic_ios	typeref:typename:basic_streambuf<_CharT,_Traits> *	access:protected
std::basic_ios::_M_tie	/usr/include/c++/10/bits/basic_ios.h	/^      basic_ostream<_CharT, _Traits>*                _M_tie;$/;"	m	class:std::basic_ios	typeref:typename:basic_ostream<_CharT,_Traits> *	access:protected
std::basic_ios::__ctype_type	/usr/include/c++/10/bits/basic_ios.h	/^      typedef ctype<_CharT>                          __ctype_type;$/;"	t	class:std::basic_ios	typeref:typename:ctype<_CharT>	access:public
std::basic_ios::__num_get_type	/usr/include/c++/10/bits/basic_ios.h	/^						     __num_get_type;$/;"	t	class:std::basic_ios	typeref:typename:num_get<_CharT,istreambuf_iterator<_CharT,_Traits>>	access:public
std::basic_ios::__num_put_type	/usr/include/c++/10/bits/basic_ios.h	/^						     __num_put_type;$/;"	t	class:std::basic_ios	typeref:typename:num_put<_CharT,ostreambuf_iterator<_CharT,_Traits>>	access:public
std::basic_ios::bad	/usr/include/c++/10/bits/basic_ios.h	/^      bad() const$/;"	f	class:std::basic_ios	typeref:typename:bool	access:public	signature:() const
std::basic_ios::basic_ios	/usr/include/c++/10/bits/basic_ios.h	/^      basic_ios()$/;"	f	class:std::basic_ios	access:protected	signature:()
std::basic_ios::basic_ios	/usr/include/c++/10/bits/basic_ios.h	/^      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)$/;"	f	class:std::basic_ios	access:public	signature:(basic_streambuf<_CharT,_Traits> * __sb)
std::basic_ios::basic_ios	/usr/include/c++/10/bits/basic_ios.h	/^      basic_ios(const basic_ios&) = delete;$/;"	p	class:std::basic_ios	access:protected	signature:(const basic_ios &)
std::basic_ios::char_type	/usr/include/c++/10/bits/basic_ios.h	/^      typedef _CharT                                 char_type;$/;"	t	class:std::basic_ios	typeref:typename:_CharT	access:public
std::basic_ios::clear	/usr/include/c++/10/bits/basic_ios.h	/^      clear(iostate __state = goodbit);$/;"	p	class:std::basic_ios	typeref:typename:void	access:public	signature:(iostate __state=goodbit)
std::basic_ios::copyfmt	/usr/include/c++/10/bits/basic_ios.h	/^      copyfmt(const basic_ios& __rhs);$/;"	p	class:std::basic_ios	typeref:typename:basic_ios &	access:public	signature:(const basic_ios & __rhs)
std::basic_ios::eof	/usr/include/c++/10/bits/basic_ios.h	/^      eof() const$/;"	f	class:std::basic_ios	typeref:typename:bool	access:public	signature:() const
std::basic_ios::exceptions	/usr/include/c++/10/bits/basic_ios.h	/^      exceptions() const$/;"	f	class:std::basic_ios	typeref:typename:iostate	access:public	signature:() const
std::basic_ios::exceptions	/usr/include/c++/10/bits/basic_ios.h	/^      exceptions(iostate __except)$/;"	f	class:std::basic_ios	typeref:typename:void	access:public	signature:(iostate __except)
std::basic_ios::fail	/usr/include/c++/10/bits/basic_ios.h	/^      fail() const$/;"	f	class:std::basic_ios	typeref:typename:bool	access:public	signature:() const
std::basic_ios::fill	/usr/include/c++/10/bits/basic_ios.h	/^      fill() const$/;"	f	class:std::basic_ios	typeref:typename:char_type	access:public	signature:() const
std::basic_ios::fill	/usr/include/c++/10/bits/basic_ios.h	/^      fill(char_type __ch)$/;"	f	class:std::basic_ios	typeref:typename:char_type	access:public	signature:(char_type __ch)
std::basic_ios::good	/usr/include/c++/10/bits/basic_ios.h	/^      good() const$/;"	f	class:std::basic_ios	typeref:typename:bool	access:public	signature:() const
std::basic_ios::imbue	/usr/include/c++/10/bits/basic_ios.h	/^      imbue(const locale& __loc);$/;"	p	class:std::basic_ios	typeref:typename:locale	access:public	signature:(const locale & __loc)
std::basic_ios::init	/usr/include/c++/10/bits/basic_ios.h	/^      init(basic_streambuf<_CharT, _Traits>* __sb);$/;"	p	class:std::basic_ios	typeref:typename:void	access:protected	signature:(basic_streambuf<_CharT,_Traits> * __sb)
std::basic_ios::int_type	/usr/include/c++/10/bits/basic_ios.h	/^      typedef typename _Traits::int_type             int_type;$/;"	t	class:std::basic_ios	typeref:typename:_Traits::int_type	access:public
std::basic_ios::move	/usr/include/c++/10/bits/basic_ios.h	/^      move(basic_ios& __rhs)$/;"	f	class:std::basic_ios	typeref:typename:void	access:protected	signature:(basic_ios & __rhs)
std::basic_ios::move	/usr/include/c++/10/bits/basic_ios.h	/^      move(basic_ios&& __rhs)$/;"	f	class:std::basic_ios	typeref:typename:void	access:protected	signature:(basic_ios && __rhs)
std::basic_ios::narrow	/usr/include/c++/10/bits/basic_ios.h	/^      narrow(char_type __c, char __dfault) const$/;"	f	class:std::basic_ios	typeref:typename:char	access:public	signature:(char_type __c,char __dfault) const
std::basic_ios::off_type	/usr/include/c++/10/bits/basic_ios.h	/^      typedef typename _Traits::off_type             off_type;$/;"	t	class:std::basic_ios	typeref:typename:_Traits::off_type	access:public
std::basic_ios::operator !	/usr/include/c++/10/bits/basic_ios.h	/^      operator!() const$/;"	f	class:std::basic_ios	typeref:typename:bool	access:public	signature:() const
std::basic_ios::operator =	/usr/include/c++/10/bits/basic_ios.h	/^      basic_ios& operator=(const basic_ios&) = delete;$/;"	p	class:std::basic_ios	typeref:typename:basic_ios &	access:protected	signature:(const basic_ios &)
std::basic_ios::pos_type	/usr/include/c++/10/bits/basic_ios.h	/^      typedef typename _Traits::pos_type             pos_type;$/;"	t	class:std::basic_ios	typeref:typename:_Traits::pos_type	access:public
std::basic_ios::rdbuf	/usr/include/c++/10/bits/basic_ios.h	/^      rdbuf() const$/;"	f	class:std::basic_ios	typeref:typename:basic_streambuf<_CharT,_Traits> *	access:public	signature:() const
std::basic_ios::rdbuf	/usr/include/c++/10/bits/basic_ios.h	/^      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);$/;"	p	class:std::basic_ios	typeref:typename:basic_streambuf<_CharT,_Traits> *	access:public	signature:(basic_streambuf<_CharT,_Traits> * __sb)
std::basic_ios::rdstate	/usr/include/c++/10/bits/basic_ios.h	/^      rdstate() const$/;"	f	class:std::basic_ios	typeref:typename:iostate	access:public	signature:() const
std::basic_ios::set_rdbuf	/usr/include/c++/10/bits/basic_ios.h	/^      set_rdbuf(basic_streambuf<_CharT, _Traits>* __sb)$/;"	f	class:std::basic_ios	typeref:typename:void	access:protected	signature:(basic_streambuf<_CharT,_Traits> * __sb)
std::basic_ios::setstate	/usr/include/c++/10/bits/basic_ios.h	/^      setstate(iostate __state)$/;"	f	class:std::basic_ios	typeref:typename:void	access:public	signature:(iostate __state)
std::basic_ios::swap	/usr/include/c++/10/bits/basic_ios.h	/^      swap(basic_ios& __rhs) noexcept$/;"	f	class:std::basic_ios	typeref:typename:void	access:protected	signature:(basic_ios & __rhs)
std::basic_ios::tie	/usr/include/c++/10/bits/basic_ios.h	/^      tie() const$/;"	f	class:std::basic_ios	typeref:typename:basic_ostream<_CharT,_Traits> *	access:public	signature:() const
std::basic_ios::tie	/usr/include/c++/10/bits/basic_ios.h	/^      tie(basic_ostream<_CharT, _Traits>* __tiestr)$/;"	f	class:std::basic_ios	typeref:typename:basic_ostream<_CharT,_Traits> *	access:public	signature:(basic_ostream<_CharT,_Traits> * __tiestr)
std::basic_ios::traits_type	/usr/include/c++/10/bits/basic_ios.h	/^      typedef _Traits                                traits_type;$/;"	t	class:std::basic_ios	typeref:typename:_Traits	access:public
std::basic_ios::widen	/usr/include/c++/10/bits/basic_ios.h	/^      widen(char __c) const$/;"	f	class:std::basic_ios	typeref:typename:char_type	access:public	signature:(char __c) const
std::basic_ios::~basic_ios	/usr/include/c++/10/bits/basic_ios.h	/^      ~basic_ios() { }$/;"	f	class:std::basic_ios	access:public	signature:()
std::basic_string	/usr/include/c++/10/bits/basic_string.h	/^    basic_string(_InputIterator, _InputIterator, _Allocator = _Allocator())$/;"	p	namespace:std	typeref:typename:_GLIBCXX_END_NAMESPACE_CXX11 _GLIBCXX_BEGIN_NAMESPACE_CXX11	signature:(_InputIterator,_InputIterator,_Allocator=_Allocator ())
std::basic_string	/usr/include/c++/10/bits/basic_string.h	/^    basic_string(basic_string_view<_CharT, _Traits>, const _Allocator& = _Allocator())$/;"	p	namespace:std	signature:(basic_string_view<_CharT,_Traits>,const _Allocator &=_Allocator ())
std::basic_string	/usr/include/c++/10/bits/basic_string.h	/^    basic_string(basic_string_view<_CharT, _Traits>,$/;"	p	namespace:std	signature:(basic_string_view<_CharT,_Traits>,typename basic_string<_CharT,_Traits,_Allocator>::size_type,typename basic_string<_CharT,_Traits,_Allocator>::size_type,const _Allocator &=_Allocator ())
std::basic_string	/usr/include/c++/10/bits/basic_string.h	/^    class basic_string$/;"	c	namespace:std
std::basic_string::_Alloc_hider	/usr/include/c++/10/bits/basic_string.h	/^      struct _Alloc_hider : allocator_type \/\/ TODO check __is_final$/;"	s	class:std::basic_string	inherits:allocator_type	access:private
std::basic_string::_Alloc_hider::_Alloc_hider	/usr/include/c++/10/bits/basic_string.h	/^	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())$/;"	f	struct:std::basic_string::_Alloc_hider	access:public	signature:(pointer __dat,const _Alloc & __a=_Alloc ())
std::basic_string::_Alloc_hider::_M_p	/usr/include/c++/10/bits/basic_string.h	/^	pointer _M_p; \/\/ The actual data.$/;"	m	struct:std::basic_string::_Alloc_hider	typeref:typename:pointer	access:public
std::basic_string::_Alloc_traits	/usr/include/c++/10/bits/basic_string.h	/^      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;$/;"	t	class:std::basic_string	typeref:typename:__gnu_cxx::__alloc_traits<_Char_alloc_type>	access:private
std::basic_string::_Char_alloc_type	/usr/include/c++/10/bits/basic_string.h	/^	rebind<_CharT>::other _Char_alloc_type;$/;"	t	class:std::basic_string	typeref:typename:__gnu_cxx::__alloc_traits<_Alloc>::template rebind<_CharT>::other	access:private
std::basic_string::_GLIBCXX_NOEXCEPT_IF	/usr/include/c++/10/bits/basic_string.h	/^      _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Alloc>::value)$/;"	f	class:std::basic_string	typeref:typename:basic_string ()	access:public	signature:(is_nothrow_default_constructible<_Alloc>::value)
std::basic_string::_If_sv	/usr/include/c++/10/bits/basic_string.h	/^	using _If_sv = enable_if_t<$/;"	t	class:std::basic_string	access:private
std::basic_string::_M_append	/usr/include/c++/10/bits/basic_string.h	/^      _M_append(const _CharT* __s, size_type __n);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:private	signature:(const _CharT * __s,size_type __n)
std::basic_string::_M_assign	/usr/include/c++/10/bits/basic_string.h	/^      _M_assign(const basic_string&);$/;"	p	class:std::basic_string	typeref:typename:void	access:private	signature:(const basic_string &)
std::basic_string::_M_capacity	/usr/include/c++/10/bits/basic_string.h	/^      _M_capacity(size_type __capacity)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(size_type __capacity)
std::basic_string::_M_check	/usr/include/c++/10/bits/basic_string.h	/^      _M_check(size_type __pos, const char* __s) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:private	signature:(size_type __pos,const char * __s) const
std::basic_string::_M_check_length	/usr/include/c++/10/bits/basic_string.h	/^      _M_check_length(size_type __n1, size_type __n2, const char* __s) const$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(size_type __n1,size_type __n2,const char * __s) const
std::basic_string::_M_construct	/usr/include/c++/10/bits/basic_string.h	/^        _M_construct(_FwdIterator __beg, _FwdIterator __end,$/;"	p	class:std::basic_string	typeref:typename:void	access:private	signature:(_FwdIterator __beg,_FwdIterator __end,std::forward_iterator_tag)
std::basic_string::_M_construct	/usr/include/c++/10/bits/basic_string.h	/^        _M_construct(_InIterator __beg, _InIterator __end)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_InIterator __beg,_InIterator __end)
std::basic_string::_M_construct	/usr/include/c++/10/bits/basic_string.h	/^        _M_construct(_InIterator __beg, _InIterator __end,$/;"	p	class:std::basic_string	typeref:typename:void	access:private	signature:(_InIterator __beg,_InIterator __end,std::input_iterator_tag)
std::basic_string::_M_construct	/usr/include/c++/10/bits/basic_string.h	/^      _M_construct(size_type __req, _CharT __c);$/;"	p	class:std::basic_string	typeref:typename:void	access:private	signature:(size_type __req,_CharT __c)
std::basic_string::_M_construct_aux	/usr/include/c++/10/bits/basic_string.h	/^        _M_construct_aux(_InIterator __beg, _InIterator __end,$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_InIterator __beg,_InIterator __end,std::__false_type)
std::basic_string::_M_construct_aux	/usr/include/c++/10/bits/basic_string.h	/^        _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_Integer __beg,_Integer __end,std::__true_type)
std::basic_string::_M_construct_aux_2	/usr/include/c++/10/bits/basic_string.h	/^      _M_construct_aux_2(size_type __req, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(size_type __req,_CharT __c)
std::basic_string::_M_create	/usr/include/c++/10/bits/basic_string.h	/^      _M_create(size_type&, size_type);$/;"	p	class:std::basic_string	typeref:typename:pointer	access:private	signature:(size_type &,size_type)
std::basic_string::_M_data	/usr/include/c++/10/bits/basic_string.h	/^      _M_data() const$/;"	f	class:std::basic_string	typeref:typename:pointer	access:private	signature:() const
std::basic_string::_M_data	/usr/include/c++/10/bits/basic_string.h	/^      _M_data(pointer __p)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(pointer __p)
std::basic_string::_M_dataplus	/usr/include/c++/10/bits/basic_string.h	/^      _Alloc_hider	_M_dataplus;$/;"	m	class:std::basic_string	typeref:typename:_Alloc_hider	access:private
std::basic_string::_M_destroy	/usr/include/c++/10/bits/basic_string.h	/^      _M_destroy(size_type __size) throw()$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(size_type __size)
std::basic_string::_M_disjunct	/usr/include/c++/10/bits/basic_string.h	/^      _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:bool	access:private	signature:(const _CharT * __s) const
std::basic_string::_M_dispose	/usr/include/c++/10/bits/basic_string.h	/^      _M_dispose()$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:()
std::basic_string::_M_erase	/usr/include/c++/10/bits/basic_string.h	/^      _M_erase(size_type __pos, size_type __n);$/;"	p	class:std::basic_string	typeref:typename:void	access:private	signature:(size_type __pos,size_type __n)
std::basic_string::_M_get_allocator	/usr/include/c++/10/bits/basic_string.h	/^      _M_get_allocator() const$/;"	f	class:std::basic_string	typeref:typename:const allocator_type &	access:private	signature:() const
std::basic_string::_M_get_allocator	/usr/include/c++/10/bits/basic_string.h	/^      _M_get_allocator()$/;"	f	class:std::basic_string	typeref:typename:allocator_type &	access:private	signature:()
std::basic_string::_M_is_local	/usr/include/c++/10/bits/basic_string.h	/^      _M_is_local() const$/;"	f	class:std::basic_string	typeref:typename:bool	access:private	signature:() const
std::basic_string::_M_length	/usr/include/c++/10/bits/basic_string.h	/^      _M_length(size_type __length)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(size_type __length)
std::basic_string::_M_limit	/usr/include/c++/10/bits/basic_string.h	/^      _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:private	signature:(size_type __pos,size_type __off) const
std::basic_string::_M_local_data	/usr/include/c++/10/bits/basic_string.h	/^      _M_local_data() const$/;"	f	class:std::basic_string	typeref:typename:const_pointer	access:private	signature:() const
std::basic_string::_M_local_data	/usr/include/c++/10/bits/basic_string.h	/^      _M_local_data()$/;"	f	class:std::basic_string	typeref:typename:pointer	access:private	signature:()
std::basic_string::_M_mutate	/usr/include/c++/10/bits/basic_string.h	/^      _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,$/;"	p	class:std::basic_string	typeref:typename:void	access:private	signature:(size_type __pos,size_type __len1,const _CharT * __s,size_type __len2)
std::basic_string::_M_replace	/usr/include/c++/10/bits/basic_string.h	/^      _M_replace(size_type __pos, size_type __len1, const _CharT* __s,$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:private	signature:(size_type __pos,size_type __len1,const _CharT * __s,const size_type __len2)
std::basic_string::_M_replace_aux	/usr/include/c++/10/bits/basic_string.h	/^      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:private	signature:(size_type __pos1,size_type __n1,size_type __n2,_CharT __c)
std::basic_string::_M_replace_dispatch	/usr/include/c++/10/bits/basic_string.h	/^	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:private	signature:(const_iterator __i1,const_iterator __i2,_Integer __n,_Integer __val,__true_type)
std::basic_string::_M_replace_dispatch	/usr/include/c++/10/bits/basic_string.h	/^	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:private	signature:(const_iterator __i1,const_iterator __i2,_InputIterator __k1,_InputIterator __k2,__false_type)
std::basic_string::_M_set_length	/usr/include/c++/10/bits/basic_string.h	/^      _M_set_length(size_type __n)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(size_type __n)
std::basic_string::_M_string_length	/usr/include/c++/10/bits/basic_string.h	/^      size_type		_M_string_length;$/;"	m	class:std::basic_string	typeref:typename:size_type	access:private
std::basic_string::_S_assign	/usr/include/c++/10/bits/basic_string.h	/^      _S_assign(_CharT* __d, size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __d,size_type __n,_CharT __c)
std::basic_string::_S_compare	/usr/include/c++/10/bits/basic_string.h	/^      _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:int	access:private	signature:(size_type __n1,size_type __n2)
std::basic_string::_S_copy	/usr/include/c++/10/bits/basic_string.h	/^      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __d,const _CharT * __s,size_type __n)
std::basic_string::_S_copy_chars	/usr/include/c++/10/bits/basic_string.h	/^        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __p,_Iterator __k1,_Iterator __k2)
std::basic_string::_S_copy_chars	/usr/include/c++/10/bits/basic_string.h	/^      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __p,_CharT * __k1,_CharT * __k2)
std::basic_string::_S_copy_chars	/usr/include/c++/10/bits/basic_string.h	/^      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __p,const _CharT * __k1,const _CharT * __k2)
std::basic_string::_S_copy_chars	/usr/include/c++/10/bits/basic_string.h	/^      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __p,const_iterator __k1,const_iterator __k2)
std::basic_string::_S_copy_chars	/usr/include/c++/10/bits/basic_string.h	/^      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __p,iterator __k1,iterator __k2)
std::basic_string::_S_local_capacity	/usr/include/c++/10/bits/basic_string.h	/^      enum { _S_local_capacity = 15 \/ sizeof(_CharT) };$/;"	e	enum:std::basic_string::__anon048e86970103	access:public
std::basic_string::_S_move	/usr/include/c++/10/bits/basic_string.h	/^      _S_move(_CharT* __d, const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __d,const _CharT * __s,size_type __n)
std::basic_string::_S_to_string_view	/usr/include/c++/10/bits/basic_string.h	/^      _S_to_string_view(__sv_type __svt) noexcept$/;"	f	class:std::basic_string	typeref:typename:__sv_type	access:private	signature:(__sv_type __svt)
std::basic_string::__anon048e86970103	/usr/include/c++/10/bits/basic_string.h	/^      enum { _S_local_capacity = 15 \/ sizeof(_CharT) };$/;"	g	class:std::basic_string	access:private
std::basic_string::__anon048e8697020a	/usr/include/c++/10/bits/basic_string.h	/^      {$/;"	u	class:std::basic_string	access:private
std::basic_string::__anon048e8697020a::_M_allocated_capacity	/usr/include/c++/10/bits/basic_string.h	/^	size_type        _M_allocated_capacity;$/;"	m	union:std::basic_string::__anon048e8697020a	typeref:typename:size_type	access:public
std::basic_string::__anon048e8697020a::_M_local_buf	/usr/include/c++/10/bits/basic_string.h	/^	_CharT           _M_local_buf[_S_local_capacity + 1];$/;"	m	union:std::basic_string::__anon048e8697020a	typeref:typename:_CharT[]	access:public
std::basic_string::__const_iterator	/usr/include/c++/10/bits/basic_string.h	/^      typedef iterator __const_iterator;$/;"	t	class:std::basic_string	typeref:typename:iterator	access:protected
std::basic_string::__enable_if_not_native_iterator	/usr/include/c++/10/bits/basic_string.h	/^	struct __enable_if_not_native_iterator$/;"	s	class:std::basic_string	access:private
std::basic_string::__enable_if_not_native_iterator	/usr/include/c++/10/bits/basic_string.h	/^	struct __enable_if_not_native_iterator<_Tp, false> { };$/;"	s	class:std::basic_string	access:private
std::basic_string::__enable_if_not_native_iterator::__type	/usr/include/c++/10/bits/basic_string.h	/^	{ typedef basic_string& __type; };$/;"	t	struct:std::basic_string::__enable_if_not_native_iterator	typeref:typename:basic_string &	access:public
std::basic_string::__sv_type	/usr/include/c++/10/bits/basic_string.h	/^      typedef basic_string_view<_CharT, _Traits> __sv_type;$/;"	t	class:std::basic_string	typeref:typename:basic_string_view<_CharT,_Traits>	access:private
std::basic_string::__sv_wrapper	/usr/include/c++/10/bits/basic_string.h	/^      struct __sv_wrapper$/;"	s	class:std::basic_string	access:private
std::basic_string::__sv_wrapper::_M_sv	/usr/include/c++/10/bits/basic_string.h	/^	__sv_type _M_sv;$/;"	m	struct:std::basic_string::__sv_wrapper	typeref:typename:__sv_type	access:public
std::basic_string::__sv_wrapper::__sv_wrapper	/usr/include/c++/10/bits/basic_string.h	/^	explicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }$/;"	f	struct:std::basic_string::__sv_wrapper	access:public	signature:(__sv_type __sv)
std::basic_string::allocator_type	/usr/include/c++/10/bits/basic_string.h	/^      typedef _Char_alloc_type				allocator_type;$/;"	t	class:std::basic_string	typeref:typename:_Char_alloc_type	access:public
std::basic_string::append	/usr/include/c++/10/bits/basic_string.h	/^	append(const _Tp& __svt, size_type __pos, size_type __n = npos)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt,size_type __pos,size_type __n=npos)
std::basic_string::append	/usr/include/c++/10/bits/basic_string.h	/^        append(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(_InputIterator __first,_InputIterator __last)
std::basic_string::append	/usr/include/c++/10/bits/basic_string.h	/^        append(const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt)
std::basic_string::append	/usr/include/c++/10/bits/basic_string.h	/^      append(const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s)
std::basic_string::append	/usr/include/c++/10/bits/basic_string.h	/^      append(const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s,size_type __n)
std::basic_string::append	/usr/include/c++/10/bits/basic_string.h	/^      append(const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str)
std::basic_string::append	/usr/include/c++/10/bits/basic_string.h	/^      append(const basic_string& __str, size_type __pos, size_type __n = npos)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str,size_type __pos,size_type __n=npos)
std::basic_string::append	/usr/include/c++/10/bits/basic_string.h	/^      append(initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(initializer_list<_CharT> __l)
std::basic_string::append	/usr/include/c++/10/bits/basic_string.h	/^      append(size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __n,_CharT __c)
std::basic_string::assign	/usr/include/c++/10/bits/basic_string.h	/^	assign(const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt)
std::basic_string::assign	/usr/include/c++/10/bits/basic_string.h	/^	assign(const _Tp& __svt, size_type __pos, size_type __n = npos)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt,size_type __pos,size_type __n=npos)
std::basic_string::assign	/usr/include/c++/10/bits/basic_string.h	/^        assign(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(_InputIterator __first,_InputIterator __last)
std::basic_string::assign	/usr/include/c++/10/bits/basic_string.h	/^      assign(basic_string&& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(basic_string && __str)
std::basic_string::assign	/usr/include/c++/10/bits/basic_string.h	/^      assign(const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s)
std::basic_string::assign	/usr/include/c++/10/bits/basic_string.h	/^      assign(const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s,size_type __n)
std::basic_string::assign	/usr/include/c++/10/bits/basic_string.h	/^      assign(const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str)
std::basic_string::assign	/usr/include/c++/10/bits/basic_string.h	/^      assign(const basic_string& __str, size_type __pos, size_type __n = npos)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str,size_type __pos,size_type __n=npos)
std::basic_string::assign	/usr/include/c++/10/bits/basic_string.h	/^      assign(initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(initializer_list<_CharT> __l)
std::basic_string::assign	/usr/include/c++/10/bits/basic_string.h	/^      assign(size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __n,_CharT __c)
std::basic_string::at	/usr/include/c++/10/bits/basic_string.h	/^      at(size_type __n) const$/;"	f	class:std::basic_string	typeref:typename:const_reference	access:public	signature:(size_type __n) const
std::basic_string::at	/usr/include/c++/10/bits/basic_string.h	/^      at(size_type __n)$/;"	f	class:std::basic_string	typeref:typename:reference	access:public	signature:(size_type __n)
std::basic_string::back	/usr/include/c++/10/bits/basic_string.h	/^      back() const noexcept$/;"	f	class:std::basic_string	typeref:typename:const_reference	access:public	signature:() const
std::basic_string::back	/usr/include/c++/10/bits/basic_string.h	/^      back() noexcept$/;"	f	class:std::basic_string	typeref:typename:reference	access:public	signature:()
std::basic_string::basic_string	/usr/include/c++/10/bits/basic_string.h	/^	basic_string(const _Tp& __t, const _Alloc& __a = _Alloc())$/;"	f	class:std::basic_string	access:public	signature:(const _Tp & __t,const _Alloc & __a=_Alloc ())
std::basic_string::basic_string	/usr/include/c++/10/bits/basic_string.h	/^	basic_string(const _Tp& __t, size_type __pos, size_type __n,$/;"	f	class:std::basic_string	access:public	signature:(const _Tp & __t,size_type __pos,size_type __n,const _Alloc & __a=_Alloc ())
std::basic_string::basic_string	/usr/include/c++/10/bits/basic_string.h	/^        basic_string(_InputIterator __beg, _InputIterator __end,$/;"	f	class:std::basic_string	access:public	signature:(_InputIterator __beg,_InputIterator __end,const _Alloc & __a=_Alloc ())
std::basic_string::basic_string	/usr/include/c++/10/bits/basic_string.h	/^      basic_string(__sv_wrapper __svw, const _Alloc& __a)$/;"	f	class:std::basic_string	access:private	signature:(__sv_wrapper __svw,const _Alloc & __a)
std::basic_string::basic_string	/usr/include/c++/10/bits/basic_string.h	/^      basic_string(basic_string&& __str) noexcept$/;"	f	class:std::basic_string	access:public	signature:(basic_string && __str)
std::basic_string::basic_string	/usr/include/c++/10/bits/basic_string.h	/^      basic_string(basic_string&& __str, const _Alloc& __a)$/;"	f	class:std::basic_string	access:public	signature:(basic_string && __str,const _Alloc & __a)
std::basic_string::basic_string	/usr/include/c++/10/bits/basic_string.h	/^      basic_string(const _Alloc& __a) _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	access:public	signature:(const _Alloc & __a)
std::basic_string::basic_string	/usr/include/c++/10/bits/basic_string.h	/^      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())$/;"	f	class:std::basic_string	access:public	signature:(const _CharT * __s,const _Alloc & __a=_Alloc ())
std::basic_string::basic_string	/usr/include/c++/10/bits/basic_string.h	/^      basic_string(const _CharT* __s, size_type __n,$/;"	f	class:std::basic_string	access:public	signature:(const _CharT * __s,size_type __n,const _Alloc & __a=_Alloc ())
std::basic_string::basic_string	/usr/include/c++/10/bits/basic_string.h	/^      basic_string(const basic_string& __str)$/;"	f	class:std::basic_string	access:public	signature:(const basic_string & __str)
std::basic_string::basic_string	/usr/include/c++/10/bits/basic_string.h	/^      basic_string(const basic_string& __str, const _Alloc& __a)$/;"	f	class:std::basic_string	access:public	signature:(const basic_string & __str,const _Alloc & __a)
std::basic_string::basic_string	/usr/include/c++/10/bits/basic_string.h	/^      basic_string(const basic_string& __str, size_type __pos,$/;"	f	class:std::basic_string	access:public	signature:(const basic_string & __str,size_type __pos,const _Alloc & __a=_Alloc ())
std::basic_string::basic_string	/usr/include/c++/10/bits/basic_string.h	/^      basic_string(const basic_string& __str, size_type __pos,$/;"	f	class:std::basic_string	access:public	signature:(const basic_string & __str,size_type __pos,size_type __n)
std::basic_string::basic_string	/usr/include/c++/10/bits/basic_string.h	/^      basic_string(const basic_string& __str, size_type __pos,$/;"	f	class:std::basic_string	access:public	signature:(const basic_string & __str,size_type __pos,size_type __n,const _Alloc & __a)
std::basic_string::basic_string	/usr/include/c++/10/bits/basic_string.h	/^      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())$/;"	f	class:std::basic_string	access:public	signature:(initializer_list<_CharT> __l,const _Alloc & __a=_Alloc ())
std::basic_string::basic_string	/usr/include/c++/10/bits/basic_string.h	/^      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())$/;"	f	class:std::basic_string	access:public	signature:(size_type __n,_CharT __c,const _Alloc & __a=_Alloc ())
std::basic_string::begin	/usr/include/c++/10/bits/basic_string.h	/^      begin() _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:iterator	access:public	signature:()
std::basic_string::begin	/usr/include/c++/10/bits/basic_string.h	/^      begin() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:const_iterator	access:public	signature:() const
std::basic_string::c_str	/usr/include/c++/10/bits/basic_string.h	/^      c_str() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:const _CharT *	access:public	signature:() const
std::basic_string::capacity	/usr/include/c++/10/bits/basic_string.h	/^      capacity() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:() const
std::basic_string::cbegin	/usr/include/c++/10/bits/basic_string.h	/^      cbegin() const noexcept$/;"	f	class:std::basic_string	typeref:typename:const_iterator	access:public	signature:() const
std::basic_string::cend	/usr/include/c++/10/bits/basic_string.h	/^      cend() const noexcept$/;"	f	class:std::basic_string	typeref:typename:const_iterator	access:public	signature:() const
std::basic_string::clear	/usr/include/c++/10/bits/basic_string.h	/^      clear() _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:()
std::basic_string::compare	/usr/include/c++/10/bits/basic_string.h	/^	compare(const _Tp& __svt) const$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,int>	access:public	signature:(const _Tp & __svt) const
std::basic_string::compare	/usr/include/c++/10/bits/basic_string.h	/^	compare(size_type __pos, size_type __n, const _Tp& __svt) const$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,int>	access:public	signature:(size_type __pos,size_type __n,const _Tp & __svt) const
std::basic_string::compare	/usr/include/c++/10/bits/basic_string.h	/^	compare(size_type __pos1, size_type __n1, const _Tp& __svt,$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,int>	access:public	signature:(size_type __pos1,size_type __n1,const _Tp & __svt,size_type __pos2,size_type __n2=npos) const
std::basic_string::compare	/usr/include/c++/10/bits/basic_string.h	/^      compare(const _CharT* __s) const _GLIBCXX_NOEXCEPT;$/;"	p	class:std::basic_string	typeref:typename:int	access:public	signature:(const _CharT * __s) const
std::basic_string::compare	/usr/include/c++/10/bits/basic_string.h	/^      compare(const basic_string& __str) const$/;"	f	class:std::basic_string	typeref:typename:int	access:public	signature:(const basic_string & __str) const
std::basic_string::compare	/usr/include/c++/10/bits/basic_string.h	/^      compare(size_type __pos, size_type __n, const basic_string& __str) const;$/;"	p	class:std::basic_string	typeref:typename:int	access:public	signature:(size_type __pos,size_type __n,const basic_string & __str) const
std::basic_string::compare	/usr/include/c++/10/bits/basic_string.h	/^      compare(size_type __pos, size_type __n1, const _CharT* __s) const;$/;"	p	class:std::basic_string	typeref:typename:int	access:public	signature:(size_type __pos,size_type __n1,const _CharT * __s) const
std::basic_string::compare	/usr/include/c++/10/bits/basic_string.h	/^      compare(size_type __pos, size_type __n1, const _CharT* __s,$/;"	p	class:std::basic_string	typeref:typename:int	access:public	signature:(size_type __pos,size_type __n1,const _CharT * __s,size_type __n2) const
std::basic_string::compare	/usr/include/c++/10/bits/basic_string.h	/^      compare(size_type __pos1, size_type __n1, const basic_string& __str,$/;"	p	class:std::basic_string	typeref:typename:int	access:public	signature:(size_type __pos1,size_type __n1,const basic_string & __str,size_type __pos2,size_type __n2=npos) const
std::basic_string::const_iterator	/usr/include/c++/10/bits/basic_string.h	/^							const_iterator;$/;"	t	class:std::basic_string	typeref:typename:__gnu_cxx::__normal_iterator<const_pointer,basic_string>	access:public
std::basic_string::const_pointer	/usr/include/c++/10/bits/basic_string.h	/^      typedef typename _Alloc_traits::const_pointer	const_pointer;$/;"	t	class:std::basic_string	typeref:typename:_Alloc_traits::const_pointer	access:public
std::basic_string::const_reference	/usr/include/c++/10/bits/basic_string.h	/^      typedef typename _Alloc_traits::const_reference	const_reference;$/;"	t	class:std::basic_string	typeref:typename:_Alloc_traits::const_reference	access:public
std::basic_string::const_reverse_iterator	/usr/include/c++/10/bits/basic_string.h	/^      typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;$/;"	t	class:std::basic_string	typeref:typename:std::reverse_iterator<const_iterator>	access:public
std::basic_string::copy	/usr/include/c++/10/bits/basic_string.h	/^      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT * __s,size_type __n,size_type __pos=0) const
std::basic_string::crbegin	/usr/include/c++/10/bits/basic_string.h	/^      crbegin() const noexcept$/;"	f	class:std::basic_string	typeref:typename:const_reverse_iterator	access:public	signature:() const
std::basic_string::crend	/usr/include/c++/10/bits/basic_string.h	/^      crend() const noexcept$/;"	f	class:std::basic_string	typeref:typename:const_reverse_iterator	access:public	signature:() const
std::basic_string::data	/usr/include/c++/10/bits/basic_string.h	/^      data() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:const _CharT *	access:public	signature:() const
std::basic_string::data	/usr/include/c++/10/bits/basic_string.h	/^      data() noexcept$/;"	f	class:std::basic_string	typeref:typename:_CharT *	access:public	signature:()
std::basic_string::difference_type	/usr/include/c++/10/bits/basic_string.h	/^      typedef typename _Alloc_traits::difference_type	difference_type;$/;"	t	class:std::basic_string	typeref:typename:_Alloc_traits::difference_type	access:public
std::basic_string::empty	/usr/include/c++/10/bits/basic_string.h	/^      empty() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD bool	access:public	signature:() const
std::basic_string::end	/usr/include/c++/10/bits/basic_string.h	/^      end() _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:iterator	access:public	signature:()
std::basic_string::end	/usr/include/c++/10/bits/basic_string.h	/^      end() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:const_iterator	access:public	signature:() const
std::basic_string::ends_with	/usr/include/c++/10/bits/basic_string.h	/^      ends_with(_CharT __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(_CharT __x) const
std::basic_string::ends_with	/usr/include/c++/10/bits/basic_string.h	/^      ends_with(basic_string_view<_CharT, _Traits> __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(basic_string_view<_CharT,_Traits> __x) const
std::basic_string::ends_with	/usr/include/c++/10/bits/basic_string.h	/^      ends_with(const _CharT* __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(const _CharT * __x) const
std::basic_string::erase	/usr/include/c++/10/bits/basic_string.h	/^      erase(__const_iterator __first, __const_iterator __last)$/;"	f	class:std::basic_string	typeref:typename:iterator	access:public	signature:(__const_iterator __first,__const_iterator __last)
std::basic_string::erase	/usr/include/c++/10/bits/basic_string.h	/^      erase(__const_iterator __position)$/;"	f	class:std::basic_string	typeref:typename:iterator	access:public	signature:(__const_iterator __position)
std::basic_string::erase	/usr/include/c++/10/bits/basic_string.h	/^      erase(size_type __pos = 0, size_type __n = npos)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos=0,size_type __n=npos)
std::basic_string::find	/usr/include/c++/10/bits/basic_string.h	/^	find(const _Tp& __svt, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=0) const
std::basic_string::find	/usr/include/c++/10/bits/basic_string.h	/^      find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=0) const
std::basic_string::find	/usr/include/c++/10/bits/basic_string.h	/^      find(const _CharT* __s, size_type __pos = 0) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=0) const
std::basic_string::find	/usr/include/c++/10/bits/basic_string.h	/^      find(const _CharT* __s, size_type __pos, size_type __n) const$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
std::basic_string::find	/usr/include/c++/10/bits/basic_string.h	/^      find(const basic_string& __str, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=0) const
std::basic_string::find_first_not_of	/usr/include/c++/10/bits/basic_string.h	/^	find_first_not_of(const _Tp& __svt, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=0) const
std::basic_string::find_first_not_of	/usr/include/c++/10/bits/basic_string.h	/^      find_first_not_of(_CharT __c, size_type __pos = 0) const$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=0) const
std::basic_string::find_first_not_of	/usr/include/c++/10/bits/basic_string.h	/^      find_first_not_of(const _CharT* __s, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=0) const
std::basic_string::find_first_not_of	/usr/include/c++/10/bits/basic_string.h	/^      find_first_not_of(const _CharT* __s, size_type __pos,$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
std::basic_string::find_first_not_of	/usr/include/c++/10/bits/basic_string.h	/^      find_first_not_of(const basic_string& __str, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=0) const
std::basic_string::find_first_of	/usr/include/c++/10/bits/basic_string.h	/^	find_first_of(const _Tp& __svt, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=0) const
std::basic_string::find_first_of	/usr/include/c++/10/bits/basic_string.h	/^      find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=0) const
std::basic_string::find_first_of	/usr/include/c++/10/bits/basic_string.h	/^      find_first_of(const _CharT* __s, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=0) const
std::basic_string::find_first_of	/usr/include/c++/10/bits/basic_string.h	/^      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
std::basic_string::find_first_of	/usr/include/c++/10/bits/basic_string.h	/^      find_first_of(const basic_string& __str, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=0) const
std::basic_string::find_last_not_of	/usr/include/c++/10/bits/basic_string.h	/^	find_last_not_of(const _Tp& __svt, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=npos) const
std::basic_string::find_last_not_of	/usr/include/c++/10/bits/basic_string.h	/^      find_last_not_of(_CharT __c, size_type __pos = npos) const$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=npos) const
std::basic_string::find_last_not_of	/usr/include/c++/10/bits/basic_string.h	/^      find_last_not_of(const _CharT* __s, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=npos) const
std::basic_string::find_last_not_of	/usr/include/c++/10/bits/basic_string.h	/^      find_last_not_of(const _CharT* __s, size_type __pos,$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
std::basic_string::find_last_not_of	/usr/include/c++/10/bits/basic_string.h	/^      find_last_not_of(const basic_string& __str, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=npos) const
std::basic_string::find_last_of	/usr/include/c++/10/bits/basic_string.h	/^	find_last_of(const _Tp& __svt, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=npos) const
std::basic_string::find_last_of	/usr/include/c++/10/bits/basic_string.h	/^      find_last_of(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=npos) const
std::basic_string::find_last_of	/usr/include/c++/10/bits/basic_string.h	/^      find_last_of(const _CharT* __s, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=npos) const
std::basic_string::find_last_of	/usr/include/c++/10/bits/basic_string.h	/^      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
std::basic_string::find_last_of	/usr/include/c++/10/bits/basic_string.h	/^      find_last_of(const basic_string& __str, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=npos) const
std::basic_string::front	/usr/include/c++/10/bits/basic_string.h	/^      front() const noexcept$/;"	f	class:std::basic_string	typeref:typename:const_reference	access:public	signature:() const
std::basic_string::front	/usr/include/c++/10/bits/basic_string.h	/^      front() noexcept$/;"	f	class:std::basic_string	typeref:typename:reference	access:public	signature:()
std::basic_string::get_allocator	/usr/include/c++/10/bits/basic_string.h	/^      get_allocator() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:allocator_type	access:public	signature:() const
std::basic_string::insert	/usr/include/c++/10/bits/basic_string.h	/^	insert(size_type __pos, const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(size_type __pos,const _Tp & __svt)
std::basic_string::insert	/usr/include/c++/10/bits/basic_string.h	/^	insert(size_type __pos1, const _Tp& __svt,$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(size_type __pos1,const _Tp & __svt,size_type __pos2,size_type __n=npos)
std::basic_string::insert	/usr/include/c++/10/bits/basic_string.h	/^        insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)$/;"	f	class:std::basic_string	typeref:typename:iterator	access:public	signature:(const_iterator __p,_InputIterator __beg,_InputIterator __end)
std::basic_string::insert	/usr/include/c++/10/bits/basic_string.h	/^        insert(iterator __p, _InputIterator __beg, _InputIterator __end)$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:(iterator __p,_InputIterator __beg,_InputIterator __end)
std::basic_string::insert	/usr/include/c++/10/bits/basic_string.h	/^      insert(__const_iterator __p, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:iterator	access:public	signature:(__const_iterator __p,_CharT __c)
std::basic_string::insert	/usr/include/c++/10/bits/basic_string.h	/^      insert(const_iterator __p, initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:iterator	access:public	signature:(const_iterator __p,initializer_list<_CharT> __l)
std::basic_string::insert	/usr/include/c++/10/bits/basic_string.h	/^      insert(const_iterator __p, size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:iterator	access:public	signature:(const_iterator __p,size_type __n,_CharT __c)
std::basic_string::insert	/usr/include/c++/10/bits/basic_string.h	/^      insert(iterator __p, initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:(iterator __p,initializer_list<_CharT> __l)
std::basic_string::insert	/usr/include/c++/10/bits/basic_string.h	/^      insert(iterator __p, size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:(iterator __p,size_type __n,_CharT __c)
std::basic_string::insert	/usr/include/c++/10/bits/basic_string.h	/^      insert(size_type __pos, const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,const _CharT * __s)
std::basic_string::insert	/usr/include/c++/10/bits/basic_string.h	/^      insert(size_type __pos, const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,const _CharT * __s,size_type __n)
std::basic_string::insert	/usr/include/c++/10/bits/basic_string.h	/^      insert(size_type __pos, size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,size_type __n,_CharT __c)
std::basic_string::insert	/usr/include/c++/10/bits/basic_string.h	/^      insert(size_type __pos1, const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos1,const basic_string & __str)
std::basic_string::insert	/usr/include/c++/10/bits/basic_string.h	/^      insert(size_type __pos1, const basic_string& __str,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos1,const basic_string & __str,size_type __pos2,size_type __n=npos)
std::basic_string::iterator	/usr/include/c++/10/bits/basic_string.h	/^      typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;$/;"	t	class:std::basic_string	typeref:typename:__gnu_cxx::__normal_iterator<pointer,basic_string>	access:public
std::basic_string::length	/usr/include/c++/10/bits/basic_string.h	/^      length() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:() const
std::basic_string::max_size	/usr/include/c++/10/bits/basic_string.h	/^      max_size() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:() const
std::basic_string::npos	/usr/include/c++/10/bits/basic_string.h	/^      static const size_type	npos = static_cast<size_type>(-1);$/;"	m	class:std::basic_string	typeref:typename:const size_type	access:public
std::basic_string::operator +=	/usr/include/c++/10/bits/basic_string.h	/^	operator+=(const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt)
std::basic_string::operator +=	/usr/include/c++/10/bits/basic_string.h	/^      operator+=(_CharT __c)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(_CharT __c)
std::basic_string::operator +=	/usr/include/c++/10/bits/basic_string.h	/^      operator+=(const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s)
std::basic_string::operator +=	/usr/include/c++/10/bits/basic_string.h	/^      operator+=(const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str)
std::basic_string::operator +=	/usr/include/c++/10/bits/basic_string.h	/^      operator+=(initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(initializer_list<_CharT> __l)
std::basic_string::operator =	/usr/include/c++/10/bits/basic_string.h	/^       operator=(const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt)
std::basic_string::operator =	/usr/include/c++/10/bits/basic_string.h	/^      operator=(_CharT __c)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(_CharT __c)
std::basic_string::operator =	/usr/include/c++/10/bits/basic_string.h	/^      operator=(basic_string&& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(basic_string && __str)
std::basic_string::operator =	/usr/include/c++/10/bits/basic_string.h	/^      operator=(const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s)
std::basic_string::operator =	/usr/include/c++/10/bits/basic_string.h	/^      operator=(const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str)
std::basic_string::operator =	/usr/include/c++/10/bits/basic_string.h	/^      operator=(initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(initializer_list<_CharT> __l)
std::basic_string::operator []	/usr/include/c++/10/bits/basic_string.h	/^      operator[](size_type __pos)$/;"	f	class:std::basic_string	typeref:typename:reference	access:public	signature:(size_type __pos)
std::basic_string::operator [] 	/usr/include/c++/10/bits/basic_string.h	/^      operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:const_reference	access:public	signature:(size_type __pos) const
std::basic_string::operator __sv_type	/usr/include/c++/10/bits/basic_string.h	/^      operator __sv_type() const noexcept$/;"	f	class:std::basic_string	access:public	signature:() const
std::basic_string::pointer	/usr/include/c++/10/bits/basic_string.h	/^      typedef typename _Alloc_traits::pointer		pointer;$/;"	t	class:std::basic_string	typeref:typename:_Alloc_traits::pointer	access:public
std::basic_string::pop_back	/usr/include/c++/10/bits/basic_string.h	/^      pop_back() noexcept$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:()
std::basic_string::push_back	/usr/include/c++/10/bits/basic_string.h	/^      push_back(_CharT __c)$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:(_CharT __c)
std::basic_string::rbegin	/usr/include/c++/10/bits/basic_string.h	/^      rbegin() _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:reverse_iterator	access:public	signature:()
std::basic_string::rbegin	/usr/include/c++/10/bits/basic_string.h	/^      rbegin() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:const_reverse_iterator	access:public	signature:() const
std::basic_string::reference	/usr/include/c++/10/bits/basic_string.h	/^      typedef typename _Alloc_traits::reference		reference;$/;"	t	class:std::basic_string	typeref:typename:_Alloc_traits::reference	access:public
std::basic_string::rend	/usr/include/c++/10/bits/basic_string.h	/^      rend() _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:reverse_iterator	access:public	signature:()
std::basic_string::rend	/usr/include/c++/10/bits/basic_string.h	/^      rend() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:const_reverse_iterator	access:public	signature:() const
std::basic_string::replace	/usr/include/c++/10/bits/basic_string.h	/^	replace(const_iterator __i1, const_iterator __i2, const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(const_iterator __i1,const_iterator __i2,const _Tp & __svt)
std::basic_string::replace	/usr/include/c++/10/bits/basic_string.h	/^	replace(size_type __pos, size_type __n, const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(size_type __pos,size_type __n,const _Tp & __svt)
std::basic_string::replace	/usr/include/c++/10/bits/basic_string.h	/^	replace(size_type __pos1, size_type __n1, const _Tp& __svt,$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(size_type __pos1,size_type __n1,const _Tp & __svt,size_type __pos2,size_type __n2=npos)
std::basic_string::replace	/usr/include/c++/10/bits/basic_string.h	/^        replace(const_iterator __i1, const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const_iterator __i1,const_iterator __i2,_InputIterator __k1,_InputIterator __k2)
std::basic_string::replace	/usr/include/c++/10/bits/basic_string.h	/^        replace(iterator __i1, iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:__enable_if_not_native_iterator<_InputIterator>::__type	access:public	signature:(iterator __i1,iterator __i2,_InputIterator __k1,_InputIterator __k2)
std::basic_string::replace	/usr/include/c++/10/bits/basic_string.h	/^      basic_string& replace(const_iterator __i1, const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const_iterator __i1,const_iterator __i2,initializer_list<_CharT> __l)
std::basic_string::replace	/usr/include/c++/10/bits/basic_string.h	/^      replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(__const_iterator __i1,__const_iterator __i2,const _CharT * __s)
std::basic_string::replace	/usr/include/c++/10/bits/basic_string.h	/^      replace(__const_iterator __i1, __const_iterator __i2, size_type __n,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(__const_iterator __i1,__const_iterator __i2,size_type __n,_CharT __c)
std::basic_string::replace	/usr/include/c++/10/bits/basic_string.h	/^      replace(__const_iterator __i1, __const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(__const_iterator __i1,__const_iterator __i2,_CharT * __k1,_CharT * __k2)
std::basic_string::replace	/usr/include/c++/10/bits/basic_string.h	/^      replace(__const_iterator __i1, __const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(__const_iterator __i1,__const_iterator __i2,const _CharT * __k1,const _CharT * __k2)
std::basic_string::replace	/usr/include/c++/10/bits/basic_string.h	/^      replace(__const_iterator __i1, __const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(__const_iterator __i1,__const_iterator __i2,const _CharT * __s,size_type __n)
std::basic_string::replace	/usr/include/c++/10/bits/basic_string.h	/^      replace(__const_iterator __i1, __const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(__const_iterator __i1,__const_iterator __i2,const basic_string & __str)
std::basic_string::replace	/usr/include/c++/10/bits/basic_string.h	/^      replace(__const_iterator __i1, __const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(__const_iterator __i1,__const_iterator __i2,const_iterator __k1,const_iterator __k2)
std::basic_string::replace	/usr/include/c++/10/bits/basic_string.h	/^      replace(__const_iterator __i1, __const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(__const_iterator __i1,__const_iterator __i2,iterator __k1,iterator __k2)
std::basic_string::replace	/usr/include/c++/10/bits/basic_string.h	/^      replace(size_type __pos, size_type __n, const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,size_type __n,const basic_string & __str)
std::basic_string::replace	/usr/include/c++/10/bits/basic_string.h	/^      replace(size_type __pos, size_type __n1, const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,size_type __n1,const _CharT * __s)
std::basic_string::replace	/usr/include/c++/10/bits/basic_string.h	/^      replace(size_type __pos, size_type __n1, const _CharT* __s,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,size_type __n1,const _CharT * __s,size_type __n2)
std::basic_string::replace	/usr/include/c++/10/bits/basic_string.h	/^      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,size_type __n1,size_type __n2,_CharT __c)
std::basic_string::replace	/usr/include/c++/10/bits/basic_string.h	/^      replace(size_type __pos1, size_type __n1, const basic_string& __str,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos1,size_type __n1,const basic_string & __str,size_type __pos2,size_type __n2=npos)
std::basic_string::reserve	/usr/include/c++/10/bits/basic_string.h	/^      reserve(size_type __res_arg = 0);$/;"	p	class:std::basic_string	typeref:typename:void	access:public	signature:(size_type __res_arg=0)
std::basic_string::resize	/usr/include/c++/10/bits/basic_string.h	/^      resize(size_type __n)$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:(size_type __n)
std::basic_string::resize	/usr/include/c++/10/bits/basic_string.h	/^      resize(size_type __n, _CharT __c);$/;"	p	class:std::basic_string	typeref:typename:void	access:public	signature:(size_type __n,_CharT __c)
std::basic_string::reverse_iterator	/usr/include/c++/10/bits/basic_string.h	/^      typedef std::reverse_iterator<iterator>		reverse_iterator;$/;"	t	class:std::basic_string	typeref:typename:std::reverse_iterator<iterator>	access:public
std::basic_string::rfind	/usr/include/c++/10/bits/basic_string.h	/^	rfind(const _Tp& __svt, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=npos) const
std::basic_string::rfind	/usr/include/c++/10/bits/basic_string.h	/^      rfind(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT;$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=npos) const
std::basic_string::rfind	/usr/include/c++/10/bits/basic_string.h	/^      rfind(const _CharT* __s, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=npos) const
std::basic_string::rfind	/usr/include/c++/10/bits/basic_string.h	/^      rfind(const _CharT* __s, size_type __pos, size_type __n) const$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
std::basic_string::rfind	/usr/include/c++/10/bits/basic_string.h	/^      rfind(const basic_string& __str, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=npos) const
std::basic_string::shrink_to_fit	/usr/include/c++/10/bits/basic_string.h	/^      shrink_to_fit() noexcept$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:()
std::basic_string::size	/usr/include/c++/10/bits/basic_string.h	/^      size() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:() const
std::basic_string::size_type	/usr/include/c++/10/bits/basic_string.h	/^      typedef typename _Alloc_traits::size_type		size_type;$/;"	t	class:std::basic_string	typeref:typename:_Alloc_traits::size_type	access:public
std::basic_string::starts_with	/usr/include/c++/10/bits/basic_string.h	/^      starts_with(_CharT __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(_CharT __x) const
std::basic_string::starts_with	/usr/include/c++/10/bits/basic_string.h	/^      starts_with(basic_string_view<_CharT, _Traits> __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(basic_string_view<_CharT,_Traits> __x) const
std::basic_string::starts_with	/usr/include/c++/10/bits/basic_string.h	/^      starts_with(const _CharT* __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(const _CharT * __x) const
std::basic_string::substr	/usr/include/c++/10/bits/basic_string.h	/^      substr(size_type __pos = 0, size_type __n = npos) const$/;"	f	class:std::basic_string	typeref:typename:basic_string	access:public	signature:(size_type __pos=0,size_type __n=npos) const
std::basic_string::swap	/usr/include/c++/10/bits/basic_string.h	/^      swap(basic_string& __s) _GLIBCXX_NOEXCEPT;$/;"	p	class:std::basic_string	typeref:typename:void	access:public	signature:(basic_string & __s)
std::basic_string::traits_type	/usr/include/c++/10/bits/basic_string.h	/^      typedef _Traits					traits_type;$/;"	t	class:std::basic_string	typeref:typename:_Traits	access:public
std::basic_string::value_type	/usr/include/c++/10/bits/basic_string.h	/^      typedef typename _Traits::char_type		value_type;$/;"	t	class:std::basic_string	typeref:typename:_Traits::char_type	access:public
std::basic_string::~basic_string	/usr/include/c++/10/bits/basic_string.h	/^      ~basic_string()$/;"	f	class:std::basic_string	access:public	signature:()
std::begin	/usr/include/c++/10/bits/range_access.h	/^    begin(_Container& __cont) -> decltype(__cont.begin())$/;"	f	namespace:std	typeref:typename:decltype (__cont.begin ())	signature:(_Container & __cont)
std::begin	/usr/include/c++/10/bits/range_access.h	/^    begin(_Tp (&__arr)[_Nm])$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp *	signature:(_Tp (& __arr)[_Nm])
std::begin	/usr/include/c++/10/bits/range_access.h	/^    begin(const _Container& __cont) -> decltype(__cont.begin())$/;"	f	namespace:std	typeref:typename:decltype (__cont.begin ())	signature:(const _Container & __cont)
std::begin	/usr/include/c++/10/bits/range_access.h	/^  template<typename _Tp> _Tp* begin(valarray<_Tp>&);$/;"	p	namespace:std	typeref:typename:_Tp *	signature:(valarray<_Tp> &)
std::begin	/usr/include/c++/10/bits/range_access.h	/^  template<typename _Tp> const _Tp* begin(const valarray<_Tp>&);$/;"	p	namespace:std	typeref:typename:const _Tp *	signature:(const valarray<_Tp> &)
std::bidirectional_iterator_tag	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^  struct bidirectional_iterator_tag : public forward_iterator_tag { };$/;"	s	namespace:std	inherits:forward_iterator_tag
std::binary_function	/usr/include/c++/10/bits/stl_function.h	/^    struct binary_function$/;"	s	namespace:std
std::binary_function::first_argument_type	/usr/include/c++/10/bits/stl_function.h	/^      typedef _Arg1 	first_argument_type; $/;"	t	struct:std::binary_function	typeref:typename:_Arg1	access:public
std::binary_function::result_type	/usr/include/c++/10/bits/stl_function.h	/^      typedef _Result 	result_type;$/;"	t	struct:std::binary_function	typeref:typename:_Result	access:public
std::binary_function::second_argument_type	/usr/include/c++/10/bits/stl_function.h	/^      typedef _Arg2 	second_argument_type;$/;"	t	struct:std::binary_function	typeref:typename:_Arg2	access:public
std::binary_negate	/usr/include/c++/10/bits/stl_function.h	/^    class binary_negate$/;"	c	namespace:std	inherits:binary_function<typename_Predicate::first_argument_type,typename_Predicate::second_argument_type,bool>
std::binary_negate::_M_pred	/usr/include/c++/10/bits/stl_function.h	/^      _Predicate _M_pred;$/;"	m	class:std::binary_negate	typeref:typename:_Predicate	access:protected
std::binary_negate::binary_negate	/usr/include/c++/10/bits/stl_function.h	/^      binary_negate(const _Predicate& __x) : _M_pred(__x) { }$/;"	f	class:std::binary_negate	typeref:typename:_GLIBCXX14_CONSTEXPR	access:public	signature:(const _Predicate & __x)
std::binary_negate::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const typename _Predicate::first_argument_type& __x,$/;"	f	class:std::binary_negate	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const typename _Predicate::first_argument_type & __x,const typename _Predicate::second_argument_type & __y) const
std::bind1st	/usr/include/c++/10/backward/binders.h	/^    bind1st(const _Operation& __fn, const _Tp& __x)$/;"	f	namespace:std	typeref:typename:binder1st<_Operation>	signature:(const _Operation & __fn,const _Tp & __x)
std::bind2nd	/usr/include/c++/10/backward/binders.h	/^    bind2nd(const _Operation& __fn, const _Tp& __x)$/;"	f	namespace:std	typeref:typename:binder2nd<_Operation>	signature:(const _Operation & __fn,const _Tp & __x)
std::binder1st	/usr/include/c++/10/backward/binders.h	/^    class binder1st$/;"	c	namespace:std	inherits:unary_function<typename_Operation::second_argument_type,typename_Operation::result_type>
std::binder1st::binder1st	/usr/include/c++/10/backward/binders.h	/^      binder1st(const _Operation& __x,$/;"	f	class:std::binder1st	access:public	signature:(const _Operation & __x,const typename _Operation::first_argument_type & __y)
std::binder1st::op	/usr/include/c++/10/backward/binders.h	/^      _Operation op;$/;"	m	class:std::binder1st	typeref:typename:_Operation	access:protected
std::binder1st::operator ()	/usr/include/c++/10/backward/binders.h	/^      operator()(const typename _Operation::second_argument_type& __x) const$/;"	f	class:std::binder1st	typeref:typename:_Operation::result_type	access:public	signature:(const typename _Operation::second_argument_type & __x) const
std::binder1st::operator ()	/usr/include/c++/10/backward/binders.h	/^      operator()(typename _Operation::second_argument_type& __x) const$/;"	f	class:std::binder1st	typeref:typename:_Operation::result_type	access:public	signature:(typename _Operation::second_argument_type & __x) const
std::binder1st::value	/usr/include/c++/10/backward/binders.h	/^      typename _Operation::first_argument_type value;$/;"	m	class:std::binder1st	typeref:typename:_Operation::first_argument_type	access:protected
std::binder2nd	/usr/include/c++/10/backward/binders.h	/^    class binder2nd$/;"	c	namespace:std	inherits:unary_function<typename_Operation::first_argument_type,typename_Operation::result_type>
std::binder2nd::binder2nd	/usr/include/c++/10/backward/binders.h	/^      binder2nd(const _Operation& __x,$/;"	f	class:std::binder2nd	access:public	signature:(const _Operation & __x,const typename _Operation::second_argument_type & __y)
std::binder2nd::op	/usr/include/c++/10/backward/binders.h	/^      _Operation op;$/;"	m	class:std::binder2nd	typeref:typename:_Operation	access:protected
std::binder2nd::operator ()	/usr/include/c++/10/backward/binders.h	/^      operator()(const typename _Operation::first_argument_type& __x) const$/;"	f	class:std::binder2nd	typeref:typename:_Operation::result_type	access:public	signature:(const typename _Operation::first_argument_type & __x) const
std::binder2nd::operator ()	/usr/include/c++/10/backward/binders.h	/^      operator()(typename _Operation::first_argument_type& __x) const$/;"	f	class:std::binder2nd	typeref:typename:_Operation::result_type	access:public	signature:(typename _Operation::first_argument_type & __x) const
std::binder2nd::value	/usr/include/c++/10/backward/binders.h	/^      typename _Operation::second_argument_type value;$/;"	m	class:std::binder2nd	typeref:typename:_Operation::second_argument_type	access:protected
std::bit_and	/usr/include/c++/10/bits/stl_function.h	/^    struct bit_and : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
std::bit_and	/usr/include/c++/10/bits/stl_function.h	/^    struct bit_and<void>$/;"	s	namespace:std
std::bit_and::is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::bit_and	typeref:typename:__is_transparent	access:public
std::bit_and::operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::bit_and	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
std::bit_and::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::bit_and	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::bit_not	/usr/include/c++/10/bits/stl_function.h	/^    struct bit_not : public unary_function<_Tp, _Tp>$/;"	s	namespace:std	inherits:unary_function<_Tp,_Tp>
std::bit_not	/usr/include/c++/10/bits/stl_function.h	/^    struct bit_not<void>$/;"	s	namespace:std
std::bit_not::is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::bit_not	typeref:typename:__is_transparent	access:public
std::bit_not::operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t) const$/;"	f	struct:std::bit_not	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t) const
std::bit_not::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x) const$/;"	f	struct:std::bit_not	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x) const
std::bit_or	/usr/include/c++/10/bits/stl_function.h	/^    struct bit_or : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
std::bit_or	/usr/include/c++/10/bits/stl_function.h	/^    struct bit_or<void>$/;"	s	namespace:std
std::bit_or::is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::bit_or	typeref:typename:__is_transparent	access:public
std::bit_or::operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::bit_or	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
std::bit_or::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::bit_or	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::bit_xor	/usr/include/c++/10/bits/stl_function.h	/^    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
std::bit_xor	/usr/include/c++/10/bits/stl_function.h	/^    struct bit_xor<void>$/;"	s	namespace:std
std::bit_xor::is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::bit_xor	typeref:typename:__is_transparent	access:public
std::bit_xor::operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::bit_xor	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
std::bit_xor::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::bit_xor	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::boolalpha	/usr/include/c++/10/bits/ios_base.h	/^  boolalpha(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::broken_pipe	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      broken_pipe = 				EPIPE,$/;"	e	enum:std::errc	access:public
std::cbegin	/usr/include/c++/10/bits/range_access.h	/^    cbegin(const _Container& __cont) noexcept(noexcept(std::begin(__cont)))$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Container & __cont)
std::cend	/usr/include/c++/10/bits/range_access.h	/^    cend(const _Container& __cont) noexcept(noexcept(std::end(__cont)))$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Container & __cont)
std::char_traits	/usr/include/c++/10/bits/char_traits.h	/^    struct char_traits : public __gnu_cxx::char_traits<_CharT>$/;"	s	namespace:std	inherits:__gnu_cxx::char_traits<_CharT>
std::char_traits	/usr/include/c++/10/bits/char_traits.h	/^    struct char_traits<char16_t>$/;"	s	namespace:std
std::char_traits	/usr/include/c++/10/bits/char_traits.h	/^    struct char_traits<char32_t>$/;"	s	namespace:std
std::char_traits	/usr/include/c++/10/bits/char_traits.h	/^    struct char_traits<char8_t>$/;"	s	namespace:std
std::char_traits	/usr/include/c++/10/bits/char_traits.h	/^    struct char_traits<char>$/;"	s	namespace:std
std::char_traits	/usr/include/c++/10/bits/char_traits.h	/^    struct char_traits<wchar_t>$/;"	s	namespace:std
std::char_traits::assign	/usr/include/c++/10/bits/char_traits.h	/^      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX17_CONSTEXPR void	access:public	signature:(char_type & __c1,const char_type & __c2)
std::char_traits::assign	/usr/include/c++/10/bits/char_traits.h	/^      assign(char_type& __c1, const char_type& __c2) noexcept$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX17_CONSTEXPR void	access:public	signature:(char_type & __c1,const char_type & __c2)
std::char_traits::assign	/usr/include/c++/10/bits/char_traits.h	/^      assign(char_type* __s, size_t __n, char_type __a)$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR char_type *	access:public	signature:(char_type * __s,size_t __n,char_type __a)
std::char_traits::char_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef char              char_type;$/;"	t	struct:std::char_traits	typeref:typename:char	access:public
std::char_traits::char_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef char16_t          char_type;$/;"	t	struct:std::char_traits	typeref:typename:char16_t	access:public
std::char_traits::char_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef char32_t          char_type;$/;"	t	struct:std::char_traits	typeref:typename:char32_t	access:public
std::char_traits::char_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef char8_t           char_type;$/;"	t	struct:std::char_traits	typeref:typename:char8_t	access:public
std::char_traits::char_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef wchar_t           char_type;$/;"	t	struct:std::char_traits	typeref:typename:wchar_t	access:public
std::char_traits::compare	/usr/include/c++/10/bits/char_traits.h	/^      compare(const char_type* __s1, const char_type* __s2, size_t __n)$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX17_CONSTEXPR int	access:public	signature:(const char_type * __s1,const char_type * __s2,size_t __n)
std::char_traits::comparison_category	/usr/include/c++/10/bits/char_traits.h	/^      using comparison_category = strong_ordering;$/;"	t	struct:std::char_traits	typeref:typename:strong_ordering	access:public
std::char_traits::copy	/usr/include/c++/10/bits/char_traits.h	/^      copy(char_type* __s1, const char_type* __s2, size_t __n)$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR char_type *	access:public	signature:(char_type * __s1,const char_type * __s2,size_t __n)
std::char_traits::eof	/usr/include/c++/10/bits/char_traits.h	/^      eof() _GLIBCXX_NOEXCEPT$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR int_type	access:public	signature:()
std::char_traits::eof	/usr/include/c++/10/bits/char_traits.h	/^      eof() noexcept$/;"	f	struct:std::char_traits	typeref:typename:int_type	access:public	signature:()
std::char_traits::eq	/usr/include/c++/10/bits/char_traits.h	/^      eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR bool	access:public	signature:(const char_type & __c1,const char_type & __c2)
std::char_traits::eq	/usr/include/c++/10/bits/char_traits.h	/^      eq(const char_type& __c1, const char_type& __c2) noexcept$/;"	f	struct:std::char_traits	typeref:typename:bool	access:public	signature:(const char_type & __c1,const char_type & __c2)
std::char_traits::eq_int_type	/usr/include/c++/10/bits/char_traits.h	/^      eq_int_type(const int_type& __c1, const int_type& __c2) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR bool	access:public	signature:(const int_type & __c1,const int_type & __c2)
std::char_traits::eq_int_type	/usr/include/c++/10/bits/char_traits.h	/^      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept$/;"	f	struct:std::char_traits	typeref:typename:bool	access:public	signature:(const int_type & __c1,const int_type & __c2)
std::char_traits::find	/usr/include/c++/10/bits/char_traits.h	/^      find(const char_type* __s, size_t __n, const char_type& __a)$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX17_CONSTEXPR const char_type *	access:public	signature:(const char_type * __s,size_t __n,const char_type & __a)
std::char_traits::int_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef __UINT_LEAST16_TYPE__	    int_type;$/;"	t	struct:std::char_traits	typeref:typename:__UINT_LEAST16_TYPE__	access:public
std::char_traits::int_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef __UINT_LEAST32_TYPE__	    int_type;$/;"	t	struct:std::char_traits	typeref:typename:__UINT_LEAST32_TYPE__	access:public
std::char_traits::int_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef int               int_type;$/;"	t	struct:std::char_traits	typeref:typename:int	access:public
std::char_traits::int_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef make_unsigned<char16_t>::type int_type;$/;"	t	struct:std::char_traits	typeref:typename:make_unsigned<char16_t>::type	access:public
std::char_traits::int_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef make_unsigned<char32_t>::type int_type;$/;"	t	struct:std::char_traits	typeref:typename:make_unsigned<char32_t>::type	access:public
std::char_traits::int_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef uint_least16_t    int_type;$/;"	t	struct:std::char_traits	typeref:typename:uint_least16_t	access:public
std::char_traits::int_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef uint_least32_t    int_type;$/;"	t	struct:std::char_traits	typeref:typename:uint_least32_t	access:public
std::char_traits::int_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef unsigned int      int_type;$/;"	t	struct:std::char_traits	typeref:typename:unsigned int	access:public
std::char_traits::int_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef wint_t            int_type;$/;"	t	struct:std::char_traits	typeref:typename:wint_t	access:public
std::char_traits::length	/usr/include/c++/10/bits/char_traits.h	/^      length(const char_type* __s)$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX17_CONSTEXPR size_t	access:public	signature:(const char_type * __s)
std::char_traits::lt	/usr/include/c++/10/bits/char_traits.h	/^      lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR bool	access:public	signature:(const char_type & __c1,const char_type & __c2)
std::char_traits::lt	/usr/include/c++/10/bits/char_traits.h	/^      lt(const char_type& __c1, const char_type& __c2) noexcept$/;"	f	struct:std::char_traits	typeref:typename:bool	access:public	signature:(const char_type & __c1,const char_type & __c2)
std::char_traits::move	/usr/include/c++/10/bits/char_traits.h	/^      move(char_type* __s1, const char_type* __s2, size_t __n)$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR char_type *	access:public	signature:(char_type * __s1,const char_type * __s2,size_t __n)
std::char_traits::not_eof	/usr/include/c++/10/bits/char_traits.h	/^      not_eof(const int_type& __c) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR int_type	access:public	signature:(const int_type & __c)
std::char_traits::not_eof	/usr/include/c++/10/bits/char_traits.h	/^      not_eof(const int_type& __c) noexcept$/;"	f	struct:std::char_traits	typeref:typename:int_type	access:public	signature:(const int_type & __c)
std::char_traits::off_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef streamoff         off_type;$/;"	t	struct:std::char_traits	typeref:typename:streamoff	access:public
std::char_traits::pos_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef streampos         pos_type;$/;"	t	struct:std::char_traits	typeref:typename:streampos	access:public
std::char_traits::pos_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef u16streampos      pos_type;$/;"	t	struct:std::char_traits	typeref:typename:u16streampos	access:public
std::char_traits::pos_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef u32streampos      pos_type;$/;"	t	struct:std::char_traits	typeref:typename:u32streampos	access:public
std::char_traits::pos_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef u8streampos       pos_type;$/;"	t	struct:std::char_traits	typeref:typename:u8streampos	access:public
std::char_traits::pos_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef wstreampos        pos_type;$/;"	t	struct:std::char_traits	typeref:typename:wstreampos	access:public
std::char_traits::state_type	/usr/include/c++/10/bits/char_traits.h	/^      typedef mbstate_t         state_type;$/;"	t	struct:std::char_traits	typeref:typename:mbstate_t	access:public
std::char_traits::to_char_type	/usr/include/c++/10/bits/char_traits.h	/^      to_char_type(const int_type& __c) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR char_type	access:public	signature:(const int_type & __c)
std::char_traits::to_char_type	/usr/include/c++/10/bits/char_traits.h	/^      to_char_type(const int_type& __c) noexcept$/;"	f	struct:std::char_traits	typeref:typename:char_type	access:public	signature:(const int_type & __c)
std::char_traits::to_int_type	/usr/include/c++/10/bits/char_traits.h	/^      to_int_type(const char_type& __c) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR int_type	access:public	signature:(const char_type & __c)
std::char_traits::to_int_type	/usr/include/c++/10/bits/char_traits.h	/^      to_int_type(const char_type& __c) noexcept$/;"	f	struct:std::char_traits	typeref:typename:int_type	access:public	signature:(const char_type & __c)
std::collate	/usr/include/c++/10/bits/locale_classes.h	/^    class _GLIBCXX_NAMESPACE_CXX11 collate : public locale::facet$/;"	c	namespace:std	inherits:locale::facet
std::collate::_M_c_locale_collate	/usr/include/c++/10/bits/locale_classes.h	/^      __c_locale			_M_c_locale_collate;$/;"	m	class:std::collate	typeref:typename:__c_locale	access:protected
std::collate::_M_compare	/usr/include/c++/10/bits/locale_classes.h	/^      _M_compare(const _CharT*, const _CharT*) const throw();$/;"	p	class:std::collate	typeref:typename:int	access:public	signature:(const _CharT *,const _CharT *) const
std::collate::_M_compare	/usr/include/c++/10/bits/locale_classes.h	/^    collate<char>::_M_compare(const char*, const char*) const throw();$/;"	p	class:std::collate	typeref:typename:int	signature:(const char *,const char *) const
std::collate::_M_compare	/usr/include/c++/10/bits/locale_classes.h	/^    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw();$/;"	p	class:std::collate	typeref:typename:int	signature:(const wchar_t *,const wchar_t *) const
std::collate::_M_transform	/usr/include/c++/10/bits/locale_classes.h	/^      _M_transform(_CharT*, const _CharT*, size_t) const throw();$/;"	p	class:std::collate	typeref:typename:size_t	access:public	signature:(_CharT *,const _CharT *,size_t) const
std::collate::_M_transform	/usr/include/c++/10/bits/locale_classes.h	/^    collate<char>::_M_transform(char*, const char*, size_t) const throw();$/;"	p	class:std::collate	typeref:typename:size_t	signature:(char *,const char *,size_t) const
std::collate::_M_transform	/usr/include/c++/10/bits/locale_classes.h	/^    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw();$/;"	p	class:std::collate	typeref:typename:size_t	signature:(wchar_t *,const wchar_t *,size_t) const
std::collate::char_type	/usr/include/c++/10/bits/locale_classes.h	/^      typedef _CharT			char_type;$/;"	t	class:std::collate	typeref:typename:_CharT	access:public
std::collate::collate	/usr/include/c++/10/bits/locale_classes.h	/^      collate(__c_locale __cloc, size_t __refs = 0)$/;"	f	class:std::collate	access:public	signature:(__c_locale __cloc,size_t __refs=0)
std::collate::collate	/usr/include/c++/10/bits/locale_classes.h	/^      collate(size_t __refs = 0)$/;"	f	class:std::collate	access:public	signature:(size_t __refs=0)
std::collate::compare	/usr/include/c++/10/bits/locale_classes.h	/^      compare(const _CharT* __lo1, const _CharT* __hi1,$/;"	f	class:std::collate	typeref:typename:int	access:public	signature:(const _CharT * __lo1,const _CharT * __hi1,const _CharT * __lo2,const _CharT * __hi2) const
std::collate::do_compare	/usr/include/c++/10/bits/locale_classes.h	/^      do_compare(const _CharT* __lo1, const _CharT* __hi1,$/;"	p	class:std::collate	typeref:typename:int	access:protected	signature:(const _CharT * __lo1,const _CharT * __hi1,const _CharT * __lo2,const _CharT * __hi2) const
std::collate::do_hash	/usr/include/c++/10/bits/locale_classes.h	/^      do_hash(const _CharT* __lo, const _CharT* __hi) const;$/;"	p	class:std::collate	typeref:typename:long	access:protected	signature:(const _CharT * __lo,const _CharT * __hi) const
std::collate::do_transform	/usr/include/c++/10/bits/locale_classes.h	/^      do_transform(const _CharT* __lo, const _CharT* __hi) const;$/;"	p	class:std::collate	typeref:typename:string_type	access:protected	signature:(const _CharT * __lo,const _CharT * __hi) const
std::collate::hash	/usr/include/c++/10/bits/locale_classes.h	/^      hash(const _CharT* __lo, const _CharT* __hi) const$/;"	f	class:std::collate	typeref:typename:long	access:public	signature:(const _CharT * __lo,const _CharT * __hi) const
std::collate::id	/usr/include/c++/10/bits/locale_classes.h	/^      static locale::id			id;$/;"	m	class:std::collate	typeref:typename:locale::id	access:public
std::collate::string_type	/usr/include/c++/10/bits/locale_classes.h	/^      typedef basic_string<_CharT>	string_type;$/;"	t	class:std::collate	typeref:typename:basic_string<_CharT>	access:public
std::collate::transform	/usr/include/c++/10/bits/locale_classes.h	/^      transform(const _CharT* __lo, const _CharT* __hi) const$/;"	f	class:std::collate	typeref:typename:string_type	access:public	signature:(const _CharT * __lo,const _CharT * __hi) const
std::collate::~collate	/usr/include/c++/10/bits/locale_classes.h	/^      ~collate()$/;"	f	class:std::collate	access:protected	signature:()
std::collate<_CharT>::id	/usr/include/c++/10/bits/locale_classes.h	/^    locale::id collate<_CharT>::id;$/;"	m	class:std::collate<_CharT>	typeref:typename:locale::id
std::collate_byname	/usr/include/c++/10/bits/locale_classes.h	/^    class _GLIBCXX_NAMESPACE_CXX11 collate_byname : public collate<_CharT>$/;"	c	namespace:std	inherits:collate<_CharT>
std::collate_byname::char_type	/usr/include/c++/10/bits/locale_classes.h	/^      typedef _CharT               char_type;$/;"	t	class:std::collate_byname	typeref:typename:_CharT	access:public
std::collate_byname::collate_byname	/usr/include/c++/10/bits/locale_classes.h	/^      collate_byname(const char* __s, size_t __refs = 0)$/;"	f	class:std::collate_byname	access:public	signature:(const char * __s,size_t __refs=0)
std::collate_byname::collate_byname	/usr/include/c++/10/bits/locale_classes.h	/^      collate_byname(const string& __s, size_t __refs = 0)$/;"	f	class:std::collate_byname	access:public	signature:(const string & __s,size_t __refs=0)
std::collate_byname::string_type	/usr/include/c++/10/bits/locale_classes.h	/^      typedef basic_string<_CharT> string_type;$/;"	t	class:std::collate_byname	typeref:typename:basic_string<_CharT>	access:public
std::collate_byname::~collate_byname	/usr/include/c++/10/bits/locale_classes.h	/^      ~collate_byname() { }$/;"	f	class:std::collate_byname	access:protected	signature:()
std::common_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^  class common_iterator$/;"	c	namespace:std
std::common_iterator::_M_has_value	/usr/include/c++/10/bits/stl_iterator.h	/^    bool _M_has_value() const noexcept { return _M_index < 2; }$/;"	f	class:std::common_iterator	typeref:typename:bool	access:private	signature:() const
std::common_iterator::_M_index	/usr/include/c++/10/bits/stl_iterator.h	/^    unsigned char _M_index; \/\/ 0==_M_it, 1==_M_sent, 2==valueless$/;"	m	class:std::common_iterator	typeref:typename:unsigned char	access:private
std::common_iterator::_Proxy	/usr/include/c++/10/bits/stl_iterator.h	/^    class _Proxy$/;"	c	class:std::common_iterator	access:private
std::common_iterator::_Proxy::_M_keep	/usr/include/c++/10/bits/stl_iterator.h	/^      iter_value_t<_It> _M_keep;$/;"	m	class:std::common_iterator::_Proxy	typeref:typename:iter_value_t<_It>	access:private
std::common_iterator::_Proxy::_Proxy	/usr/include/c++/10/bits/stl_iterator.h	/^      _Proxy(iter_reference_t<_It>&& __x)$/;"	f	class:std::common_iterator::_Proxy	access:private	signature:(iter_reference_t<_It> && __x)
std::common_iterator::_Proxy::operator ->	/usr/include/c++/10/bits/stl_iterator.h	/^      operator->() const$/;"	f	class:std::common_iterator::_Proxy	typeref:typename:const iter_value_t<_It> *	access:public	signature:() const
std::common_iterator::_S_noexcept	/usr/include/c++/10/bits/stl_iterator.h	/^      _S_noexcept()$/;"	f	class:std::common_iterator	typeref:typename:bool	access:private	signature:()
std::common_iterator::_S_noexcept1	/usr/include/c++/10/bits/stl_iterator.h	/^      _S_noexcept1()$/;"	f	class:std::common_iterator	typeref:typename:bool	access:private	signature:()
std::common_iterator::__anon45a010bb010a	/usr/include/c++/10/bits/stl_iterator.h	/^    {$/;"	u	class:std::common_iterator	access:private
std::common_iterator::__anon45a010bb010a::_M_it	/usr/include/c++/10/bits/stl_iterator.h	/^      _It _M_it;$/;"	m	union:std::common_iterator::__anon45a010bb010a	typeref:typename:_It	access:public
std::common_iterator::__anon45a010bb010a::_M_sent	/usr/include/c++/10/bits/stl_iterator.h	/^      _Sent _M_sent;$/;"	m	union:std::common_iterator::__anon45a010bb010a	typeref:typename:_Sent	access:public
std::common_iterator::__anon45a010bb010a::_M_valueless	/usr/include/c++/10/bits/stl_iterator.h	/^      unsigned char _M_valueless;$/;"	m	union:std::common_iterator::__anon45a010bb010a	typeref:typename:unsigned char	access:public
std::common_iterator::common_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^      common_iterator(const common_iterator<_It2, _Sent2>& __x)$/;"	f	class:std::common_iterator	typeref:typename:requires convertible_to<const _It2 &,_It> && convertible_to<const _Sent2 &,_Sent> 	access:public	signature:(const common_iterator<_It2,_Sent2> & __x)
std::common_iterator::common_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    common_iterator()$/;"	f	class:std::common_iterator	access:public	signature:()
std::common_iterator::common_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    common_iterator(_It __i)$/;"	f	class:std::common_iterator	access:public	signature:(_It __i)
std::common_iterator::common_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    common_iterator(_Sent __s)$/;"	f	class:std::common_iterator	access:public	signature:(_Sent __s)
std::common_iterator::common_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    common_iterator(const common_iterator& __x)$/;"	f	class:std::common_iterator	access:public	signature:(const common_iterator & __x)
std::common_iterator::operator *	/usr/include/c++/10/bits/stl_iterator.h	/^    operator*() const requires __detail::__dereferenceable<const _It>$/;"	f	class:std::common_iterator	typeref:typename:decltype (auto)	access:public	signature:() const
std::common_iterator::operator *	/usr/include/c++/10/bits/stl_iterator.h	/^    operator*()$/;"	f	class:std::common_iterator	typeref:typename:decltype (auto)	access:public	signature:()
std::common_iterator::operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^    operator++()$/;"	f	class:std::common_iterator	typeref:typename:common_iterator &	access:public	signature:()
std::common_iterator::operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^    operator++(int)$/;"	f	class:std::common_iterator	typeref:typename:decltype (auto)	access:public	signature:(int)
std::common_iterator::operator ->	/usr/include/c++/10/bits/stl_iterator.h	/^    operator->() const requires __detail::__common_iter_has_arrow<_It>$/;"	f	class:std::common_iterator	typeref:typename:decltype (auto)	access:public	signature:() const
std::common_iterator::operator =	/usr/include/c++/10/bits/stl_iterator.h	/^      operator=(const common_iterator<_It2, _Sent2>& __x)$/;"	f	class:std::common_iterator	access:public	signature:(const common_iterator<_It2,_Sent2> & __x)
std::common_iterator::operator =	/usr/include/c++/10/bits/stl_iterator.h	/^    operator=(const common_iterator& __x)$/;"	f	class:std::common_iterator	typeref:typename:common_iterator &	access:public	signature:(const common_iterator & __x)
std::common_iterator::~common_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    ~common_iterator()$/;"	f	class:std::common_iterator	access:public	signature:()
std::connection_aborted	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      connection_aborted = 			ECONNABORTED,$/;"	e	enum:std::errc	access:public
std::connection_already_in_progress	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      connection_already_in_progress = 		EALREADY,$/;"	e	enum:std::errc	access:public
std::connection_refused	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      connection_refused = 			ECONNREFUSED,$/;"	e	enum:std::errc	access:public
std::connection_reset	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      connection_reset = 			ECONNRESET,$/;"	e	enum:std::errc	access:public
std::const_mem_fun1_ref_t	/usr/include/c++/10/bits/stl_function.h	/^    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>$/;"	c	namespace:std	inherits:binary_function<_Tp,_Arg,_Ret>
std::const_mem_fun1_ref_t::_Ret	/usr/include/c++/10/bits/stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg) const;$/;"	p	class:std::const_mem_fun1_ref_t	access:private	signature:(_Tp::* _M_f)
std::const_mem_fun1_ref_t::const_mem_fun1_ref_t	/usr/include/c++/10/bits/stl_function.h	/^      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)$/;"	f	class:std::const_mem_fun1_ref_t	access:public	signature:(_Ret (_Tp::* __pf)(_Arg)const)
std::const_mem_fun1_ref_t::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __r, _Arg __x) const$/;"	f	class:std::const_mem_fun1_ref_t	typeref:typename:_Ret	access:public	signature:(const _Tp & __r,_Arg __x) const
std::const_mem_fun1_t	/usr/include/c++/10/bits/stl_function.h	/^    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>$/;"	c	namespace:std	inherits:binary_function<const_Tp*,_Arg,_Ret>
std::const_mem_fun1_t::_Ret	/usr/include/c++/10/bits/stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg) const;$/;"	p	class:std::const_mem_fun1_t	access:private	signature:(_Tp::* _M_f)
std::const_mem_fun1_t::const_mem_fun1_t	/usr/include/c++/10/bits/stl_function.h	/^      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)$/;"	f	class:std::const_mem_fun1_t	access:public	signature:(_Ret (_Tp::* __pf)(_Arg)const)
std::const_mem_fun1_t::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp* __p, _Arg __x) const$/;"	f	class:std::const_mem_fun1_t	typeref:typename:_Ret	access:public	signature:(const _Tp * __p,_Arg __x) const
std::const_mem_fun_ref_t	/usr/include/c++/10/bits/stl_function.h	/^    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>$/;"	c	namespace:std	inherits:unary_function<_Tp,_Ret>
std::const_mem_fun_ref_t::_Ret	/usr/include/c++/10/bits/stl_function.h	/^      _Ret (_Tp::*_M_f)() const;$/;"	p	class:std::const_mem_fun_ref_t	access:private	signature:(_Tp::* _M_f)
std::const_mem_fun_ref_t::const_mem_fun_ref_t	/usr/include/c++/10/bits/stl_function.h	/^      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)$/;"	f	class:std::const_mem_fun_ref_t	access:public	signature:(_Ret (_Tp::* __pf)()const)
std::const_mem_fun_ref_t::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __r) const$/;"	f	class:std::const_mem_fun_ref_t	typeref:typename:_Ret	access:public	signature:(const _Tp & __r) const
std::const_mem_fun_t	/usr/include/c++/10/bits/stl_function.h	/^    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>$/;"	c	namespace:std	inherits:unary_function<const_Tp*,_Ret>
std::const_mem_fun_t::_Ret	/usr/include/c++/10/bits/stl_function.h	/^      _Ret (_Tp::*_M_f)() const;$/;"	p	class:std::const_mem_fun_t	access:private	signature:(_Tp::* _M_f)
std::const_mem_fun_t::const_mem_fun_t	/usr/include/c++/10/bits/stl_function.h	/^      const_mem_fun_t(_Ret (_Tp::*__pf)() const)$/;"	f	class:std::const_mem_fun_t	access:public	signature:(_Ret (_Tp::* __pf)()const)
std::const_mem_fun_t::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp* __p) const$/;"	f	class:std::const_mem_fun_t	typeref:typename:_Ret	access:public	signature:(const _Tp * __p) const
std::construct_at	/usr/include/c++/10/bits/stl_construct.h	/^    construct_at(_Tp* __location, _Args&&... __args)$/;"	f	namespace:std	typeref:typename:auto	signature:(_Tp * __location,_Args &&...__args)
std::contiguous_iterator_tag	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^  struct contiguous_iterator_tag : public random_access_iterator_tag { };$/;"	s	namespace:std	inherits:random_access_iterator_tag
std::copy	/usr/include/c++/10/bits/stl_algobase.h	/^    copy(_II __first, _II __last, _OI __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	signature:(_II __first,_II __last,_OI __result)
std::copy	/usr/include/c++/10/bits/streambuf_iterator.h	/^    copy(istreambuf_iterator<_CharT> __first,$/;"	f	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,ostreambuf_iterator<_CharT>>::__type	signature:(istreambuf_iterator<_CharT> __first,istreambuf_iterator<_CharT> __last,ostreambuf_iterator<_CharT> __result)
std::copy_backward	/usr/include/c++/10/bits/stl_algobase.h	/^    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _BI2	signature:(_BI1 __first,_BI1 __last,_BI2 __result)
std::counted_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    class counted_iterator$/;"	c	namespace:std
std::counted_iterator::_M_current	/usr/include/c++/10/bits/stl_iterator.h	/^      _It _M_current = _It();$/;"	m	class:std::counted_iterator	typeref:typename:_It	access:private
std::counted_iterator::_M_length	/usr/include/c++/10/bits/stl_iterator.h	/^      iter_difference_t<_It> _M_length = 0;$/;"	m	class:std::counted_iterator	typeref:typename:iter_difference_t<_It>	access:private
std::counted_iterator::base	/usr/include/c++/10/bits/stl_iterator.h	/^      base() &&$/;"	f	class:std::counted_iterator	typeref:typename:_It	access:public	signature:()
std::counted_iterator::base	/usr/include/c++/10/bits/stl_iterator.h	/^      base() const &$/;"	f	class:std::counted_iterator	typeref:typename:_It	access:public	signature:() const
std::counted_iterator::count	/usr/include/c++/10/bits/stl_iterator.h	/^      count() const noexcept { return _M_length; }$/;"	f	class:std::counted_iterator	typeref:typename:iter_difference_t<_It>	access:public	signature:() const
std::counted_iterator::counted_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^	counted_iterator(const counted_iterator<_It2>& __x)$/;"	f	class:std::counted_iterator	typeref:typename:requires convertible_to<const _It2 &,_It> 	access:public	signature:(const counted_iterator<_It2> & __x)
std::counted_iterator::counted_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^      constexpr counted_iterator() = default;$/;"	p	class:std::counted_iterator	access:public	signature:()
std::counted_iterator::counted_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^      counted_iterator(_It __i, iter_difference_t<_It> __n)$/;"	f	class:std::counted_iterator	access:public	signature:(_It __i,iter_difference_t<_It> __n)
std::counted_iterator::iterator_type	/usr/include/c++/10/bits/stl_iterator.h	/^      using iterator_type = _It;$/;"	t	class:std::counted_iterator	typeref:typename:_It	access:public
std::counted_iterator::operator *	/usr/include/c++/10/bits/stl_iterator.h	/^      operator*() const$/;"	f	class:std::counted_iterator	typeref:typename:decltype (auto)	access:public	signature:() const
std::counted_iterator::operator *	/usr/include/c++/10/bits/stl_iterator.h	/^      operator*()$/;"	f	class:std::counted_iterator	typeref:typename:decltype (auto)	access:public	signature:()
std::counted_iterator::operator +	/usr/include/c++/10/bits/stl_iterator.h	/^      operator+(iter_difference_t<_It> __n) const$/;"	f	class:std::counted_iterator	typeref:typename:counted_iterator	access:public	signature:(iter_difference_t<_It> __n) const
std::counted_iterator::operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^      operator++()$/;"	f	class:std::counted_iterator	typeref:typename:counted_iterator &	access:public	signature:()
std::counted_iterator::operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^      operator++(int) requires forward_iterator<_It>$/;"	f	class:std::counted_iterator	typeref:typename:counted_iterator	access:public	signature:(int)
std::counted_iterator::operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::counted_iterator	typeref:typename:decltype (auto)	access:public	signature:(int)
std::counted_iterator::operator +=	/usr/include/c++/10/bits/stl_iterator.h	/^      operator+=(iter_difference_t<_It> __n)$/;"	f	class:std::counted_iterator	typeref:typename:counted_iterator &	access:public	signature:(iter_difference_t<_It> __n)
std::counted_iterator::operator -	/usr/include/c++/10/bits/stl_iterator.h	/^      operator-(iter_difference_t<_It> __n) const$/;"	f	class:std::counted_iterator	typeref:typename:counted_iterator	access:public	signature:(iter_difference_t<_It> __n) const
std::counted_iterator::operator --	/usr/include/c++/10/bits/stl_iterator.h	/^      operator--() requires bidirectional_iterator<_It>$/;"	f	class:std::counted_iterator	typeref:typename:counted_iterator &	access:public	signature:()
std::counted_iterator::operator --	/usr/include/c++/10/bits/stl_iterator.h	/^      operator--(int) requires bidirectional_iterator<_It>$/;"	f	class:std::counted_iterator	typeref:typename:counted_iterator	access:public	signature:(int)
std::counted_iterator::operator -=	/usr/include/c++/10/bits/stl_iterator.h	/^      operator-=(iter_difference_t<_It> __n)$/;"	f	class:std::counted_iterator	typeref:typename:counted_iterator &	access:public	signature:(iter_difference_t<_It> __n)
std::counted_iterator::operator =	/usr/include/c++/10/bits/stl_iterator.h	/^	operator=(const counted_iterator<_It2>& __x)$/;"	f	class:std::counted_iterator	typeref:typename:requires assignable_from<_It &,const _It2 &> counted_iterator &	access:public	signature:(const counted_iterator<_It2> & __x)
std::counted_iterator::operator []	/usr/include/c++/10/bits/stl_iterator.h	/^      operator[](iter_difference_t<_It> __n) const$/;"	f	class:std::counted_iterator	typeref:typename:decltype (auto)	access:public	signature:(iter_difference_t<_It> __n) const
std::crbegin	/usr/include/c++/10/bits/range_access.h	/^    crbegin(const _Container& __cont) -> decltype(std::rbegin(__cont))$/;"	f	namespace:std	typeref:typename:decltype (std::rbegin (__cont))	signature:(const _Container & __cont)
std::crend	/usr/include/c++/10/bits/range_access.h	/^    crend(const _Container& __cont) -> decltype(std::rend(__cont))$/;"	f	namespace:std	typeref:typename:decltype (std::rend (__cont))	signature:(const _Container & __cont)
std::cross_device_link	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      cross_device_link = 			EXDEV,$/;"	e	enum:std::errc	access:public
std::ctype	/usr/include/c++/10/bits/locale_facets.h	/^    class ctype : public __ctype_abstract_base<_CharT>$/;"	c	namespace:std	inherits:__ctype_abstract_base<_CharT>
std::ctype	/usr/include/c++/10/bits/locale_facets.h	/^    class ctype<char> : public locale::facet, public ctype_base$/;"	c	namespace:std	inherits:locale::facet,ctype_base
std::ctype	/usr/include/c++/10/bits/locale_facets.h	/^    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>$/;"	c	namespace:std	inherits:__ctype_abstract_base<wchar_t>
std::ctype::_M_bit	/usr/include/c++/10/bits/locale_facets.h	/^      mask                      _M_bit[16];$/;"	m	class:std::ctype	typeref:typename:mask[16]	access:protected
std::ctype::_M_c_locale_ctype	/usr/include/c++/10/bits/locale_facets.h	/^      __c_locale		_M_c_locale_ctype;$/;"	m	class:std::ctype	typeref:typename:__c_locale	access:protected
std::ctype::_M_convert_to_wmask	/usr/include/c++/10/bits/locale_facets.h	/^      _M_convert_to_wmask(const mask __m) const throw();$/;"	p	class:std::ctype	typeref:typename:__wmask_type	access:protected	signature:(const mask __m) const
std::ctype::_M_del	/usr/include/c++/10/bits/locale_facets.h	/^      bool			_M_del;$/;"	m	class:std::ctype	typeref:typename:bool	access:protected
std::ctype::_M_initialize_ctype	/usr/include/c++/10/bits/locale_facets.h	/^      _M_initialize_ctype() throw();$/;"	p	class:std::ctype	typeref:typename:void	access:protected	signature:()
std::ctype::_M_narrow	/usr/include/c++/10/bits/locale_facets.h	/^      char                      _M_narrow[128];$/;"	m	class:std::ctype	typeref:typename:char[128]	access:protected
std::ctype::_M_narrow	/usr/include/c++/10/bits/locale_facets.h	/^      mutable char		_M_narrow[1 + static_cast<unsigned char>(-1)];$/;"	m	class:std::ctype	typeref:typename:char[]	access:protected
std::ctype::_M_narrow_init	/usr/include/c++/10/bits/locale_facets.h	/^      void _M_narrow_init() const;$/;"	p	class:std::ctype	typeref:typename:void	access:private	signature:() const
std::ctype::_M_narrow_ok	/usr/include/c++/10/bits/locale_facets.h	/^      bool                      _M_narrow_ok;$/;"	m	class:std::ctype	typeref:typename:bool	access:protected
std::ctype::_M_narrow_ok	/usr/include/c++/10/bits/locale_facets.h	/^      mutable char		_M_narrow_ok;	\/\/ 0 uninitialized, 1 init,$/;"	m	class:std::ctype	typeref:typename:char	access:protected
std::ctype::_M_table	/usr/include/c++/10/bits/locale_facets.h	/^      const mask*		_M_table;$/;"	m	class:std::ctype	typeref:typename:const mask *	access:protected
std::ctype::_M_tolower	/usr/include/c++/10/bits/locale_facets.h	/^      __to_type			_M_tolower;$/;"	m	class:std::ctype	typeref:typename:__to_type	access:protected
std::ctype::_M_toupper	/usr/include/c++/10/bits/locale_facets.h	/^      __to_type			_M_toupper;$/;"	m	class:std::ctype	typeref:typename:__to_type	access:protected
std::ctype::_M_widen	/usr/include/c++/10/bits/locale_facets.h	/^      mutable char		_M_widen[1 + static_cast<unsigned char>(-1)];$/;"	m	class:std::ctype	typeref:typename:char[]	access:protected
std::ctype::_M_widen	/usr/include/c++/10/bits/locale_facets.h	/^      wint_t                    _M_widen[1 + static_cast<unsigned char>(-1)];$/;"	m	class:std::ctype	typeref:typename:wint_t[]	access:protected
std::ctype::_M_widen_init	/usr/include/c++/10/bits/locale_facets.h	/^      void _M_widen_init() const;$/;"	p	class:std::ctype	typeref:typename:void	access:private	signature:() const
std::ctype::_M_widen_ok	/usr/include/c++/10/bits/locale_facets.h	/^      mutable char		_M_widen_ok;$/;"	m	class:std::ctype	typeref:typename:char	access:protected
std::ctype::_M_wmask	/usr/include/c++/10/bits/locale_facets.h	/^      __wmask_type              _M_wmask[16];$/;"	m	class:std::ctype	typeref:typename:__wmask_type[16]	access:protected
std::ctype::__wmask_type	/usr/include/c++/10/bits/locale_facets.h	/^      typedef wctype_t		__wmask_type;$/;"	t	class:std::ctype	typeref:typename:wctype_t	access:public
std::ctype::char_type	/usr/include/c++/10/bits/locale_facets.h	/^      typedef _CharT			char_type;$/;"	t	class:std::ctype	typeref:typename:_CharT	access:public
std::ctype::char_type	/usr/include/c++/10/bits/locale_facets.h	/^      typedef char		char_type;$/;"	t	class:std::ctype	typeref:typename:char	access:public
std::ctype::char_type	/usr/include/c++/10/bits/locale_facets.h	/^      typedef wchar_t		char_type;$/;"	t	class:std::ctype	typeref:typename:wchar_t	access:public
std::ctype::classic_table	/usr/include/c++/10/bits/locale_facets.h	/^      classic_table() throw();$/;"	p	class:std::ctype	typeref:typename:const mask *	access:public	signature:()
std::ctype::ctype	/usr/include/c++/10/bits/locale_facets.h	/^      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,$/;"	p	class:std::ctype	access:public	signature:(__c_locale __cloc,const mask * __table=0,bool __del=false,size_t __refs=0)
std::ctype::ctype	/usr/include/c++/10/bits/locale_facets.h	/^      ctype(__c_locale __cloc, size_t __refs = 0);$/;"	p	class:std::ctype	access:public	signature:(__c_locale __cloc,size_t __refs=0)
std::ctype::ctype	/usr/include/c++/10/bits/locale_facets.h	/^      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);$/;"	p	class:std::ctype	access:public	signature:(const mask * __table=0,bool __del=false,size_t __refs=0)
std::ctype::ctype	/usr/include/c++/10/bits/locale_facets.h	/^      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }$/;"	f	class:std::ctype	access:public	signature:(size_t __refs=0)
std::ctype::ctype	/usr/include/c++/10/bits/locale_facets.h	/^      ctype(size_t __refs = 0);$/;"	p	class:std::ctype	access:public	signature:(size_t __refs=0)
std::ctype::do_is	/usr/include/c++/10/bits/locale_facets.h	/^      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;$/;"	p	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(const char_type * __lo,const char_type * __hi,mask * __vec) const
std::ctype::do_is	/usr/include/c++/10/bits/locale_facets.h	/^      do_is(mask __m, char_type __c) const;$/;"	p	class:std::ctype	typeref:typename:bool	access:protected	signature:(mask __m,char_type __c) const
std::ctype::do_narrow	/usr/include/c++/10/bits/locale_facets.h	/^      do_narrow(char_type __c, char __dfault __attribute__((__unused__))) const$/;"	f	class:std::ctype	typeref:typename:char	access:protected	signature:(char_type __c,char __dfault) const
std::ctype::do_narrow	/usr/include/c++/10/bits/locale_facets.h	/^      do_narrow(char_type __c, char __dfault) const;$/;"	p	class:std::ctype	typeref:typename:char	access:protected	signature:(char_type __c,char __dfault) const
std::ctype::do_narrow	/usr/include/c++/10/bits/locale_facets.h	/^      do_narrow(char_type, char __dfault) const;$/;"	p	class:std::ctype	typeref:typename:char	access:protected	signature:(char_type,char __dfault) const
std::ctype::do_narrow	/usr/include/c++/10/bits/locale_facets.h	/^      do_narrow(const char_type* __lo, const char_type* __hi,$/;"	f	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(const char_type * __lo,const char_type * __hi,char __dfault,char * __to) const
std::ctype::do_narrow	/usr/include/c++/10/bits/locale_facets.h	/^      do_narrow(const char_type* __lo, const char_type* __hi,$/;"	p	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(const char_type * __lo,const char_type * __hi,char __dfault,char * __to) const
std::ctype::do_scan_is	/usr/include/c++/10/bits/locale_facets.h	/^      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;$/;"	p	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
std::ctype::do_scan_not	/usr/include/c++/10/bits/locale_facets.h	/^      do_scan_not(mask __m, const char_type* __lo,$/;"	p	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
std::ctype::do_tolower	/usr/include/c++/10/bits/locale_facets.h	/^      do_tolower(char_type __c) const;$/;"	p	class:std::ctype	typeref:typename:char_type	access:protected	signature:(char_type __c) const
std::ctype::do_tolower	/usr/include/c++/10/bits/locale_facets.h	/^      do_tolower(char_type* __lo, const char_type* __hi) const;$/;"	p	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(char_type * __lo,const char_type * __hi) const
std::ctype::do_toupper	/usr/include/c++/10/bits/locale_facets.h	/^      do_toupper(char_type __c) const;$/;"	p	class:std::ctype	typeref:typename:char_type	access:protected	signature:(char_type __c) const
std::ctype::do_toupper	/usr/include/c++/10/bits/locale_facets.h	/^      do_toupper(char_type* __lo, const char_type* __hi) const;$/;"	p	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(char_type * __lo,const char_type * __hi) const
std::ctype::do_widen	/usr/include/c++/10/bits/locale_facets.h	/^      do_widen(char __c) const$/;"	f	class:std::ctype	typeref:typename:char_type	access:protected	signature:(char __c) const
std::ctype::do_widen	/usr/include/c++/10/bits/locale_facets.h	/^      do_widen(char __c) const;$/;"	p	class:std::ctype	typeref:typename:char_type	access:protected	signature:(char __c) const
std::ctype::do_widen	/usr/include/c++/10/bits/locale_facets.h	/^      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;$/;"	p	class:std::ctype	typeref:typename:const char *	access:protected	signature:(const char * __lo,const char * __hi,char_type * __dest) const
std::ctype::do_widen	/usr/include/c++/10/bits/locale_facets.h	/^      do_widen(const char* __lo, const char* __hi, char_type* __to) const$/;"	f	class:std::ctype	typeref:typename:const char *	access:protected	signature:(const char * __lo,const char * __hi,char_type * __to) const
std::ctype::do_widen	/usr/include/c++/10/bits/locale_facets.h	/^      do_widen(const char* __lo, const char* __hi, char_type* __to) const;$/;"	p	class:std::ctype	typeref:typename:const char *	access:protected	signature:(const char * __lo,const char * __hi,char_type * __to) const
std::ctype::id	/usr/include/c++/10/bits/locale_facets.h	/^      static locale::id			id;$/;"	m	class:std::ctype	typeref:typename:locale::id	access:public
std::ctype::id	/usr/include/c++/10/bits/locale_facets.h	/^      static locale::id		id;$/;"	m	class:std::ctype	typeref:typename:locale::id	access:public
std::ctype::id	/usr/include/c++/10/bits/locale_facets.h	/^      static locale::id        id;$/;"	m	class:std::ctype	typeref:typename:locale::id	access:public
std::ctype::is	/usr/include/c++/10/bits/locale_facets.h	/^      is(const char* __lo, const char* __hi, mask* __vec) const;$/;"	p	class:std::ctype	typeref:typename:const char *	access:public	signature:(const char * __lo,const char * __hi,mask * __vec) const
std::ctype::is	/usr/include/c++/10/bits/locale_facets.h	/^      is(mask __m, char __c) const;$/;"	p	class:std::ctype	typeref:typename:bool	access:public	signature:(mask __m,char __c) const
std::ctype::is	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_inline.h	/^  is(const char* __low, const char* __high, mask* __vec) const$/;"	f	class:std::ctype	typeref:typename:const char *	signature:(const char * __low,const char * __high,mask * __vec) const
std::ctype::is	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_inline.h	/^  is(mask __m, char __c) const$/;"	f	class:std::ctype	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION bool	signature:(mask __m,char __c) const
std::ctype::mask	/usr/include/c++/10/bits/locale_facets.h	/^      typedef typename __ctype_abstract_base<_CharT>::mask mask;$/;"	t	class:std::ctype	typeref:typename:__ctype_abstract_base<_CharT>::mask	access:public
std::ctype::narrow	/usr/include/c++/10/bits/locale_facets.h	/^      narrow(char_type __c, char __dfault) const$/;"	f	class:std::ctype	typeref:typename:char	access:public	signature:(char_type __c,char __dfault) const
std::ctype::narrow	/usr/include/c++/10/bits/locale_facets.h	/^      narrow(const char_type* __lo, const char_type* __hi,$/;"	f	class:std::ctype	typeref:typename:const char_type *	access:public	signature:(const char_type * __lo,const char_type * __hi,char __dfault,char * __to) const
std::ctype::scan_is	/usr/include/c++/10/bits/locale_facets.h	/^      scan_is(mask __m, const char* __lo, const char* __hi) const;$/;"	p	class:std::ctype	typeref:typename:const char *	access:public	signature:(mask __m,const char * __lo,const char * __hi) const
std::ctype::scan_is	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_inline.h	/^  scan_is(mask __m, const char* __low, const char* __high) const$/;"	f	class:std::ctype	typeref:typename:const char *	signature:(mask __m,const char * __low,const char * __high) const
std::ctype::scan_not	/usr/include/c++/10/bits/locale_facets.h	/^      scan_not(mask __m, const char* __lo, const char* __hi) const;$/;"	p	class:std::ctype	typeref:typename:const char *	access:public	signature:(mask __m,const char * __lo,const char * __hi) const
std::ctype::scan_not	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_inline.h	/^  scan_not(mask __m, const char* __low, const char* __high) const$/;"	f	class:std::ctype	typeref:typename:const char *	signature:(mask __m,const char * __low,const char * __high) const
std::ctype::table	/usr/include/c++/10/bits/locale_facets.h	/^      table() const throw()$/;"	f	class:std::ctype	typeref:typename:const mask *	access:public	signature:() const
std::ctype::table_size	/usr/include/c++/10/bits/locale_facets.h	/^      static const size_t      table_size = 1 + static_cast<unsigned char>(-1);$/;"	m	class:std::ctype	typeref:typename:const size_t	access:public
std::ctype::tolower	/usr/include/c++/10/bits/locale_facets.h	/^      tolower(char_type __c) const$/;"	f	class:std::ctype	typeref:typename:char_type	access:public	signature:(char_type __c) const
std::ctype::tolower	/usr/include/c++/10/bits/locale_facets.h	/^      tolower(char_type* __lo, const char_type* __hi) const$/;"	f	class:std::ctype	typeref:typename:const char_type *	access:public	signature:(char_type * __lo,const char_type * __hi) const
std::ctype::toupper	/usr/include/c++/10/bits/locale_facets.h	/^      toupper(char_type *__lo, const char_type* __hi) const$/;"	f	class:std::ctype	typeref:typename:const char_type *	access:public	signature:(char_type * __lo,const char_type * __hi) const
std::ctype::toupper	/usr/include/c++/10/bits/locale_facets.h	/^      toupper(char_type __c) const$/;"	f	class:std::ctype	typeref:typename:char_type	access:public	signature:(char_type __c) const
std::ctype::widen	/usr/include/c++/10/bits/locale_facets.h	/^      widen(char __c) const$/;"	f	class:std::ctype	typeref:typename:char_type	access:public	signature:(char __c) const
std::ctype::widen	/usr/include/c++/10/bits/locale_facets.h	/^      widen(const char* __lo, const char* __hi, char_type* __to) const$/;"	f	class:std::ctype	typeref:typename:const char *	access:public	signature:(const char * __lo,const char * __hi,char_type * __to) const
std::ctype::~ctype	/usr/include/c++/10/bits/locale_facets.h	/^      ~ctype();$/;"	p	class:std::ctype	access:protected	signature:()
std::ctype<_CharT>::id	/usr/include/c++/10/bits/locale_facets.h	/^    locale::id ctype<_CharT>::id;$/;"	m	class:std::ctype<_CharT>	typeref:typename:locale::id
std::ctype_base	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h	/^  struct ctype_base$/;"	s	namespace:std
std::ctype_base::__to_type	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h	/^    typedef const int* 		__to_type;$/;"	t	struct:std::ctype_base	typeref:typename:const int *	access:public
std::ctype_base::alnum	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h	/^    static const mask alnum 	= _ISalpha | _ISdigit;$/;"	m	struct:std::ctype_base	typeref:typename:const mask	access:public
std::ctype_base::alpha	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h	/^    static const mask alpha 	= _ISalpha;$/;"	m	struct:std::ctype_base	typeref:typename:const mask	access:public
std::ctype_base::blank	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h	/^    static const mask blank	= _ISblank;$/;"	m	struct:std::ctype_base	typeref:typename:const mask	access:public
std::ctype_base::cntrl	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h	/^    static const mask cntrl 	= _IScntrl;$/;"	m	struct:std::ctype_base	typeref:typename:const mask	access:public
std::ctype_base::digit	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h	/^    static const mask digit 	= _ISdigit;$/;"	m	struct:std::ctype_base	typeref:typename:const mask	access:public
std::ctype_base::graph	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h	/^    static const mask graph 	= _ISalpha | _ISdigit | _ISpunct;$/;"	m	struct:std::ctype_base	typeref:typename:const mask	access:public
std::ctype_base::lower	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h	/^    static const mask lower 	= _ISlower;$/;"	m	struct:std::ctype_base	typeref:typename:const mask	access:public
std::ctype_base::mask	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h	/^    typedef unsigned short 	mask;$/;"	t	struct:std::ctype_base	typeref:typename:unsigned short	access:public
std::ctype_base::print	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h	/^    static const mask print 	= _ISprint;$/;"	m	struct:std::ctype_base	typeref:typename:const mask	access:public
std::ctype_base::punct	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h	/^    static const mask punct 	= _ISpunct;$/;"	m	struct:std::ctype_base	typeref:typename:const mask	access:public
std::ctype_base::space	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h	/^    static const mask space 	= _ISspace;$/;"	m	struct:std::ctype_base	typeref:typename:const mask	access:public
std::ctype_base::upper	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h	/^    static const mask upper    	= _ISupper;$/;"	m	struct:std::ctype_base	typeref:typename:const mask	access:public
std::ctype_base::xdigit	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h	/^    static const mask xdigit 	= _ISxdigit;$/;"	m	struct:std::ctype_base	typeref:typename:const mask	access:public
std::ctype_byname	/usr/include/c++/10/bits/locale_facets.h	/^    class ctype_byname : public ctype<_CharT>$/;"	c	namespace:std	inherits:ctype<_CharT>
std::ctype_byname	/usr/include/c++/10/bits/locale_facets.h	/^    class ctype_byname<char> : public ctype<char>$/;"	c	namespace:std	inherits:ctype<char>
std::ctype_byname	/usr/include/c++/10/bits/locale_facets.h	/^    class ctype_byname<wchar_t> : public ctype<wchar_t>$/;"	c	namespace:std	inherits:ctype<wchar_t>
std::ctype_byname::ctype_byname	/usr/include/c++/10/bits/locale_facets.h	/^      ctype_byname(const char* __s, size_t __refs = 0);$/;"	p	class:std::ctype_byname	access:public	signature:(const char * __s,size_t __refs=0)
std::ctype_byname::ctype_byname	/usr/include/c++/10/bits/locale_facets.h	/^      ctype_byname(const string& __s, size_t __refs = 0)$/;"	f	class:std::ctype_byname	access:public	signature:(const string & __s,size_t __refs=0)
std::ctype_byname::ctype_byname	/usr/include/c++/10/bits/locale_facets.h	/^      ctype_byname(const string& __s, size_t __refs = 0);$/;"	p	class:std::ctype_byname	access:public	signature:(const string & __s,size_t __refs=0)
std::ctype_byname::mask	/usr/include/c++/10/bits/locale_facets.h	/^      typedef typename ctype<_CharT>::mask  mask;$/;"	t	class:std::ctype_byname	typeref:typename:ctype<_CharT>::mask	access:public
std::ctype_byname::~ctype_byname	/usr/include/c++/10/bits/locale_facets.h	/^      ~ctype_byname() { }$/;"	f	class:std::ctype_byname	access:protected	signature:()
std::ctype_byname::~ctype_byname	/usr/include/c++/10/bits/locale_facets.h	/^      ~ctype_byname();$/;"	p	class:std::ctype_byname	access:protected	signature:()
std::current_exception	/usr/include/c++/10/bits/exception_ptr.h	/^  exception_ptr current_exception() _GLIBCXX_USE_NOEXCEPT;$/;"	p	namespace:std	typeref:typename:exception_ptr	signature:()
std::data	/usr/include/c++/10/bits/range_access.h	/^    data(_Container& __cont) noexcept(noexcept(__cont.data()))$/;"	f	namespace:std	typeref:typename:auto	signature:(_Container & __cont)
std::data	/usr/include/c++/10/bits/range_access.h	/^    data(_Tp (&__array)[_Nm]) noexcept$/;"	f	namespace:std	typeref:typename:_Tp *	signature:(_Tp (& __array)[_Nm])
std::data	/usr/include/c++/10/bits/range_access.h	/^    data(const _Container& __cont) noexcept(noexcept(__cont.data()))$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Container & __cont)
std::data	/usr/include/c++/10/bits/range_access.h	/^    data(initializer_list<_Tp> __il) noexcept$/;"	f	namespace:std	typeref:typename:const _Tp *	signature:(initializer_list<_Tp> __il)
std::dec	/usr/include/c++/10/bits/ios_base.h	/^  dec(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::default_sentinel	/usr/include/c++/10/bits/iterator_concepts.h	/^  inline constexpr default_sentinel_t default_sentinel{};$/;"	v	namespace:std	typeref:typename:default_sentinel_t
std::default_sentinel_t	/usr/include/c++/10/bits/iterator_concepts.h	/^  struct default_sentinel_t { };$/;"	s	namespace:std
std::defaultfloat	/usr/include/c++/10/bits/ios_base.h	/^  defaultfloat(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::destination_address_required	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      destination_address_required = 		EDESTADDRREQ,$/;"	e	enum:std::errc	access:public
std::destroy	/usr/include/c++/10/bits/stl_construct.h	/^    destroy(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_ForwardIterator __first,_ForwardIterator __last)
std::destroy_at	/usr/include/c++/10/bits/stl_construct.h	/^    destroy_at(_Tp* __location)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION _GLIBCXX20_CONSTEXPR void	signature:(_Tp * __location)
std::destroy_n	/usr/include/c++/10/bits/stl_construct.h	/^    destroy_n(_ForwardIterator __first, _Size __count)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_ForwardIterator __first,_Size __count)
std::device_or_resource_busy	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      device_or_resource_busy = 		EBUSY,$/;"	e	enum:std::errc	access:public
std::directory_not_empty	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      directory_not_empty = 			ENOTEMPTY,$/;"	e	enum:std::errc	access:public
std::disable_sized_sentinel_for	/usr/include/c++/10/bits/iterator_concepts.h	/^    inline constexpr bool disable_sized_sentinel_for = false;$/;"	v	namespace:std	typeref:typename:bool
std::distance	/usr/include/c++/10/bits/stl_iterator_base_funcs.h	/^    distance(_InputIterator __first, _InputIterator __last)$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR typename iterator_traits<_InputIterator>::difference_type	signature:(_InputIterator __first,_InputIterator __last)
std::divides	/usr/include/c++/10/bits/stl_function.h	/^    struct divides : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
std::divides	/usr/include/c++/10/bits/stl_function.h	/^    struct divides<void>$/;"	s	namespace:std
std::divides::is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::divides	typeref:typename:__is_transparent	access:public
std::divides::operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::divides	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
std::divides::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::divides	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::empty	/usr/include/c++/10/bits/range_access.h	/^    empty(const _Container& __cont) noexcept(noexcept(__cont.empty()))$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Container & __cont)
std::empty	/usr/include/c++/10/bits/range_access.h	/^    empty(const _Tp (&)[_Nm]) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(const _Tp (&)[_Nm])
std::empty	/usr/include/c++/10/bits/range_access.h	/^    empty(initializer_list<_Tp> __il) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(initializer_list<_Tp> __il)
std::end	/usr/include/c++/10/bits/range_access.h	/^    end(_Container& __cont) -> decltype(__cont.end())$/;"	f	namespace:std	typeref:typename:decltype (__cont.end ())	signature:(_Container & __cont)
std::end	/usr/include/c++/10/bits/range_access.h	/^    end(_Tp (&__arr)[_Nm])$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp *	signature:(_Tp (& __arr)[_Nm])
std::end	/usr/include/c++/10/bits/range_access.h	/^    end(const _Container& __cont) -> decltype(__cont.end())$/;"	f	namespace:std	typeref:typename:decltype (__cont.end ())	signature:(const _Container & __cont)
std::end	/usr/include/c++/10/bits/range_access.h	/^  template<typename _Tp> _Tp* end(valarray<_Tp>&);$/;"	p	namespace:std	typeref:typename:_Tp *	signature:(valarray<_Tp> &)
std::end	/usr/include/c++/10/bits/range_access.h	/^  template<typename _Tp> const _Tp* end(const valarray<_Tp>&);$/;"	p	namespace:std	typeref:typename:const _Tp *	signature:(const valarray<_Tp> &)
std::equal	/usr/include/c++/10/bits/stl_algobase.h	/^    equal(_II1 __first1, _II1 __last1, _II2 __first2)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_ALGO _GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2)
std::equal	/usr/include/c++/10/bits/stl_algobase.h	/^    equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2)
std::equal	/usr/include/c++/10/bits/stl_algobase.h	/^    equal(_IIter1 __first1, _IIter1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_IIter1 __first1,_IIter1 __last1,_IIter2 __first2,_BinaryPredicate __binary_pred)
std::equal	/usr/include/c++/10/bits/stl_algobase.h	/^    equal(_IIter1 __first1, _IIter1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_IIter1 __first1,_IIter1 __last1,_IIter2 __first2,_IIter2 __last2,_BinaryPredicate __binary_pred)
std::equal_to	/usr/include/c++/10/bits/stl_function.h	/^    struct equal_to : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
std::equal_to	/usr/include/c++/10/bits/stl_function.h	/^    struct equal_to<void>$/;"	s	namespace:std
std::equal_to::is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::equal_to	typeref:typename:__is_transparent	access:public
std::equal_to::operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::equal_to	typeref:typename:auto	access:public	signature:(_Tp && __t,_Up && __u) const
std::equal_to::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::equal_to	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::errc	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^  enum class errc$/;"	g	namespace:std
std::exception	/usr/include/c++/10/bits/exception.h	/^  class exception$/;"	c	namespace:std
std::exception::exception	/usr/include/c++/10/bits/exception.h	/^    exception() _GLIBCXX_NOTHROW { }$/;"	f	class:std::exception	access:public	signature:()
std::exception::exception	/usr/include/c++/10/bits/exception.h	/^    exception(const exception&) = default;$/;"	p	class:std::exception	access:public	signature:(const exception &)
std::exception::exception	/usr/include/c++/10/bits/exception.h	/^    exception(exception&&) = default;$/;"	p	class:std::exception	access:public	signature:(exception &&)
std::exception::operator =	/usr/include/c++/10/bits/exception.h	/^    exception& operator=(const exception&) = default;$/;"	p	class:std::exception	typeref:typename:exception &	access:public	signature:(const exception &)
std::exception::operator =	/usr/include/c++/10/bits/exception.h	/^    exception& operator=(exception&&) = default;$/;"	p	class:std::exception	typeref:typename:exception &	access:public	signature:(exception &&)
std::exception::what	/usr/include/c++/10/bits/exception.h	/^    what() const _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_NOTHROW;$/;"	p	class:std::exception	typeref:typename:const char *	access:public	signature:() const
std::exception::~exception	/usr/include/c++/10/bits/exception.h	/^    virtual ~exception() _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_NOTHROW;$/;"	p	class:std::exception	access:public	signature:()
std::executable_format_error	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      executable_format_error = 		ENOEXEC,$/;"	e	enum:std::errc	access:public
std::file_exists	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      file_exists = 	       			EEXIST,$/;"	e	enum:std::errc	access:public
std::file_too_large	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      file_too_large = 				EFBIG,$/;"	e	enum:std::errc	access:public
std::filename_too_long	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      filename_too_long = 			ENAMETOOLONG,$/;"	e	enum:std::errc	access:public
std::fill	/usr/include/c++/10/bits/stl_algobase.h	/^    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __value)
std::fill_n	/usr/include/c++/10/bits/stl_algobase.h	/^    fill_n(_OI __first, _Size __n, const _Tp& __value)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	signature:(_OI __first,_Size __n,const _Tp & __value)
std::find	/usr/include/c++/10/bits/streambuf_iterator.h	/^    find(istreambuf_iterator<_CharT> __first,$/;"	f	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,istreambuf_iterator<_CharT>>::__type	signature:(istreambuf_iterator<_CharT> __first,istreambuf_iterator<_CharT> __last,const _CharT & __val)
std::fixed	/usr/include/c++/10/bits/ios_base.h	/^  fixed(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::forward	/usr/include/c++/10/bits/move.h	/^    forward(typename std::remove_reference<_Tp>::type& __t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION _Tp &&	signature:(typename std::remove_reference<_Tp>::type & __t)
std::forward	/usr/include/c++/10/bits/move.h	/^    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept$/;"	f	namespace:std	typeref:typename:_Tp &&	signature:(typename std::remove_reference<_Tp>::type && __t)
std::forward_iterator_tag	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^  struct forward_iterator_tag : public input_iterator_tag { };$/;"	s	namespace:std	inherits:input_iterator_tag
std::fpos	/usr/include/c++/10/bits/postypes.h	/^    class fpos$/;"	c	namespace:std
std::fpos::_M_off	/usr/include/c++/10/bits/postypes.h	/^      streamoff	                _M_off;$/;"	m	class:std::fpos	typeref:typename:streamoff	access:private
std::fpos::_M_state	/usr/include/c++/10/bits/postypes.h	/^      _StateT			_M_state;$/;"	m	class:std::fpos	typeref:typename:_StateT	access:private
std::fpos::fpos	/usr/include/c++/10/bits/postypes.h	/^      fpos()$/;"	f	class:std::fpos	access:public	signature:()
std::fpos::fpos	/usr/include/c++/10/bits/postypes.h	/^      fpos(const fpos&) = default;$/;"	p	class:std::fpos	access:public	signature:(const fpos &)
std::fpos::fpos	/usr/include/c++/10/bits/postypes.h	/^      fpos(streamoff __off)$/;"	f	class:std::fpos	access:public	signature:(streamoff __off)
std::fpos::operator +	/usr/include/c++/10/bits/postypes.h	/^      operator+(streamoff __off) const$/;"	f	class:std::fpos	typeref:typename:fpos	access:public	signature:(streamoff __off) const
std::fpos::operator +=	/usr/include/c++/10/bits/postypes.h	/^      operator+=(streamoff __off)$/;"	f	class:std::fpos	typeref:typename:fpos &	access:public	signature:(streamoff __off)
std::fpos::operator -	/usr/include/c++/10/bits/postypes.h	/^      operator-(const fpos& __other) const$/;"	f	class:std::fpos	typeref:typename:streamoff	access:public	signature:(const fpos & __other) const
std::fpos::operator -	/usr/include/c++/10/bits/postypes.h	/^      operator-(streamoff __off) const$/;"	f	class:std::fpos	typeref:typename:fpos	access:public	signature:(streamoff __off) const
std::fpos::operator -=	/usr/include/c++/10/bits/postypes.h	/^      operator-=(streamoff __off)$/;"	f	class:std::fpos	typeref:typename:fpos &	access:public	signature:(streamoff __off)
std::fpos::operator =	/usr/include/c++/10/bits/postypes.h	/^      fpos& operator=(const fpos&) = default;$/;"	p	class:std::fpos	typeref:typename:fpos &	access:public	signature:(const fpos &)
std::fpos::operator streamoff	/usr/include/c++/10/bits/postypes.h	/^      operator streamoff() const { return _M_off; }$/;"	f	class:std::fpos	access:public	signature:() const
std::fpos::state	/usr/include/c++/10/bits/postypes.h	/^      state() const$/;"	f	class:std::fpos	typeref:typename:_StateT	access:public	signature:() const
std::fpos::state	/usr/include/c++/10/bits/postypes.h	/^      state(_StateT __st)$/;"	f	class:std::fpos	typeref:typename:void	access:public	signature:(_StateT __st)
std::fpos::~fpos	/usr/include/c++/10/bits/postypes.h	/^      ~fpos() = default;$/;"	p	class:std::fpos	access:public	signature:()
std::front_insert_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    class front_insert_iterator$/;"	c	namespace:std	inherits:iterator<output_iterator_tag,void,void,void,void>
std::front_insert_iterator::container	/usr/include/c++/10/bits/stl_iterator.h	/^      _Container* container;$/;"	m	class:std::front_insert_iterator	typeref:typename:_Container *	access:protected
std::front_insert_iterator::container_type	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef _Container          container_type;$/;"	t	class:std::front_insert_iterator	typeref:typename:_Container	access:public
std::front_insert_iterator::difference_type	/usr/include/c++/10/bits/stl_iterator.h	/^      using difference_type = ptrdiff_t;$/;"	t	class:std::front_insert_iterator	typeref:typename:ptrdiff_t	access:public
std::front_insert_iterator::front_insert_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^      constexpr front_insert_iterator() noexcept : container(nullptr) { }$/;"	f	class:std::front_insert_iterator	access:public	signature:()
std::front_insert_iterator::front_insert_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^      front_insert_iterator(_Container& __x)$/;"	f	class:std::front_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Container & __x)
std::front_insert_iterator::operator *	/usr/include/c++/10/bits/stl_iterator.h	/^      operator*()$/;"	f	class:std::front_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR front_insert_iterator &	access:public	signature:()
std::front_insert_iterator::operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^      operator++()$/;"	f	class:std::front_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR front_insert_iterator &	access:public	signature:()
std::front_insert_iterator::operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::front_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR front_insert_iterator	access:public	signature:(int)
std::front_insert_iterator::operator =	/usr/include/c++/10/bits/stl_iterator.h	/^      operator=(const typename _Container::value_type& __value)$/;"	f	class:std::front_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR front_insert_iterator &	access:public	signature:(const typename _Container::value_type & __value)
std::front_insert_iterator::operator =	/usr/include/c++/10/bits/stl_iterator.h	/^      operator=(typename _Container::const_reference __value)$/;"	f	class:std::front_insert_iterator	typeref:typename:front_insert_iterator &	access:public	signature:(typename _Container::const_reference __value)
std::front_insert_iterator::operator =	/usr/include/c++/10/bits/stl_iterator.h	/^      operator=(typename _Container::value_type&& __value)$/;"	f	class:std::front_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR front_insert_iterator &	access:public	signature:(typename _Container::value_type && __value)
std::front_inserter	/usr/include/c++/10/bits/stl_iterator.h	/^    front_inserter(_Container& __x)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR front_insert_iterator<_Container>	signature:(_Container & __x)
std::function_not_supported	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      function_not_supported = 			ENOSYS,$/;"	e	enum:std::errc	access:public
std::getline	/usr/include/c++/10/bits/basic_string.h	/^    getline(basic_istream<_CharT, _Traits>& __is,$/;"	f	namespace:std	typeref:typename:basic_istream<_CharT,_Traits> &	signature:(basic_istream<_CharT,_Traits> & __is,basic_string<_CharT,_Traits,_Alloc> & __str)
std::getline	/usr/include/c++/10/bits/basic_string.h	/^    getline(basic_istream<_CharT, _Traits>& __is,$/;"	p	namespace:std	typeref:typename:basic_istream<_CharT,_Traits> &	signature:(basic_istream<_CharT,_Traits> & __is,basic_string<_CharT,_Traits,_Alloc> & __str,_CharT __delim)
std::getline	/usr/include/c++/10/bits/basic_string.h	/^    getline(basic_istream<_CharT, _Traits>&& __is,$/;"	f	namespace:std	typeref:typename:basic_istream<_CharT,_Traits> &	signature:(basic_istream<_CharT,_Traits> && __is,basic_string<_CharT,_Traits,_Alloc> & __str)
std::getline	/usr/include/c++/10/bits/basic_string.h	/^    getline(basic_istream<_CharT, _Traits>&& __is,$/;"	f	namespace:std	typeref:typename:basic_istream<_CharT,_Traits> &	signature:(basic_istream<_CharT,_Traits> && __is,basic_string<_CharT,_Traits,_Alloc> & __str,_CharT __delim)
std::getline	/usr/include/c++/10/bits/basic_string.h	/^    getline(basic_istream<char>& __in, basic_string<char>& __str,$/;"	p	namespace:std	typeref:typename:basic_istream<char> &	signature:(basic_istream<char> & __in,basic_string<char> & __str,char __delim)
std::getline	/usr/include/c++/10/bits/basic_string.h	/^    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,$/;"	p	namespace:std	typeref:typename:basic_istream<wchar_t> &	signature:(basic_istream<wchar_t> & __in,basic_string<wchar_t> & __str,wchar_t __delim)
std::greater	/usr/include/c++/10/bits/stl_function.h	/^    struct greater : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
std::greater	/usr/include/c++/10/bits/stl_function.h	/^    struct greater<_Tp*> : public binary_function<_Tp*, _Tp*, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp*,_Tp*,bool>
std::greater	/usr/include/c++/10/bits/stl_function.h	/^    struct greater<void>$/;"	s	namespace:std
std::greater::_S_cmp	/usr/include/c++/10/bits/stl_function.h	/^	_S_cmp(_Tp&& __t, _Up&& __u, false_type)$/;"	f	struct:std::greater	typeref:typename:decltype (auto)	access:private	signature:(_Tp && __t,_Up && __u,false_type)
std::greater::_S_cmp	/usr/include/c++/10/bits/stl_function.h	/^	_S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept$/;"	f	struct:std::greater	typeref:typename:bool	access:private	signature:(_Tp && __t,_Up && __u,true_type)
std::greater::__not_overloaded	/usr/include/c++/10/bits/stl_function.h	/^	struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };$/;"	s	struct:std::greater	inherits:__not_overloaded2<_Tp,_Up>	access:private
std::greater::__not_overloaded	/usr/include/c++/10/bits/stl_function.h	/^	struct __not_overloaded<_Tp, _Up, __void_t<$/;"	s	struct:std::greater	inherits:false_type	access:private
std::greater::__not_overloaded2	/usr/include/c++/10/bits/stl_function.h	/^	struct __not_overloaded2 : true_type { };$/;"	s	struct:std::greater	inherits:true_type	access:private
std::greater::__not_overloaded2	/usr/include/c++/10/bits/stl_function.h	/^	struct __not_overloaded2<_Tp, _Up, __void_t<$/;"	s	struct:std::greater	inherits:false_type	access:private
std::greater::__ptr_cmp	/usr/include/c++/10/bits/stl_function.h	/^	using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,$/;"	t	struct:std::greater	typeref:typename:__and_<__not_overloaded<_Tp,_Up>,is_convertible<_Tp,const volatile void * >,is_convertible<_Up,const volatile void * >>	access:private
std::greater::is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::greater	typeref:typename:__is_transparent	access:public
std::greater::operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::greater	typeref:typename:auto	access:public	signature:(_Tp && __t,_Up && __u) const
std::greater::operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp* __t, _Up* __u) const noexcept$/;"	f	struct:std::greater	typeref:typename:bool	access:public	signature:(_Tp * __t,_Up * __u) const
std::greater::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW$/;"	f	struct:std::greater	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(_Tp * __x,_Tp * __y) const
std::greater::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::greater	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::greater_equal	/usr/include/c++/10/bits/stl_function.h	/^    struct greater_equal : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
std::greater_equal	/usr/include/c++/10/bits/stl_function.h	/^    struct greater_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp*,_Tp*,bool>
std::greater_equal	/usr/include/c++/10/bits/stl_function.h	/^    struct greater_equal<void>$/;"	s	namespace:std
std::greater_equal::_S_cmp	/usr/include/c++/10/bits/stl_function.h	/^	_S_cmp(_Tp&& __t, _Up&& __u, false_type)$/;"	f	struct:std::greater_equal	typeref:typename:decltype (auto)	access:private	signature:(_Tp && __t,_Up && __u,false_type)
std::greater_equal::_S_cmp	/usr/include/c++/10/bits/stl_function.h	/^	_S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept$/;"	f	struct:std::greater_equal	typeref:typename:bool	access:private	signature:(_Tp && __t,_Up && __u,true_type)
std::greater_equal::__not_overloaded	/usr/include/c++/10/bits/stl_function.h	/^	struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };$/;"	s	struct:std::greater_equal	inherits:__not_overloaded2<_Tp,_Up>	access:private
std::greater_equal::__not_overloaded	/usr/include/c++/10/bits/stl_function.h	/^	struct __not_overloaded<_Tp, _Up, __void_t<$/;"	s	struct:std::greater_equal	inherits:false_type	access:private
std::greater_equal::__not_overloaded2	/usr/include/c++/10/bits/stl_function.h	/^	struct __not_overloaded2 : true_type { };$/;"	s	struct:std::greater_equal	inherits:true_type	access:private
std::greater_equal::__not_overloaded2	/usr/include/c++/10/bits/stl_function.h	/^	struct __not_overloaded2<_Tp, _Up, __void_t<$/;"	s	struct:std::greater_equal	inherits:false_type	access:private
std::greater_equal::__ptr_cmp	/usr/include/c++/10/bits/stl_function.h	/^	using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,$/;"	t	struct:std::greater_equal	typeref:typename:__and_<__not_overloaded<_Tp,_Up>,is_convertible<_Tp,const volatile void * >,is_convertible<_Up,const volatile void * >>	access:private
std::greater_equal::is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::greater_equal	typeref:typename:__is_transparent	access:public
std::greater_equal::operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::greater_equal	typeref:typename:auto	access:public	signature:(_Tp && __t,_Up && __u) const
std::greater_equal::operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp* __t, _Up* __u) const noexcept$/;"	f	struct:std::greater_equal	typeref:typename:bool	access:public	signature:(_Tp * __t,_Up * __u) const
std::greater_equal::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW$/;"	f	struct:std::greater_equal	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(_Tp * __x,_Tp * __y) const
std::greater_equal::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::greater_equal	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::has_facet	/usr/include/c++/10/bits/localefwd.h	/^    has_facet(const locale&) throw();$/;"	p	namespace:std	typeref:typename:bool	signature:(const locale &)
std::hash	/usr/include/c++/10/bits/basic_string.h	/^    struct hash<string>$/;"	s	namespace:std	inherits:__hash_base<size_t,string>
std::hash	/usr/include/c++/10/bits/basic_string.h	/^    struct hash<u16string>$/;"	s	namespace:std	inherits:__hash_base<size_t,u16string>
std::hash	/usr/include/c++/10/bits/basic_string.h	/^    struct hash<u32string>$/;"	s	namespace:std	inherits:__hash_base<size_t,u32string>
std::hash	/usr/include/c++/10/bits/basic_string.h	/^    struct hash<u8string>$/;"	s	namespace:std	inherits:__hash_base<size_t,u8string>
std::hash	/usr/include/c++/10/bits/basic_string.h	/^    struct hash<wstring>$/;"	s	namespace:std	inherits:__hash_base<size_t,wstring>
std::hash	/usr/include/c++/10/bits/functional_hash.h	/^    struct hash : __hash_enum<_Tp>$/;"	s	namespace:std	inherits:__hash_enum<_Tp>
std::hash	/usr/include/c++/10/bits/functional_hash.h	/^    struct hash<_Tp*> : public __hash_base<size_t, _Tp*>$/;"	s	namespace:std	inherits:__hash_base<size_t,_Tp*>
std::hash	/usr/include/c++/10/bits/functional_hash.h	/^    struct hash<double> : public __hash_base<size_t, double>$/;"	s	namespace:std	inherits:__hash_base<size_t,double>
std::hash	/usr/include/c++/10/bits/functional_hash.h	/^    struct hash<float> : public __hash_base<size_t, float>$/;"	s	namespace:std	inherits:__hash_base<size_t,float>
std::hash	/usr/include/c++/10/bits/functional_hash.h	/^    struct hash<long double>$/;"	s	namespace:std	inherits:__hash_base<size_t,longdouble>
std::hash	/usr/include/c++/10/bits/functional_hash.h	/^    struct hash<nullptr_t> : public __hash_base<size_t, nullptr_t>$/;"	s	namespace:std	inherits:__hash_base<size_t,nullptr_t>
std::hash::operator ()	/usr/include/c++/10/bits/basic_string.h	/^      operator()(const string& __s) const noexcept$/;"	f	struct:std::hash	typeref:typename:size_t	access:public	signature:(const string & __s) const
std::hash::operator ()	/usr/include/c++/10/bits/basic_string.h	/^      operator()(const u16string& __s) const noexcept$/;"	f	struct:std::hash	typeref:typename:size_t	access:public	signature:(const u16string & __s) const
std::hash::operator ()	/usr/include/c++/10/bits/basic_string.h	/^      operator()(const u32string& __s) const noexcept$/;"	f	struct:std::hash	typeref:typename:size_t	access:public	signature:(const u32string & __s) const
std::hash::operator ()	/usr/include/c++/10/bits/basic_string.h	/^      operator()(const u8string& __s) const noexcept$/;"	f	struct:std::hash	typeref:typename:size_t	access:public	signature:(const u8string & __s) const
std::hash::operator ()	/usr/include/c++/10/bits/basic_string.h	/^      operator()(const wstring& __s) const noexcept$/;"	f	struct:std::hash	typeref:typename:size_t	access:public	signature:(const wstring & __s) const
std::hash::operator ()	/usr/include/c++/10/bits/functional_hash.h	/^      operator()(_Tp* __p) const noexcept$/;"	f	struct:std::hash	typeref:typename:size_t	access:public	signature:(_Tp * __p) const
std::hash::operator ()	/usr/include/c++/10/bits/functional_hash.h	/^      operator()(double __val) const noexcept$/;"	f	struct:std::hash	typeref:typename:size_t	access:public	signature:(double __val) const
std::hash::operator ()	/usr/include/c++/10/bits/functional_hash.h	/^      operator()(float __val) const noexcept$/;"	f	struct:std::hash	typeref:typename:size_t	access:public	signature:(float __val) const
std::hash::operator ()	/usr/include/c++/10/bits/functional_hash.h	/^      operator()(long double __val) const noexcept;$/;"	p	struct:std::hash	typeref:typename:_GLIBCXX_PURE size_t	access:public	signature:(long double __val) const
std::hash::operator ()	/usr/include/c++/10/bits/functional_hash.h	/^      operator()(nullptr_t) const noexcept$/;"	f	struct:std::hash	typeref:typename:size_t	access:public	signature:(nullptr_t) const
std::hex	/usr/include/c++/10/bits/ios_base.h	/^  hex(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::hexfloat	/usr/include/c++/10/bits/ios_base.h	/^  hexfloat(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::host_unreachable	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      host_unreachable = 			EHOSTUNREACH,$/;"	e	enum:std::errc	access:public
std::identifier_removed	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      identifier_removed = 			EIDRM,$/;"	e	enum:std::errc	access:public
std::identity	/usr/include/c++/10/bits/range_cmp.h	/^  struct identity$/;"	s	namespace:std
std::identity::is_transparent	/usr/include/c++/10/bits/range_cmp.h	/^    using is_transparent = __is_transparent;$/;"	t	struct:std::identity	typeref:typename:__is_transparent	access:public
std::identity::operator ()	/usr/include/c++/10/bits/range_cmp.h	/^      operator()(_Tp&& __t) const noexcept$/;"	f	struct:std::identity	typeref:typename:_Tp &&	access:public	signature:(_Tp && __t) const
std::illegal_byte_sequence	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      illegal_byte_sequence = 			EILSEQ,$/;"	e	enum:std::errc	access:public
std::inappropriate_io_control_operation	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      inappropriate_io_control_operation = 	ENOTTY,$/;"	e	enum:std::errc	access:public
std::incrementable_traits	/usr/include/c++/10/bits/iterator_concepts.h	/^    struct incrementable_traits<_Tp*>$/;"	s	namespace:std
std::incrementable_traits	/usr/include/c++/10/bits/iterator_concepts.h	/^    struct incrementable_traits<_Tp>$/;"	s	namespace:std
std::incrementable_traits	/usr/include/c++/10/bits/iterator_concepts.h	/^    struct incrementable_traits<__int128>$/;"	s	namespace:std
std::incrementable_traits	/usr/include/c++/10/bits/iterator_concepts.h	/^    struct incrementable_traits<const _Iter>$/;"	s	namespace:std	inherits:incrementable_traits<_Iter>
std::incrementable_traits	/usr/include/c++/10/bits/iterator_concepts.h	/^    struct incrementable_traits<projected<_Iter, _Proj>>$/;"	s	namespace:std
std::incrementable_traits	/usr/include/c++/10/bits/iterator_concepts.h	/^    struct incrementable_traits<unsigned __int128>$/;"	s	namespace:std
std::incrementable_traits	/usr/include/c++/10/bits/iterator_concepts.h	/^  template<typename> struct incrementable_traits { };$/;"	s	namespace:std
std::incrementable_traits	/usr/include/c++/10/bits/stl_iterator.h	/^    struct incrementable_traits<common_iterator<_It, _Sent>>$/;"	s	namespace:std
std::incrementable_traits	/usr/include/c++/10/bits/stl_iterator.h	/^    struct incrementable_traits<counted_iterator<_It>>$/;"	s	namespace:std
std::incrementable_traits::difference_type	/usr/include/c++/10/bits/iterator_concepts.h	/^      using difference_type$/;"	t	struct:std::incrementable_traits	access:public
std::incrementable_traits::difference_type	/usr/include/c++/10/bits/iterator_concepts.h	/^    { using difference_type = __int128; };$/;"	t	struct:std::incrementable_traits	typeref:typename:__int128	access:public
std::incrementable_traits::difference_type	/usr/include/c++/10/bits/iterator_concepts.h	/^    { using difference_type = iter_difference_t<_Iter>; };$/;"	t	struct:std::incrementable_traits	typeref:typename:iter_difference_t<_Iter>	access:public
std::incrementable_traits::difference_type	/usr/include/c++/10/bits/iterator_concepts.h	/^    { using difference_type = ptrdiff_t; };$/;"	t	struct:std::incrementable_traits	typeref:typename:ptrdiff_t	access:public
std::incrementable_traits::difference_type	/usr/include/c++/10/bits/iterator_concepts.h	/^    { using difference_type = typename _Tp::difference_type; };$/;"	t	struct:std::incrementable_traits	typeref:typename:_Tp::difference_type	access:public
std::incrementable_traits::difference_type	/usr/include/c++/10/bits/stl_iterator.h	/^      using difference_type = iter_difference_t<_It>;$/;"	t	struct:std::incrementable_traits	typeref:typename:iter_difference_t<_It>	access:public
std::indirect_result_t	/usr/include/c++/10/bits/iterator_concepts.h	/^    using indirect_result_t = invoke_result_t<_Fn, iter_reference_t<_Is>...>;$/;"	t	namespace:std	typeref:typename:invoke_result_t<_Fn,iter_reference_t<_Is>...>
std::indirectly_readable_traits	/usr/include/c++/10/bits/iterator_concepts.h	/^    struct indirectly_readable_traits<_Iter>$/;"	s	namespace:std
std::indirectly_readable_traits	/usr/include/c++/10/bits/iterator_concepts.h	/^    struct indirectly_readable_traits<_Tp*>$/;"	s	namespace:std	inherits:__detail::__cond_value_type<_Tp>
std::indirectly_readable_traits	/usr/include/c++/10/bits/iterator_concepts.h	/^    struct indirectly_readable_traits<_Tp>$/;"	s	namespace:std	inherits:__detail::__cond_value_type<typename_Tp::element_type>
std::indirectly_readable_traits	/usr/include/c++/10/bits/iterator_concepts.h	/^    struct indirectly_readable_traits<_Tp>$/;"	s	namespace:std	inherits:__detail::__cond_value_type<typename_Tp::value_type>
std::indirectly_readable_traits	/usr/include/c++/10/bits/iterator_concepts.h	/^    struct indirectly_readable_traits<const _Iter>$/;"	s	namespace:std	inherits:indirectly_readable_traits<_Iter>
std::indirectly_readable_traits	/usr/include/c++/10/bits/iterator_concepts.h	/^  template<typename> struct indirectly_readable_traits { };$/;"	s	namespace:std
std::indirectly_readable_traits::value_type	/usr/include/c++/10/bits/iterator_concepts.h	/^    { using value_type = remove_cv_t<remove_extent_t<_Iter>>; };$/;"	t	struct:std::indirectly_readable_traits	typeref:typename:remove_cv_t<remove_extent_t<_Iter>>	access:public
std::input_iterator_tag	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^  struct input_iterator_tag { };$/;"	s	namespace:std
std::insert_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    class insert_iterator$/;"	c	namespace:std	inherits:iterator<output_iterator_tag,void,void,void,void>
std::insert_iterator::_Iter	/usr/include/c++/10/bits/stl_iterator.h	/^      using _Iter = std::__detail::__range_iter_t<_Container>;$/;"	t	class:std::insert_iterator	typeref:typename:std::__detail::__range_iter_t<_Container>	access:private
std::insert_iterator::container	/usr/include/c++/10/bits/stl_iterator.h	/^      _Container* container = nullptr;$/;"	m	class:std::insert_iterator	typeref:typename:_Container *	access:protected
std::insert_iterator::container_type	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef _Container          container_type;$/;"	t	class:std::insert_iterator	typeref:typename:_Container	access:public
std::insert_iterator::difference_type	/usr/include/c++/10/bits/stl_iterator.h	/^      using difference_type = ptrdiff_t;$/;"	t	class:std::insert_iterator	typeref:typename:ptrdiff_t	access:public
std::insert_iterator::insert_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^      insert_iterator() = default;$/;"	p	class:std::insert_iterator	access:public	signature:()
std::insert_iterator::insert_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^      insert_iterator(_Container& __x, _Iter __i)$/;"	f	class:std::insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Container & __x,_Iter __i)
std::insert_iterator::iter	/usr/include/c++/10/bits/stl_iterator.h	/^      _Iter iter = _Iter();$/;"	m	class:std::insert_iterator	typeref:typename:_Iter	access:protected
std::insert_iterator::operator *	/usr/include/c++/10/bits/stl_iterator.h	/^      operator*()$/;"	f	class:std::insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR insert_iterator &	access:public	signature:()
std::insert_iterator::operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^      operator++()$/;"	f	class:std::insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR insert_iterator &	access:public	signature:()
std::insert_iterator::operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR insert_iterator &	access:public	signature:(int)
std::insert_iterator::operator =	/usr/include/c++/10/bits/stl_iterator.h	/^      operator=(const typename _Container::value_type& __value)$/;"	f	class:std::insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR insert_iterator &	access:public	signature:(const typename _Container::value_type & __value)
std::insert_iterator::operator =	/usr/include/c++/10/bits/stl_iterator.h	/^      operator=(typename _Container::const_reference __value)$/;"	f	class:std::insert_iterator	typeref:typename:insert_iterator &	access:public	signature:(typename _Container::const_reference __value)
std::insert_iterator::operator =	/usr/include/c++/10/bits/stl_iterator.h	/^      operator=(typename _Container::value_type&& __value)$/;"	f	class:std::insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR insert_iterator &	access:public	signature:(typename _Container::value_type && __value)
std::inserter	/usr/include/c++/10/bits/stl_iterator.h	/^    inserter(_Container& __x, _Iterator __i)$/;"	f	namespace:std	typeref:typename:insert_iterator<_Container>	signature:(_Container & __x,_Iterator __i)
std::inserter	/usr/include/c++/10/bits/stl_iterator.h	/^    inserter(_Container& __x, std::__detail::__range_iter_t<_Container> __i)$/;"	f	namespace:std	typeref:typename:insert_iterator<_Container>	signature:(_Container & __x,std::__detail::__range_iter_t<_Container> __i)
std::internal	/usr/include/c++/10/bits/ios_base.h	/^  internal(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::interrupted	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      interrupted = 				EINTR,$/;"	e	enum:std::errc	access:public
std::invalid_argument	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      invalid_argument = 			EINVAL,$/;"	e	enum:std::errc	access:public
std::invalid_seek	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      invalid_seek = 				ESPIPE,$/;"	e	enum:std::errc	access:public
std::io_errc	/usr/include/c++/10/bits/ios_base.h	/^  enum class io_errc { stream = 1 };$/;"	g	namespace:std
std::io_error	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      io_error = 				EIO,$/;"	e	enum:std::errc	access:public
std::ios_base	/usr/include/c++/10/bits/ios_base.h	/^  class ios_base$/;"	c	namespace:std
std::ios_base::Init	/usr/include/c++/10/bits/ios_base.h	/^    class Init$/;"	c	class:std::ios_base	access:public
std::ios_base::Init::Init	/usr/include/c++/10/bits/ios_base.h	/^      Init();$/;"	p	class:std::ios_base::Init	access:public	signature:()
std::ios_base::Init::Init	/usr/include/c++/10/bits/ios_base.h	/^      Init(const Init&) = default;$/;"	p	class:std::ios_base::Init	access:public	signature:(const Init &)
std::ios_base::Init::_S_refcount	/usr/include/c++/10/bits/ios_base.h	/^      static _Atomic_word	_S_refcount;$/;"	m	class:std::ios_base::Init	typeref:typename:_Atomic_word	access:private
std::ios_base::Init::_S_synced_with_stdio	/usr/include/c++/10/bits/ios_base.h	/^      static bool		_S_synced_with_stdio;$/;"	m	class:std::ios_base::Init	typeref:typename:bool	access:private
std::ios_base::Init::operator =	/usr/include/c++/10/bits/ios_base.h	/^      Init& operator=(const Init&) = default;$/;"	p	class:std::ios_base::Init	typeref:typename:Init &	access:public	signature:(const Init &)
std::ios_base::Init::~Init	/usr/include/c++/10/bits/ios_base.h	/^      ~Init();$/;"	p	class:std::ios_base::Init	access:public	signature:()
std::ios_base::_Callback_list	/usr/include/c++/10/bits/ios_base.h	/^    struct _Callback_list$/;"	s	class:std::ios_base	access:protected
std::ios_base::_Callback_list::_Callback_list	/usr/include/c++/10/bits/ios_base.h	/^      _Callback_list(ios_base::event_callback __fn, int __index,$/;"	f	struct:std::ios_base::_Callback_list	access:public	signature:(ios_base::event_callback __fn,int __index,_Callback_list * __cb)
std::ios_base::_Callback_list::_M_add_reference	/usr/include/c++/10/bits/ios_base.h	/^      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }$/;"	f	struct:std::ios_base::_Callback_list	typeref:typename:void	access:public	signature:()
std::ios_base::_Callback_list::_M_fn	/usr/include/c++/10/bits/ios_base.h	/^      ios_base::event_callback	_M_fn;$/;"	m	struct:std::ios_base::_Callback_list	typeref:typename:ios_base::event_callback	access:public
std::ios_base::_Callback_list::_M_index	/usr/include/c++/10/bits/ios_base.h	/^      int			_M_index;$/;"	m	struct:std::ios_base::_Callback_list	typeref:typename:int	access:public
std::ios_base::_Callback_list::_M_next	/usr/include/c++/10/bits/ios_base.h	/^      _Callback_list*		_M_next;$/;"	m	struct:std::ios_base::_Callback_list	typeref:typename:_Callback_list *	access:public
std::ios_base::_Callback_list::_M_refcount	/usr/include/c++/10/bits/ios_base.h	/^      _Atomic_word		_M_refcount;  \/\/ 0 means one reference.$/;"	m	struct:std::ios_base::_Callback_list	typeref:typename:_Atomic_word	access:public
std::ios_base::_Callback_list::_M_remove_reference	/usr/include/c++/10/bits/ios_base.h	/^      _M_remove_reference() $/;"	f	struct:std::ios_base::_Callback_list	typeref:typename:int	access:public	signature:()
std::ios_base::_GLIBCXX_DEPRECATED_SUGGEST	/usr/include/c++/10/bits/ios_base.h	/^      _GLIBCXX_DEPRECATED_SUGGEST("std::iostate");$/;"	t	class:std::ios_base	typeref:typename:int io_state ()("std::iostate")	access:public
std::ios_base::_GLIBCXX_DEPRECATED_SUGGEST	/usr/include/c++/10/bits/ios_base.h	/^      _GLIBCXX_DEPRECATED_SUGGEST("std::openmode");$/;"	t	class:std::ios_base	typeref:typename:int open_mode ()("std::openmode")	access:public
std::ios_base::_GLIBCXX_DEPRECATED_SUGGEST	/usr/include/c++/10/bits/ios_base.h	/^      _GLIBCXX_DEPRECATED_SUGGEST("std::seekdir");$/;"	t	class:std::ios_base	typeref:typename:int seek_dir ()("std::seekdir")	access:public
std::ios_base::_GLIBCXX_DEPRECATED_SUGGEST	/usr/include/c++/10/bits/ios_base.h	/^      _GLIBCXX_DEPRECATED_SUGGEST("std::streamoff");$/;"	t	class:std::ios_base	typeref:typename:std::streamoff streamoff ()("std::streamoff")	access:public
std::ios_base::_GLIBCXX_DEPRECATED_SUGGEST	/usr/include/c++/10/bits/ios_base.h	/^      _GLIBCXX_DEPRECATED_SUGGEST("std::streampos");$/;"	t	class:std::ios_base	typeref:typename:std::streampos streampos ()("std::streampos")	access:public
std::ios_base::_M_call_callbacks	/usr/include/c++/10/bits/ios_base.h	/^    _M_call_callbacks(event __ev) throw();$/;"	p	class:std::ios_base	typeref:typename:void	access:protected	signature:(event __ev)
std::ios_base::_M_callbacks	/usr/include/c++/10/bits/ios_base.h	/^     _Callback_list*	_M_callbacks;$/;"	m	class:std::ios_base	typeref:typename:_Callback_list *	access:protected
std::ios_base::_M_dispose_callbacks	/usr/include/c++/10/bits/ios_base.h	/^    _M_dispose_callbacks(void) throw();$/;"	p	class:std::ios_base	typeref:typename:void	access:protected	signature:(void)
std::ios_base::_M_exception	/usr/include/c++/10/bits/ios_base.h	/^    iostate		_M_exception;$/;"	m	class:std::ios_base	typeref:typename:iostate	access:protected
std::ios_base::_M_flags	/usr/include/c++/10/bits/ios_base.h	/^    fmtflags		_M_flags;$/;"	m	class:std::ios_base	typeref:typename:fmtflags	access:protected
std::ios_base::_M_getloc	/usr/include/c++/10/bits/ios_base.h	/^    _M_getloc() const$/;"	f	class:std::ios_base	typeref:typename:const locale &	access:public	signature:() const
std::ios_base::_M_grow_words	/usr/include/c++/10/bits/ios_base.h	/^    _M_grow_words(int __index, bool __iword);$/;"	p	class:std::ios_base	typeref:typename:_Words &	access:protected	signature:(int __index,bool __iword)
std::ios_base::_M_init	/usr/include/c++/10/bits/ios_base.h	/^    _M_init() throw();$/;"	p	class:std::ios_base	typeref:typename:void	access:protected	signature:()
std::ios_base::_M_ios_locale	/usr/include/c++/10/bits/ios_base.h	/^    locale		_M_ios_locale;$/;"	m	class:std::ios_base	typeref:typename:locale	access:protected
std::ios_base::_M_local_word	/usr/include/c++/10/bits/ios_base.h	/^    _Words		_M_local_word[_S_local_word_size];$/;"	m	class:std::ios_base	typeref:typename:_Words[]	access:protected
std::ios_base::_M_move	/usr/include/c++/10/bits/ios_base.h	/^    _M_move(ios_base&) noexcept;$/;"	p	class:std::ios_base	typeref:typename:void	access:protected	signature:(ios_base &)
std::ios_base::_M_precision	/usr/include/c++/10/bits/ios_base.h	/^    streamsize		_M_precision;$/;"	m	class:std::ios_base	typeref:typename:streamsize	access:protected
std::ios_base::_M_streambuf_state	/usr/include/c++/10/bits/ios_base.h	/^    iostate		_M_streambuf_state;$/;"	m	class:std::ios_base	typeref:typename:iostate	access:protected
std::ios_base::_M_swap	/usr/include/c++/10/bits/ios_base.h	/^    _M_swap(ios_base& __rhs) noexcept;$/;"	p	class:std::ios_base	typeref:typename:void	access:protected	signature:(ios_base & __rhs)
std::ios_base::_M_width	/usr/include/c++/10/bits/ios_base.h	/^    streamsize		_M_width;$/;"	m	class:std::ios_base	typeref:typename:streamsize	access:protected
std::ios_base::_M_word	/usr/include/c++/10/bits/ios_base.h	/^    _Words*		_M_word;$/;"	m	class:std::ios_base	typeref:typename:_Words *	access:protected
std::ios_base::_M_word_size	/usr/include/c++/10/bits/ios_base.h	/^    int			_M_word_size;$/;"	m	class:std::ios_base	typeref:typename:int	access:protected
std::ios_base::_M_word_zero	/usr/include/c++/10/bits/ios_base.h	/^    _Words		_M_word_zero;$/;"	m	class:std::ios_base	typeref:typename:_Words	access:protected
std::ios_base::_S_local_word_size	/usr/include/c++/10/bits/ios_base.h	/^    enum { _S_local_word_size = 8 };$/;"	e	enum:std::ios_base::__anon5e0da8a40103	access:public
std::ios_base::_Words	/usr/include/c++/10/bits/ios_base.h	/^    struct _Words$/;"	s	class:std::ios_base	access:protected
std::ios_base::_Words::_M_iword	/usr/include/c++/10/bits/ios_base.h	/^      long	_M_iword;$/;"	m	struct:std::ios_base::_Words	typeref:typename:long	access:public
std::ios_base::_Words::_M_pword	/usr/include/c++/10/bits/ios_base.h	/^      void*	_M_pword;$/;"	m	struct:std::ios_base::_Words	typeref:typename:void *	access:public
std::ios_base::_Words::_Words	/usr/include/c++/10/bits/ios_base.h	/^      _Words() : _M_pword(0), _M_iword(0) { }$/;"	f	struct:std::ios_base::_Words	access:public	signature:()
std::ios_base::__anon5e0da8a40103	/usr/include/c++/10/bits/ios_base.h	/^    enum { _S_local_word_size = 8 };$/;"	g	class:std::ios_base	access:protected
std::ios_base::adjustfield	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags adjustfield = _S_adjustfield;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::app	/usr/include/c++/10/bits/ios_base.h	/^    static const openmode app =		_S_app;$/;"	m	class:std::ios_base	typeref:typename:const openmode	access:public
std::ios_base::ate	/usr/include/c++/10/bits/ios_base.h	/^    static const openmode ate =		_S_ate;$/;"	m	class:std::ios_base	typeref:typename:const openmode	access:public
std::ios_base::badbit	/usr/include/c++/10/bits/ios_base.h	/^    static const iostate badbit =	_S_badbit;$/;"	m	class:std::ios_base	typeref:typename:const iostate	access:public
std::ios_base::basefield	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags basefield =   _S_basefield;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::beg	/usr/include/c++/10/bits/ios_base.h	/^    static const seekdir beg =		_S_beg;$/;"	m	class:std::ios_base	typeref:typename:const seekdir	access:public
std::ios_base::binary	/usr/include/c++/10/bits/ios_base.h	/^    static const openmode binary =	_S_bin;$/;"	m	class:std::ios_base	typeref:typename:const openmode	access:public
std::ios_base::boolalpha	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags boolalpha =   _S_boolalpha;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::copyfmt_event	/usr/include/c++/10/bits/ios_base.h	/^      copyfmt_event$/;"	e	enum:std::ios_base::event	access:public
std::ios_base::cur	/usr/include/c++/10/bits/ios_base.h	/^    static const seekdir cur =		_S_cur;$/;"	m	class:std::ios_base	typeref:typename:const seekdir	access:public
std::ios_base::dec	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags dec =         _S_dec;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::end	/usr/include/c++/10/bits/ios_base.h	/^    static const seekdir end =		_S_end;$/;"	m	class:std::ios_base	typeref:typename:const seekdir	access:public
std::ios_base::eofbit	/usr/include/c++/10/bits/ios_base.h	/^    static const iostate eofbit =	_S_eofbit;$/;"	m	class:std::ios_base	typeref:typename:const iostate	access:public
std::ios_base::erase_event	/usr/include/c++/10/bits/ios_base.h	/^      erase_event,$/;"	e	enum:std::ios_base::event	access:public
std::ios_base::event	/usr/include/c++/10/bits/ios_base.h	/^    enum event$/;"	g	class:std::ios_base	access:public
std::ios_base::event_callback	/usr/include/c++/10/bits/ios_base.h	/^    typedef void (*event_callback) (event __e, ios_base& __b, int __i);$/;"	t	class:std::ios_base	typeref:typename:void (*)(event __e,ios_base & __b,int __i)	access:public
std::ios_base::failbit	/usr/include/c++/10/bits/ios_base.h	/^    static const iostate failbit =	_S_failbit;$/;"	m	class:std::ios_base	typeref:typename:const iostate	access:public
std::ios_base::failure	/usr/include/c++/10/bits/ios_base.h	/^    class _GLIBCXX_ABI_TAG_CXX11 failure : public system_error$/;"	c	class:std::ios_base	inherits:system_error	access:public
std::ios_base::failure::failure	/usr/include/c++/10/bits/ios_base.h	/^      failure(const char*, const error_code& = io_errc::stream);$/;"	p	class:std::ios_base::failure	access:public	signature:(const char *,const error_code &=io_errc::stream)
std::ios_base::failure::failure	/usr/include/c++/10/bits/ios_base.h	/^      failure(const string& __str);$/;"	p	class:std::ios_base::failure	access:public	signature:(const string & __str)
std::ios_base::failure::failure	/usr/include/c++/10/bits/ios_base.h	/^      failure(const string&, const error_code&);$/;"	p	class:std::ios_base::failure	access:public	signature:(const string &,const error_code &)
std::ios_base::failure::what	/usr/include/c++/10/bits/ios_base.h	/^      what() const throw();$/;"	p	class:std::ios_base::failure	typeref:typename:const char *	access:public	signature:() const
std::ios_base::failure::~failure	/usr/include/c++/10/bits/ios_base.h	/^      ~failure() throw();$/;"	p	class:std::ios_base::failure	access:public	signature:()
std::ios_base::fixed	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags fixed =       _S_fixed;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::flags	/usr/include/c++/10/bits/ios_base.h	/^    flags() const$/;"	f	class:std::ios_base	typeref:typename:fmtflags	access:public	signature:() const
std::ios_base::flags	/usr/include/c++/10/bits/ios_base.h	/^    flags(fmtflags __fmtfl)$/;"	f	class:std::ios_base	typeref:typename:fmtflags	access:public	signature:(fmtflags __fmtfl)
std::ios_base::floatfield	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags floatfield =  _S_floatfield;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::fmtflags	/usr/include/c++/10/bits/ios_base.h	/^    typedef _Ios_Fmtflags fmtflags;$/;"	t	class:std::ios_base	typeref:typename:_Ios_Fmtflags	access:public
std::ios_base::getloc	/usr/include/c++/10/bits/ios_base.h	/^    getloc() const$/;"	f	class:std::ios_base	typeref:typename:locale	access:public	signature:() const
std::ios_base::goodbit	/usr/include/c++/10/bits/ios_base.h	/^    static const iostate goodbit =	_S_goodbit;$/;"	m	class:std::ios_base	typeref:typename:const iostate	access:public
std::ios_base::hex	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags hex =         _S_hex;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::imbue	/usr/include/c++/10/bits/ios_base.h	/^    imbue(const locale& __loc) throw();$/;"	p	class:std::ios_base	typeref:typename:locale	access:public	signature:(const locale & __loc)
std::ios_base::imbue_event	/usr/include/c++/10/bits/ios_base.h	/^      imbue_event,$/;"	e	enum:std::ios_base::event	access:public
std::ios_base::in	/usr/include/c++/10/bits/ios_base.h	/^    static const openmode in =		_S_in;$/;"	m	class:std::ios_base	typeref:typename:const openmode	access:public
std::ios_base::internal	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags internal =    _S_internal;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::ios_base	/usr/include/c++/10/bits/ios_base.h	/^    ios_base() throw ();$/;"	p	class:std::ios_base	access:protected	signature:()
std::ios_base::ios_base	/usr/include/c++/10/bits/ios_base.h	/^    ios_base(const ios_base&) = delete;$/;"	p	class:std::ios_base	access:public	signature:(const ios_base &)
std::ios_base::ios_base	/usr/include/c++/10/bits/ios_base.h	/^    ios_base(const ios_base&);$/;"	p	class:std::ios_base	access:private	signature:(const ios_base &)
std::ios_base::iostate	/usr/include/c++/10/bits/ios_base.h	/^    typedef _Ios_Iostate iostate;$/;"	t	class:std::ios_base	typeref:typename:_Ios_Iostate	access:public
std::ios_base::iword	/usr/include/c++/10/bits/ios_base.h	/^    iword(int __ix)$/;"	f	class:std::ios_base	typeref:typename:long &	access:public	signature:(int __ix)
std::ios_base::left	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags left =        _S_left;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::oct	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags oct =         _S_oct;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::openmode	/usr/include/c++/10/bits/ios_base.h	/^    typedef _Ios_Openmode openmode;$/;"	t	class:std::ios_base	typeref:typename:_Ios_Openmode	access:public
std::ios_base::operator =	/usr/include/c++/10/bits/ios_base.h	/^    operator=(const ios_base&) = delete;$/;"	p	class:std::ios_base	typeref:typename:ios_base &	access:public	signature:(const ios_base &)
std::ios_base::operator =	/usr/include/c++/10/bits/ios_base.h	/^    operator=(const ios_base&);$/;"	p	class:std::ios_base	typeref:typename:ios_base &	access:private	signature:(const ios_base &)
std::ios_base::out	/usr/include/c++/10/bits/ios_base.h	/^    static const openmode out =		_S_out;$/;"	m	class:std::ios_base	typeref:typename:const openmode	access:public
std::ios_base::precision	/usr/include/c++/10/bits/ios_base.h	/^    precision() const$/;"	f	class:std::ios_base	typeref:typename:streamsize	access:public	signature:() const
std::ios_base::precision	/usr/include/c++/10/bits/ios_base.h	/^    precision(streamsize __prec)$/;"	f	class:std::ios_base	typeref:typename:streamsize	access:public	signature:(streamsize __prec)
std::ios_base::pword	/usr/include/c++/10/bits/ios_base.h	/^    pword(int __ix)$/;"	f	class:std::ios_base	typeref:typename:void * &	access:public	signature:(int __ix)
std::ios_base::register_callback	/usr/include/c++/10/bits/ios_base.h	/^    register_callback(event_callback __fn, int __index);$/;"	p	class:std::ios_base	typeref:typename:void	access:public	signature:(event_callback __fn,int __index)
std::ios_base::right	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags right =       _S_right;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::scientific	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags scientific =  _S_scientific;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::seekdir	/usr/include/c++/10/bits/ios_base.h	/^    typedef _Ios_Seekdir seekdir;$/;"	t	class:std::ios_base	typeref:typename:_Ios_Seekdir	access:public
std::ios_base::setf	/usr/include/c++/10/bits/ios_base.h	/^    setf(fmtflags __fmtfl)$/;"	f	class:std::ios_base	typeref:typename:fmtflags	access:public	signature:(fmtflags __fmtfl)
std::ios_base::setf	/usr/include/c++/10/bits/ios_base.h	/^    setf(fmtflags __fmtfl, fmtflags __mask)$/;"	f	class:std::ios_base	typeref:typename:fmtflags	access:public	signature:(fmtflags __fmtfl,fmtflags __mask)
std::ios_base::showbase	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags showbase =    _S_showbase;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::showpoint	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags showpoint =   _S_showpoint;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::showpos	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags showpos =     _S_showpos;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::skipws	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags skipws =      _S_skipws;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::sync_with_stdio	/usr/include/c++/10/bits/ios_base.h	/^    sync_with_stdio(bool __sync = true);$/;"	p	class:std::ios_base	typeref:typename:bool	access:public	signature:(bool __sync=true)
std::ios_base::system_error	/usr/include/c++/10/bits/ios_base.h	/^    struct system_error : std::runtime_error$/;"	s	class:std::ios_base	inherits:std::runtime_error	access:private
std::ios_base::system_error::_M_code	/usr/include/c++/10/bits/ios_base.h	/^      } _M_code;$/;"	m	struct:std::ios_base::system_error	typeref:struct:std::ios_base::system_error::error_code	access:public
std::ios_base::system_error::error_code	/usr/include/c++/10/bits/ios_base.h	/^      struct error_code$/;"	s	struct:std::ios_base::system_error	access:public
std::ios_base::system_error::error_code::_M_cat	/usr/include/c++/10/bits/ios_base.h	/^	const void*	_M_cat;$/;"	m	struct:std::ios_base::system_error::error_code	typeref:typename:const void *	access:private
std::ios_base::system_error::error_code::_M_value	/usr/include/c++/10/bits/ios_base.h	/^	int		_M_value;$/;"	m	struct:std::ios_base::system_error::error_code	typeref:typename:int	access:private
std::ios_base::system_error::error_code::error_code	/usr/include/c++/10/bits/ios_base.h	/^	error_code() { }$/;"	f	struct:std::ios_base::system_error::error_code	access:public	signature:()
std::ios_base::trunc	/usr/include/c++/10/bits/ios_base.h	/^    static const openmode trunc =	_S_trunc;$/;"	m	class:std::ios_base	typeref:typename:const openmode	access:public
std::ios_base::unitbuf	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags unitbuf =     _S_unitbuf;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::unsetf	/usr/include/c++/10/bits/ios_base.h	/^    unsetf(fmtflags __mask)$/;"	f	class:std::ios_base	typeref:typename:void	access:public	signature:(fmtflags __mask)
std::ios_base::uppercase	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags uppercase =   _S_uppercase;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::width	/usr/include/c++/10/bits/ios_base.h	/^    width() const$/;"	f	class:std::ios_base	typeref:typename:streamsize	access:public	signature:() const
std::ios_base::width	/usr/include/c++/10/bits/ios_base.h	/^    width(streamsize __wide)$/;"	f	class:std::ios_base	typeref:typename:streamsize	access:public	signature:(streamsize __wide)
std::ios_base::xalloc	/usr/include/c++/10/bits/ios_base.h	/^    xalloc() throw();$/;"	p	class:std::ios_base	typeref:typename:int	access:public	signature:()
std::ios_base::~ios_base	/usr/include/c++/10/bits/ios_base.h	/^    virtual ~ios_base();$/;"	p	class:std::ios_base	access:public	signature:()
std::iostream_category	/usr/include/c++/10/bits/ios_base.h	/^  const error_category& iostream_category() noexcept;$/;"	p	namespace:std	typeref:typename:const error_category &	signature:()
std::is_a_directory	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      is_a_directory = 				EISDIR,$/;"	e	enum:std::errc	access:public
std::is_error_code_enum	/usr/include/c++/10/bits/ios_base.h	/^  template <> struct is_error_code_enum<io_errc> : public true_type { };$/;"	s	namespace:std	inherits:true_type
std::is_permutation	/usr/include/c++/10/bits/stl_algobase.h	/^    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_ForwardIterator1 __first1,_ForwardIterator1 __last1,_ForwardIterator2 __first2)
std::isalnum	/usr/include/c++/10/bits/locale_facets.h	/^    isalnum(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::isalnum	/usr/include/c++/10/bits/localefwd.h	/^    isalnum(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::isalpha	/usr/include/c++/10/bits/locale_facets.h	/^    isalpha(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::isalpha	/usr/include/c++/10/bits/localefwd.h	/^    isalpha(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::isblank	/usr/include/c++/10/bits/locale_facets.h	/^    isblank(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::isblank	/usr/include/c++/10/bits/localefwd.h	/^    isblank(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::iscntrl	/usr/include/c++/10/bits/locale_facets.h	/^    iscntrl(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::iscntrl	/usr/include/c++/10/bits/localefwd.h	/^    iscntrl(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::isdigit	/usr/include/c++/10/bits/locale_facets.h	/^    isdigit(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::isdigit	/usr/include/c++/10/bits/localefwd.h	/^    isdigit(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::isgraph	/usr/include/c++/10/bits/locale_facets.h	/^    isgraph(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::isgraph	/usr/include/c++/10/bits/localefwd.h	/^    isgraph(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::islower	/usr/include/c++/10/bits/locale_facets.h	/^    islower(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::islower	/usr/include/c++/10/bits/localefwd.h	/^    islower(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::isprint	/usr/include/c++/10/bits/locale_facets.h	/^    isprint(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::isprint	/usr/include/c++/10/bits/localefwd.h	/^    isprint(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::ispunct	/usr/include/c++/10/bits/locale_facets.h	/^    ispunct(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::ispunct	/usr/include/c++/10/bits/localefwd.h	/^    ispunct(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::isspace	/usr/include/c++/10/bits/locale_facets.h	/^    isspace(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_END_NAMESPACE_LDBL bool	signature:(_CharT __c,const locale & __loc)
std::isspace	/usr/include/c++/10/bits/localefwd.h	/^    isspace(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::istreambuf_iterator	/usr/include/c++/10/bits/streambuf_iterator.h	/^    class istreambuf_iterator$/;"	c	namespace:std	inherits:iterator<input_iterator_tag,_CharT,typename_Traits::off_type,_CharT*,_CharT>
std::istreambuf_iterator::_M_at_eof	/usr/include/c++/10/bits/streambuf_iterator.h	/^      _M_at_eof() const$/;"	f	class:std::istreambuf_iterator	typeref:typename:bool	access:private	signature:() const
std::istreambuf_iterator::_M_c	/usr/include/c++/10/bits/streambuf_iterator.h	/^      int_type			_M_c;$/;"	m	class:std::istreambuf_iterator	typeref:typename:int_type	access:private
std::istreambuf_iterator::_M_get	/usr/include/c++/10/bits/streambuf_iterator.h	/^      _M_get() const$/;"	f	class:std::istreambuf_iterator	typeref:typename:int_type	access:private	signature:() const
std::istreambuf_iterator::_M_sbuf	/usr/include/c++/10/bits/streambuf_iterator.h	/^      mutable streambuf_type*	_M_sbuf;$/;"	m	class:std::istreambuf_iterator	typeref:typename:streambuf_type *	access:private
std::istreambuf_iterator::_S_is_eof	/usr/include/c++/10/bits/streambuf_iterator.h	/^      _S_is_eof(int_type __c)$/;"	f	class:std::istreambuf_iterator	typeref:typename:bool	access:private	signature:(int_type __c)
std::istreambuf_iterator::char_type	/usr/include/c++/10/bits/streambuf_iterator.h	/^      typedef _CharT					char_type;$/;"	t	class:std::istreambuf_iterator	typeref:typename:_CharT	access:public
std::istreambuf_iterator::equal	/usr/include/c++/10/bits/streambuf_iterator.h	/^      equal(const istreambuf_iterator& __b) const$/;"	f	class:std::istreambuf_iterator	typeref:typename:bool	access:public	signature:(const istreambuf_iterator & __b) const
std::istreambuf_iterator::int_type	/usr/include/c++/10/bits/streambuf_iterator.h	/^      typedef typename _Traits::int_type		int_type;$/;"	t	class:std::istreambuf_iterator	typeref:typename:_Traits::int_type	access:public
std::istreambuf_iterator::istream_type	/usr/include/c++/10/bits/streambuf_iterator.h	/^      typedef basic_istream<_CharT, _Traits>		istream_type;$/;"	t	class:std::istreambuf_iterator	typeref:typename:basic_istream<_CharT,_Traits>	access:public
std::istreambuf_iterator::istreambuf_iterator	/usr/include/c++/10/bits/streambuf_iterator.h	/^      _GLIBCXX_CONSTEXPR istreambuf_iterator() _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::istreambuf_iterator	typeref:typename:_GLIBCXX_CONSTEXPR	access:public	signature:()
std::istreambuf_iterator::istreambuf_iterator	/usr/include/c++/10/bits/streambuf_iterator.h	/^      constexpr istreambuf_iterator(default_sentinel_t) noexcept$/;"	f	class:std::istreambuf_iterator	access:public	signature:(default_sentinel_t)
std::istreambuf_iterator::istreambuf_iterator	/usr/include/c++/10/bits/streambuf_iterator.h	/^      istreambuf_iterator(const istreambuf_iterator&) noexcept = default;$/;"	p	class:std::istreambuf_iterator	access:public	signature:(const istreambuf_iterator &)
std::istreambuf_iterator::istreambuf_iterator	/usr/include/c++/10/bits/streambuf_iterator.h	/^      istreambuf_iterator(istream_type& __s) _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::istreambuf_iterator	access:public	signature:(istream_type & __s)
std::istreambuf_iterator::istreambuf_iterator	/usr/include/c++/10/bits/streambuf_iterator.h	/^      istreambuf_iterator(streambuf_type* __s) _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::istreambuf_iterator	access:public	signature:(streambuf_type * __s)
std::istreambuf_iterator::operator *	/usr/include/c++/10/bits/streambuf_iterator.h	/^      operator*() const$/;"	f	class:std::istreambuf_iterator	typeref:typename:char_type	access:public	signature:() const
std::istreambuf_iterator::operator ++	/usr/include/c++/10/bits/streambuf_iterator.h	/^      operator++()$/;"	f	class:std::istreambuf_iterator	typeref:typename:istreambuf_iterator &	access:public	signature:()
std::istreambuf_iterator::operator ++	/usr/include/c++/10/bits/streambuf_iterator.h	/^      operator++(int)$/;"	f	class:std::istreambuf_iterator	typeref:typename:istreambuf_iterator	access:public	signature:(int)
std::istreambuf_iterator::operator =	/usr/include/c++/10/bits/streambuf_iterator.h	/^      operator=(const istreambuf_iterator&) noexcept = default;$/;"	p	class:std::istreambuf_iterator	typeref:typename:istreambuf_iterator &	access:public	signature:(const istreambuf_iterator &)
std::istreambuf_iterator::reference	/usr/include/c++/10/bits/streambuf_iterator.h	/^      typedef _CharT& reference; \/\/ Changed to _CharT by LWG 445$/;"	t	class:std::istreambuf_iterator	typeref:typename:_CharT &	access:public
std::istreambuf_iterator::streambuf_type	/usr/include/c++/10/bits/streambuf_iterator.h	/^      typedef basic_streambuf<_CharT, _Traits>		streambuf_type;$/;"	t	class:std::istreambuf_iterator	typeref:typename:basic_streambuf<_CharT,_Traits>	access:public
std::istreambuf_iterator::traits_type	/usr/include/c++/10/bits/streambuf_iterator.h	/^      typedef _Traits					traits_type;$/;"	t	class:std::istreambuf_iterator	typeref:typename:_Traits	access:public
std::istreambuf_iterator::~istreambuf_iterator	/usr/include/c++/10/bits/streambuf_iterator.h	/^      ~istreambuf_iterator() = default;$/;"	p	class:std::istreambuf_iterator	access:public	signature:()
std::isupper	/usr/include/c++/10/bits/locale_facets.h	/^    isupper(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::isupper	/usr/include/c++/10/bits/localefwd.h	/^    isupper(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::isxdigit	/usr/include/c++/10/bits/locale_facets.h	/^    isxdigit(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::isxdigit	/usr/include/c++/10/bits/localefwd.h	/^    isxdigit(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::iter_common_reference_t	/usr/include/c++/10/bits/iterator_concepts.h	/^    using iter_common_reference_t$/;"	t	namespace:std	typeref:typename:common_reference_t<iter_reference_t<_Tp>,iter_value_t<_Tp> &>
std::iter_difference_t	/usr/include/c++/10/bits/iterator_concepts.h	/^    using iter_difference_t = __detail::__iter_diff_t<remove_cvref_t<_Tp>>;$/;"	t	namespace:std	typeref:typename:__detail::__iter_diff_t<remove_cvref_t<_Tp>>
std::iter_move	/usr/include/c++/10/bits/stl_iterator.h	/^      iter_move(const counted_iterator& __i)$/;"	f	namespace:std	typeref:typename:iter_rvalue_reference_t<_It>	signature:(const counted_iterator & __i)
std::iter_move	/usr/include/c++/10/bits/stl_iterator.h	/^      iter_move(const move_iterator& __i)$/;"	f	namespace:std	typeref:typename:iter_rvalue_reference_t<_Iterator>	signature:(const move_iterator & __i)
std::iter_move	/usr/include/c++/10/bits/stl_iterator.h	/^      iter_move(const reverse_iterator& __i)$/;"	f	namespace:std	typeref:typename:iter_rvalue_reference_t<_Iterator>	signature:(const reverse_iterator & __i)
std::iter_move	/usr/include/c++/10/bits/stl_iterator.h	/^    iter_move(const common_iterator& __i)$/;"	f	namespace:std	typeref:typename:iter_rvalue_reference_t<_It>	signature:(const common_iterator & __i)
std::iter_reference_t	/usr/include/c++/10/bits/iterator_concepts.h	/^    using iter_reference_t = decltype(*std::declval<_Tp&>());$/;"	t	namespace:std
std::iter_rvalue_reference_t	/usr/include/c++/10/bits/iterator_concepts.h	/^    using iter_rvalue_reference_t$/;"	t	namespace:std
std::iter_swap	/usr/include/c++/10/bits/stl_algobase.h	/^    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_ForwardIterator1 __a,_ForwardIterator2 __b)
std::iter_swap	/usr/include/c++/10/bits/stl_iterator.h	/^	iter_swap(const counted_iterator& __x,$/;"	f	namespace:std	typeref:typename:void	signature:(const counted_iterator & __x,const counted_iterator<_It2> & __y)
std::iter_swap	/usr/include/c++/10/bits/stl_iterator.h	/^	iter_swap(const move_iterator& __x, const move_iterator<_Iter2>& __y)$/;"	f	namespace:std	typeref:typename:void	signature:(const move_iterator & __x,const move_iterator<_Iter2> & __y)
std::iter_swap	/usr/include/c++/10/bits/stl_iterator.h	/^	iter_swap(const reverse_iterator& __x,$/;"	f	namespace:std	typeref:typename:void	signature:(const reverse_iterator & __x,const reverse_iterator<_Iter2> & __y)
std::iter_swap	/usr/include/c++/10/bits/stl_iterator.h	/^      iter_swap(const common_iterator& __x,$/;"	f	namespace:std	typeref:typename:void	signature:(const common_iterator & __x,const common_iterator<_It2,_Sent2> & __y)
std::iter_value_t	/usr/include/c++/10/bits/iterator_concepts.h	/^    using iter_value_t = __detail::__iter_value_t<remove_cvref_t<_Tp>>;$/;"	t	namespace:std	typeref:typename:__detail::__iter_value_t<remove_cvref_t<_Tp>>
std::iterator	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^    struct iterator$/;"	s	namespace:std
std::iterator::difference_type	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef _Distance  difference_type;$/;"	t	struct:std::iterator	typeref:typename:_Distance	access:public
std::iterator::iterator_category	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef _Category  iterator_category;$/;"	t	struct:std::iterator	typeref:typename:_Category	access:public
std::iterator::pointer	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef _Pointer   pointer;$/;"	t	struct:std::iterator	typeref:typename:_Pointer	access:public
std::iterator::reference	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef _Reference reference;$/;"	t	struct:std::iterator	typeref:typename:_Reference	access:public
std::iterator::value_type	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef _Tp        value_type;$/;"	t	struct:std::iterator	typeref:typename:_Tp	access:public
std::iterator_traits	/usr/include/c++/10/bits/stl_iterator.h	/^    struct iterator_traits<common_iterator<_It, _Sent>>$/;"	s	namespace:std
std::iterator_traits	/usr/include/c++/10/bits/stl_iterator.h	/^    struct iterator_traits<counted_iterator<_It>> : iterator_traits<_It>$/;"	s	namespace:std	inherits:iterator_traits<_It>
std::iterator_traits	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^    struct iterator_traits$/;"	s	namespace:std
std::iterator_traits	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^    struct iterator_traits$/;"	s	namespace:std	inherits:__iterator_traits<_Iterator>
std::iterator_traits	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^    struct iterator_traits<_Tp*>$/;"	s	namespace:std
std::iterator_traits	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^    struct iterator_traits<const _Tp*>$/;"	s	namespace:std
std::iterator_traits::__ptr	/usr/include/c++/10/bits/stl_iterator.h	/^	struct __ptr$/;"	s	struct:std::iterator_traits	access:private
std::iterator_traits::__ptr	/usr/include/c++/10/bits/stl_iterator.h	/^	struct __ptr<_Iter>$/;"	s	struct:std::iterator_traits	access:private
std::iterator_traits::__ptr::_CIter	/usr/include/c++/10/bits/stl_iterator.h	/^	  using _CIter = common_iterator<_Iter, _Sent>;$/;"	t	struct:std::iterator_traits::__ptr	typeref:typename:common_iterator<_Iter,_Sent>	access:public
std::iterator_traits::__ptr::type	/usr/include/c++/10/bits/stl_iterator.h	/^	  using type = decltype(std::declval<const _CIter&>().operator->());$/;"	t	struct:std::iterator_traits::__ptr	access:public
std::iterator_traits::__ptr::type	/usr/include/c++/10/bits/stl_iterator.h	/^	  using type = void;$/;"	t	struct:std::iterator_traits::__ptr	typeref:typename:void	access:public
std::iterator_traits::difference_type	/usr/include/c++/10/bits/stl_iterator.h	/^      using difference_type = iter_difference_t<_It>;$/;"	t	struct:std::iterator_traits	typeref:typename:iter_difference_t<_It>	access:public
std::iterator_traits::difference_type	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef ptrdiff_t                   difference_type;$/;"	t	struct:std::iterator_traits	typeref:typename:ptrdiff_t	access:public
std::iterator_traits::difference_type	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::difference_type   difference_type;$/;"	t	struct:std::iterator_traits	typeref:typename:_Iterator::difference_type	access:public
std::iterator_traits::difference_type	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      using difference_type   = ptrdiff_t;$/;"	t	struct:std::iterator_traits	typeref:typename:ptrdiff_t	access:public
std::iterator_traits::iterator_category	/usr/include/c++/10/bits/stl_iterator.h	/^      using iterator_category = __detail::__clamp_iter_cat<$/;"	t	struct:std::iterator_traits	typeref:typename:__detail::__clamp_iter_cat<typename iterator_traits<_It>::iterator_category,forward_iterator_tag,input_iterator_tag>	access:public
std::iterator_traits::iterator_category	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef random_access_iterator_tag iterator_category;$/;"	t	struct:std::iterator_traits	typeref:typename:random_access_iterator_tag	access:public
std::iterator_traits::iterator_category	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::iterator_category iterator_category;$/;"	t	struct:std::iterator_traits	typeref:typename:_Iterator::iterator_category	access:public
std::iterator_traits::iterator_category	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      using iterator_category = random_access_iterator_tag;$/;"	t	struct:std::iterator_traits	typeref:typename:random_access_iterator_tag	access:public
std::iterator_traits::iterator_concept	/usr/include/c++/10/bits/stl_iterator.h	/^      using iterator_concept = conditional_t<forward_iterator<_It>,$/;"	t	struct:std::iterator_traits	typeref:typename:conditional_t<forward_iterator<_It>,forward_iterator_tag,input_iterator_tag>	access:public
std::iterator_traits::iterator_concept	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      using iterator_concept  = contiguous_iterator_tag;$/;"	t	struct:std::iterator_traits	typeref:typename:contiguous_iterator_tag	access:public
std::iterator_traits::pointer	/usr/include/c++/10/bits/stl_iterator.h	/^      using pointer = typename __ptr<_It>::type;$/;"	t	struct:std::iterator_traits	typeref:typename:__ptr<_It>::type	access:public
std::iterator_traits::pointer	/usr/include/c++/10/bits/stl_iterator.h	/^      using pointer = void;$/;"	t	struct:std::iterator_traits	typeref:typename:void	access:public
std::iterator_traits::pointer	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef _Tp*                        pointer;$/;"	t	struct:std::iterator_traits	typeref:typename:_Tp *	access:public
std::iterator_traits::pointer	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef const _Tp*                  pointer;$/;"	t	struct:std::iterator_traits	typeref:typename:const _Tp *	access:public
std::iterator_traits::pointer	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::pointer           pointer;$/;"	t	struct:std::iterator_traits	typeref:typename:_Iterator::pointer	access:public
std::iterator_traits::pointer	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      using pointer	      = _Tp*;$/;"	t	struct:std::iterator_traits	typeref:typename:_Tp *	access:public
std::iterator_traits::reference	/usr/include/c++/10/bits/stl_iterator.h	/^      using reference = iter_reference_t<_It>;$/;"	t	struct:std::iterator_traits	typeref:typename:iter_reference_t<_It>	access:public
std::iterator_traits::reference	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef _Tp&                        reference;$/;"	t	struct:std::iterator_traits	typeref:typename:_Tp &	access:public
std::iterator_traits::reference	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef const _Tp&                  reference;$/;"	t	struct:std::iterator_traits	typeref:typename:const _Tp &	access:public
std::iterator_traits::reference	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::reference         reference;$/;"	t	struct:std::iterator_traits	typeref:typename:_Iterator::reference	access:public
std::iterator_traits::reference	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      using reference	      = _Tp&;$/;"	t	struct:std::iterator_traits	typeref:typename:_Tp &	access:public
std::iterator_traits::value_type	/usr/include/c++/10/bits/stl_iterator.h	/^      using value_type = iter_value_t<_It>;$/;"	t	struct:std::iterator_traits	typeref:typename:iter_value_t<_It>	access:public
std::iterator_traits::value_type	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef _Tp                         value_type;$/;"	t	struct:std::iterator_traits	typeref:typename:_Tp	access:public
std::iterator_traits::value_type	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::value_type        value_type;$/;"	t	struct:std::iterator_traits	typeref:typename:_Iterator::value_type	access:public
std::iterator_traits::value_type	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      using value_type	      = remove_cv_t<_Tp>;$/;"	t	struct:std::iterator_traits	typeref:typename:remove_cv_t<_Tp>	access:public
std::left	/usr/include/c++/10/bits/ios_base.h	/^  left(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::less	/usr/include/c++/10/bits/stl_function.h	/^    struct less : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
std::less	/usr/include/c++/10/bits/stl_function.h	/^    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp*,_Tp*,bool>
std::less	/usr/include/c++/10/bits/stl_function.h	/^    struct less<void>$/;"	s	namespace:std
std::less::_S_cmp	/usr/include/c++/10/bits/stl_function.h	/^	_S_cmp(_Tp&& __t, _Up&& __u, false_type)$/;"	f	struct:std::less	typeref:typename:decltype (auto)	access:private	signature:(_Tp && __t,_Up && __u,false_type)
std::less::_S_cmp	/usr/include/c++/10/bits/stl_function.h	/^	_S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept$/;"	f	struct:std::less	typeref:typename:bool	access:private	signature:(_Tp && __t,_Up && __u,true_type)
std::less::__not_overloaded	/usr/include/c++/10/bits/stl_function.h	/^	struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };$/;"	s	struct:std::less	inherits:__not_overloaded2<_Tp,_Up>	access:private
std::less::__not_overloaded	/usr/include/c++/10/bits/stl_function.h	/^	struct __not_overloaded<_Tp, _Up, __void_t<$/;"	s	struct:std::less	inherits:false_type	access:private
std::less::__not_overloaded2	/usr/include/c++/10/bits/stl_function.h	/^	struct __not_overloaded2 : true_type { };$/;"	s	struct:std::less	inherits:true_type	access:private
std::less::__not_overloaded2	/usr/include/c++/10/bits/stl_function.h	/^	struct __not_overloaded2<_Tp, _Up, __void_t<$/;"	s	struct:std::less	inherits:false_type	access:private
std::less::__ptr_cmp	/usr/include/c++/10/bits/stl_function.h	/^	using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,$/;"	t	struct:std::less	typeref:typename:__and_<__not_overloaded<_Tp,_Up>,is_convertible<_Tp,const volatile void * >,is_convertible<_Up,const volatile void * >>	access:private
std::less::is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::less	typeref:typename:__is_transparent	access:public
std::less::operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::less	typeref:typename:auto	access:public	signature:(_Tp && __t,_Up && __u) const
std::less::operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp* __t, _Up* __u) const noexcept$/;"	f	struct:std::less	typeref:typename:bool	access:public	signature:(_Tp * __t,_Up * __u) const
std::less::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW$/;"	f	struct:std::less	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(_Tp * __x,_Tp * __y) const
std::less::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::less	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::less_equal	/usr/include/c++/10/bits/stl_function.h	/^    struct less_equal : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
std::less_equal	/usr/include/c++/10/bits/stl_function.h	/^    struct less_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp*,_Tp*,bool>
std::less_equal	/usr/include/c++/10/bits/stl_function.h	/^    struct less_equal<void>$/;"	s	namespace:std
std::less_equal::_S_cmp	/usr/include/c++/10/bits/stl_function.h	/^	_S_cmp(_Tp&& __t, _Up&& __u, false_type)$/;"	f	struct:std::less_equal	typeref:typename:decltype (auto)	access:private	signature:(_Tp && __t,_Up && __u,false_type)
std::less_equal::_S_cmp	/usr/include/c++/10/bits/stl_function.h	/^	_S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept$/;"	f	struct:std::less_equal	typeref:typename:bool	access:private	signature:(_Tp && __t,_Up && __u,true_type)
std::less_equal::__not_overloaded	/usr/include/c++/10/bits/stl_function.h	/^	struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };$/;"	s	struct:std::less_equal	inherits:__not_overloaded2<_Tp,_Up>	access:private
std::less_equal::__not_overloaded	/usr/include/c++/10/bits/stl_function.h	/^	struct __not_overloaded<_Tp, _Up, __void_t<$/;"	s	struct:std::less_equal	inherits:false_type	access:private
std::less_equal::__not_overloaded2	/usr/include/c++/10/bits/stl_function.h	/^	struct __not_overloaded2 : true_type { };$/;"	s	struct:std::less_equal	inherits:true_type	access:private
std::less_equal::__not_overloaded2	/usr/include/c++/10/bits/stl_function.h	/^	struct __not_overloaded2<_Tp, _Up, __void_t<$/;"	s	struct:std::less_equal	inherits:false_type	access:private
std::less_equal::__ptr_cmp	/usr/include/c++/10/bits/stl_function.h	/^	using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,$/;"	t	struct:std::less_equal	typeref:typename:__and_<__not_overloaded<_Tp,_Up>,is_convertible<_Tp,const volatile void * >,is_convertible<_Up,const volatile void * >>	access:private
std::less_equal::is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::less_equal	typeref:typename:__is_transparent	access:public
std::less_equal::operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::less_equal	typeref:typename:auto	access:public	signature:(_Tp && __t,_Up && __u) const
std::less_equal::operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp* __t, _Up* __u) const noexcept$/;"	f	struct:std::less_equal	typeref:typename:bool	access:public	signature:(_Tp * __t,_Up * __u) const
std::less_equal::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW$/;"	f	struct:std::less_equal	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(_Tp * __x,_Tp * __y) const
std::less_equal::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::less_equal	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::lexicographical_compare	/usr/include/c++/10/bits/stl_algobase.h	/^    lexicographical_compare(_II1 __first1, _II1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2)
std::lexicographical_compare	/usr/include/c++/10/bits/stl_algobase.h	/^    lexicographical_compare(_II1 __first1, _II1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2,_Compare __comp)
std::lexicographical_compare_three_way	/usr/include/c++/10/bits/stl_algobase.h	/^    lexicographical_compare_three_way(_InputIter1 __first1,$/;"	f	namespace:std	typeref:typename:auto	signature:(_InputIter1 __first1,_InputIter1 __last1,_InputIter2 __first2,_InputIter2 __last2)
std::lexicographical_compare_three_way	/usr/include/c++/10/bits/stl_algobase.h	/^    lexicographical_compare_three_way(_InputIter1 __first1,$/;"	f	namespace:std	typeref:typename:decltype (__comp (* __first1,* __first2))	signature:(_InputIter1 __first1,_InputIter1 __last1,_InputIter2 __first2,_InputIter2 __last2,_Comp __comp)
std::literals	/usr/include/c++/10/bits/basic_string.h	/^  inline namespace literals$/;"	n	namespace:std
std::literals	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^  inline namespace literals {$/;"	n	namespace:std
std::literals::chrono_literals	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^    inline namespace chrono_literals { }$/;"	n	namespace:std::literals
std::literals::complex_literals	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^    inline namespace complex_literals { }$/;"	n	namespace:std::literals
std::literals::string_literals	/usr/include/c++/10/bits/basic_string.h	/^  inline namespace string_literals$/;"	n	namespace:std::literals
std::literals::string_literals	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^    inline namespace string_literals { }$/;"	n	namespace:std::literals
std::literals::string_view_literals	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^    inline namespace string_view_literals { }$/;"	n	namespace:std::literals
std::locale	/usr/include/c++/10/bits/locale_classes.h	/^  class locale$/;"	c	namespace:std
std::locale::_Impl	/usr/include/c++/10/bits/locale_classes.h	/^  class locale::_Impl$/;"	c	class:std::locale
std::locale::_Impl::_Impl	/usr/include/c++/10/bits/locale_classes.h	/^    _Impl(const _Impl&);  \/\/ Not defined.$/;"	p	class:std::locale::_Impl	access:private	signature:(const _Impl &)
std::locale::_Impl::_Impl	/usr/include/c++/10/bits/locale_classes.h	/^    _Impl(const _Impl&, size_t);$/;"	p	class:std::locale::_Impl	access:private	signature:(const _Impl &,size_t)
std::locale::_Impl::_Impl	/usr/include/c++/10/bits/locale_classes.h	/^    _Impl(const char*, size_t);$/;"	p	class:std::locale::_Impl	access:private	signature:(const char *,size_t)
std::locale::_Impl::_Impl	/usr/include/c++/10/bits/locale_classes.h	/^    _Impl(size_t) throw();$/;"	p	class:std::locale::_Impl	access:private	signature:(size_t)
std::locale::_Impl::_M_add_reference	/usr/include/c++/10/bits/locale_classes.h	/^    _M_add_reference() throw()$/;"	f	class:std::locale::_Impl	typeref:typename:void	access:private	signature:()
std::locale::_Impl::_M_caches	/usr/include/c++/10/bits/locale_classes.h	/^    const facet**			_M_caches;$/;"	m	class:std::locale::_Impl	typeref:typename:const facet **	access:private
std::locale::_Impl::_M_check_same_name	/usr/include/c++/10/bits/locale_classes.h	/^    _M_check_same_name()$/;"	f	class:std::locale::_Impl	typeref:typename:bool	access:private	signature:()
std::locale::_Impl::_M_facets	/usr/include/c++/10/bits/locale_classes.h	/^    const facet**			_M_facets;$/;"	m	class:std::locale::_Impl	typeref:typename:const facet **	access:private
std::locale::_Impl::_M_facets_size	/usr/include/c++/10/bits/locale_classes.h	/^    size_t				_M_facets_size;$/;"	m	class:std::locale::_Impl	typeref:typename:size_t	access:private
std::locale::_Impl::_M_init_extra	/usr/include/c++/10/bits/locale_classes.h	/^    void _M_init_extra(facet**);$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(facet **)
std::locale::_Impl::_M_init_extra	/usr/include/c++/10/bits/locale_classes.h	/^    void _M_init_extra(void*, void*, const char*, const char*);$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(void *,void *,const char *,const char *)
std::locale::_Impl::_M_init_facet	/usr/include/c++/10/bits/locale_classes.h	/^      _M_init_facet(_Facet* __facet)$/;"	f	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(_Facet * __facet)
std::locale::_Impl::_M_init_facet_unchecked	/usr/include/c++/10/bits/locale_classes.h	/^      _M_init_facet_unchecked(_Facet* __facet)$/;"	f	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(_Facet * __facet)
std::locale::_Impl::_M_install_cache	/usr/include/c++/10/bits/locale_classes.h	/^    _M_install_cache(const facet*, size_t);$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const facet *,size_t)
std::locale::_Impl::_M_install_facet	/usr/include/c++/10/bits/locale_classes.h	/^    _M_install_facet(const locale::id*, const facet*);$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const locale::id *,const facet *)
std::locale::_Impl::_M_names	/usr/include/c++/10/bits/locale_classes.h	/^    char**				_M_names;$/;"	m	class:std::locale::_Impl	typeref:typename:char **	access:private
std::locale::_Impl::_M_refcount	/usr/include/c++/10/bits/locale_classes.h	/^    _Atomic_word			_M_refcount;$/;"	m	class:std::locale::_Impl	typeref:typename:_Atomic_word	access:private
std::locale::_Impl::_M_remove_reference	/usr/include/c++/10/bits/locale_classes.h	/^    _M_remove_reference() throw()$/;"	f	class:std::locale::_Impl	typeref:typename:void	access:private	signature:()
std::locale::_Impl::_M_replace_categories	/usr/include/c++/10/bits/locale_classes.h	/^    _M_replace_categories(const _Impl*, category);$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const _Impl *,category)
std::locale::_Impl::_M_replace_category	/usr/include/c++/10/bits/locale_classes.h	/^    _M_replace_category(const _Impl*, const locale::id* const*);$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const _Impl *,const locale::id * const *)
std::locale::_Impl::_M_replace_facet	/usr/include/c++/10/bits/locale_classes.h	/^    _M_replace_facet(const _Impl*, const locale::id*);$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const _Impl *,const locale::id *)
std::locale::_Impl::_S_facet_categories	/usr/include/c++/10/bits/locale_classes.h	/^    static const locale::id* const* const _S_facet_categories[];$/;"	m	class:std::locale::_Impl	typeref:typename:const locale::id * const * const[]	access:private
std::locale::_Impl::_S_id_collate	/usr/include/c++/10/bits/locale_classes.h	/^    static const locale::id* const	_S_id_collate[];$/;"	m	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
std::locale::_Impl::_S_id_ctype	/usr/include/c++/10/bits/locale_classes.h	/^    static const locale::id* const	_S_id_ctype[];$/;"	m	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
std::locale::_Impl::_S_id_messages	/usr/include/c++/10/bits/locale_classes.h	/^    static const locale::id* const	_S_id_messages[];$/;"	m	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
std::locale::_Impl::_S_id_monetary	/usr/include/c++/10/bits/locale_classes.h	/^    static const locale::id* const	_S_id_monetary[];$/;"	m	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
std::locale::_Impl::_S_id_numeric	/usr/include/c++/10/bits/locale_classes.h	/^    static const locale::id* const	_S_id_numeric[];$/;"	m	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
std::locale::_Impl::_S_id_time	/usr/include/c++/10/bits/locale_classes.h	/^    static const locale::id* const	_S_id_time[];$/;"	m	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
std::locale::_Impl::operator =	/usr/include/c++/10/bits/locale_classes.h	/^    operator=(const _Impl&);  \/\/ Not defined.$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const _Impl &)
std::locale::_Impl::~_Impl	/usr/include/c++/10/bits/locale_classes.h	/^   ~_Impl() throw();$/;"	p	class:std::locale::_Impl	access:private	signature:()
std::locale::_M_coalesce	/usr/include/c++/10/bits/locale_classes.h	/^    _M_coalesce(const locale& __base, const locale& __add, category __cat);$/;"	p	class:std::locale	typeref:typename:void	access:private	signature:(const locale & __base,const locale & __add,category __cat)
std::locale::_M_impl	/usr/include/c++/10/bits/locale_classes.h	/^    _Impl*		_M_impl;$/;"	m	class:std::locale	typeref:typename:_Impl *	access:private
std::locale::_S_categories	/usr/include/c++/10/bits/locale_classes.h	/^    static const char* const* const _S_categories;$/;"	m	class:std::locale	typeref:typename:const char * const * const	access:private
std::locale::_S_categories_size	/usr/include/c++/10/bits/locale_classes.h	/^    enum { _S_categories_size = 6 + _GLIBCXX_NUM_CATEGORIES };$/;"	e	enum:std::locale::__anon823239bc0103	access:public
std::locale::_S_classic	/usr/include/c++/10/bits/locale_classes.h	/^    static _Impl*       _S_classic;$/;"	m	class:std::locale	typeref:typename:_Impl *	access:private
std::locale::_S_global	/usr/include/c++/10/bits/locale_classes.h	/^    static _Impl*	_S_global;$/;"	m	class:std::locale	typeref:typename:_Impl *	access:private
std::locale::_S_initialize	/usr/include/c++/10/bits/locale_classes.h	/^    _S_initialize();$/;"	p	class:std::locale	typeref:typename:void	access:private	signature:()
std::locale::_S_initialize_once	/usr/include/c++/10/bits/locale_classes.h	/^    _S_initialize_once() throw();$/;"	p	class:std::locale	typeref:typename:void	access:private	signature:()
std::locale::_S_normalize_category	/usr/include/c++/10/bits/locale_classes.h	/^    _S_normalize_category(category);$/;"	p	class:std::locale	typeref:typename:category	access:private	signature:(category)
std::locale::_S_once	/usr/include/c++/10/bits/locale_classes.h	/^    static __gthread_once_t _S_once;$/;"	m	class:std::locale	typeref:typename:__gthread_once_t	access:private
std::locale::_S_twinned_facets	/usr/include/c++/10/bits/locale_classes.h	/^    static const id* const _S_twinned_facets[];$/;"	m	class:std::locale	typeref:typename:const id * const[]	access:private
std::locale::__anon823239bc0103	/usr/include/c++/10/bits/locale_classes.h	/^    enum { _S_categories_size = 6 + _GLIBCXX_NUM_CATEGORIES };$/;"	g	class:std::locale	access:private
std::locale::all	/usr/include/c++/10/bits/locale_classes.h	/^    static const category all		= (ctype | numeric | collate |$/;"	m	class:std::locale	typeref:typename:const category	access:public
std::locale::category	/usr/include/c++/10/bits/locale_classes.h	/^    typedef int	category;$/;"	t	class:std::locale	typeref:typename:int	access:public
std::locale::classic	/usr/include/c++/10/bits/locale_classes.h	/^    classic();$/;"	p	class:std::locale	typeref:typename:const locale &	access:public	signature:()
std::locale::collate	/usr/include/c++/10/bits/locale_classes.h	/^    static const category collate	= 1L << 2;$/;"	m	class:std::locale	typeref:typename:const category	access:public
std::locale::combine	/usr/include/c++/10/bits/locale_classes.h	/^      combine(const locale& __other) const;$/;"	p	class:std::locale	typeref:typename:locale	access:public	signature:(const locale & __other) const
std::locale::ctype	/usr/include/c++/10/bits/locale_classes.h	/^    static const category ctype		= 1L << 0;$/;"	m	class:std::locale	typeref:typename:const category	access:public
std::locale::facet	/usr/include/c++/10/bits/locale_classes.h	/^  class locale::facet$/;"	c	class:std::locale
std::locale::facet::_M_add_reference	/usr/include/c++/10/bits/locale_classes.h	/^    _M_add_reference() const throw()$/;"	f	class:std::locale::facet	typeref:typename:void	access:private	signature:() const
std::locale::facet::_M_cow_shim	/usr/include/c++/10/bits/locale_classes.h	/^    const facet* _M_cow_shim(const id*) const;$/;"	p	class:std::locale::facet	typeref:typename:const facet *	access:private	signature:(const id *) const
std::locale::facet::_M_refcount	/usr/include/c++/10/bits/locale_classes.h	/^    mutable _Atomic_word		_M_refcount;$/;"	m	class:std::locale::facet	typeref:typename:_Atomic_word	access:private
std::locale::facet::_M_remove_reference	/usr/include/c++/10/bits/locale_classes.h	/^    _M_remove_reference() const throw()$/;"	f	class:std::locale::facet	typeref:typename:void	access:private	signature:() const
std::locale::facet::_M_sso_shim	/usr/include/c++/10/bits/locale_classes.h	/^    const facet* _M_sso_shim(const id*) const;$/;"	p	class:std::locale::facet	typeref:typename:const facet *	access:private	signature:(const id *) const
std::locale::facet::_S_c_locale	/usr/include/c++/10/bits/locale_classes.h	/^    static __c_locale                   _S_c_locale;$/;"	m	class:std::locale::facet	typeref:typename:__c_locale	access:private
std::locale::facet::_S_c_name	/usr/include/c++/10/bits/locale_classes.h	/^    static const char			_S_c_name[2];$/;"	m	class:std::locale::facet	typeref:typename:const char[2]	access:private
std::locale::facet::_S_clone_c_locale	/usr/include/c++/10/bits/locale_classes.h	/^    _S_clone_c_locale(__c_locale& __cloc) throw();$/;"	p	class:std::locale::facet	typeref:typename:__c_locale	access:protected	signature:(__c_locale & __cloc)
std::locale::facet::_S_create_c_locale	/usr/include/c++/10/bits/locale_classes.h	/^    _S_create_c_locale(__c_locale& __cloc, const char* __s,$/;"	p	class:std::locale::facet	typeref:typename:void	access:protected	signature:(__c_locale & __cloc,const char * __s,__c_locale __old=0)
std::locale::facet::_S_destroy_c_locale	/usr/include/c++/10/bits/locale_classes.h	/^    _S_destroy_c_locale(__c_locale& __cloc);$/;"	p	class:std::locale::facet	typeref:typename:void	access:protected	signature:(__c_locale & __cloc)
std::locale::facet::_S_get_c_locale	/usr/include/c++/10/bits/locale_classes.h	/^    _S_get_c_locale();$/;"	p	class:std::locale::facet	typeref:typename:__c_locale	access:protected	signature:()
std::locale::facet::_S_get_c_name	/usr/include/c++/10/bits/locale_classes.h	/^    _S_get_c_name() throw();$/;"	p	class:std::locale::facet	typeref:typename:_GLIBCXX_CONST const char *	access:protected	signature:()
std::locale::facet::_S_initialize_once	/usr/include/c++/10/bits/locale_classes.h	/^    _S_initialize_once();$/;"	p	class:std::locale::facet	typeref:typename:void	access:private	signature:()
std::locale::facet::_S_lc_ctype_c_locale	/usr/include/c++/10/bits/locale_classes.h	/^    _S_lc_ctype_c_locale(__c_locale __cloc, const char* __s);$/;"	p	class:std::locale::facet	typeref:typename:__c_locale	access:protected	signature:(__c_locale __cloc,const char * __s)
std::locale::facet::_S_once	/usr/include/c++/10/bits/locale_classes.h	/^    static __gthread_once_t		_S_once;$/;"	m	class:std::locale::facet	typeref:typename:__gthread_once_t	access:private
std::locale::facet::facet	/usr/include/c++/10/bits/locale_classes.h	/^    facet(const facet&) = delete;$/;"	p	class:std::locale::facet	access:private	signature:(const facet &)
std::locale::facet::facet	/usr/include/c++/10/bits/locale_classes.h	/^    facet(const facet&);  \/\/ Not defined.$/;"	p	class:std::locale::facet	access:private	signature:(const facet &)
std::locale::facet::facet	/usr/include/c++/10/bits/locale_classes.h	/^    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)$/;"	f	class:std::locale::facet	access:protected	signature:(size_t __refs=0)
std::locale::facet::operator =	/usr/include/c++/10/bits/locale_classes.h	/^    operator=(const facet&) = delete;$/;"	p	class:std::locale::facet	typeref:typename:facet &	access:private	signature:(const facet &)
std::locale::facet::operator =	/usr/include/c++/10/bits/locale_classes.h	/^    operator=(const facet&);  \/\/ Not defined.$/;"	p	class:std::locale::facet	typeref:typename:facet &	access:private	signature:(const facet &)
std::locale::facet::~facet	/usr/include/c++/10/bits/locale_classes.h	/^    ~facet();$/;"	p	class:std::locale::facet	access:protected	signature:()
std::locale::global	/usr/include/c++/10/bits/locale_classes.h	/^    global(const locale& __loc);$/;"	p	class:std::locale	typeref:typename:locale	access:public	signature:(const locale & __loc)
std::locale::id	/usr/include/c++/10/bits/locale_classes.h	/^  class locale::id$/;"	c	class:std::locale
std::locale::id::_M_id	/usr/include/c++/10/bits/locale_classes.h	/^    _M_id() const throw();$/;"	p	class:std::locale::id	typeref:typename:size_t	access:public	signature:() const
std::locale::id::_M_index	/usr/include/c++/10/bits/locale_classes.h	/^    mutable size_t		_M_index;$/;"	m	class:std::locale::id	typeref:typename:size_t	access:private
std::locale::id::_S_refcount	/usr/include/c++/10/bits/locale_classes.h	/^    static _Atomic_word		_S_refcount;$/;"	m	class:std::locale::id	typeref:typename:_Atomic_word	access:private
std::locale::id::id	/usr/include/c++/10/bits/locale_classes.h	/^    id() { }$/;"	f	class:std::locale::id	access:public	signature:()
std::locale::id::id	/usr/include/c++/10/bits/locale_classes.h	/^    id(const id&);  \/\/ Not defined.$/;"	p	class:std::locale::id	access:private	signature:(const id &)
std::locale::id::operator =	/usr/include/c++/10/bits/locale_classes.h	/^    operator=(const id&);  \/\/ Not defined.$/;"	p	class:std::locale::id	typeref:typename:void	access:private	signature:(const id &)
std::locale::locale	/usr/include/c++/10/bits/locale_classes.h	/^      locale(const locale& __other, _Facet* __f);$/;"	p	class:std::locale	access:public	signature:(const locale & __other,_Facet * __f)
std::locale::locale	/usr/include/c++/10/bits/locale_classes.h	/^    locale() throw();$/;"	p	class:std::locale	access:public	signature:()
std::locale::locale	/usr/include/c++/10/bits/locale_classes.h	/^    locale(_Impl*) throw();$/;"	p	class:std::locale	access:private	signature:(_Impl *)
std::locale::locale	/usr/include/c++/10/bits/locale_classes.h	/^    locale(const char* __s);$/;"	p	class:std::locale	access:public	signature:(const char * __s)
std::locale::locale	/usr/include/c++/10/bits/locale_classes.h	/^    locale(const locale& __base, const char* __s, category __cat);$/;"	p	class:std::locale	access:public	signature:(const locale & __base,const char * __s,category __cat)
std::locale::locale	/usr/include/c++/10/bits/locale_classes.h	/^    locale(const locale& __base, const locale& __add, category __cat);$/;"	p	class:std::locale	access:public	signature:(const locale & __base,const locale & __add,category __cat)
std::locale::locale	/usr/include/c++/10/bits/locale_classes.h	/^    locale(const locale& __base, const std::string& __s, category __cat)$/;"	f	class:std::locale	access:public	signature:(const locale & __base,const std::string & __s,category __cat)
std::locale::locale	/usr/include/c++/10/bits/locale_classes.h	/^    locale(const locale& __other) throw();$/;"	p	class:std::locale	access:public	signature:(const locale & __other)
std::locale::locale	/usr/include/c++/10/bits/locale_classes.h	/^    locale(const std::string& __s) : locale(__s.c_str()) { }$/;"	f	class:std::locale	access:public	signature:(const std::string & __s)
std::locale::messages	/usr/include/c++/10/bits/locale_classes.h	/^    static const category messages	= 1L << 5;$/;"	m	class:std::locale	typeref:typename:const category	access:public
std::locale::monetary	/usr/include/c++/10/bits/locale_classes.h	/^    static const category monetary	= 1L << 4;$/;"	m	class:std::locale	typeref:typename:const category	access:public
std::locale::name	/usr/include/c++/10/bits/locale_classes.h	/^    name() const;$/;"	p	class:std::locale	typeref:typename:_GLIBCXX_DEFAULT_ABI_TAG string	access:public	signature:() const
std::locale::none	/usr/include/c++/10/bits/locale_classes.h	/^    static const category none		= 0;$/;"	m	class:std::locale	typeref:typename:const category	access:public
std::locale::numeric	/usr/include/c++/10/bits/locale_classes.h	/^    static const category numeric	= 1L << 1;$/;"	m	class:std::locale	typeref:typename:const category	access:public
std::locale::operator !=	/usr/include/c++/10/bits/locale_classes.h	/^    operator!=(const locale& __other) const throw()$/;"	f	class:std::locale	typeref:typename:bool	access:public	signature:(const locale & __other) const
std::locale::operator ()	/usr/include/c++/10/bits/locale_classes.h	/^      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,$/;"	p	class:std::locale	typeref:typename:bool	access:public	signature:(const basic_string<_Char,_Traits,_Alloc> & __s1,const basic_string<_Char,_Traits,_Alloc> & __s2) const
std::locale::operator =	/usr/include/c++/10/bits/locale_classes.h	/^    operator=(const locale& __other) throw();$/;"	p	class:std::locale	typeref:typename:const locale &	access:public	signature:(const locale & __other)
std::locale::operator ==	/usr/include/c++/10/bits/locale_classes.h	/^    operator==(const locale& __other) const throw();$/;"	p	class:std::locale	typeref:typename:bool	access:public	signature:(const locale & __other) const
std::locale::time	/usr/include/c++/10/bits/locale_classes.h	/^    static const category time		= 1L << 3;$/;"	m	class:std::locale	typeref:typename:const category	access:public
std::locale::~locale	/usr/include/c++/10/bits/locale_classes.h	/^    ~locale() throw();$/;"	p	class:std::locale	access:public	signature:()
std::logical_and	/usr/include/c++/10/bits/stl_function.h	/^    struct logical_and : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
std::logical_and	/usr/include/c++/10/bits/stl_function.h	/^    struct logical_and<void>$/;"	s	namespace:std
std::logical_and::is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::logical_and	typeref:typename:__is_transparent	access:public
std::logical_and::operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::logical_and	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
std::logical_and::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::logical_and	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::logical_not	/usr/include/c++/10/bits/stl_function.h	/^    struct logical_not : public unary_function<_Tp, bool>$/;"	s	namespace:std	inherits:unary_function<_Tp,bool>
std::logical_not	/usr/include/c++/10/bits/stl_function.h	/^    struct logical_not<void>$/;"	s	namespace:std
std::logical_not::is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::logical_not	typeref:typename:__is_transparent	access:public
std::logical_not::operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t) const$/;"	f	struct:std::logical_not	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t) const
std::logical_not::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x) const$/;"	f	struct:std::logical_not	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x) const
std::logical_or	/usr/include/c++/10/bits/stl_function.h	/^    struct logical_or : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
std::logical_or	/usr/include/c++/10/bits/stl_function.h	/^    struct logical_or<void>$/;"	s	namespace:std
std::logical_or::is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::logical_or	typeref:typename:__is_transparent	access:public
std::logical_or::operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::logical_or	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
std::logical_or::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::logical_or	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::lower_bound	/usr/include/c++/10/bits/stl_algobase.h	/^    lower_bound(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __val)
std::make_error_code	/usr/include/c++/10/bits/ios_base.h	/^  make_error_code(io_errc __e) noexcept$/;"	f	namespace:std	typeref:typename:error_code	signature:(io_errc __e)
std::make_error_condition	/usr/include/c++/10/bits/ios_base.h	/^  make_error_condition(io_errc __e) noexcept$/;"	f	namespace:std	typeref:typename:error_condition	signature:(io_errc __e)
std::make_exception_ptr	/usr/include/c++/10/bits/exception_ptr.h	/^    make_exception_ptr(_Ex __ex) _GLIBCXX_USE_NOEXCEPT$/;"	f	namespace:std	typeref:typename:exception_ptr	signature:(_Ex __ex)
std::make_exception_ptr	/usr/include/c++/10/bits/exception_ptr.h	/^  exception_ptr make_exception_ptr(_Ex) _GLIBCXX_USE_NOEXCEPT;$/;"	p	namespace:std	typeref:typename:exception_ptr	signature:(_Ex)
std::make_move_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    make_move_iterator(_Iterator __i)$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator<_Iterator>	signature:(_Iterator __i)
std::make_pair	/usr/include/c++/10/bits/stl_pair.h	/^    make_pair(_T1 __x, _T2 __y)$/;"	f	namespace:std	typeref:typename:pair<_T1,_T2>	signature:(_T1 __x,_T2 __y)
std::make_pair	/usr/include/c++/10/bits/stl_pair.h	/^    make_pair(_T1&& __x, _T2&& __y)$/;"	f	namespace:std	typeref:typename:pair<typename __decay_and_strip<_T1>::__type,typename __decay_and_strip<_T2>::__type>	signature:(_T1 && __x,_T2 && __y)
std::make_reverse_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    make_reverse_iterator(_Iterator __i)$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>	signature:(_Iterator __i)
std::max	/usr/include/c++/10/bits/stl_algobase.h	/^    max(const _Tp& __a, const _Tp& __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR const _Tp &	signature:(const _Tp & __a,const _Tp & __b)
std::max	/usr/include/c++/10/bits/stl_algobase.h	/^    max(const _Tp& __a, const _Tp& __b, _Compare __comp)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR const _Tp &	signature:(const _Tp & __a,const _Tp & __b,_Compare __comp)
std::mem_fun	/usr/include/c++/10/bits/stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)() const)$/;"	f	namespace:std	typeref:typename:const_mem_fun_t<_Ret,_Tp>	signature:(_Ret (_Tp::* __f)()const)
std::mem_fun	/usr/include/c++/10/bits/stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)())$/;"	f	namespace:std	typeref:typename:mem_fun_t<_Ret,_Tp>	signature:(_Ret (_Tp::* __f)())
std::mem_fun	/usr/include/c++/10/bits/stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)(_Arg) const)$/;"	f	namespace:std	typeref:typename:const_mem_fun1_t<_Ret,_Tp,_Arg>	signature:(_Ret (_Tp::* __f)(_Arg)const)
std::mem_fun	/usr/include/c++/10/bits/stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)(_Arg))$/;"	f	namespace:std	typeref:typename:mem_fun1_t<_Ret,_Tp,_Arg>	signature:(_Ret (_Tp::* __f)(_Arg))
std::mem_fun1_ref_t	/usr/include/c++/10/bits/stl_function.h	/^    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>$/;"	c	namespace:std	inherits:binary_function<_Tp,_Arg,_Ret>
std::mem_fun1_ref_t::_Ret	/usr/include/c++/10/bits/stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg);$/;"	p	class:std::mem_fun1_ref_t	access:private	signature:(_Tp::* _M_f)
std::mem_fun1_ref_t::mem_fun1_ref_t	/usr/include/c++/10/bits/stl_function.h	/^      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))$/;"	f	class:std::mem_fun1_ref_t	access:public	signature:(_Ret (_Tp::* __pf)(_Arg))
std::mem_fun1_ref_t::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(_Tp& __r, _Arg __x) const$/;"	f	class:std::mem_fun1_ref_t	typeref:typename:_Ret	access:public	signature:(_Tp & __r,_Arg __x) const
std::mem_fun1_t	/usr/include/c++/10/bits/stl_function.h	/^    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>$/;"	c	namespace:std	inherits:binary_function<_Tp*,_Arg,_Ret>
std::mem_fun1_t::_Ret	/usr/include/c++/10/bits/stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg);$/;"	p	class:std::mem_fun1_t	access:private	signature:(_Tp::* _M_f)
std::mem_fun1_t::mem_fun1_t	/usr/include/c++/10/bits/stl_function.h	/^      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))$/;"	f	class:std::mem_fun1_t	access:public	signature:(_Ret (_Tp::* __pf)(_Arg))
std::mem_fun1_t::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(_Tp* __p, _Arg __x) const$/;"	f	class:std::mem_fun1_t	typeref:typename:_Ret	access:public	signature:(_Tp * __p,_Arg __x) const
std::mem_fun_ref	/usr/include/c++/10/bits/stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)() const)$/;"	f	namespace:std	typeref:typename:const_mem_fun_ref_t<_Ret,_Tp>	signature:(_Ret (_Tp::* __f)()const)
std::mem_fun_ref	/usr/include/c++/10/bits/stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)())$/;"	f	namespace:std	typeref:typename:mem_fun_ref_t<_Ret,_Tp>	signature:(_Ret (_Tp::* __f)())
std::mem_fun_ref	/usr/include/c++/10/bits/stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)$/;"	f	namespace:std	typeref:typename:const_mem_fun1_ref_t<_Ret,_Tp,_Arg>	signature:(_Ret (_Tp::* __f)(_Arg)const)
std::mem_fun_ref	/usr/include/c++/10/bits/stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))$/;"	f	namespace:std	typeref:typename:mem_fun1_ref_t<_Ret,_Tp,_Arg>	signature:(_Ret (_Tp::* __f)(_Arg))
std::mem_fun_ref_t	/usr/include/c++/10/bits/stl_function.h	/^    class mem_fun_ref_t : public unary_function<_Tp, _Ret>$/;"	c	namespace:std	inherits:unary_function<_Tp,_Ret>
std::mem_fun_ref_t::_Ret	/usr/include/c++/10/bits/stl_function.h	/^      _Ret (_Tp::*_M_f)();$/;"	p	class:std::mem_fun_ref_t	access:private	signature:(_Tp::* _M_f)
std::mem_fun_ref_t::mem_fun_ref_t	/usr/include/c++/10/bits/stl_function.h	/^      mem_fun_ref_t(_Ret (_Tp::*__pf)())$/;"	f	class:std::mem_fun_ref_t	access:public	signature:(_Ret (_Tp::* __pf)())
std::mem_fun_ref_t::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(_Tp& __r) const$/;"	f	class:std::mem_fun_ref_t	typeref:typename:_Ret	access:public	signature:(_Tp & __r) const
std::mem_fun_t	/usr/include/c++/10/bits/stl_function.h	/^    class mem_fun_t : public unary_function<_Tp*, _Ret>$/;"	c	namespace:std	inherits:unary_function<_Tp*,_Ret>
std::mem_fun_t::_Ret	/usr/include/c++/10/bits/stl_function.h	/^      _Ret (_Tp::*_M_f)();$/;"	p	class:std::mem_fun_t	access:private	signature:(_Tp::* _M_f)
std::mem_fun_t::mem_fun_t	/usr/include/c++/10/bits/stl_function.h	/^      mem_fun_t(_Ret (_Tp::*__pf)())$/;"	f	class:std::mem_fun_t	access:public	signature:(_Ret (_Tp::* __pf)())
std::mem_fun_t::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(_Tp* __p) const$/;"	f	class:std::mem_fun_t	typeref:typename:_Ret	access:public	signature:(_Tp * __p) const
std::message_size	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      message_size = 				EMSGSIZE,$/;"	e	enum:std::errc	access:public
std::min	/usr/include/c++/10/bits/stl_algobase.h	/^    min(const _Tp& __a, const _Tp& __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR const _Tp &	signature:(const _Tp & __a,const _Tp & __b)
std::min	/usr/include/c++/10/bits/stl_algobase.h	/^    min(const _Tp& __a, const _Tp& __b, _Compare __comp)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR const _Tp &	signature:(const _Tp & __a,const _Tp & __b,_Compare __comp)
std::minus	/usr/include/c++/10/bits/stl_function.h	/^    struct minus : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
std::minus	/usr/include/c++/10/bits/stl_function.h	/^    struct minus<void>$/;"	s	namespace:std
std::minus::is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::minus	typeref:typename:__is_transparent	access:public
std::minus::operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::minus	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
std::minus::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::minus	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::mismatch	/usr/include/c++/10/bits/stl_algobase.h	/^    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR pair<_InputIterator1,_InputIterator2>	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2)
std::mismatch	/usr/include/c++/10/bits/stl_algobase.h	/^    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR pair<_InputIterator1,_InputIterator2>	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_BinaryPredicate __binary_pred)
std::mismatch	/usr/include/c++/10/bits/stl_algobase.h	/^    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR pair<_InputIterator1,_InputIterator2>	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2)
std::mismatch	/usr/include/c++/10/bits/stl_algobase.h	/^    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR pair<_InputIterator1,_InputIterator2>	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_BinaryPredicate __binary_pred)
std::modulus	/usr/include/c++/10/bits/stl_function.h	/^    struct modulus : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
std::modulus	/usr/include/c++/10/bits/stl_function.h	/^    struct modulus<void>$/;"	s	namespace:std
std::modulus::is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::modulus	typeref:typename:__is_transparent	access:public
std::modulus::operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::modulus	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
std::modulus::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::modulus	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::move	/usr/include/c++/10/bits/move.h	/^    move(_Tp&& __t) noexcept$/;"	f	namespace:std	typeref:typename:std::remove_reference<_Tp>::type &&	signature:(_Tp && __t)
std::move	/usr/include/c++/10/bits/stl_algobase.h	/^    move(_II __first, _II __last, _OI __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	signature:(_II __first,_II __last,_OI __result)
std::move_backward	/usr/include/c++/10/bits/stl_algobase.h	/^    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _BI2	signature:(_BI1 __first,_BI1 __last,_BI2 __result)
std::move_if_noexcept	/usr/include/c++/10/bits/move.h	/^    move_if_noexcept(_Tp& __x) noexcept$/;"	f	namespace:std	typeref:typename:conditional<__move_if_noexcept_cond<_Tp>::value,const _Tp &,_Tp &&>::type	signature:(_Tp & __x)
std::move_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    class move_iterator$/;"	c	namespace:std
std::move_iterator::_M_current	/usr/include/c++/10/bits/stl_iterator.h	/^      _Iterator _M_current;$/;"	m	class:std::move_iterator	typeref:typename:_Iterator	access:private
std::move_iterator::__base_cat	/usr/include/c++/10/bits/stl_iterator.h	/^      using __base_cat = typename __traits_type::iterator_category;$/;"	t	class:std::move_iterator	typeref:typename:__traits_type::iterator_category	access:private
std::move_iterator::__base_ref	/usr/include/c++/10/bits/stl_iterator.h	/^      using __base_ref = typename __traits_type::reference;$/;"	t	class:std::move_iterator	typeref:typename:__traits_type::reference	access:private
std::move_iterator::__traits_type	/usr/include/c++/10/bits/stl_iterator.h	/^      using __traits_type = iterator_traits<_Iterator>;$/;"	t	class:std::move_iterator	typeref:typename:iterator_traits<_Iterator>	access:private
std::move_iterator::base	/usr/include/c++/10/bits/stl_iterator.h	/^      base() &&$/;"	f	class:std::move_iterator	typeref:typename:iterator_type	access:public	signature:()
std::move_iterator::base	/usr/include/c++/10/bits/stl_iterator.h	/^      base() const &$/;"	f	class:std::move_iterator	typeref:typename:iterator_type	access:public	signature:() const
std::move_iterator::base	/usr/include/c++/10/bits/stl_iterator.h	/^      base() const$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR iterator_type	access:public	signature:() const
std::move_iterator::difference_type	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef typename __traits_type::difference_type	difference_type;$/;"	t	class:std::move_iterator	typeref:typename:__traits_type::difference_type	access:public
std::move_iterator::difference_type	/usr/include/c++/10/bits/stl_iterator.h	/^      using difference_type = iter_difference_t<_Iterator>;$/;"	t	class:std::move_iterator	typeref:typename:iter_difference_t<_Iterator>	access:public
std::move_iterator::iterator_category	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef typename __traits_type::iterator_category iterator_category;$/;"	t	class:std::move_iterator	typeref:typename:__traits_type::iterator_category	access:public
std::move_iterator::iterator_category	/usr/include/c++/10/bits/stl_iterator.h	/^      using iterator_category$/;"	t	class:std::move_iterator	typeref:typename:__detail::__clamp_iter_cat<__base_cat,random_access_iterator_tag>	access:public
std::move_iterator::iterator_concept	/usr/include/c++/10/bits/stl_iterator.h	/^      using iterator_concept = input_iterator_tag;$/;"	t	class:std::move_iterator	typeref:typename:input_iterator_tag	access:public
std::move_iterator::iterator_type	/usr/include/c++/10/bits/stl_iterator.h	/^      using iterator_type = _Iterator;$/;"	t	class:std::move_iterator	typeref:typename:_Iterator	access:public
std::move_iterator::move_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^	move_iterator(const move_iterator<_Iter>& __i)$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR	access:public	signature:(const move_iterator<_Iter> & __i)
std::move_iterator::move_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^      move_iterator()$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR	access:public	signature:()
std::move_iterator::move_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^      move_iterator(iterator_type __i)$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR	access:public	signature:(iterator_type __i)
std::move_iterator::operator *	/usr/include/c++/10/bits/stl_iterator.h	/^      operator*() const$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reference	access:public	signature:() const
std::move_iterator::operator +	/usr/include/c++/10/bits/stl_iterator.h	/^      operator+(difference_type __n) const$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator	access:public	signature:(difference_type __n) const
std::move_iterator::operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^      operator++()$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator &	access:public	signature:()
std::move_iterator::operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^      operator++(int) requires (!forward_iterator<_Iterator>)$/;"	f	class:std::move_iterator	typeref:typename:void	access:public	signature:(int)
std::move_iterator::operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator	access:public	signature:(int)
std::move_iterator::operator +=	/usr/include/c++/10/bits/stl_iterator.h	/^      operator+=(difference_type __n)$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator &	access:public	signature:(difference_type __n)
std::move_iterator::operator -	/usr/include/c++/10/bits/stl_iterator.h	/^      operator-(difference_type __n) const$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator	access:public	signature:(difference_type __n) const
std::move_iterator::operator --	/usr/include/c++/10/bits/stl_iterator.h	/^      operator--()$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator &	access:public	signature:()
std::move_iterator::operator --	/usr/include/c++/10/bits/stl_iterator.h	/^      operator--(int)$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator	access:public	signature:(int)
std::move_iterator::operator -=	/usr/include/c++/10/bits/stl_iterator.h	/^      operator-=(difference_type __n)$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator &	access:public	signature:(difference_type __n)
std::move_iterator::operator ->	/usr/include/c++/10/bits/stl_iterator.h	/^      operator->() const$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR pointer	access:public	signature:() const
std::move_iterator::operator []	/usr/include/c++/10/bits/stl_iterator.h	/^      operator[](difference_type __n) const$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reference	access:public	signature:(difference_type __n) const
std::move_iterator::pointer	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef _Iterator					pointer;$/;"	t	class:std::move_iterator	typeref:typename:_Iterator	access:public
std::move_iterator::pointer	/usr/include/c++/10/bits/stl_iterator.h	/^      using pointer = _Iterator;$/;"	t	class:std::move_iterator	typeref:typename:_Iterator	access:public
std::move_iterator::reference	/usr/include/c++/10/bits/stl_iterator.h	/^			 __base_ref>::type		reference;$/;"	t	class:std::move_iterator	typeref:typename:conditional<is_reference<__base_ref>::value,typename remove_reference<__base_ref>::type &&,__base_ref>::type	access:public
std::move_iterator::reference	/usr/include/c++/10/bits/stl_iterator.h	/^      using reference = iter_rvalue_reference_t<_Iterator>;$/;"	t	class:std::move_iterator	typeref:typename:iter_rvalue_reference_t<_Iterator>	access:public
std::move_iterator::value_type	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef typename __traits_type::value_type  	value_type;$/;"	t	class:std::move_iterator	typeref:typename:__traits_type::value_type	access:public
std::move_iterator::value_type	/usr/include/c++/10/bits/stl_iterator.h	/^      using value_type = iter_value_t<_Iterator>;$/;"	t	class:std::move_iterator	typeref:typename:iter_value_t<_Iterator>	access:public
std::move_sentinel	/usr/include/c++/10/bits/stl_iterator.h	/^    class move_sentinel$/;"	c	namespace:std
std::move_sentinel::_M_last	/usr/include/c++/10/bits/stl_iterator.h	/^      _Sent _M_last;$/;"	m	class:std::move_sentinel	typeref:typename:_Sent	access:private
std::move_sentinel::base	/usr/include/c++/10/bits/stl_iterator.h	/^      base() const$/;"	f	class:std::move_sentinel	typeref:typename:_Sent	access:public	signature:() const
std::move_sentinel::move_sentinel	/usr/include/c++/10/bits/stl_iterator.h	/^	move_sentinel(const move_sentinel<_S2>& __s)$/;"	f	class:std::move_sentinel	typeref:typename:requires convertible_to<const _S2 &,_Sent> 	access:public	signature:(const move_sentinel<_S2> & __s)
std::move_sentinel::move_sentinel	/usr/include/c++/10/bits/stl_iterator.h	/^      move_sentinel()$/;"	f	class:std::move_sentinel	access:public	signature:()
std::move_sentinel::move_sentinel	/usr/include/c++/10/bits/stl_iterator.h	/^      move_sentinel(_Sent __s)$/;"	f	class:std::move_sentinel	access:public	signature:(_Sent __s)
std::move_sentinel::operator =	/usr/include/c++/10/bits/stl_iterator.h	/^	operator=(const move_sentinel<_S2>& __s)$/;"	f	class:std::move_sentinel	typeref:typename:requires assignable_from<_Sent &,const _S2 &> move_sentinel &	access:public	signature:(const move_sentinel<_S2> & __s)
std::multiplies	/usr/include/c++/10/bits/stl_function.h	/^    struct multiplies : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
std::multiplies	/usr/include/c++/10/bits/stl_function.h	/^    struct multiplies<void>$/;"	s	namespace:std
std::multiplies::is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::multiplies	typeref:typename:__is_transparent	access:public
std::multiplies::operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::multiplies	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
std::multiplies::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::multiplies	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::negate	/usr/include/c++/10/bits/stl_function.h	/^    struct negate : public unary_function<_Tp, _Tp>$/;"	s	namespace:std	inherits:unary_function<_Tp,_Tp>
std::negate	/usr/include/c++/10/bits/stl_function.h	/^    struct negate<void>$/;"	s	namespace:std
std::negate::is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::negate	typeref:typename:__is_transparent	access:public
std::negate::operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t) const$/;"	f	struct:std::negate	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t) const
std::negate::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x) const$/;"	f	struct:std::negate	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x) const
std::nested_exception	/usr/include/c++/10/bits/nested_exception.h	/^  class nested_exception$/;"	c	namespace:std
std::nested_exception::_M_ptr	/usr/include/c++/10/bits/nested_exception.h	/^    exception_ptr _M_ptr;$/;"	m	class:std::nested_exception	typeref:typename:exception_ptr	access:private
std::nested_exception::nested_exception	/usr/include/c++/10/bits/nested_exception.h	/^    nested_exception() noexcept : _M_ptr(current_exception()) { }$/;"	f	class:std::nested_exception	access:public	signature:()
std::nested_exception::nested_exception	/usr/include/c++/10/bits/nested_exception.h	/^    nested_exception(const nested_exception&) noexcept = default;$/;"	p	class:std::nested_exception	access:public	signature:(const nested_exception &)
std::nested_exception::nested_ptr	/usr/include/c++/10/bits/nested_exception.h	/^    nested_ptr() const noexcept$/;"	f	class:std::nested_exception	typeref:typename:exception_ptr	access:public	signature:() const
std::nested_exception::operator =	/usr/include/c++/10/bits/nested_exception.h	/^    nested_exception& operator=(const nested_exception&) noexcept = default;$/;"	p	class:std::nested_exception	typeref:typename:nested_exception &	access:public	signature:(const nested_exception &)
std::nested_exception::rethrow_nested	/usr/include/c++/10/bits/nested_exception.h	/^    rethrow_nested() const$/;"	f	class:std::nested_exception	typeref:typename:void	access:public	signature:() const
std::nested_exception::~nested_exception	/usr/include/c++/10/bits/nested_exception.h	/^    virtual ~nested_exception() noexcept;$/;"	p	class:std::nested_exception	access:public	signature:()
std::network_down	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      network_down = 				ENETDOWN,$/;"	e	enum:std::errc	access:public
std::network_reset	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      network_reset = 				ENETRESET,$/;"	e	enum:std::errc	access:public
std::network_unreachable	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      network_unreachable = 			ENETUNREACH,$/;"	e	enum:std::errc	access:public
std::next	/usr/include/c++/10/bits/stl_iterator_base_funcs.h	/^    next(_InputIterator __x, typename$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR _InputIterator	signature:(_InputIterator __x,typename iterator_traits<_InputIterator>::difference_type __n=1)
std::no_buffer_space	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      no_buffer_space = 			ENOBUFS,$/;"	e	enum:std::errc	access:public
std::no_child_process	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      no_child_process = 			ECHILD,$/;"	e	enum:std::errc	access:public
std::no_link	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      no_link = 				ENOLINK,$/;"	e	enum:std::errc	access:public
std::no_lock_available	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      no_lock_available = 			ENOLCK,$/;"	e	enum:std::errc	access:public
std::no_message	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      no_message = 				ENOMSG,$/;"	e	enum:std::errc	access:public
std::no_message_available	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      no_message_available = 			ENODATA,$/;"	e	enum:std::errc	access:public
std::no_protocol_option	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      no_protocol_option = 			ENOPROTOOPT,$/;"	e	enum:std::errc	access:public
std::no_space_on_device	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      no_space_on_device = 			ENOSPC,$/;"	e	enum:std::errc	access:public
std::no_stream_resources	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      no_stream_resources = 			ENOSR,$/;"	e	enum:std::errc	access:public
std::no_such_device	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      no_such_device = 				ENODEV,$/;"	e	enum:std::errc	access:public
std::no_such_device_or_address	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      no_such_device_or_address = 		ENXIO,$/;"	e	enum:std::errc	access:public
std::no_such_file_or_directory	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      no_such_file_or_directory = 		ENOENT,$/;"	e	enum:std::errc	access:public
std::no_such_process	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      no_such_process = 			ESRCH,$/;"	e	enum:std::errc	access:public
std::noboolalpha	/usr/include/c++/10/bits/ios_base.h	/^  noboolalpha(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::noshowbase	/usr/include/c++/10/bits/ios_base.h	/^  noshowbase(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::noshowpoint	/usr/include/c++/10/bits/ios_base.h	/^  noshowpoint(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::noshowpos	/usr/include/c++/10/bits/ios_base.h	/^  noshowpos(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::noskipws	/usr/include/c++/10/bits/ios_base.h	/^  noskipws(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::not1	/usr/include/c++/10/bits/stl_function.h	/^    not1(const _Predicate& __pred)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR unary_negate<_Predicate>	signature:(const _Predicate & __pred)
std::not2	/usr/include/c++/10/bits/stl_function.h	/^    not2(const _Predicate& __pred)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR binary_negate<_Predicate>	signature:(const _Predicate & __pred)
std::not_a_directory	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      not_a_directory = 			ENOTDIR,$/;"	e	enum:std::errc	access:public
std::not_a_socket	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      not_a_socket = 				ENOTSOCK,$/;"	e	enum:std::errc	access:public
std::not_a_stream	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      not_a_stream = 				ENOSTR,$/;"	e	enum:std::errc	access:public
std::not_connected	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      not_connected = 				ENOTCONN,$/;"	e	enum:std::errc	access:public
std::not_enough_memory	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      not_enough_memory = 			ENOMEM,$/;"	e	enum:std::errc	access:public
std::not_equal_to	/usr/include/c++/10/bits/stl_function.h	/^    struct not_equal_to : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
std::not_equal_to	/usr/include/c++/10/bits/stl_function.h	/^    struct not_equal_to<void>$/;"	s	namespace:std
std::not_equal_to::is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::not_equal_to	typeref:typename:__is_transparent	access:public
std::not_equal_to::operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::not_equal_to	typeref:typename:auto	access:public	signature:(_Tp && __t,_Up && __u) const
std::not_equal_to::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::not_equal_to	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::not_supported	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      not_supported = 				ENOTSUP,$/;"	e	enum:std::errc	access:public
std::nounitbuf	/usr/include/c++/10/bits/ios_base.h	/^  nounitbuf(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::nouppercase	/usr/include/c++/10/bits/ios_base.h	/^  nouppercase(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::nullptr_t	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^  typedef decltype(nullptr)	nullptr_t;$/;"	t	namespace:std
std::num_get	/usr/include/c++/10/bits/locale_facets.h	/^    class num_get : public locale::facet$/;"	c	namespace:std	inherits:locale::facet
std::num_get::_M_extract_float	/usr/include/c++/10/bits/locale_facets.h	/^      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,$/;"	p	class:std::num_get	typeref:typename:_GLIBCXX_DEFAULT_ABI_TAG iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,string &) const
std::num_get::_M_extract_int	/usr/include/c++/10/bits/locale_facets.h	/^	_M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,$/;"	p	class:std::num_get	typeref:typename:_GLIBCXX_DEFAULT_ABI_TAG iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,_ValueT &) const
std::num_get::_M_find	/usr/include/c++/10/bits/locale_facets.h	/^	_M_find(const _CharT2*, size_t __len, _CharT2 __c) const$/;"	f	class:std::num_get	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT2>::__value,int>::__type	access:protected	signature:(const _CharT2 *,size_t __len,_CharT2 __c) const
std::num_get::__do_get	/usr/include/c++/10/bits/locale_facets.h	/^      __do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,$/;"	p	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,double &) const
std::num_get::__q	/usr/include/c++/10/bits/locale_facets.h	/^	  const char_type* __q = char_traits<_CharT2>::find(__zero, __len, __c);$/;"	m	class:std::num_get	typeref:typename:const char_type *	access:protected
std::num_get::__ret	/usr/include/c++/10/bits/locale_facets.h	/^	  int __ret = -1;$/;"	m	class:std::num_get	typeref:typename:int	access:protected
std::num_get::char_type	/usr/include/c++/10/bits/locale_facets.h	/^      typedef _CharT			char_type;$/;"	t	class:std::num_get	typeref:typename:_CharT	access:public
std::num_get::do_get	/usr/include/c++/10/bits/locale_facets.h	/^      do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,long & __v) const
std::num_get::do_get	/usr/include/c++/10/bits/locale_facets.h	/^      do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,long long & __v) const
std::num_get::do_get	/usr/include/c++/10/bits/locale_facets.h	/^      do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned int & __v) const
std::num_get::do_get	/usr/include/c++/10/bits/locale_facets.h	/^      do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned long & __v) const
std::num_get::do_get	/usr/include/c++/10/bits/locale_facets.h	/^      do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned long long & __v) const
std::num_get::do_get	/usr/include/c++/10/bits/locale_facets.h	/^      do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned short & __v) const
std::num_get::do_get	/usr/include/c++/10/bits/locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;$/;"	p	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,bool &) const
std::num_get::do_get	/usr/include/c++/10/bits/locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, float&) const;$/;"	p	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,float &) const
std::num_get::do_get	/usr/include/c++/10/bits/locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, void*&) const;$/;"	p	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,void * &) const
std::num_get::do_get	/usr/include/c++/10/bits/locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,$/;"	p	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,double &) const
std::num_get::do_get	/usr/include/c++/10/bits/locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,$/;"	p	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,long double &) const
std::num_get::get	/usr/include/c++/10/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,bool & __v) const
std::num_get::get	/usr/include/c++/10/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,double & __v) const
std::num_get::get	/usr/include/c++/10/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,float & __v) const
std::num_get::get	/usr/include/c++/10/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,long & __v) const
std::num_get::get	/usr/include/c++/10/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,long double & __v) const
std::num_get::get	/usr/include/c++/10/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,long long & __v) const
std::num_get::get	/usr/include/c++/10/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned int & __v) const
std::num_get::get	/usr/include/c++/10/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned long & __v) const
std::num_get::get	/usr/include/c++/10/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned long long & __v) const
std::num_get::get	/usr/include/c++/10/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned short & __v) const
std::num_get::get	/usr/include/c++/10/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,void * & __v) const
std::num_get::id	/usr/include/c++/10/bits/locale_facets.h	/^      static locale::id			id;$/;"	m	class:std::num_get	typeref:typename:locale::id	access:public
std::num_get::iter_type	/usr/include/c++/10/bits/locale_facets.h	/^      typedef _InIter			iter_type;$/;"	t	class:std::num_get	typeref:typename:_InIter	access:public
std::num_get::num_get	/usr/include/c++/10/bits/locale_facets.h	/^      num_get(size_t __refs = 0) : facet(__refs) { }$/;"	f	class:std::num_get	access:public	signature:(size_t __refs=0)
std::num_get::~num_get	/usr/include/c++/10/bits/locale_facets.h	/^      virtual ~num_get() { }$/;"	f	class:std::num_get	access:protected	signature:()
std::num_get<_CharT, _InIter>::id	/usr/include/c++/10/bits/locale_facets.h	/^    locale::id num_get<_CharT, _InIter>::id;$/;"	m	class:std::num_get<_CharT, _InIter>	typeref:typename:locale::id
std::num_put	/usr/include/c++/10/bits/locale_facets.h	/^    class num_put : public locale::facet$/;"	c	namespace:std	inherits:locale::facet
std::num_put::_M_group_float	/usr/include/c++/10/bits/locale_facets.h	/^      _M_group_float(const char* __grouping, size_t __grouping_size,$/;"	p	class:std::num_put	typeref:typename:void	access:protected	signature:(const char * __grouping,size_t __grouping_size,char_type __sep,const char_type * __p,char_type * __new,char_type * __cs,int & __len) const
std::num_put::_M_group_int	/usr/include/c++/10/bits/locale_facets.h	/^      _M_group_int(const char* __grouping, size_t __grouping_size,$/;"	p	class:std::num_put	typeref:typename:void	access:protected	signature:(const char * __grouping,size_t __grouping_size,char_type __sep,ios_base & __io,char_type * __new,char_type * __cs,int & __len) const
std::num_put::_M_insert_float	/usr/include/c++/10/bits/locale_facets.h	/^	_M_insert_float(iter_type, ios_base& __io, char_type __fill,$/;"	p	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base & __io,char_type __fill,char __mod,_ValueT __v) const
std::num_put::_M_insert_int	/usr/include/c++/10/bits/locale_facets.h	/^	_M_insert_int(iter_type, ios_base& __io, char_type __fill,$/;"	p	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base & __io,char_type __fill,_ValueT __v) const
std::num_put::_M_pad	/usr/include/c++/10/bits/locale_facets.h	/^      _M_pad(char_type __fill, streamsize __w, ios_base& __io,$/;"	p	class:std::num_put	typeref:typename:void	access:protected	signature:(char_type __fill,streamsize __w,ios_base & __io,char_type * __new,const char_type * __cs,int & __len) const
std::num_put::__do_put	/usr/include/c++/10/bits/locale_facets.h	/^      __do_put(iter_type, ios_base&, char_type, double) const;$/;"	p	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type,double) const
std::num_put::char_type	/usr/include/c++/10/bits/locale_facets.h	/^      typedef _CharT		char_type;$/;"	t	class:std::num_put	typeref:typename:_CharT	access:public
std::num_put::do_put	/usr/include/c++/10/bits/locale_facets.h	/^      do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const;$/;"	p	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type __s,ios_base & __io,char_type __fill,bool __v) const
std::num_put::do_put	/usr/include/c++/10/bits/locale_facets.h	/^      do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const$/;"	f	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type __s,ios_base & __io,char_type __fill,long __v) const
std::num_put::do_put	/usr/include/c++/10/bits/locale_facets.h	/^      do_put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type __s,ios_base & __io,char_type __fill,long long __v) const
std::num_put::do_put	/usr/include/c++/10/bits/locale_facets.h	/^      do_put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type __s,ios_base & __io,char_type __fill,unsigned long __v) const
std::num_put::do_put	/usr/include/c++/10/bits/locale_facets.h	/^      do_put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type __s,ios_base & __io,char_type __fill,unsigned long long __v) const
std::num_put::do_put	/usr/include/c++/10/bits/locale_facets.h	/^      do_put(iter_type, ios_base&, char_type, const void*) const;$/;"	p	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type,const void *) const
std::num_put::do_put	/usr/include/c++/10/bits/locale_facets.h	/^      do_put(iter_type, ios_base&, char_type, double) const;$/;"	p	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type,double) const
std::num_put::do_put	/usr/include/c++/10/bits/locale_facets.h	/^      do_put(iter_type, ios_base&, char_type, long double) const;$/;"	p	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type,long double) const
std::num_put::id	/usr/include/c++/10/bits/locale_facets.h	/^      static locale::id		id;$/;"	m	class:std::num_put	typeref:typename:locale::id	access:public
std::num_put::iter_type	/usr/include/c++/10/bits/locale_facets.h	/^      typedef _OutIter		iter_type;$/;"	t	class:std::num_put	typeref:typename:_OutIter	access:public
std::num_put::num_put	/usr/include/c++/10/bits/locale_facets.h	/^      num_put(size_t __refs = 0) : facet(__refs) { }$/;"	f	class:std::num_put	access:public	signature:(size_t __refs=0)
std::num_put::put	/usr/include/c++/10/bits/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const$/;"	f	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,bool __v) const
std::num_put::put	/usr/include/c++/10/bits/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill, double __v) const$/;"	f	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,double __v) const
std::num_put::put	/usr/include/c++/10/bits/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill, long __v) const$/;"	f	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,long __v) const
std::num_put::put	/usr/include/c++/10/bits/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill, long long __v) const$/;"	f	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,long long __v) const
std::num_put::put	/usr/include/c++/10/bits/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,const void * __v) const
std::num_put::put	/usr/include/c++/10/bits/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,long double __v) const
std::num_put::put	/usr/include/c++/10/bits/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,unsigned long __v) const
std::num_put::put	/usr/include/c++/10/bits/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,unsigned long long __v) const
std::num_put::~num_put	/usr/include/c++/10/bits/locale_facets.h	/^      ~num_put() { }$/;"	f	class:std::num_put	access:protected	signature:()
std::num_put<_CharT, _OutIter>::id	/usr/include/c++/10/bits/locale_facets.h	/^    locale::id num_put<_CharT, _OutIter>::id;$/;"	m	class:std::num_put<_CharT, _OutIter>	typeref:typename:locale::id
std::numpunct	/usr/include/c++/10/bits/locale_facets.h	/^    class numpunct : public locale::facet$/;"	c	namespace:std	inherits:locale::facet
std::numpunct::_M_data	/usr/include/c++/10/bits/locale_facets.h	/^      __cache_type*			_M_data;$/;"	m	class:std::numpunct	typeref:typename:__cache_type *	access:protected
std::numpunct::_M_initialize_numpunct	/usr/include/c++/10/bits/locale_facets.h	/^      _M_initialize_numpunct(__c_locale __cloc = 0);$/;"	p	class:std::numpunct	typeref:typename:void	access:protected	signature:(__c_locale __cloc=0)
std::numpunct::_M_initialize_numpunct	/usr/include/c++/10/bits/locale_facets.h	/^    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);$/;"	p	class:std::numpunct	typeref:typename:void	signature:(__c_locale __cloc)
std::numpunct::_M_initialize_numpunct	/usr/include/c++/10/bits/locale_facets.h	/^    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);$/;"	p	class:std::numpunct	typeref:typename:void	signature:(__c_locale __cloc)
std::numpunct::__cache_type	/usr/include/c++/10/bits/locale_facets.h	/^      typedef __numpunct_cache<_CharT>  __cache_type;$/;"	t	class:std::numpunct	typeref:typename:__numpunct_cache<_CharT>	access:public
std::numpunct::char_type	/usr/include/c++/10/bits/locale_facets.h	/^      typedef _CharT			char_type;$/;"	t	class:std::numpunct	typeref:typename:_CharT	access:public
std::numpunct::decimal_point	/usr/include/c++/10/bits/locale_facets.h	/^      decimal_point() const$/;"	f	class:std::numpunct	typeref:typename:char_type	access:public	signature:() const
std::numpunct::do_decimal_point	/usr/include/c++/10/bits/locale_facets.h	/^      do_decimal_point() const$/;"	f	class:std::numpunct	typeref:typename:char_type	access:protected	signature:() const
std::numpunct::do_falsename	/usr/include/c++/10/bits/locale_facets.h	/^      do_falsename() const$/;"	f	class:std::numpunct	typeref:typename:string_type	access:protected	signature:() const
std::numpunct::do_grouping	/usr/include/c++/10/bits/locale_facets.h	/^      do_grouping() const$/;"	f	class:std::numpunct	typeref:typename:string	access:protected	signature:() const
std::numpunct::do_thousands_sep	/usr/include/c++/10/bits/locale_facets.h	/^      do_thousands_sep() const$/;"	f	class:std::numpunct	typeref:typename:char_type	access:protected	signature:() const
std::numpunct::do_truename	/usr/include/c++/10/bits/locale_facets.h	/^      do_truename() const$/;"	f	class:std::numpunct	typeref:typename:string_type	access:protected	signature:() const
std::numpunct::falsename	/usr/include/c++/10/bits/locale_facets.h	/^      falsename() const$/;"	f	class:std::numpunct	typeref:typename:string_type	access:public	signature:() const
std::numpunct::grouping	/usr/include/c++/10/bits/locale_facets.h	/^      grouping() const$/;"	f	class:std::numpunct	typeref:typename:string	access:public	signature:() const
std::numpunct::id	/usr/include/c++/10/bits/locale_facets.h	/^      static locale::id			id;$/;"	m	class:std::numpunct	typeref:typename:locale::id	access:public
std::numpunct::numpunct	/usr/include/c++/10/bits/locale_facets.h	/^      numpunct(__c_locale __cloc, size_t __refs = 0)$/;"	f	class:std::numpunct	access:public	signature:(__c_locale __cloc,size_t __refs=0)
std::numpunct::numpunct	/usr/include/c++/10/bits/locale_facets.h	/^      numpunct(__cache_type* __cache, size_t __refs = 0)$/;"	f	class:std::numpunct	access:public	signature:(__cache_type * __cache,size_t __refs=0)
std::numpunct::numpunct	/usr/include/c++/10/bits/locale_facets.h	/^      numpunct(size_t __refs = 0)$/;"	f	class:std::numpunct	access:public	signature:(size_t __refs=0)
std::numpunct::string_type	/usr/include/c++/10/bits/locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	t	class:std::numpunct	typeref:typename:basic_string<_CharT>	access:public
std::numpunct::thousands_sep	/usr/include/c++/10/bits/locale_facets.h	/^      thousands_sep() const$/;"	f	class:std::numpunct	typeref:typename:char_type	access:public	signature:() const
std::numpunct::truename	/usr/include/c++/10/bits/locale_facets.h	/^      truename() const$/;"	f	class:std::numpunct	typeref:typename:string_type	access:public	signature:() const
std::numpunct::~numpunct	/usr/include/c++/10/bits/locale_facets.h	/^      ~numpunct();$/;"	p	class:std::numpunct	access:protected	signature:()
std::numpunct::~numpunct	/usr/include/c++/10/bits/locale_facets.h	/^    numpunct<char>::~numpunct();$/;"	p	class:std::numpunct	signature:()
std::numpunct::~numpunct	/usr/include/c++/10/bits/locale_facets.h	/^    numpunct<wchar_t>::~numpunct();$/;"	p	class:std::numpunct	signature:()
std::numpunct<_CharT>::id	/usr/include/c++/10/bits/locale_facets.h	/^    locale::id numpunct<_CharT>::id;$/;"	m	class:std::numpunct<_CharT>	typeref:typename:locale::id
std::numpunct_byname	/usr/include/c++/10/bits/locale_facets.h	/^    class numpunct_byname : public numpunct<_CharT>$/;"	c	namespace:std	inherits:numpunct<_CharT>
std::numpunct_byname::char_type	/usr/include/c++/10/bits/locale_facets.h	/^      typedef _CharT			char_type;$/;"	t	class:std::numpunct_byname	typeref:typename:_CharT	access:public
std::numpunct_byname::numpunct_byname	/usr/include/c++/10/bits/locale_facets.h	/^      numpunct_byname(const char* __s, size_t __refs = 0)$/;"	f	class:std::numpunct_byname	access:public	signature:(const char * __s,size_t __refs=0)
std::numpunct_byname::numpunct_byname	/usr/include/c++/10/bits/locale_facets.h	/^      numpunct_byname(const string& __s, size_t __refs = 0)$/;"	f	class:std::numpunct_byname	access:public	signature:(const string & __s,size_t __refs=0)
std::numpunct_byname::string_type	/usr/include/c++/10/bits/locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	t	class:std::numpunct_byname	typeref:typename:basic_string<_CharT>	access:public
std::numpunct_byname::~numpunct_byname	/usr/include/c++/10/bits/locale_facets.h	/^      ~numpunct_byname() { }$/;"	f	class:std::numpunct_byname	access:protected	signature:()
std::oct	/usr/include/c++/10/bits/ios_base.h	/^  oct(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::operation_canceled	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      operation_canceled = 			ECANCELED,$/;"	e	enum:std::errc	access:public
std::operation_in_progress	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      operation_in_progress = 			EINPROGRESS,$/;"	e	enum:std::errc	access:public
std::operation_not_permitted	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      operation_not_permitted = 		EPERM,$/;"	e	enum:std::errc	access:public
std::operation_not_supported	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      operation_not_supported = 		EOPNOTSUPP,$/;"	e	enum:std::errc	access:public
std::operation_would_block	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      operation_would_block = 			EWOULDBLOCK,$/;"	e	enum:std::errc	access:public
std::operator !=	/usr/include/c++/10/bits/allocator.h	/^      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const allocator &,const allocator &)
std::operator !=	/usr/include/c++/10/bits/allocator.h	/^    operator!=(const allocator<_T1>&, const allocator<_T2>&)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const allocator<_T1> &,const allocator<_T2> &)
std::operator !=	/usr/include/c++/10/bits/basic_string.h	/^    operator!=(const _CharT* __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator !=	/usr/include/c++/10/bits/basic_string.h	/^    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
std::operator !=	/usr/include/c++/10/bits/basic_string.h	/^    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator !=	/usr/include/c++/10/bits/postypes.h	/^    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)$/;"	f	namespace:std	typeref:typename:bool	signature:(const fpos<_StateT> & __lhs,const fpos<_StateT> & __rhs)
std::operator !=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator!=(const move_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_Iterator> & __x,const move_iterator<_Iterator> & __y)
std::operator !=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator!=(const move_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_IteratorL> & __x,const move_iterator<_IteratorR> & __y)
std::operator !=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator!=(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
std::operator !=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator!=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator !=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator!=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator !=	/usr/include/c++/10/bits/stl_pair.h	/^    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
std::operator !=	/usr/include/c++/10/bits/streambuf_iterator.h	/^    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,$/;"	f	namespace:std	typeref:typename:bool	signature:(const istreambuf_iterator<_CharT,_Traits> & __a,const istreambuf_iterator<_CharT,_Traits> & __b)
std::operator &	/usr/include/c++/10/bits/ios_base.h	/^  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR _Ios_Fmtflags	signature:(_Ios_Fmtflags __a,_Ios_Fmtflags __b)
std::operator &	/usr/include/c++/10/bits/ios_base.h	/^  operator&(_Ios_Iostate __a, _Ios_Iostate __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR _Ios_Iostate	signature:(_Ios_Iostate __a,_Ios_Iostate __b)
std::operator &	/usr/include/c++/10/bits/ios_base.h	/^  operator&(_Ios_Openmode __a, _Ios_Openmode __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR _Ios_Openmode	signature:(_Ios_Openmode __a,_Ios_Openmode __b)
std::operator &=	/usr/include/c++/10/bits/ios_base.h	/^  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)$/;"	f	namespace:std	typeref:typename:const _Ios_Fmtflags &	signature:(_Ios_Fmtflags & __a,_Ios_Fmtflags __b)
std::operator &=	/usr/include/c++/10/bits/ios_base.h	/^  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)$/;"	f	namespace:std	typeref:typename:const _Ios_Iostate &	signature:(_Ios_Iostate & __a,_Ios_Iostate __b)
std::operator &=	/usr/include/c++/10/bits/ios_base.h	/^  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)$/;"	f	namespace:std	typeref:typename:const _Ios_Openmode &	signature:(_Ios_Openmode & __a,_Ios_Openmode __b)
std::operator +	/usr/include/c++/10/bits/basic_string.h	/^    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);$/;"	p	namespace:std	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	signature:(_CharT __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator +	/usr/include/c++/10/bits/basic_string.h	/^    operator+(_CharT __lhs,$/;"	f	namespace:std	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	signature:(_CharT __lhs,basic_string<_CharT,_Traits,_Alloc> && __rhs)
std::operator +	/usr/include/c++/10/bits/basic_string.h	/^    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,$/;"	f	namespace:std	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	signature:(basic_string<_CharT,_Traits,_Alloc> && __lhs,_CharT __rhs)
std::operator +	/usr/include/c++/10/bits/basic_string.h	/^    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,$/;"	f	namespace:std	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	signature:(basic_string<_CharT,_Traits,_Alloc> && __lhs,basic_string<_CharT,_Traits,_Alloc> && __rhs)
std::operator +	/usr/include/c++/10/bits/basic_string.h	/^    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,$/;"	f	namespace:std	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	signature:(basic_string<_CharT,_Traits,_Alloc> && __lhs,const _CharT * __rhs)
std::operator +	/usr/include/c++/10/bits/basic_string.h	/^    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,$/;"	f	namespace:std	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	signature:(basic_string<_CharT,_Traits,_Alloc> && __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator +	/usr/include/c++/10/bits/basic_string.h	/^    operator+(const _CharT* __lhs,$/;"	f	namespace:std	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	signature:(const _CharT * __lhs,basic_string<_CharT,_Traits,_Alloc> && __rhs)
std::operator +	/usr/include/c++/10/bits/basic_string.h	/^    operator+(const _CharT* __lhs,$/;"	p	namespace:std	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator +	/usr/include/c++/10/bits/basic_string.h	/^    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)$/;"	f	namespace:std	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,_CharT __rhs)
std::operator +	/usr/include/c++/10/bits/basic_string.h	/^    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_END_NAMESPACE_CXX11 basic_string<_CharT,_Traits,_Alloc>	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator +	/usr/include/c++/10/bits/basic_string.h	/^    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,basic_string<_CharT,_Traits,_Alloc> && __rhs)
std::operator +	/usr/include/c++/10/bits/basic_string.h	/^    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:basic_string<_CharT,_Traits,_Alloc>	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
std::operator +	/usr/include/c++/10/bits/stl_iterator.h	/^      operator+(iter_difference_t<_It> __n, const counted_iterator& __x)$/;"	f	namespace:std	typeref:typename:counted_iterator	signature:(iter_difference_t<_It> __n,const counted_iterator & __x)
std::operator +	/usr/include/c++/10/bits/stl_iterator.h	/^    operator+(typename move_iterator<_Iterator>::difference_type __n,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator<_Iterator>	signature:(typename move_iterator<_Iterator>::difference_type __n,const move_iterator<_Iterator> & __x)
std::operator +	/usr/include/c++/10/bits/stl_iterator.h	/^    operator+(typename reverse_iterator<_Iterator>::difference_type __n,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>	signature:(typename reverse_iterator<_Iterator>::difference_type __n,const reverse_iterator<_Iterator> & __x)
std::operator +::_Alloc_traits::is_always_equal	/usr/include/c++/10/bits/basic_string.h	/^      if _GLIBCXX17_CONSTEXPR (typename _Alloc_traits::is_always_equal{})$/;"	m	class:std::operator +::_Alloc_traits	typeref:meta:typename	file:
std::operator -	/usr/include/c++/10/bits/stl_iterator.h	/^	operator-(const counted_iterator& __x,$/;"	f	namespace:std	typeref:typename:iter_difference_t<_It2>	signature:(const counted_iterator & __x,const counted_iterator<_It2> & __y)
std::operator -	/usr/include/c++/10/bits/stl_iterator.h	/^	operator-(const move_iterator& __x, const move_sentinel<_Sent>& __y)$/;"	f	namespace:std	typeref:typename:iter_difference_t<_Iterator>	signature:(const move_iterator & __x,const move_sentinel<_Sent> & __y)
std::operator -	/usr/include/c++/10/bits/stl_iterator.h	/^	operator-(const move_sentinel<_Sent>& __x, const move_iterator& __y)$/;"	f	namespace:std	typeref:typename:iter_difference_t<_Iterator>	signature:(const move_sentinel<_Sent> & __x,const move_iterator & __y)
std::operator -	/usr/include/c++/10/bits/stl_iterator.h	/^      operator-(const common_iterator& __x,$/;"	f	namespace:std	typeref:typename:requires sized_sentinel_for<_Sent,_It2> iter_difference_t<_It2>	signature:(const common_iterator & __x,const common_iterator<_It2,_Sent2> & __y)
std::operator -	/usr/include/c++/10/bits/stl_iterator.h	/^      operator-(const counted_iterator& __x, default_sentinel_t)$/;"	f	namespace:std	typeref:typename:iter_difference_t<_It>	signature:(const counted_iterator & __x,default_sentinel_t)
std::operator -	/usr/include/c++/10/bits/stl_iterator.h	/^      operator-(default_sentinel_t, const counted_iterator& __y)$/;"	f	namespace:std	typeref:typename:iter_difference_t<_It>	signature:(default_sentinel_t,const counted_iterator & __y)
std::operator -	/usr/include/c++/10/bits/stl_iterator.h	/^    operator-(const move_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:decltype (__x.base ()-__y.base ())	signature:(const move_iterator<_IteratorL> & __x,const move_iterator<_IteratorR> & __y)
std::operator -	/usr/include/c++/10/bits/stl_iterator.h	/^    operator-(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:reverse_iterator<_Iterator>::difference_type	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
std::operator -	/usr/include/c++/10/bits/stl_iterator.h	/^    operator-(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:decltype (__y.base ()-__x.base ())	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator -	/usr/include/c++/10/bits/stl_iterator.h	/^    operator-(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:reverse_iterator<_IteratorL>::difference_type	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator <	/usr/include/c++/10/bits/basic_string.h	/^    operator<(const _CharT* __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator <	/usr/include/c++/10/bits/basic_string.h	/^    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
std::operator <	/usr/include/c++/10/bits/basic_string.h	/^    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator <	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<(const move_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_Iterator> & __x,const move_iterator<_Iterator> & __y)
std::operator <	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<(const move_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_IteratorL> & __x,const move_iterator<_IteratorR> & __y)
std::operator <	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
std::operator <	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator <	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator <	/usr/include/c++/10/bits/stl_pair.h	/^    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
std::operator <<	/usr/include/c++/10/bits/basic_string.h	/^    operator<<(basic_ostream<_CharT, _Traits>& __os,$/;"	f	namespace:std	typeref:typename:basic_ostream<_CharT,_Traits> &	signature:(basic_ostream<_CharT,_Traits> & __os,const basic_string<_CharT,_Traits,_Alloc> & __str)
std::operator <=	/usr/include/c++/10/bits/basic_string.h	/^    operator<=(const _CharT* __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator <=	/usr/include/c++/10/bits/basic_string.h	/^    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
std::operator <=	/usr/include/c++/10/bits/basic_string.h	/^    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator <=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<=(const move_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_Iterator> & __x,const move_iterator<_Iterator> & __y)
std::operator <=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<=(const move_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_IteratorL> & __x,const move_iterator<_IteratorR> & __y)
std::operator <=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<=(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
std::operator <=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator <=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator <=	/usr/include/c++/10/bits/stl_pair.h	/^    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
std::operator <=>	/usr/include/c++/10/bits/basic_string.h	/^    operator<=>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:auto	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
std::operator <=>	/usr/include/c++/10/bits/basic_string.h	/^    operator<=>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:auto	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator <=>	/usr/include/c++/10/bits/stl_iterator.h	/^	operator<=>(const counted_iterator& __x,$/;"	f	namespace:std	typeref:typename:strong_ordering	signature:(const counted_iterator & __x,const counted_iterator<_It2> & __y)
std::operator <=>	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<=>(const move_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:compare_three_way_result_t<_IteratorL,_IteratorR>	signature:(const move_iterator<_IteratorL> & __x,const move_iterator<_IteratorR> & __y)
std::operator <=>	/usr/include/c++/10/bits/stl_iterator.h	/^    operator<=>(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:compare_three_way_result_t<_IteratorL,_IteratorR>	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator <=>	/usr/include/c++/10/bits/stl_pair.h	/^    operator<=>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	typeref:typename:common_comparison_category_t<__detail::__synth3way_t<_T1>,__detail::__synth3way_t<_T2>>	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
std::operator ==	/usr/include/c++/10/bits/allocator.h	/^      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const allocator &,const allocator &)
std::operator ==	/usr/include/c++/10/bits/allocator.h	/^    operator==(const allocator<_T1>&, const allocator<_T2>&)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const allocator<_T1> &,const allocator<_T2> &)
std::operator ==	/usr/include/c++/10/bits/basic_string.h	/^    operator==(const _CharT* __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator ==	/usr/include/c++/10/bits/basic_string.h	/^    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
std::operator ==	/usr/include/c++/10/bits/basic_string.h	/^    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator ==	/usr/include/c++/10/bits/basic_string.h	/^    operator==(const basic_string<_CharT>& __lhs,$/;"	f	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,bool>::__type	signature:(const basic_string<_CharT> & __lhs,const basic_string<_CharT> & __rhs)
std::operator ==	/usr/include/c++/10/bits/iterator_concepts.h	/^      operator==(unreachable_sentinel_t, const _It&) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(unreachable_sentinel_t,const _It &)
std::operator ==	/usr/include/c++/10/bits/postypes.h	/^    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)$/;"	f	namespace:std	typeref:typename:bool	signature:(const fpos<_StateT> & __lhs,const fpos<_StateT> & __rhs)
std::operator ==	/usr/include/c++/10/bits/stl_iterator.h	/^	operator==(const counted_iterator& __x,$/;"	f	namespace:std	typeref:typename:bool	signature:(const counted_iterator & __x,const counted_iterator<_It2> & __y)
std::operator ==	/usr/include/c++/10/bits/stl_iterator.h	/^	operator==(const move_iterator& __x, const move_sentinel<_Sent>& __y)$/;"	f	namespace:std	typeref:typename:bool	signature:(const move_iterator & __x,const move_sentinel<_Sent> & __y)
std::operator ==	/usr/include/c++/10/bits/stl_iterator.h	/^      operator==(const common_iterator& __x,$/;"	f	namespace:std	typeref:typename:requires sentinel_for<_Sent,_It2> && equality_comparable_with<_It,_It2> bool	signature:(const common_iterator & __x,const common_iterator<_It2,_Sent2> & __y)
std::operator ==	/usr/include/c++/10/bits/stl_iterator.h	/^      operator==(const common_iterator& __x,$/;"	f	namespace:std	typeref:typename:requires sentinel_for<_Sent,_It2> bool	signature:(const common_iterator & __x,const common_iterator<_It2,_Sent2> & __y)
std::operator ==	/usr/include/c++/10/bits/stl_iterator.h	/^      operator==(const counted_iterator& __x, default_sentinel_t)$/;"	f	namespace:std	typeref:typename:bool	signature:(const counted_iterator & __x,default_sentinel_t)
std::operator ==	/usr/include/c++/10/bits/stl_iterator.h	/^    operator==(const move_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_Iterator> & __x,const move_iterator<_Iterator> & __y)
std::operator ==	/usr/include/c++/10/bits/stl_iterator.h	/^    operator==(const move_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_IteratorL> & __x,const move_iterator<_IteratorR> & __y)
std::operator ==	/usr/include/c++/10/bits/stl_iterator.h	/^    operator==(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
std::operator ==	/usr/include/c++/10/bits/stl_iterator.h	/^    operator==(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator ==	/usr/include/c++/10/bits/stl_iterator.h	/^    operator==(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator ==	/usr/include/c++/10/bits/stl_pair.h	/^    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
std::operator ==	/usr/include/c++/10/bits/streambuf_iterator.h	/^      operator==(const istreambuf_iterator& __i, default_sentinel_t __s)$/;"	f	namespace:std	typeref:typename:bool	signature:(const istreambuf_iterator & __i,default_sentinel_t __s)
std::operator ==	/usr/include/c++/10/bits/streambuf_iterator.h	/^    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,$/;"	f	namespace:std	typeref:typename:bool	signature:(const istreambuf_iterator<_CharT,_Traits> & __a,const istreambuf_iterator<_CharT,_Traits> & __b)
std::operator >	/usr/include/c++/10/bits/basic_string.h	/^    operator>(const _CharT* __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator >	/usr/include/c++/10/bits/basic_string.h	/^    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
std::operator >	/usr/include/c++/10/bits/basic_string.h	/^    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator >	/usr/include/c++/10/bits/stl_iterator.h	/^    operator>(const move_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_Iterator> & __x,const move_iterator<_Iterator> & __y)
std::operator >	/usr/include/c++/10/bits/stl_iterator.h	/^    operator>(const move_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_IteratorL> & __x,const move_iterator<_IteratorR> & __y)
std::operator >	/usr/include/c++/10/bits/stl_iterator.h	/^    operator>(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
std::operator >	/usr/include/c++/10/bits/stl_iterator.h	/^    operator>(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator >	/usr/include/c++/10/bits/stl_iterator.h	/^    operator>(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator >	/usr/include/c++/10/bits/stl_pair.h	/^    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
std::operator >=	/usr/include/c++/10/bits/basic_string.h	/^    operator>=(const _CharT* __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator >=	/usr/include/c++/10/bits/basic_string.h	/^    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
std::operator >=	/usr/include/c++/10/bits/basic_string.h	/^    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator >=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator>=(const move_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_Iterator> & __x,const move_iterator<_Iterator> & __y)
std::operator >=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator>=(const move_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_IteratorL> & __x,const move_iterator<_IteratorR> & __y)
std::operator >=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator>=(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
std::operator >=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator>=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator >=	/usr/include/c++/10/bits/stl_iterator.h	/^    operator>=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator >=	/usr/include/c++/10/bits/stl_pair.h	/^    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
std::operator >>	/usr/include/c++/10/bits/basic_string.h	/^    operator>>(basic_istream<_CharT, _Traits>& __is,$/;"	p	namespace:std	typeref:typename:basic_istream<_CharT,_Traits> &	signature:(basic_istream<_CharT,_Traits> & __is,basic_string<_CharT,_Traits,_Alloc> & __str)
std::operator >>	/usr/include/c++/10/bits/basic_string.h	/^    operator>>(basic_istream<char>& __is, basic_string<char>& __str);$/;"	p	namespace:std	typeref:typename:basic_istream<char> &	signature:(basic_istream<char> & __is,basic_string<char> & __str)
std::operator ^	/usr/include/c++/10/bits/ios_base.h	/^  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR _Ios_Fmtflags	signature:(_Ios_Fmtflags __a,_Ios_Fmtflags __b)
std::operator ^	/usr/include/c++/10/bits/ios_base.h	/^  operator^(_Ios_Iostate __a, _Ios_Iostate __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR _Ios_Iostate	signature:(_Ios_Iostate __a,_Ios_Iostate __b)
std::operator ^	/usr/include/c++/10/bits/ios_base.h	/^  operator^(_Ios_Openmode __a, _Ios_Openmode __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR _Ios_Openmode	signature:(_Ios_Openmode __a,_Ios_Openmode __b)
std::operator ^=	/usr/include/c++/10/bits/ios_base.h	/^  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)$/;"	f	namespace:std	typeref:typename:const _Ios_Fmtflags &	signature:(_Ios_Fmtflags & __a,_Ios_Fmtflags __b)
std::operator ^=	/usr/include/c++/10/bits/ios_base.h	/^  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)$/;"	f	namespace:std	typeref:typename:const _Ios_Iostate &	signature:(_Ios_Iostate & __a,_Ios_Iostate __b)
std::operator ^=	/usr/include/c++/10/bits/ios_base.h	/^  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)$/;"	f	namespace:std	typeref:typename:const _Ios_Openmode &	signature:(_Ios_Openmode & __a,_Ios_Openmode __b)
std::operator |	/usr/include/c++/10/bits/ios_base.h	/^  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR _Ios_Fmtflags	signature:(_Ios_Fmtflags __a,_Ios_Fmtflags __b)
std::operator |	/usr/include/c++/10/bits/ios_base.h	/^  operator|(_Ios_Iostate __a, _Ios_Iostate __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR _Ios_Iostate	signature:(_Ios_Iostate __a,_Ios_Iostate __b)
std::operator |	/usr/include/c++/10/bits/ios_base.h	/^  operator|(_Ios_Openmode __a, _Ios_Openmode __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR _Ios_Openmode	signature:(_Ios_Openmode __a,_Ios_Openmode __b)
std::operator |=	/usr/include/c++/10/bits/ios_base.h	/^  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)$/;"	f	namespace:std	typeref:typename:const _Ios_Fmtflags &	signature:(_Ios_Fmtflags & __a,_Ios_Fmtflags __b)
std::operator |=	/usr/include/c++/10/bits/ios_base.h	/^  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)$/;"	f	namespace:std	typeref:typename:const _Ios_Iostate &	signature:(_Ios_Iostate & __a,_Ios_Iostate __b)
std::operator |=	/usr/include/c++/10/bits/ios_base.h	/^  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)$/;"	f	namespace:std	typeref:typename:const _Ios_Openmode &	signature:(_Ios_Openmode & __a,_Ios_Openmode __b)
std::operator ~	/usr/include/c++/10/bits/ios_base.h	/^  operator~(_Ios_Fmtflags __a)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR _Ios_Fmtflags	signature:(_Ios_Fmtflags __a)
std::operator ~	/usr/include/c++/10/bits/ios_base.h	/^  operator~(_Ios_Iostate __a)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR _Ios_Iostate	signature:(_Ios_Iostate __a)
std::operator ~	/usr/include/c++/10/bits/ios_base.h	/^  operator~(_Ios_Openmode __a)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR _Ios_Openmode	signature:(_Ios_Openmode __a)
std::ostreambuf_iterator	/usr/include/c++/10/bits/streambuf_iterator.h	/^    class ostreambuf_iterator$/;"	c	namespace:std	inherits:iterator<output_iterator_tag,void,void,void,void>
std::ostreambuf_iterator::_M_failed	/usr/include/c++/10/bits/streambuf_iterator.h	/^      bool		_M_failed;$/;"	m	class:std::ostreambuf_iterator	typeref:typename:bool	access:private
std::ostreambuf_iterator::_M_put	/usr/include/c++/10/bits/streambuf_iterator.h	/^      _M_put(const _CharT* __ws, streamsize __len)$/;"	f	class:std::ostreambuf_iterator	typeref:typename:ostreambuf_iterator &	access:public	signature:(const _CharT * __ws,streamsize __len)
std::ostreambuf_iterator::_M_sbuf	/usr/include/c++/10/bits/streambuf_iterator.h	/^      streambuf_type*	_M_sbuf;$/;"	m	class:std::ostreambuf_iterator	typeref:typename:streambuf_type *	access:private
std::ostreambuf_iterator::char_type	/usr/include/c++/10/bits/streambuf_iterator.h	/^      typedef _CharT			       char_type;$/;"	t	class:std::ostreambuf_iterator	typeref:typename:_CharT	access:public
std::ostreambuf_iterator::difference_type	/usr/include/c++/10/bits/streambuf_iterator.h	/^      using difference_type = ptrdiff_t;$/;"	t	class:std::ostreambuf_iterator	typeref:typename:ptrdiff_t	access:public
std::ostreambuf_iterator::failed	/usr/include/c++/10/bits/streambuf_iterator.h	/^      failed() const _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::ostreambuf_iterator	typeref:typename:bool	access:public	signature:() const
std::ostreambuf_iterator::operator *	/usr/include/c++/10/bits/streambuf_iterator.h	/^      operator*()$/;"	f	class:std::ostreambuf_iterator	typeref:typename:ostreambuf_iterator &	access:public	signature:()
std::ostreambuf_iterator::operator ++	/usr/include/c++/10/bits/streambuf_iterator.h	/^      operator++()$/;"	f	class:std::ostreambuf_iterator	typeref:typename:ostreambuf_iterator &	access:public	signature:()
std::ostreambuf_iterator::operator ++	/usr/include/c++/10/bits/streambuf_iterator.h	/^      operator++(int)$/;"	f	class:std::ostreambuf_iterator	typeref:typename:ostreambuf_iterator &	access:public	signature:(int)
std::ostreambuf_iterator::operator =	/usr/include/c++/10/bits/streambuf_iterator.h	/^      operator=(_CharT __c)$/;"	f	class:std::ostreambuf_iterator	typeref:typename:ostreambuf_iterator &	access:public	signature:(_CharT __c)
std::ostreambuf_iterator::ostream_type	/usr/include/c++/10/bits/streambuf_iterator.h	/^      typedef basic_ostream<_CharT, _Traits>   ostream_type;$/;"	t	class:std::ostreambuf_iterator	typeref:typename:basic_ostream<_CharT,_Traits>	access:public
std::ostreambuf_iterator::ostreambuf_iterator	/usr/include/c++/10/bits/streambuf_iterator.h	/^      ostreambuf_iterator() noexcept$/;"	f	class:std::ostreambuf_iterator	access:public	signature:()
std::ostreambuf_iterator::ostreambuf_iterator	/usr/include/c++/10/bits/streambuf_iterator.h	/^      ostreambuf_iterator(ostream_type& __s) _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::ostreambuf_iterator	access:public	signature:(ostream_type & __s)
std::ostreambuf_iterator::ostreambuf_iterator	/usr/include/c++/10/bits/streambuf_iterator.h	/^      ostreambuf_iterator(streambuf_type* __s) _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::ostreambuf_iterator	access:public	signature:(streambuf_type * __s)
std::ostreambuf_iterator::streambuf_type	/usr/include/c++/10/bits/streambuf_iterator.h	/^      typedef basic_streambuf<_CharT, _Traits> streambuf_type;$/;"	t	class:std::ostreambuf_iterator	typeref:typename:basic_streambuf<_CharT,_Traits>	access:public
std::ostreambuf_iterator::traits_type	/usr/include/c++/10/bits/streambuf_iterator.h	/^      typedef _Traits			       traits_type;$/;"	t	class:std::ostreambuf_iterator	typeref:typename:_Traits	access:public
std::output_iterator_tag	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^  struct output_iterator_tag { };$/;"	s	namespace:std
std::owner_dead	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      owner_dead = 				EOWNERDEAD,$/;"	e	enum:std::errc	access:public
std::pair	/usr/include/c++/10/bits/stl_pair.h	/^    struct pair$/;"	s	namespace:std	inherits:__pair_base<_T1,_T2>
std::pair	/usr/include/c++/10/bits/stl_pair.h	/^  template<typename _T1, typename _T2> pair(_T1, _T2) -> pair<_T1, _T2>;$/;"	p	namespace:std	signature:(_T1,_T2)
std::pair::_PCCFP	/usr/include/c++/10/bits/stl_pair.h	/^        using _PCCFP = _PCC<!is_same<_T1, _U1>::value$/;"	t	struct:std::pair	typeref:typename:_PCC<!is_same<_T1,_U1>::value||!is_same<_T2,_U2> _T2>	access:public
std::pair::_PCCP	/usr/include/c++/10/bits/stl_pair.h	/^      using _PCCP = _PCC<true, _T1, _T2>;$/;"	t	struct:std::pair	typeref:typename:_PCC<true,_T1,_T2>	access:public
std::pair::_T1	/usr/include/c++/10/bits/stl_pair.h	/^			    _T1, _T2>;$/;"	t	struct:std::pair	typeref:typename:_PCC<!is_same<_T1,_U1>::value||!is_same<_T2,_U2>	access:public
std::pair::first	/usr/include/c++/10/bits/stl_pair.h	/^      _T1 first;                 \/\/\/< The first member$/;"	m	struct:std::pair	typeref:typename:_T1	access:public
std::pair::first_type	/usr/include/c++/10/bits/stl_pair.h	/^      typedef _T1 first_type;    \/\/\/< The type of the `first` member$/;"	t	struct:std::pair	typeref:typename:_T1	access:public
std::pair::operator =	/usr/include/c++/10/bits/stl_pair.h	/^	operator=(const pair<_U1, _U2>& __p)$/;"	f	struct:std::pair	access:public	signature:(const pair<_U1,_U2> & __p)
std::pair::operator =	/usr/include/c++/10/bits/stl_pair.h	/^	operator=(pair<_U1, _U2>&& __p)$/;"	f	struct:std::pair	access:public	signature:(pair<_U1,_U2> && __p)
std::pair::operator =	/usr/include/c++/10/bits/stl_pair.h	/^      operator=(typename conditional<$/;"	f	struct:std::pair	typeref:typename:_GLIBCXX20_CONSTEXPR pair &	access:public	signature:(typename conditional<__and_<is_copy_assignable<_T1>,is_copy_assignable<_T2>>::value,const pair &,const __nonesuch &>::type __p)
std::pair::operator =	/usr/include/c++/10/bits/stl_pair.h	/^      operator=(typename conditional<$/;"	f	struct:std::pair	typeref:typename:_GLIBCXX20_CONSTEXPR pair &	access:public	signature:(typename conditional<__and_<is_move_assignable<_T1>,is_move_assignable<_T2>>::value,pair &&,__nonesuch &&>::type __p)
std::pair::pair	/usr/include/c++/10/bits/stl_pair.h	/^	constexpr pair(_U1&& __x, _U2&& __y)$/;"	f	struct:std::pair	access:public	signature:(_U1 && __x,_U2 && __y)
std::pair::pair	/usr/include/c++/10/bits/stl_pair.h	/^	constexpr pair(pair<_U1, _U2>&& __p)$/;"	f	struct:std::pair	access:public	signature:(pair<_U1,_U2> && __p)
std::pair::pair	/usr/include/c++/10/bits/stl_pair.h	/^	explicit constexpr pair(_U1&& __x, _U2&& __y)$/;"	f	struct:std::pair	access:public	signature:(_U1 && __x,_U2 && __y)
std::pair::pair	/usr/include/c++/10/bits/stl_pair.h	/^	explicit constexpr pair(const pair<_U1, _U2>& __p)$/;"	f	struct:std::pair	access:public	signature:(const pair<_U1,_U2> & __p)
std::pair::pair	/usr/include/c++/10/bits/stl_pair.h	/^	explicit constexpr pair(pair<_U1, _U2>&& __p)$/;"	f	struct:std::pair	access:public	signature:(pair<_U1,_U2> && __p)
std::pair::pair	/usr/include/c++/10/bits/stl_pair.h	/^	pair(const pair<_U1, _U2>& __p)$/;"	f	struct:std::pair	access:public	signature:(const pair<_U1,_U2> & __p)
std::pair::pair	/usr/include/c++/10/bits/stl_pair.h	/^        constexpr pair(const pair<_U1, _U2>& __p)$/;"	f	struct:std::pair	access:public	signature:(const pair<_U1,_U2> & __p)
std::pair::pair	/usr/include/c++/10/bits/stl_pair.h	/^        pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);$/;"	p	struct:std::pair	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(piecewise_construct_t,tuple<_Args1...>,tuple<_Args2...>)
std::pair::pair	/usr/include/c++/10/bits/stl_pair.h	/^        pair(tuple<_Args1...>&, tuple<_Args2...>&,$/;"	p	struct:std::pair	typeref:typename:_GLIBCXX20_CONSTEXPR	access:private	signature:(tuple<_Args1...> &,tuple<_Args2...> &,_Index_tuple<_Indexes1...>,_Index_tuple<_Indexes2...>)
std::pair::pair	/usr/include/c++/10/bits/stl_pair.h	/^       constexpr pair(_U1&& __x, const _T2& __y)$/;"	f	struct:std::pair	access:public	signature:(_U1 && __x,const _T2 & __y)
std::pair::pair	/usr/include/c++/10/bits/stl_pair.h	/^       constexpr pair(const _T1& __x, _U2&& __y)$/;"	f	struct:std::pair	access:public	signature:(const _T1 & __x,_U2 && __y)
std::pair::pair	/usr/include/c++/10/bits/stl_pair.h	/^       explicit constexpr pair(_U1&& __x, const _T2& __y)$/;"	f	struct:std::pair	access:public	signature:(_U1 && __x,const _T2 & __y)
std::pair::pair	/usr/include/c++/10/bits/stl_pair.h	/^       explicit pair(const _T1& __x, _U2&& __y)$/;"	f	struct:std::pair	access:public	signature:(const _T1 & __x,_U2 && __y)
std::pair::pair	/usr/include/c++/10/bits/stl_pair.h	/^      _GLIBCXX_CONSTEXPR pair()$/;"	f	struct:std::pair	typeref:typename:_GLIBCXX_CONSTEXPR	access:public	signature:()
std::pair::pair	/usr/include/c++/10/bits/stl_pair.h	/^      constexpr pair(const _T1& __a, const _T2& __b)$/;"	f	struct:std::pair	access:public	signature:(const _T1 & __a,const _T2 & __b)
std::pair::pair	/usr/include/c++/10/bits/stl_pair.h	/^      constexpr pair(const pair&) = default;	\/\/\/< Copy constructor$/;"	p	struct:std::pair	access:public	signature:(const pair &)
std::pair::pair	/usr/include/c++/10/bits/stl_pair.h	/^      constexpr pair(pair&&) = default;		\/\/\/< Move constructor$/;"	p	struct:std::pair	access:public	signature:(pair &&)
std::pair::pair	/usr/include/c++/10/bits/stl_pair.h	/^      explicit constexpr pair()$/;"	f	struct:std::pair	access:public	signature:()
std::pair::pair	/usr/include/c++/10/bits/stl_pair.h	/^      explicit constexpr pair(const _T1& __a, const _T2& __b)$/;"	f	struct:std::pair	access:public	signature:(const _T1 & __a,const _T2 & __b)
std::pair::pair	/usr/include/c++/10/bits/stl_pair.h	/^      pair(const _T1& __a, const _T2& __b)$/;"	f	struct:std::pair	access:public	signature:(const _T1 & __a,const _T2 & __b)
std::pair::second	/usr/include/c++/10/bits/stl_pair.h	/^      _T2 second;                \/\/\/< The second member$/;"	m	struct:std::pair	typeref:typename:_T2	access:public
std::pair::second_type	/usr/include/c++/10/bits/stl_pair.h	/^      typedef _T2 second_type;   \/\/\/< The type of the `second` member$/;"	t	struct:std::pair	typeref:typename:_T2	access:public
std::pair::swap	/usr/include/c++/10/bits/stl_pair.h	/^      swap(pair& __p)$/;"	f	struct:std::pair	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(pair & __p)
std::pair::value	/usr/include/c++/10/bits/stl_pair.h	/^			    || !is_same<_T2, _U2>::value,$/;"	t	struct:std::pair	typeref:typename:_PCC<!is_same<_T1,_U1>::value||!is_same<_T2,_U2>::	access:public
std::permission_denied	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      permission_denied = 			EACCES,$/;"	e	enum:std::errc	access:public
std::piecewise_construct	/usr/include/c++/10/bits/stl_pair.h	/^  _GLIBCXX17_INLINE constexpr piecewise_construct_t piecewise_construct =$/;"	v	namespace:std	typeref:typename:_GLIBCXX17_INLINE piecewise_construct_t
std::piecewise_construct_t	/usr/include/c++/10/bits/stl_pair.h	/^  struct piecewise_construct_t { explicit piecewise_construct_t() = default; };$/;"	s	namespace:std
std::piecewise_construct_t::piecewise_construct_t	/usr/include/c++/10/bits/stl_pair.h	/^  struct piecewise_construct_t { explicit piecewise_construct_t() = default; };$/;"	p	struct:std::piecewise_construct_t	access:public	signature:()
std::plus	/usr/include/c++/10/bits/stl_function.h	/^    struct plus : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
std::plus	/usr/include/c++/10/bits/stl_function.h	/^    struct plus<void>$/;"	s	namespace:std
std::plus::is_transparent	/usr/include/c++/10/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::plus	typeref:typename:__is_transparent	access:public
std::plus::operator ()	/usr/include/c++/10/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::plus	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
std::plus::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::plus	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::pointer_to_binary_function	/usr/include/c++/10/bits/stl_function.h	/^    class pointer_to_binary_function$/;"	c	namespace:std	inherits:binary_function<_Arg1,_Arg2,_Result>
std::pointer_to_binary_function::_M_ptr	/usr/include/c++/10/bits/stl_function.h	/^      _Result (*_M_ptr)(_Arg1, _Arg2);$/;"	m	class:std::pointer_to_binary_function	typeref:typename:_Result (*)(_Arg1,_Arg2)	access:protected
std::pointer_to_binary_function::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(_Arg1 __x, _Arg2 __y) const$/;"	f	class:std::pointer_to_binary_function	typeref:typename:_Result	access:public	signature:(_Arg1 __x,_Arg2 __y) const
std::pointer_to_binary_function::pointer_to_binary_function	/usr/include/c++/10/bits/stl_function.h	/^      pointer_to_binary_function() { }$/;"	f	class:std::pointer_to_binary_function	access:public	signature:()
std::pointer_to_binary_function::pointer_to_binary_function	/usr/include/c++/10/bits/stl_function.h	/^      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))$/;"	f	class:std::pointer_to_binary_function	access:public	signature:(_Result (* __x)(_Arg1,_Arg2))
std::pointer_to_unary_function	/usr/include/c++/10/bits/stl_function.h	/^    class pointer_to_unary_function : public unary_function<_Arg, _Result>$/;"	c	namespace:std	inherits:unary_function<_Arg,_Result>
std::pointer_to_unary_function::_M_ptr	/usr/include/c++/10/bits/stl_function.h	/^      _Result (*_M_ptr)(_Arg);$/;"	m	class:std::pointer_to_unary_function	typeref:typename:_Result (*)(_Arg)	access:protected
std::pointer_to_unary_function::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(_Arg __x) const$/;"	f	class:std::pointer_to_unary_function	typeref:typename:_Result	access:public	signature:(_Arg __x) const
std::pointer_to_unary_function::pointer_to_unary_function	/usr/include/c++/10/bits/stl_function.h	/^      pointer_to_unary_function() { }$/;"	f	class:std::pointer_to_unary_function	access:public	signature:()
std::pointer_to_unary_function::pointer_to_unary_function	/usr/include/c++/10/bits/stl_function.h	/^      pointer_to_unary_function(_Result (*__x)(_Arg))$/;"	f	class:std::pointer_to_unary_function	access:public	signature:(_Result (* __x)(_Arg))
std::pointer_traits	/usr/include/c++/10/bits/ptr_traits.h	/^    struct pointer_traits$/;"	s	namespace:std
std::pointer_traits	/usr/include/c++/10/bits/ptr_traits.h	/^    struct pointer_traits<_Tp*>$/;"	s	namespace:std
std::pointer_traits::__difference_type	/usr/include/c++/10/bits/ptr_traits.h	/^	using __difference_type = typename _Tp::difference_type;$/;"	t	struct:std::pointer_traits	typeref:typename:_Tp::difference_type	access:private
std::pointer_traits::__element_type	/usr/include/c++/10/bits/ptr_traits.h	/^	using __element_type = typename _Tp::element_type;$/;"	t	struct:std::pointer_traits	typeref:typename:_Tp::element_type	access:private
std::pointer_traits::__rebind	/usr/include/c++/10/bits/ptr_traits.h	/^	struct __rebind : __replace_first_arg<_Tp, _Up> { };$/;"	s	struct:std::pointer_traits	inherits:__replace_first_arg<_Tp,_Up>	access:private
std::pointer_traits::__rebind	/usr/include/c++/10/bits/ptr_traits.h	/^	struct __rebind<_Tp, _Up, __void_t<typename _Tp::template rebind<_Up>>>$/;"	s	struct:std::pointer_traits	access:private
std::pointer_traits::__rebind::type	/usr/include/c++/10/bits/ptr_traits.h	/^	{ using type = typename _Tp::template rebind<_Up>; };$/;"	t	struct:std::pointer_traits::__rebind	typeref:typename:_Tp::template rebind<_Up>	access:public
std::pointer_traits::difference_type	/usr/include/c++/10/bits/ptr_traits.h	/^      typedef ptrdiff_t difference_type;$/;"	t	struct:std::pointer_traits	typeref:typename:ptrdiff_t	access:public
std::pointer_traits::difference_type	/usr/include/c++/10/bits/ptr_traits.h	/^      using difference_type$/;"	t	struct:std::pointer_traits	typeref:typename:__detected_or_t<ptrdiff_t,__difference_type,_Ptr>	access:public
std::pointer_traits::element_type	/usr/include/c++/10/bits/ptr_traits.h	/^      typedef _Tp  element_type;$/;"	t	struct:std::pointer_traits	typeref:typename:_Tp	access:public
std::pointer_traits::element_type	/usr/include/c++/10/bits/ptr_traits.h	/^      using element_type$/;"	t	struct:std::pointer_traits	typeref:typename:__detected_or_t<__get_first_arg_t<_Ptr>,__element_type,_Ptr>	access:public
std::pointer_traits::pointer	/usr/include/c++/10/bits/ptr_traits.h	/^      typedef _Tp* pointer;$/;"	t	struct:std::pointer_traits	typeref:typename:_Tp *	access:public
std::pointer_traits::pointer	/usr/include/c++/10/bits/ptr_traits.h	/^      using pointer = _Ptr;$/;"	t	struct:std::pointer_traits	typeref:typename:_Ptr	access:public
std::pointer_traits::pointer_to	/usr/include/c++/10/bits/ptr_traits.h	/^      pointer_to(__make_not_void<element_type>& __e)$/;"	f	struct:std::pointer_traits	typeref:typename:_Ptr	access:public	signature:(__make_not_void<element_type> & __e)
std::pointer_traits::pointer_to	/usr/include/c++/10/bits/ptr_traits.h	/^      pointer_to(__make_not_void<element_type>& __r) noexcept$/;"	f	struct:std::pointer_traits	typeref:typename:_GLIBCXX20_CONSTEXPR pointer	access:public	signature:(__make_not_void<element_type> & __r)
std::pointer_traits::rebind	/usr/include/c++/10/bits/ptr_traits.h	/^        using rebind = _Up*;$/;"	t	struct:std::pointer_traits	typeref:typename:_Up *	access:public
std::pointer_traits::rebind	/usr/include/c++/10/bits/ptr_traits.h	/^        using rebind = typename __rebind<_Ptr, _Up>::type;$/;"	t	struct:std::pointer_traits	typeref:typename:__rebind<_Ptr,_Up>::type	access:public
std::prev	/usr/include/c++/10/bits/stl_iterator_base_funcs.h	/^    prev(_BidirectionalIterator __x, typename$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR _BidirectionalIterator	signature:(_BidirectionalIterator __x,typename iterator_traits<_BidirectionalIterator>::difference_type __n=1)
std::projected	/usr/include/c++/10/bits/iterator_concepts.h	/^    struct projected$/;"	s	namespace:std
std::projected::operator *	/usr/include/c++/10/bits/iterator_concepts.h	/^      indirect_result_t<_Proj&, _Iter> operator*() const; \/\/ not defined$/;"	p	struct:std::projected	typeref:typename:indirect_result_t<_Proj &,_Iter>	access:public	signature:() const
std::projected::value_type	/usr/include/c++/10/bits/iterator_concepts.h	/^      using value_type = remove_cvref_t<indirect_result_t<_Proj&, _Iter>>;$/;"	t	struct:std::projected	typeref:typename:remove_cvref_t<indirect_result_t<_Proj &,_Iter>>	access:public
std::protocol_error	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      protocol_error = 				EPROTO,$/;"	e	enum:std::errc	access:public
std::protocol_not_supported	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      protocol_not_supported = 			EPROTONOSUPPORT,$/;"	e	enum:std::errc	access:public
std::ptr_fun	/usr/include/c++/10/bits/stl_function.h	/^    ptr_fun(_Result (*__x)(_Arg))$/;"	f	namespace:std	typeref:typename:pointer_to_unary_function<_Arg,_Result>	signature:(_Result (* __x)(_Arg))
std::ptr_fun	/usr/include/c++/10/bits/stl_function.h	/^    ptr_fun(_Result (*__x)(_Arg1, _Arg2))$/;"	f	namespace:std	typeref:typename:pointer_to_binary_function<_Arg1,_Arg2,_Result>	signature:(_Result (* __x)(_Arg1,_Arg2))
std::ptrdiff_t	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^  typedef __PTRDIFF_TYPE__	ptrdiff_t;$/;"	t	namespace:std	typeref:typename:__PTRDIFF_TYPE__
std::random_access_iterator_tag	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^  struct random_access_iterator_tag : public bidirectional_iterator_tag { };$/;"	s	namespace:std	inherits:bidirectional_iterator_tag
std::ranges	/usr/include/c++/10/bits/iterator_concepts.h	/^  namespace ranges$/;"	n	namespace:std
std::ranges	/usr/include/c++/10/bits/iterator_concepts.h	/^  namespace ranges::__detail$/;"	n	namespace:std
std::ranges	/usr/include/c++/10/bits/iterator_concepts.h	/^namespace ranges$/;"	n	namespace:std
std::ranges	/usr/include/c++/10/bits/range_access.h	/^namespace ranges$/;"	n	namespace:std
std::ranges	/usr/include/c++/10/bits/range_cmp.h	/^namespace ranges$/;"	n	namespace:std
std::ranges::__cust	/usr/include/c++/10/bits/iterator_concepts.h	/^    inline namespace __cust$/;"	n	namespace:std::ranges
std::ranges::__cust	/usr/include/c++/10/bits/iterator_concepts.h	/^  inline namespace __cust$/;"	n	namespace:std::ranges
std::ranges::__cust	/usr/include/c++/10/bits/range_access.h	/^  inline namespace __cust$/;"	n	namespace:std::ranges
std::ranges::__cust::begin	/usr/include/c++/10/bits/range_access.h	/^    inline constexpr __cust_access::_Begin begin{};$/;"	v	namespace:std::ranges::__cust	typeref:typename:__cust_access::_Begin
std::ranges::__cust::cbegin	/usr/include/c++/10/bits/range_access.h	/^    inline constexpr __cust_access::_CBegin cbegin{};$/;"	v	namespace:std::ranges::__cust	typeref:typename:__cust_access::_CBegin
std::ranges::__cust::cdata	/usr/include/c++/10/bits/range_access.h	/^    inline constexpr __cust_access::_CData cdata{};$/;"	v	namespace:std::ranges::__cust	typeref:typename:__cust_access::_CData
std::ranges::__cust::cend	/usr/include/c++/10/bits/range_access.h	/^    inline constexpr __cust_access::_CEnd cend{};$/;"	v	namespace:std::ranges::__cust	typeref:typename:__cust_access::_CEnd
std::ranges::__cust::crbegin	/usr/include/c++/10/bits/range_access.h	/^    inline constexpr __cust_access::_CRBegin crbegin{};$/;"	v	namespace:std::ranges::__cust	typeref:typename:__cust_access::_CRBegin
std::ranges::__cust::crend	/usr/include/c++/10/bits/range_access.h	/^    inline constexpr __cust_access::_CREnd crend{};$/;"	v	namespace:std::ranges::__cust	typeref:typename:__cust_access::_CREnd
std::ranges::__cust::data	/usr/include/c++/10/bits/range_access.h	/^    inline constexpr __cust_access::_Data data{};$/;"	v	namespace:std::ranges::__cust	typeref:typename:__cust_access::_Data
std::ranges::__cust::empty	/usr/include/c++/10/bits/range_access.h	/^    inline constexpr __cust_access::_Empty empty{};$/;"	v	namespace:std::ranges::__cust	typeref:typename:__cust_access::_Empty
std::ranges::__cust::end	/usr/include/c++/10/bits/range_access.h	/^    inline constexpr __cust_access::_End end{};$/;"	v	namespace:std::ranges::__cust	typeref:typename:__cust_access::_End
std::ranges::__cust::iter_move	/usr/include/c++/10/bits/iterator_concepts.h	/^      inline constexpr __cust_imove::_IMove iter_move{};$/;"	v	namespace:std::ranges::__cust	typeref:typename:__cust_imove::_IMove
std::ranges::__cust::iter_swap	/usr/include/c++/10/bits/iterator_concepts.h	/^    inline constexpr __cust_iswap::_IterSwap iter_swap{};$/;"	v	namespace:std::ranges::__cust	typeref:typename:__cust_iswap::_IterSwap
std::ranges::__cust::rbegin	/usr/include/c++/10/bits/range_access.h	/^    inline constexpr __cust_access::_RBegin rbegin{};$/;"	v	namespace:std::ranges::__cust	typeref:typename:__cust_access::_RBegin
std::ranges::__cust::rend	/usr/include/c++/10/bits/range_access.h	/^    inline constexpr __cust_access::_REnd rend{};$/;"	v	namespace:std::ranges::__cust	typeref:typename:__cust_access::_REnd
std::ranges::__cust::size	/usr/include/c++/10/bits/range_access.h	/^    inline constexpr __cust_access::_Size size{};$/;"	v	namespace:std::ranges::__cust	typeref:typename:__cust_access::_Size
std::ranges::__cust::ssize	/usr/include/c++/10/bits/range_access.h	/^    inline constexpr __cust_access::_SSize ssize{};$/;"	v	namespace:std::ranges::__cust	typeref:typename:__cust_access::_SSize
std::ranges::__cust_access	/usr/include/c++/10/bits/range_access.h	/^  namespace __cust_access$/;"	n	namespace:std::ranges
std::ranges::__cust_access::_Begin	/usr/include/c++/10/bits/range_access.h	/^    struct _Begin$/;"	s	namespace:std::ranges::__cust_access
std::ranges::__cust_access::_Begin::_S_noexcept	/usr/include/c++/10/bits/range_access.h	/^	_S_noexcept()$/;"	f	struct:std::ranges::__cust_access::_Begin	typeref:typename:bool	access:private	signature:()
std::ranges::__cust_access::_Begin::_Up	/usr/include/c++/10/bits/range_access.h	/^	      using _Up = remove_all_extents_t<remove_reference_t<_Tp>>;$/;"	t	struct:std::ranges::__cust_access::_Begin	typeref:typename:remove_all_extents_t<remove_reference_t<_Tp>>	access:public
std::ranges::__cust_access::_CBegin	/usr/include/c++/10/bits/range_access.h	/^    struct _CBegin$/;"	s	namespace:std::ranges::__cust_access
std::ranges::__cust_access::_CBegin::operator ()	/usr/include/c++/10/bits/range_access.h	/^	operator()(_Tp&& __e) const$/;"	f	struct:std::ranges::__cust_access::_CBegin	typeref:typename:auto	access:public	signature:(_Tp && __e) const
std::ranges::__cust_access::_CData	/usr/include/c++/10/bits/range_access.h	/^    struct _CData$/;"	s	namespace:std::ranges::__cust_access
std::ranges::__cust_access::_CData::operator ()	/usr/include/c++/10/bits/range_access.h	/^	operator()(_Tp&& __e) const$/;"	f	struct:std::ranges::__cust_access::_CData	typeref:typename:auto	access:public	signature:(_Tp && __e) const
std::ranges::__cust_access::_CEnd	/usr/include/c++/10/bits/range_access.h	/^    struct _CEnd$/;"	s	namespace:std::ranges::__cust_access
std::ranges::__cust_access::_CEnd::operator ()	/usr/include/c++/10/bits/range_access.h	/^	operator()(_Tp&& __e) const$/;"	f	struct:std::ranges::__cust_access::_CEnd	typeref:typename:auto	access:public	signature:(_Tp && __e) const
std::ranges::__cust_access::_CRBegin	/usr/include/c++/10/bits/range_access.h	/^    struct _CRBegin$/;"	s	namespace:std::ranges::__cust_access
std::ranges::__cust_access::_CRBegin::operator ()	/usr/include/c++/10/bits/range_access.h	/^	operator()(_Tp&& __e) const$/;"	f	struct:std::ranges::__cust_access::_CRBegin	typeref:typename:auto	access:public	signature:(_Tp && __e) const
std::ranges::__cust_access::_CREnd	/usr/include/c++/10/bits/range_access.h	/^    struct _CREnd$/;"	s	namespace:std::ranges::__cust_access
std::ranges::__cust_access::_CREnd::operator ()	/usr/include/c++/10/bits/range_access.h	/^	operator()(_Tp&& __e) const$/;"	f	struct:std::ranges::__cust_access::_CREnd	typeref:typename:auto	access:public	signature:(_Tp && __e) const
std::ranges::__cust_access::_Data	/usr/include/c++/10/bits/range_access.h	/^    struct _Data$/;"	s	namespace:std::ranges::__cust_access
std::ranges::__cust_access::_Data::_S_noexcept	/usr/include/c++/10/bits/range_access.h	/^	_S_noexcept()$/;"	f	struct:std::ranges::__cust_access::_Data	typeref:typename:bool	access:private	signature:()
std::ranges::__cust_access::_Empty	/usr/include/c++/10/bits/range_access.h	/^    struct _Empty$/;"	s	namespace:std::ranges::__cust_access
std::ranges::__cust_access::_Empty::_S_noexcept	/usr/include/c++/10/bits/range_access.h	/^	_S_noexcept()$/;"	f	struct:std::ranges::__cust_access::_Empty	typeref:typename:bool	access:private	signature:()
std::ranges::__cust_access::_End	/usr/include/c++/10/bits/range_access.h	/^    struct _End$/;"	s	namespace:std::ranges::__cust_access
std::ranges::__cust_access::_End::_S_noexcept	/usr/include/c++/10/bits/range_access.h	/^	_S_noexcept()$/;"	f	struct:std::ranges::__cust_access::_End	typeref:typename:bool	access:private	signature:()
std::ranges::__cust_access::_RBegin	/usr/include/c++/10/bits/range_access.h	/^    struct _RBegin$/;"	s	namespace:std::ranges::__cust_access
std::ranges::__cust_access::_RBegin::_S_noexcept	/usr/include/c++/10/bits/range_access.h	/^	_S_noexcept()$/;"	f	struct:std::ranges::__cust_access::_RBegin	typeref:typename:bool	access:private	signature:()
std::ranges::__cust_access::_REnd	/usr/include/c++/10/bits/range_access.h	/^    struct _REnd$/;"	s	namespace:std::ranges::__cust_access
std::ranges::__cust_access::_REnd::_S_noexcept	/usr/include/c++/10/bits/range_access.h	/^	_S_noexcept()$/;"	f	struct:std::ranges::__cust_access::_REnd	typeref:typename:bool	access:private	signature:()
std::ranges::__cust_access::_SSize	/usr/include/c++/10/bits/range_access.h	/^    struct _SSize$/;"	s	namespace:std::ranges::__cust_access
std::ranges::__cust_access::_SSize::operator ()	/usr/include/c++/10/bits/range_access.h	/^	operator()(_Tp&& __e) const$/;"	f	struct:std::ranges::__cust_access::_SSize	typeref:typename:auto	access:public	signature:(_Tp && __e) const
std::ranges::__cust_access::_Size	/usr/include/c++/10/bits/range_access.h	/^    struct _Size$/;"	s	namespace:std::ranges::__cust_access
std::ranges::__cust_access::_Size::_S_noexcept	/usr/include/c++/10/bits/range_access.h	/^	_S_noexcept()$/;"	f	struct:std::ranges::__cust_access::_Size	typeref:typename:bool	access:private	signature:()
std::ranges::__cust_access::__as_const	/usr/include/c++/10/bits/range_access.h	/^      __as_const(_Tp&& __t) noexcept$/;"	f	namespace:std::ranges::__cust_access	typeref:typename:decltype (auto)	signature:(_Tp && __t)
std::ranges::__cust_access::end	/usr/include/c++/10/bits/range_access.h	/^    void end(auto&) = delete;$/;"	p	namespace:std::ranges::__cust_access	typeref:typename:void	signature:(auto &)
std::ranges::__cust_access::end	/usr/include/c++/10/bits/range_access.h	/^    void end(const auto&) = delete;$/;"	p	namespace:std::ranges::__cust_access	typeref:typename:void	signature:(const auto &)
std::ranges::__cust_access::rbegin	/usr/include/c++/10/bits/range_access.h	/^    void rbegin(auto&) = delete;$/;"	p	namespace:std::ranges::__cust_access	typeref:typename:void	signature:(auto &)
std::ranges::__cust_access::rbegin	/usr/include/c++/10/bits/range_access.h	/^    void rbegin(const auto&) = delete;$/;"	p	namespace:std::ranges::__cust_access	typeref:typename:void	signature:(const auto &)
std::ranges::__cust_access::rend	/usr/include/c++/10/bits/range_access.h	/^    void rend(auto&) = delete;$/;"	p	namespace:std::ranges::__cust_access	typeref:typename:void	signature:(auto &)
std::ranges::__cust_access::rend	/usr/include/c++/10/bits/range_access.h	/^    void rend(const auto&) = delete;$/;"	p	namespace:std::ranges::__cust_access	typeref:typename:void	signature:(const auto &)
std::ranges::__cust_access::size	/usr/include/c++/10/bits/range_access.h	/^    void size(auto&) = delete;$/;"	p	namespace:std::ranges::__cust_access	typeref:typename:void	signature:(auto &)
std::ranges::__cust_access::size	/usr/include/c++/10/bits/range_access.h	/^    void size(const auto&) = delete;$/;"	p	namespace:std::ranges::__cust_access	typeref:typename:void	signature:(const auto &)
std::ranges::__cust_imove	/usr/include/c++/10/bits/iterator_concepts.h	/^    namespace __cust_imove$/;"	n	namespace:std::ranges
std::ranges::__cust_imove::_IMove	/usr/include/c++/10/bits/iterator_concepts.h	/^      struct _IMove$/;"	s	namespace:std::ranges::__cust_imove
std::ranges::__cust_imove::_IMove::_S_noexcept	/usr/include/c++/10/bits/iterator_concepts.h	/^	  _S_noexcept()$/;"	f	struct:std::ranges::__cust_imove::_IMove	typeref:typename:bool	access:private	signature:()
std::ranges::__cust_imove::_IMove::__result	/usr/include/c++/10/bits/iterator_concepts.h	/^	  struct __result$/;"	s	struct:std::ranges::__cust_imove::_IMove	access:private
std::ranges::__cust_imove::_IMove::__result	/usr/include/c++/10/bits/iterator_concepts.h	/^	  struct __result<_Tp>$/;"	s	struct:std::ranges::__cust_imove::_IMove	access:private
std::ranges::__cust_imove::_IMove::__result::type	/usr/include/c++/10/bits/iterator_concepts.h	/^	  { using type = decltype(iter_move(std::declval<_Tp>())); };$/;"	t	struct:std::ranges::__cust_imove::_IMove::__result	access:public
std::ranges::__cust_imove::_IMove::__result::type	/usr/include/c++/10/bits/iterator_concepts.h	/^	  { using type = iter_reference_t<_Tp>; };$/;"	t	struct:std::ranges::__cust_imove::_IMove::__result	typeref:typename:iter_reference_t<_Tp>	access:public
std::ranges::__cust_imove::_IMove::__result::type	/usr/include/c++/10/bits/iterator_concepts.h	/^	  { using type = remove_reference_t<iter_reference_t<_Tp>>&&; };$/;"	t	struct:std::ranges::__cust_imove::_IMove::__result	typeref:typename:remove_reference_t<iter_reference_t<_Tp>> &&	access:public
std::ranges::__cust_imove::_IMove::__type	/usr/include/c++/10/bits/iterator_concepts.h	/^	  using __type = typename __result<_Tp>::type;$/;"	t	struct:std::ranges::__cust_imove::_IMove	typeref:typename:__result<_Tp>::type	access:public
std::ranges::__cust_imove::_IMove::operator ()	/usr/include/c++/10/bits/iterator_concepts.h	/^	  operator()(_Tp&& __e) const$/;"	f	struct:std::ranges::__cust_imove::_IMove	typeref:typename:__type<_Tp>	access:public	signature:(_Tp && __e) const
std::ranges::__cust_imove::iter_move	/usr/include/c++/10/bits/iterator_concepts.h	/^	  && requires(_Tp&& __t) { iter_move(static_cast<_Tp&&>(__t)); };$/;"	p	namespace:std::ranges::__cust_imove	signature:(static_cast<_Tp &&> (__t))
std::ranges::__cust_imove::iter_move	/usr/include/c++/10/bits/iterator_concepts.h	/^      void iter_move();$/;"	p	namespace:std::ranges::__cust_imove	typeref:typename:void	signature:()
std::ranges::__cust_iswap	/usr/include/c++/10/bits/iterator_concepts.h	/^  namespace __cust_iswap$/;"	n	namespace:std::ranges
std::ranges::__cust_iswap::_IterSwap	/usr/include/c++/10/bits/iterator_concepts.h	/^    struct _IterSwap$/;"	s	namespace:std::ranges::__cust_iswap
std::ranges::__cust_iswap::_IterSwap::_S_noexcept	/usr/include/c++/10/bits/iterator_concepts.h	/^	_S_noexcept()$/;"	f	struct:std::ranges::__cust_iswap::_IterSwap	typeref:typename:bool	access:private	signature:()
std::ranges::__cust_iswap::_IterSwap::iter_swap	/usr/include/c++/10/bits/iterator_concepts.h	/^	    iter_swap(static_cast<_Tp&&>(__e1), static_cast<_Up&&>(__e2));$/;"	p	struct:std::ranges::__cust_iswap::_IterSwap	access:public	signature:(static_cast<_Tp &&> (__e1),static_cast<_Up &&> (__e2))
std::ranges::__cust_iswap::__iter_exchange_move	/usr/include/c++/10/bits/iterator_concepts.h	/^      __iter_exchange_move(_Xp&& __x, _Yp&& __y)$/;"	f	namespace:std::ranges::__cust_iswap	typeref:typename:iter_value_t<_Xp>	signature:(_Xp && __x,_Yp && __y)
std::ranges::__cust_iswap::iter_swap	/usr/include/c++/10/bits/iterator_concepts.h	/^	  iter_swap(static_cast<_Tp&&>(__t), static_cast<_Up&&>(__u));$/;"	p	namespace:std::ranges::__cust_iswap	signature:(static_cast<_Tp &&> (__t),static_cast<_Up &&> (__u))
std::ranges::__cust_iswap::iter_swap	/usr/include/c++/10/bits/iterator_concepts.h	/^      void iter_swap(_It1, _It2) = delete;$/;"	p	namespace:std::ranges::__cust_iswap	typeref:typename:void	signature:(_It1,_It2)
std::ranges::__detail	/usr/include/c++/10/bits/iterator_concepts.h	/^  namespace ranges::__detail$/;"	n	namespace:std::ranges
std::ranges::__detail	/usr/include/c++/10/bits/range_access.h	/^  namespace __detail$/;"	n	namespace:std::ranges
std::ranges::__detail	/usr/include/c++/10/bits/range_cmp.h	/^  namespace __detail$/;"	n	namespace:std::ranges
std::ranges::__detail::__make_unsigned_like_t	/usr/include/c++/10/bits/range_access.h	/^      using __make_unsigned_like_t$/;"	t	namespace:std::ranges::__detail
std::ranges::__detail::__max_diff_type	/usr/include/c++/10/bits/iterator_concepts.h	/^    using __max_diff_type = __int128;$/;"	t	namespace:std::ranges::__detail	typeref:typename:__int128
std::ranges::__detail::__max_size_type	/usr/include/c++/10/bits/iterator_concepts.h	/^    using __max_size_type = unsigned __int128;$/;"	t	namespace:std::ranges::__detail	typeref:typename:unsigned __int128
std::ranges::__detail::__to_unsigned_like	/usr/include/c++/10/bits/range_access.h	/^      __to_unsigned_like(_Tp __t) noexcept$/;"	f	namespace:std::ranges::__detail	typeref:typename:auto	signature:(_Tp __t)
std::ranges::__detail::__to_unsigned_like	/usr/include/c++/10/bits/range_access.h	/^    __to_unsigned_like(__int128 __t) noexcept$/;"	f	namespace:std::ranges::__detail	typeref:typename:unsigned __int128	signature:(__int128 __t)
std::ranges::__detail::__to_unsigned_like	/usr/include/c++/10/bits/range_access.h	/^    __to_unsigned_like(unsigned __int128 __t) noexcept$/;"	f	namespace:std::ranges::__detail	typeref:typename:unsigned __int128	signature:(unsigned __int128 __t)
std::ranges::advance	/usr/include/c++/10/bits/range_access.h	/^    advance(_It& __it, _Sent __bound)$/;"	f	namespace:std::ranges	typeref:typename:void	signature:(_It & __it,_Sent __bound)
std::ranges::advance	/usr/include/c++/10/bits/range_access.h	/^    advance(_It& __it, iter_difference_t<_It> __n)$/;"	f	namespace:std::ranges	typeref:typename:void	signature:(_It & __it,iter_difference_t<_It> __n)
std::ranges::advance	/usr/include/c++/10/bits/range_access.h	/^    advance(_It& __it, iter_difference_t<_It> __n, _Sent __bound)$/;"	f	namespace:std::ranges	typeref:typename:iter_difference_t<_It>	signature:(_It & __it,iter_difference_t<_It> __n,_Sent __bound)
std::ranges::disable_sized_range	/usr/include/c++/10/bits/range_access.h	/^    inline constexpr bool disable_sized_range = false;$/;"	v	namespace:std::ranges	typeref:typename:bool
std::ranges::distance	/usr/include/c++/10/bits/range_access.h	/^    distance(_It __first, _Sent __last)$/;"	f	namespace:std::ranges	typeref:typename:iter_difference_t<_It>	signature:(_It __first,_Sent __last)
std::ranges::distance	/usr/include/c++/10/bits/range_access.h	/^    distance(_Range&& __r)$/;"	f	namespace:std::ranges	typeref:typename:range_difference_t<_Range>	signature:(_Range && __r)
std::ranges::enable_borrowed_range	/usr/include/c++/10/bits/range_access.h	/^    inline constexpr bool enable_borrowed_range = false;$/;"	v	namespace:std::ranges	typeref:typename:bool
std::ranges::equal_to	/usr/include/c++/10/bits/range_cmp.h	/^  struct equal_to$/;"	s	namespace:std::ranges
std::ranges::equal_to::is_transparent	/usr/include/c++/10/bits/range_cmp.h	/^    using is_transparent = __is_transparent;$/;"	t	struct:std::ranges::equal_to	typeref:typename:__is_transparent	access:public
std::ranges::greater	/usr/include/c++/10/bits/range_cmp.h	/^  struct greater$/;"	s	namespace:std::ranges
std::ranges::greater::is_transparent	/usr/include/c++/10/bits/range_cmp.h	/^    using is_transparent = __is_transparent;$/;"	t	struct:std::ranges::greater	typeref:typename:__is_transparent	access:public
std::ranges::greater_equal	/usr/include/c++/10/bits/range_cmp.h	/^  struct greater_equal$/;"	s	namespace:std::ranges
std::ranges::greater_equal::is_transparent	/usr/include/c++/10/bits/range_cmp.h	/^    using is_transparent = __is_transparent;$/;"	t	struct:std::ranges::greater_equal	typeref:typename:__is_transparent	access:public
std::ranges::iter_swap	/usr/include/c++/10/bits/iterator_concepts.h	/^	ranges::iter_swap(__i1, __i1);$/;"	p	class:std::ranges	signature:(__i1,__i1)
std::ranges::iter_swap	/usr/include/c++/10/bits/iterator_concepts.h	/^	ranges::iter_swap(__i1, __i2);$/;"	p	class:std::ranges	signature:(__i1,__i2)
std::ranges::iter_swap	/usr/include/c++/10/bits/iterator_concepts.h	/^	ranges::iter_swap(__i2, __i1);$/;"	p	class:std::ranges	signature:(__i2,__i1)
std::ranges::iter_swap	/usr/include/c++/10/bits/iterator_concepts.h	/^	ranges::iter_swap(__i2, __i2);$/;"	p	class:std::ranges	signature:(__i2,__i2)
std::ranges::iterator_t	/usr/include/c++/10/bits/range_access.h	/^    using iterator_t = std::__detail::__range_iter_t<_Tp>;$/;"	t	namespace:std::ranges	typeref:typename:std::__detail::__range_iter_t<_Tp>
std::ranges::less	/usr/include/c++/10/bits/range_cmp.h	/^  struct less$/;"	s	namespace:std::ranges
std::ranges::less::__x	/usr/include/c++/10/bits/range_cmp.h	/^	    auto __x = reinterpret_cast<__UINTPTR_TYPE__>($/;"	m	struct:std::ranges::less	typeref:typename:auto	access:public
std::ranges::less::__y	/usr/include/c++/10/bits/range_cmp.h	/^	    auto __y = reinterpret_cast<__UINTPTR_TYPE__>($/;"	m	struct:std::ranges::less	typeref:typename:auto	access:public
std::ranges::less::is_transparent	/usr/include/c++/10/bits/range_cmp.h	/^    using is_transparent = __is_transparent;$/;"	t	struct:std::ranges::less	typeref:typename:__is_transparent	access:public
std::ranges::less_equal	/usr/include/c++/10/bits/range_cmp.h	/^  struct less_equal$/;"	s	namespace:std::ranges
std::ranges::less_equal::is_transparent	/usr/include/c++/10/bits/range_cmp.h	/^    using is_transparent = __is_transparent;$/;"	t	struct:std::ranges::less_equal	typeref:typename:__is_transparent	access:public
std::ranges::next	/usr/include/c++/10/bits/range_access.h	/^    next(_It __x)$/;"	f	namespace:std::ranges	typeref:typename:_It	signature:(_It __x)
std::ranges::next	/usr/include/c++/10/bits/range_access.h	/^    next(_It __x, _Sent __bound)$/;"	f	namespace:std::ranges	typeref:typename:_It	signature:(_It __x,_Sent __bound)
std::ranges::next	/usr/include/c++/10/bits/range_access.h	/^    next(_It __x, iter_difference_t<_It> __n)$/;"	f	namespace:std::ranges	typeref:typename:_It	signature:(_It __x,iter_difference_t<_It> __n)
std::ranges::next	/usr/include/c++/10/bits/range_access.h	/^    next(_It __x, iter_difference_t<_It> __n, _Sent __bound)$/;"	f	namespace:std::ranges	typeref:typename:_It	signature:(_It __x,iter_difference_t<_It> __n,_Sent __bound)
std::ranges::not_equal_to	/usr/include/c++/10/bits/range_cmp.h	/^  struct not_equal_to$/;"	s	namespace:std::ranges
std::ranges::not_equal_to::is_transparent	/usr/include/c++/10/bits/range_cmp.h	/^    using is_transparent = __is_transparent;$/;"	t	struct:std::ranges::not_equal_to	typeref:typename:__is_transparent	access:public
std::ranges::prev	/usr/include/c++/10/bits/range_access.h	/^    prev(_It __x)$/;"	f	namespace:std::ranges	typeref:typename:_It	signature:(_It __x)
std::ranges::prev	/usr/include/c++/10/bits/range_access.h	/^    prev(_It __x, iter_difference_t<_It> __n)$/;"	f	namespace:std::ranges	typeref:typename:_It	signature:(_It __x,iter_difference_t<_It> __n)
std::ranges::prev	/usr/include/c++/10/bits/range_access.h	/^    prev(_It __x, iter_difference_t<_It> __n, _It __bound)$/;"	f	namespace:std::ranges	typeref:typename:_It	signature:(_It __x,iter_difference_t<_It> __n,_It __bound)
std::ranges::range_difference_t	/usr/include/c++/10/bits/range_access.h	/^    using range_difference_t = iter_difference_t<iterator_t<_Range>>;$/;"	t	namespace:std::ranges	typeref:typename:iter_difference_t<iterator_t<_Range>>
std::ranges::range_reference_t	/usr/include/c++/10/bits/range_access.h	/^    using range_reference_t = iter_reference_t<iterator_t<_Range>>;$/;"	t	namespace:std::ranges	typeref:typename:iter_reference_t<iterator_t<_Range>>
std::ranges::range_rvalue_reference_t	/usr/include/c++/10/bits/range_access.h	/^    using range_rvalue_reference_t$/;"	t	namespace:std::ranges	typeref:typename:iter_rvalue_reference_t<iterator_t<_Range>>
std::ranges::range_size_t	/usr/include/c++/10/bits/range_access.h	/^    using range_size_t = decltype(ranges::size(std::declval<_Range&>()));$/;"	t	namespace:std::ranges
std::ranges::range_value_t	/usr/include/c++/10/bits/range_access.h	/^    using range_value_t = iter_value_t<iterator_t<_Range>>;$/;"	t	namespace:std::ranges	typeref:typename:iter_value_t<iterator_t<_Range>>
std::ranges::ranges::begin	/usr/include/c++/10/bits/range_access.h	/^	ranges::begin(__t);$/;"	p	class:std::ranges::ranges	signature:(__t)
std::ranges::ranges::end	/usr/include/c++/10/bits/range_access.h	/^	ranges::end(__t);$/;"	p	class:std::ranges::ranges	signature:(__t)
std::ranges::ranges::size	/usr/include/c++/10/bits/range_access.h	/^      && requires(_Tp& __t) { ranges::size(__t); };$/;"	p	class:std::ranges::ranges	signature:(__t)
std::ranges::sentinel_t	/usr/include/c++/10/bits/range_access.h	/^    using sentinel_t = decltype(ranges::end(std::declval<_Range&>()));$/;"	t	namespace:std::ranges
std::rbegin	/usr/include/c++/10/bits/range_access.h	/^    rbegin(_Container& __cont) -> decltype(__cont.rbegin())$/;"	f	namespace:std	typeref:typename:decltype (__cont.rbegin ())	signature:(_Container & __cont)
std::rbegin	/usr/include/c++/10/bits/range_access.h	/^    rbegin(_Tp (&__arr)[_Nm])$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator<_Tp * >	signature:(_Tp (& __arr)[_Nm])
std::rbegin	/usr/include/c++/10/bits/range_access.h	/^    rbegin(const _Container& __cont) -> decltype(__cont.rbegin())$/;"	f	namespace:std	typeref:typename:decltype (__cont.rbegin ())	signature:(const _Container & __cont)
std::rbegin	/usr/include/c++/10/bits/range_access.h	/^    rbegin(initializer_list<_Tp> __il)$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator<const _Tp * >	signature:(initializer_list<_Tp> __il)
std::read_only_file_system	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      read_only_file_system = 			EROFS,$/;"	e	enum:std::errc	access:public
std::rend	/usr/include/c++/10/bits/range_access.h	/^    rend(_Container& __cont) -> decltype(__cont.rend())$/;"	f	namespace:std	typeref:typename:decltype (__cont.rend ())	signature:(_Container & __cont)
std::rend	/usr/include/c++/10/bits/range_access.h	/^    rend(_Tp (&__arr)[_Nm])$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator<_Tp * >	signature:(_Tp (& __arr)[_Nm])
std::rend	/usr/include/c++/10/bits/range_access.h	/^    rend(const _Container& __cont) -> decltype(__cont.rend())$/;"	f	namespace:std	typeref:typename:decltype (__cont.rend ())	signature:(const _Container & __cont)
std::rend	/usr/include/c++/10/bits/range_access.h	/^    rend(initializer_list<_Tp> __il)$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator<const _Tp * >	signature:(initializer_list<_Tp> __il)
std::resource_deadlock_would_occur	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      resource_deadlock_would_occur = 		EDEADLK,$/;"	e	enum:std::errc	access:public
std::resource_unavailable_try_again	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      resource_unavailable_try_again = 		EAGAIN,$/;"	e	enum:std::errc	access:public
std::result_out_of_range	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      result_out_of_range = 			ERANGE,$/;"	e	enum:std::errc	access:public
std::rethrow_exception	/usr/include/c++/10/bits/exception_ptr.h	/^  void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(exception_ptr)
std::rethrow_if_nested	/usr/include/c++/10/bits/nested_exception.h	/^    rethrow_if_nested(const _Ex& __ex)$/;"	f	namespace:std	typeref:typename:void	signature:(const _Ex & __ex)
std::reverse_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    class reverse_iterator$/;"	c	namespace:std	inherits:iterator<typenameiterator_traits<_Iterator>::iterator_category,typenameiterator_traits<_Iterator>::value_type,typenameiterator_traits<_Iterator>::difference_type,typenameiterator_traits<_Iterator>::pointer,typenameiterator_traits<_Iterator>::reference>
std::reverse_iterator::_S_to_pointer	/usr/include/c++/10/bits/stl_iterator.h	/^	_S_to_pointer(_Tp __t)$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR pointer	access:private	signature:(_Tp __t)
std::reverse_iterator::_S_to_pointer	/usr/include/c++/10/bits/stl_iterator.h	/^	_S_to_pointer(_Tp* __p)$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR _Tp *	access:private	signature:(_Tp * __p)
std::reverse_iterator::__tmp	/usr/include/c++/10/bits/stl_iterator.h	/^	_Iterator __tmp = current;$/;"	m	class:std::reverse_iterator	typeref:typename:_Iterator	access:public
std::reverse_iterator::__traits_type	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef iterator_traits<_Iterator>		__traits_type;$/;"	t	class:std::reverse_iterator	typeref:typename:iterator_traits<_Iterator>	access:protected
std::reverse_iterator::base	/usr/include/c++/10/bits/stl_iterator.h	/^      base() const$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR iterator_type	access:public	signature:() const
std::reverse_iterator::current	/usr/include/c++/10/bits/stl_iterator.h	/^      _Iterator current;$/;"	m	class:std::reverse_iterator	typeref:typename:_Iterator	access:protected
std::reverse_iterator::difference_type	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef typename __traits_type::difference_type	difference_type;$/;"	t	class:std::reverse_iterator	typeref:typename:__traits_type::difference_type	access:public
std::reverse_iterator::iterator_category	/usr/include/c++/10/bits/stl_iterator.h	/^      using iterator_category$/;"	t	class:std::reverse_iterator	typeref:typename:__detail::__clamp_iter_cat<typename __traits_type::iterator_category,random_access_iterator_tag>	access:public
std::reverse_iterator::iterator_concept	/usr/include/c++/10/bits/stl_iterator.h	/^      using iterator_concept$/;"	t	class:std::reverse_iterator	typeref:typename:conditional_t<random_access_iterator<_Iterator>,random_access_iterator_tag,bidirectional_iterator_tag>	access:public
std::reverse_iterator::iterator_type	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef _Iterator					iterator_type;$/;"	t	class:std::reverse_iterator	typeref:typename:_Iterator	access:public
std::reverse_iterator::operator *	/usr/include/c++/10/bits/stl_iterator.h	/^      operator*() const$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reference	access:public	signature:() const
std::reverse_iterator::operator +	/usr/include/c++/10/bits/stl_iterator.h	/^      operator+(difference_type __n) const$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator	access:public	signature:(difference_type __n) const
std::reverse_iterator::operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^      operator++()$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator &	access:public	signature:()
std::reverse_iterator::operator ++	/usr/include/c++/10/bits/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator	access:public	signature:(int)
std::reverse_iterator::operator +=	/usr/include/c++/10/bits/stl_iterator.h	/^      operator+=(difference_type __n)$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator &	access:public	signature:(difference_type __n)
std::reverse_iterator::operator -	/usr/include/c++/10/bits/stl_iterator.h	/^      operator-(difference_type __n) const$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator	access:public	signature:(difference_type __n) const
std::reverse_iterator::operator --	/usr/include/c++/10/bits/stl_iterator.h	/^      operator--()$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator &	access:public	signature:()
std::reverse_iterator::operator --	/usr/include/c++/10/bits/stl_iterator.h	/^      operator--(int)$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator	access:public	signature:(int)
std::reverse_iterator::operator -=	/usr/include/c++/10/bits/stl_iterator.h	/^      operator-=(difference_type __n)$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator &	access:public	signature:(difference_type __n)
std::reverse_iterator::operator ->	/usr/include/c++/10/bits/stl_iterator.h	/^	|| requires(const _Iterator __i) { __i.operator->(); }$/;"	p	class:std::reverse_iterator	typeref:typename:__i.	access:public	signature:()
std::reverse_iterator::operator =	/usr/include/c++/10/bits/stl_iterator.h	/^      reverse_iterator& operator=(const reverse_iterator&) = default;$/;"	p	class:std::reverse_iterator	typeref:typename:reverse_iterator &	access:public	signature:(const reverse_iterator &)
std::reverse_iterator::operator []	/usr/include/c++/10/bits/stl_iterator.h	/^      operator[](difference_type __n) const$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reference	access:public	signature:(difference_type __n) const
std::reverse_iterator::pointer	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef typename __traits_type::pointer		pointer;$/;"	t	class:std::reverse_iterator	typeref:typename:__traits_type::pointer	access:public
std::reverse_iterator::reference	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef typename __traits_type::reference		reference;$/;"	t	class:std::reverse_iterator	typeref:typename:__traits_type::reference	access:public
std::reverse_iterator::reverse_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^        reverse_iterator(const reverse_iterator<_Iter>& __x)$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR	access:public	signature:(const reverse_iterator<_Iter> & __x)
std::reverse_iterator::reverse_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^      reverse_iterator() : current() { }$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR	access:public	signature:()
std::reverse_iterator::reverse_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^      reverse_iterator(const reverse_iterator& __x)$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR	access:public	signature:(const reverse_iterator & __x)
std::reverse_iterator::reverse_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^      reverse_iterator(iterator_type __x) : current(__x) { }$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR	access:public	signature:(iterator_type __x)
std::right	/usr/include/c++/10/bits/ios_base.h	/^  right(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::scientific	/usr/include/c++/10/bits/ios_base.h	/^  scientific(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::showbase	/usr/include/c++/10/bits/ios_base.h	/^  showbase(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::showpoint	/usr/include/c++/10/bits/ios_base.h	/^  showpoint(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::showpos	/usr/include/c++/10/bits/ios_base.h	/^  showpos(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::size	/usr/include/c++/10/bits/range_access.h	/^    size(const _Container& __cont) noexcept(noexcept(__cont.size()))$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Container & __cont)
std::size	/usr/include/c++/10/bits/range_access.h	/^    size(const _Tp (&)[_Nm]) noexcept$/;"	f	namespace:std	typeref:typename:size_t	signature:(const _Tp (&)[_Nm])
std::size_t	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^  typedef __SIZE_TYPE__ 	size_t;$/;"	t	namespace:std	typeref:typename:__SIZE_TYPE__
std::skipws	/usr/include/c++/10/bits/ios_base.h	/^  skipws(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::ssize	/usr/include/c++/10/bits/range_access.h	/^    ssize(const _Container& __cont)$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Container & __cont)
std::ssize	/usr/include/c++/10/bits/range_access.h	/^    ssize(const _Tp (&)[_Num]) noexcept$/;"	f	namespace:std	typeref:typename:ptrdiff_t	signature:(const _Tp (&)[_Num])
std::state_not_recoverable	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      state_not_recoverable = 			ENOTRECOVERABLE,$/;"	e	enum:std::errc	access:public
std::stod	/usr/include/c++/10/bits/basic_string.h	/^  stod(const string& __str, size_t* __idx = 0)$/;"	f	namespace:std	typeref:typename:double	signature:(const string & __str,size_t * __idx=0)
std::stod	/usr/include/c++/10/bits/basic_string.h	/^  stod(const wstring& __str, size_t* __idx = 0)$/;"	f	namespace:std	typeref:typename:double	signature:(const wstring & __str,size_t * __idx=0)
std::stof	/usr/include/c++/10/bits/basic_string.h	/^  stof(const string& __str, size_t* __idx = 0)$/;"	f	namespace:std	typeref:typename:float	signature:(const string & __str,size_t * __idx=0)
std::stof	/usr/include/c++/10/bits/basic_string.h	/^  stof(const wstring& __str, size_t* __idx = 0)$/;"	f	namespace:std	typeref:typename:float	signature:(const wstring & __str,size_t * __idx=0)
std::stoi	/usr/include/c++/10/bits/basic_string.h	/^  stoi(const string& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION _GLIBCXX_BEGIN_NAMESPACE_CXX11 int	signature:(const string & __str,size_t * __idx=0,int __base=10)
std::stoi	/usr/include/c++/10/bits/basic_string.h	/^  stoi(const wstring& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:int	signature:(const wstring & __str,size_t * __idx=0,int __base=10)
std::stol	/usr/include/c++/10/bits/basic_string.h	/^  stol(const string& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:long	signature:(const string & __str,size_t * __idx=0,int __base=10)
std::stol	/usr/include/c++/10/bits/basic_string.h	/^  stol(const wstring& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:long	signature:(const wstring & __str,size_t * __idx=0,int __base=10)
std::stold	/usr/include/c++/10/bits/basic_string.h	/^  stold(const string& __str, size_t* __idx = 0)$/;"	f	namespace:std	typeref:typename:long double	signature:(const string & __str,size_t * __idx=0)
std::stold	/usr/include/c++/10/bits/basic_string.h	/^  stold(const wstring& __str, size_t* __idx = 0)$/;"	f	namespace:std	typeref:typename:long double	signature:(const wstring & __str,size_t * __idx=0)
std::stoll	/usr/include/c++/10/bits/basic_string.h	/^  stoll(const string& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:long long	signature:(const string & __str,size_t * __idx=0,int __base=10)
std::stoll	/usr/include/c++/10/bits/basic_string.h	/^  stoll(const wstring& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:long long	signature:(const wstring & __str,size_t * __idx=0,int __base=10)
std::stoul	/usr/include/c++/10/bits/basic_string.h	/^  stoul(const string& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:unsigned long	signature:(const string & __str,size_t * __idx=0,int __base=10)
std::stoul	/usr/include/c++/10/bits/basic_string.h	/^  stoul(const wstring& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:unsigned long	signature:(const wstring & __str,size_t * __idx=0,int __base=10)
std::stoull	/usr/include/c++/10/bits/basic_string.h	/^  stoull(const string& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:unsigned long long	signature:(const string & __str,size_t * __idx=0,int __base=10)
std::stoull	/usr/include/c++/10/bits/basic_string.h	/^  stoull(const wstring& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:unsigned long long	signature:(const wstring & __str,size_t * __idx=0,int __base=10)
std::stream	/usr/include/c++/10/bits/ios_base.h	/^  enum class io_errc { stream = 1 };$/;"	e	enum:std::io_errc	access:public
std::stream_timeout	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      stream_timeout = 				ETIME,$/;"	e	enum:std::errc	access:public
std::streamoff	/usr/include/c++/10/bits/postypes.h	/^  typedef long          streamoff;$/;"	t	namespace:std	typeref:typename:long
std::streampos	/usr/include/c++/10/bits/postypes.h	/^  typedef fpos<mbstate_t> streampos;$/;"	t	namespace:std	typeref:typename:fpos<mbstate_t>
std::streamsize	/usr/include/c++/10/bits/postypes.h	/^  typedef ptrdiff_t	streamsize; \/\/ Signed integral type$/;"	t	namespace:std	typeref:typename:ptrdiff_t
std::string	/usr/include/c++/10/bits/stringfwd.h	/^  typedef basic_string<char>    string;   $/;"	t	namespace:std	typeref:typename:basic_string<char>
std::swap	/usr/include/c++/10/bits/basic_string.h	/^    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:void	signature:(basic_string<_CharT,_Traits,_Alloc> & __lhs,basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::swap	/usr/include/c++/10/bits/move.h	/^    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR typename enable_if<__is_swappable<_Tp>::value>::type	signature:(_Tp (& __a)[_Nm],_Tp (& __b)[_Nm])
std::swap	/usr/include/c++/10/bits/move.h	/^    swap(_Tp& __a, _Tp& __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,is_move_constructible<_Tp>,is_move_assignable<_Tp>>::value>::type	signature:(_Tp & __a,_Tp & __b)
std::swap	/usr/include/c++/10/bits/stl_pair.h	/^    swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR typename enable_if<__and_<__is_swappable<_T1>,__is_swappable<_T2>>::value>::type	signature:(pair<_T1,_T2> & __x,pair<_T1,_T2> & __y)
std::swap_ranges	/usr/include/c++/10/bits/stl_algobase.h	/^    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator2	signature:(_ForwardIterator1 __first1,_ForwardIterator1 __last1,_ForwardIterator2 __first2)
std::text_file_busy	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      text_file_busy = 				ETXTBSY,$/;"	e	enum:std::errc	access:public
std::throw_with_nested	/usr/include/c++/10/bits/nested_exception.h	/^    throw_with_nested(_Tp&& __t)$/;"	f	namespace:std	typeref:typename:void	signature:(_Tp && __t)
std::timed_out	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      timed_out = 				ETIMEDOUT,$/;"	e	enum:std::errc	access:public
std::to_address	/usr/include/c++/10/bits/ptr_traits.h	/^    to_address(_Tp* __ptr) noexcept$/;"	f	namespace:std	typeref:typename:_Tp *	signature:(_Tp * __ptr)
std::to_address	/usr/include/c++/10/bits/ptr_traits.h	/^    to_address(const _Ptr& __ptr) noexcept$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Ptr & __ptr)
std::to_string	/usr/include/c++/10/bits/basic_string.h	/^  to_string(double __val)$/;"	f	namespace:std	typeref:typename:string	signature:(double __val)
std::to_string	/usr/include/c++/10/bits/basic_string.h	/^  to_string(float __val)$/;"	f	namespace:std	typeref:typename:string	signature:(float __val)
std::to_string	/usr/include/c++/10/bits/basic_string.h	/^  to_string(int __val)$/;"	f	namespace:std	typeref:typename:string	signature:(int __val)
std::to_string	/usr/include/c++/10/bits/basic_string.h	/^  to_string(long __val)$/;"	f	namespace:std	typeref:typename:string	signature:(long __val)
std::to_string	/usr/include/c++/10/bits/basic_string.h	/^  to_string(long double __val)$/;"	f	namespace:std	typeref:typename:string	signature:(long double __val)
std::to_string	/usr/include/c++/10/bits/basic_string.h	/^  to_string(long long __val)$/;"	f	namespace:std	typeref:typename:string	signature:(long long __val)
std::to_string	/usr/include/c++/10/bits/basic_string.h	/^  to_string(unsigned __val)$/;"	f	namespace:std	typeref:typename:string	signature:(unsigned __val)
std::to_string	/usr/include/c++/10/bits/basic_string.h	/^  to_string(unsigned long __val)$/;"	f	namespace:std	typeref:typename:string	signature:(unsigned long __val)
std::to_string	/usr/include/c++/10/bits/basic_string.h	/^  to_string(unsigned long long __val)$/;"	f	namespace:std	typeref:typename:string	signature:(unsigned long long __val)
std::to_wstring	/usr/include/c++/10/bits/basic_string.h	/^  to_wstring(double __val)$/;"	f	namespace:std	typeref:typename:wstring	signature:(double __val)
std::to_wstring	/usr/include/c++/10/bits/basic_string.h	/^  to_wstring(float __val)$/;"	f	namespace:std	typeref:typename:wstring	signature:(float __val)
std::to_wstring	/usr/include/c++/10/bits/basic_string.h	/^  to_wstring(int __val)$/;"	f	namespace:std	typeref:typename:wstring	signature:(int __val)
std::to_wstring	/usr/include/c++/10/bits/basic_string.h	/^  to_wstring(long __val)$/;"	f	namespace:std	typeref:typename:wstring	signature:(long __val)
std::to_wstring	/usr/include/c++/10/bits/basic_string.h	/^  to_wstring(long double __val)$/;"	f	namespace:std	typeref:typename:wstring	signature:(long double __val)
std::to_wstring	/usr/include/c++/10/bits/basic_string.h	/^  to_wstring(long long __val)$/;"	f	namespace:std	typeref:typename:wstring	signature:(long long __val)
std::to_wstring	/usr/include/c++/10/bits/basic_string.h	/^  to_wstring(unsigned __val)$/;"	f	namespace:std	typeref:typename:wstring	signature:(unsigned __val)
std::to_wstring	/usr/include/c++/10/bits/basic_string.h	/^  to_wstring(unsigned long __val)$/;"	f	namespace:std	typeref:typename:wstring	signature:(unsigned long __val)
std::to_wstring	/usr/include/c++/10/bits/basic_string.h	/^  to_wstring(unsigned long long __val)$/;"	f	namespace:std	typeref:typename:wstring	signature:(unsigned long long __val)
std::tolower	/usr/include/c++/10/bits/locale_facets.h	/^    tolower(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:_CharT	signature:(_CharT __c,const locale & __loc)
std::tolower	/usr/include/c++/10/bits/localefwd.h	/^    tolower(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:_CharT	signature:(_CharT,const locale &)
std::too_many_files_open	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      too_many_files_open = 			EMFILE,$/;"	e	enum:std::errc	access:public
std::too_many_files_open_in_system	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      too_many_files_open_in_system = 		ENFILE,$/;"	e	enum:std::errc	access:public
std::too_many_links	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      too_many_links = 				EMLINK,$/;"	e	enum:std::errc	access:public
std::too_many_symbolic_link_levels	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      too_many_symbolic_link_levels = 		ELOOP,$/;"	e	enum:std::errc	access:public
std::toupper	/usr/include/c++/10/bits/locale_facets.h	/^    toupper(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:_CharT	signature:(_CharT __c,const locale & __loc)
std::toupper	/usr/include/c++/10/bits/localefwd.h	/^    toupper(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:_CharT	signature:(_CharT,const locale &)
std::u16streampos	/usr/include/c++/10/bits/postypes.h	/^  typedef fpos<mbstate_t> u16streampos;$/;"	t	namespace:std	typeref:typename:fpos<mbstate_t>
std::u16string	/usr/include/c++/10/bits/stringfwd.h	/^  typedef basic_string<char16_t> u16string; $/;"	t	namespace:std	typeref:typename:basic_string<char16_t>
std::u32streampos	/usr/include/c++/10/bits/postypes.h	/^  typedef fpos<mbstate_t> u32streampos;$/;"	t	namespace:std	typeref:typename:fpos<mbstate_t>
std::u32string	/usr/include/c++/10/bits/stringfwd.h	/^  typedef basic_string<char32_t> u32string; $/;"	t	namespace:std	typeref:typename:basic_string<char32_t>
std::u8streampos	/usr/include/c++/10/bits/postypes.h	/^  typedef fpos<mbstate_t> u8streampos;$/;"	t	namespace:std	typeref:typename:fpos<mbstate_t>
std::u8string	/usr/include/c++/10/bits/stringfwd.h	/^  typedef basic_string<char8_t> u8string;$/;"	t	namespace:std	typeref:typename:basic_string<char8_t>
std::unary_function	/usr/include/c++/10/bits/stl_function.h	/^    struct unary_function$/;"	s	namespace:std
std::unary_function::argument_type	/usr/include/c++/10/bits/stl_function.h	/^      typedef _Arg 	argument_type;   $/;"	t	struct:std::unary_function	typeref:typename:_Arg	access:public
std::unary_function::result_type	/usr/include/c++/10/bits/stl_function.h	/^      typedef _Result 	result_type;  $/;"	t	struct:std::unary_function	typeref:typename:_Result	access:public
std::unary_negate	/usr/include/c++/10/bits/stl_function.h	/^    class unary_negate$/;"	c	namespace:std	inherits:unary_function<typename_Predicate::argument_type,bool>
std::unary_negate::_M_pred	/usr/include/c++/10/bits/stl_function.h	/^      _Predicate _M_pred;$/;"	m	class:std::unary_negate	typeref:typename:_Predicate	access:protected
std::unary_negate::operator ()	/usr/include/c++/10/bits/stl_function.h	/^      operator()(const typename _Predicate::argument_type& __x) const$/;"	f	class:std::unary_negate	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const typename _Predicate::argument_type & __x) const
std::unary_negate::unary_negate	/usr/include/c++/10/bits/stl_function.h	/^      unary_negate(const _Predicate& __x) : _M_pred(__x) { }$/;"	f	class:std::unary_negate	typeref:typename:_GLIBCXX14_CONSTEXPR	access:public	signature:(const _Predicate & __x)
std::unitbuf	/usr/include/c++/10/bits/ios_base.h	/^  unitbuf(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::unreachable_sentinel	/usr/include/c++/10/bits/iterator_concepts.h	/^  inline constexpr unreachable_sentinel_t unreachable_sentinel{};$/;"	v	namespace:std	typeref:typename:unreachable_sentinel_t
std::unreachable_sentinel_t	/usr/include/c++/10/bits/iterator_concepts.h	/^  struct unreachable_sentinel_t$/;"	s	namespace:std
std::uppercase	/usr/include/c++/10/bits/ios_base.h	/^  uppercase(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::use_facet	/usr/include/c++/10/bits/localefwd.h	/^    use_facet(const locale&);$/;"	p	namespace:std	typeref:typename:const _Facet &	signature:(const locale &)
std::value	/usr/include/c++/10/bits/alloc_traits.h	/^      = typename enable_if<!__is_allocator<_Alloc>::value, _Alloc>::type;$/;"	t	namespace:std	typeref:typename:enable_if<!__is_allocator<_Alloc>::
std::value_too_large	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      value_too_large = 			EOVERFLOW,$/;"	e	enum:std::errc	access:public
std::wrong_protocol_type	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      wrong_protocol_type = 			EPROTOTYPE$/;"	e	enum:std::errc	access:public
std::wstreampos	/usr/include/c++/10/bits/postypes.h	/^  typedef fpos<mbstate_t> wstreampos;$/;"	t	namespace:std	typeref:typename:fpos<mbstate_t>
std::wstring	/usr/include/c++/10/bits/stringfwd.h	/^  typedef basic_string<wchar_t> wstring;   $/;"	t	namespace:std	typeref:typename:basic_string<wchar_t>
stderr	/usr/include/stdio.h	/^#define stderr /;"	d
stdin	/usr/include/stdio.h	/^#define stdin /;"	d
stdout	/usr/include/stdio.h	/^#define stdout /;"	d
stod	/usr/include/c++/10/bits/basic_string.h	/^  stod(const string& __str, size_t* __idx = 0)$/;"	f	namespace:std	typeref:typename:double	signature:(const string & __str,size_t * __idx=0)
stod	/usr/include/c++/10/bits/basic_string.h	/^  stod(const wstring& __str, size_t* __idx = 0)$/;"	f	namespace:std	typeref:typename:double	signature:(const wstring & __str,size_t * __idx=0)
stof	/usr/include/c++/10/bits/basic_string.h	/^  stof(const string& __str, size_t* __idx = 0)$/;"	f	namespace:std	typeref:typename:float	signature:(const string & __str,size_t * __idx=0)
stof	/usr/include/c++/10/bits/basic_string.h	/^  stof(const wstring& __str, size_t* __idx = 0)$/;"	f	namespace:std	typeref:typename:float	signature:(const wstring & __str,size_t * __idx=0)
stoi	/usr/include/c++/10/bits/basic_string.h	/^  stoi(const string& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION _GLIBCXX_BEGIN_NAMESPACE_CXX11 int	signature:(const string & __str,size_t * __idx=0,int __base=10)
stoi	/usr/include/c++/10/bits/basic_string.h	/^  stoi(const wstring& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:int	signature:(const wstring & __str,size_t * __idx=0,int __base=10)
stol	/usr/include/c++/10/bits/basic_string.h	/^  stol(const string& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:long	signature:(const string & __str,size_t * __idx=0,int __base=10)
stol	/usr/include/c++/10/bits/basic_string.h	/^  stol(const wstring& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:long	signature:(const wstring & __str,size_t * __idx=0,int __base=10)
stold	/usr/include/c++/10/bits/basic_string.h	/^  stold(const string& __str, size_t* __idx = 0)$/;"	f	namespace:std	typeref:typename:long double	signature:(const string & __str,size_t * __idx=0)
stold	/usr/include/c++/10/bits/basic_string.h	/^  stold(const wstring& __str, size_t* __idx = 0)$/;"	f	namespace:std	typeref:typename:long double	signature:(const wstring & __str,size_t * __idx=0)
stoll	/usr/include/c++/10/bits/basic_string.h	/^  stoll(const string& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:long long	signature:(const string & __str,size_t * __idx=0,int __base=10)
stoll	/usr/include/c++/10/bits/basic_string.h	/^  stoll(const wstring& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:long long	signature:(const wstring & __str,size_t * __idx=0,int __base=10)
stoul	/usr/include/c++/10/bits/basic_string.h	/^  stoul(const string& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:unsigned long	signature:(const string & __str,size_t * __idx=0,int __base=10)
stoul	/usr/include/c++/10/bits/basic_string.h	/^  stoul(const wstring& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:unsigned long	signature:(const wstring & __str,size_t * __idx=0,int __base=10)
stoull	/usr/include/c++/10/bits/basic_string.h	/^  stoull(const string& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:unsigned long long	signature:(const string & __str,size_t * __idx=0,int __base=10)
stoull	/usr/include/c++/10/bits/basic_string.h	/^  stoull(const wstring& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:unsigned long long	signature:(const wstring & __str,size_t * __idx=0,int __base=10)
stream	/usr/include/c++/10/bits/ios_base.h	/^  enum class io_errc { stream = 1 };$/;"	e	enum:std::io_errc	access:public
stream_timeout	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      stream_timeout = 				ETIME,$/;"	e	enum:std::errc	access:public
streambuf_type	/usr/include/c++/10/bits/streambuf_iterator.h	/^      typedef basic_streambuf<_CharT, _Traits>		streambuf_type;$/;"	t	class:std::istreambuf_iterator	typeref:typename:basic_streambuf<_CharT,_Traits>	access:public
streambuf_type	/usr/include/c++/10/bits/streambuf_iterator.h	/^      typedef basic_streambuf<_CharT, _Traits> streambuf_type;$/;"	t	class:std::ostreambuf_iterator	typeref:typename:basic_streambuf<_CharT,_Traits>	access:public
streambuf_type	/usr/include/c++/10/bits/streambuf_iterator.h	/^      typedef typename __is_iterator_type::streambuf_type  streambuf_type;$/;"	t	function:std::__copy_move_a2	typeref:typename:__is_iterator_type::streambuf_type
streambuf_type	/usr/include/c++/10/bits/streambuf_iterator.h	/^      typedef typename __is_iterator_type::streambuf_type  streambuf_type;$/;"	t	function:std::advance	typeref:typename:__is_iterator_type::streambuf_type
streambuf_type	/usr/include/c++/10/bits/streambuf_iterator.h	/^      typedef typename __is_iterator_type::streambuf_type  streambuf_type;$/;"	t	function:std::find	typeref:typename:__is_iterator_type::streambuf_type
streamoff	/usr/include/c++/10/bits/postypes.h	/^  typedef long          streamoff;$/;"	t	namespace:std	typeref:typename:long
streampos	/usr/include/c++/10/bits/postypes.h	/^  typedef fpos<mbstate_t> streampos;$/;"	t	namespace:std	typeref:typename:fpos<mbstate_t>
streamsize	/usr/include/c++/10/bits/postypes.h	/^  typedef ptrdiff_t	streamsize; \/\/ Signed integral type$/;"	t	namespace:std	typeref:typename:ptrdiff_t
strfromd	/usr/include/stdlib.h	/^extern int strfromd (char *__dest, size_t __size, const char *__format,$/;"	p	typeref:typename:int	signature:(char * __dest,size_t __size,const char * __format,double __f)
strfromf	/usr/include/stdlib.h	/^extern int strfromf (char *__dest, size_t __size, const char *__format,$/;"	p	typeref:typename:int	signature:(char * __dest,size_t __size,const char * __format,float __f)
strfromf128	/usr/include/stdlib.h	/^extern int strfromf128 (char *__dest, size_t __size, const char * __format,$/;"	p	typeref:typename:int	signature:(char * __dest,size_t __size,const char * __format,_Float128 __f)
strfromf128x	/usr/include/stdlib.h	/^extern int strfromf128x (char *__dest, size_t __size, const char * __format,$/;"	p	typeref:typename:int	signature:(char * __dest,size_t __size,const char * __format,_Float128x __f)
strfromf16	/usr/include/stdlib.h	/^extern int strfromf16 (char *__dest, size_t __size, const char * __format,$/;"	p	typeref:typename:int	signature:(char * __dest,size_t __size,const char * __format,_Float16 __f)
strfromf32	/usr/include/stdlib.h	/^extern int strfromf32 (char *__dest, size_t __size, const char * __format,$/;"	p	typeref:typename:int	signature:(char * __dest,size_t __size,const char * __format,_Float32 __f)
strfromf32x	/usr/include/stdlib.h	/^extern int strfromf32x (char *__dest, size_t __size, const char * __format,$/;"	p	typeref:typename:int	signature:(char * __dest,size_t __size,const char * __format,_Float32x __f)
strfromf64	/usr/include/stdlib.h	/^extern int strfromf64 (char *__dest, size_t __size, const char * __format,$/;"	p	typeref:typename:int	signature:(char * __dest,size_t __size,const char * __format,_Float64 __f)
strfromf64x	/usr/include/stdlib.h	/^extern int strfromf64x (char *__dest, size_t __size, const char * __format,$/;"	p	typeref:typename:int	signature:(char * __dest,size_t __size,const char * __format,_Float64x __f)
strfroml	/usr/include/stdlib.h	/^extern int strfroml (char *__dest, size_t __size, const char *__format,$/;"	p	typeref:typename:int	signature:(char * __dest,size_t __size,const char * __format,long double __f)
strftime	/usr/include/time.h	/^extern size_t strftime (char *__restrict __s, size_t __maxsize,$/;"	p	typeref:typename:size_t	signature:(char * __restrict __s,size_t __maxsize,const char * __restrict __format,const struct tm * __restrict __tp)
strftime_l	/usr/include/time.h	/^extern size_t strftime_l (char *__restrict __s, size_t __maxsize,$/;"	p	typeref:typename:size_t	signature:(char * __restrict __s,size_t __maxsize,const char * __restrict __format,const struct tm * __restrict __tp,locale_t __loc)
string	/usr/include/c++/10/bits/stringfwd.h	/^  typedef basic_string<char>    string;   $/;"	t	namespace:std	typeref:typename:basic_string<char>
string_literals	/usr/include/c++/10/bits/basic_string.h	/^  inline namespace string_literals$/;"	n	namespace:std::literals
string_literals	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^    inline namespace string_literals { }$/;"	n	namespace:std::literals
string_type	/usr/include/c++/10/bits/locale_classes.h	/^      typedef basic_string<_CharT>	string_type;$/;"	t	class:std::collate	typeref:typename:basic_string<_CharT>	access:public
string_type	/usr/include/c++/10/bits/locale_classes.h	/^      typedef basic_string<_CharT> string_type;$/;"	t	class:std::collate_byname	typeref:typename:basic_string<_CharT>	access:public
string_type	/usr/include/c++/10/bits/locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	t	class:std::numpunct	typeref:typename:basic_string<_CharT>	access:public
string_type	/usr/include/c++/10/bits/locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	t	class:std::numpunct_byname	typeref:typename:basic_string<_CharT>	access:public
string_view_literals	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^    inline namespace string_view_literals { }$/;"	n	namespace:std::literals
strptime	/usr/include/time.h	/^extern char *strptime (const char *__restrict __s,$/;"	p	typeref:typename:char *	signature:(const char * __restrict __s,const char * __restrict __fmt,struct tm * __tp)
strptime_l	/usr/include/time.h	/^extern char *strptime_l (const char *__restrict __s,$/;"	p	typeref:typename:char *	signature:(const char * __restrict __s,const char * __restrict __fmt,struct tm * __tp,locale_t __loc)
strtod	/usr/include/stdlib.h	/^extern double strtod (const char *__restrict __nptr,$/;"	p	typeref:typename:double	signature:(const char * __restrict __nptr,char ** __restrict __endptr)
strtod_l	/usr/include/stdlib.h	/^extern double strtod_l (const char *__restrict __nptr,$/;"	p	typeref:typename:double	signature:(const char * __restrict __nptr,char ** __restrict __endptr,locale_t __loc)
strtof	/usr/include/stdlib.h	/^extern float strtof (const char *__restrict __nptr,$/;"	p	typeref:typename:float	signature:(const char * __restrict __nptr,char ** __restrict __endptr)
strtof	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define strtof /;"	d
strtof128	/usr/include/stdlib.h	/^extern _Float128 strtof128 (const char *__restrict __nptr,$/;"	p	typeref:typename:_Float128	signature:(const char * __restrict __nptr,char ** __restrict __endptr)
strtof128_l	/usr/include/stdlib.h	/^extern _Float128 strtof128_l (const char *__restrict __nptr,$/;"	p	typeref:typename:_Float128	signature:(const char * __restrict __nptr,char ** __restrict __endptr,locale_t __loc)
strtof128x	/usr/include/stdlib.h	/^extern _Float128x strtof128x (const char *__restrict __nptr,$/;"	p	typeref:typename:_Float128x	signature:(const char * __restrict __nptr,char ** __restrict __endptr)
strtof128x_l	/usr/include/stdlib.h	/^extern _Float128x strtof128x_l (const char *__restrict __nptr,$/;"	p	typeref:typename:_Float128x	signature:(const char * __restrict __nptr,char ** __restrict __endptr,locale_t __loc)
strtof16	/usr/include/stdlib.h	/^extern _Float16 strtof16 (const char *__restrict __nptr,$/;"	p	typeref:typename:_Float16	signature:(const char * __restrict __nptr,char ** __restrict __endptr)
strtof16_l	/usr/include/stdlib.h	/^extern _Float16 strtof16_l (const char *__restrict __nptr,$/;"	p	typeref:typename:_Float16	signature:(const char * __restrict __nptr,char ** __restrict __endptr,locale_t __loc)
strtof32	/usr/include/stdlib.h	/^extern _Float32 strtof32 (const char *__restrict __nptr,$/;"	p	typeref:typename:_Float32	signature:(const char * __restrict __nptr,char ** __restrict __endptr)
strtof32_l	/usr/include/stdlib.h	/^extern _Float32 strtof32_l (const char *__restrict __nptr,$/;"	p	typeref:typename:_Float32	signature:(const char * __restrict __nptr,char ** __restrict __endptr,locale_t __loc)
strtof32x	/usr/include/stdlib.h	/^extern _Float32x strtof32x (const char *__restrict __nptr,$/;"	p	typeref:typename:_Float32x	signature:(const char * __restrict __nptr,char ** __restrict __endptr)
strtof32x_l	/usr/include/stdlib.h	/^extern _Float32x strtof32x_l (const char *__restrict __nptr,$/;"	p	typeref:typename:_Float32x	signature:(const char * __restrict __nptr,char ** __restrict __endptr,locale_t __loc)
strtof64	/usr/include/stdlib.h	/^extern _Float64 strtof64 (const char *__restrict __nptr,$/;"	p	typeref:typename:_Float64	signature:(const char * __restrict __nptr,char ** __restrict __endptr)
strtof64_l	/usr/include/stdlib.h	/^extern _Float64 strtof64_l (const char *__restrict __nptr,$/;"	p	typeref:typename:_Float64	signature:(const char * __restrict __nptr,char ** __restrict __endptr,locale_t __loc)
strtof64x	/usr/include/stdlib.h	/^extern _Float64x strtof64x (const char *__restrict __nptr,$/;"	p	typeref:typename:_Float64x	signature:(const char * __restrict __nptr,char ** __restrict __endptr)
strtof64x_l	/usr/include/stdlib.h	/^extern _Float64x strtof64x_l (const char *__restrict __nptr,$/;"	p	typeref:typename:_Float64x	signature:(const char * __restrict __nptr,char ** __restrict __endptr,locale_t __loc)
strtof_l	/usr/include/stdlib.h	/^extern float strtof_l (const char *__restrict __nptr,$/;"	p	typeref:typename:float	signature:(const char * __restrict __nptr,char ** __restrict __endptr,locale_t __loc)
strtol	/usr/include/stdlib.h	/^extern long int strtol (const char *__restrict __nptr,$/;"	p	typeref:typename:long int	signature:(const char * __restrict __nptr,char ** __restrict __endptr,int __base)
strtol_l	/usr/include/stdlib.h	/^extern long int strtol_l (const char *__restrict __nptr,$/;"	p	typeref:typename:long int	signature:(const char * __restrict __nptr,char ** __restrict __endptr,int __base,locale_t __loc)
strtold	/usr/include/stdlib.h	/^extern long double strtold (const char *__restrict __nptr,$/;"	p	typeref:typename:long double	signature:(const char * __restrict __nptr,char ** __restrict __endptr)
strtold	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define strtold /;"	d
strtold_l	/usr/include/stdlib.h	/^extern long double strtold_l (const char *__restrict __nptr,$/;"	p	typeref:typename:long double	signature:(const char * __restrict __nptr,char ** __restrict __endptr,locale_t __loc)
strtoll	/usr/include/stdlib.h	/^extern long long int strtoll (const char *__restrict __nptr,$/;"	p	typeref:typename:__extension__ long long int	signature:(const char * __restrict __nptr,char ** __restrict __endptr,int __base)
strtoll_l	/usr/include/stdlib.h	/^extern long long int strtoll_l (const char *__restrict __nptr,$/;"	p	typeref:typename:__extension__ long long int	signature:(const char * __restrict __nptr,char ** __restrict __endptr,int __base,locale_t __loc)
strtoq	/usr/include/stdlib.h	/^extern long long int strtoq (const char *__restrict __nptr,$/;"	p	typeref:typename:__extension__ long long int	signature:(const char * __restrict __nptr,char ** __restrict __endptr,int __base)
strtoul	/usr/include/stdlib.h	/^extern unsigned long int strtoul (const char *__restrict __nptr,$/;"	p	typeref:typename:unsigned long int	signature:(const char * __restrict __nptr,char ** __restrict __endptr,int __base)
strtoul_l	/usr/include/stdlib.h	/^extern unsigned long int strtoul_l (const char *__restrict __nptr,$/;"	p	typeref:typename:unsigned long int	signature:(const char * __restrict __nptr,char ** __restrict __endptr,int __base,locale_t __loc)
strtoull	/usr/include/stdlib.h	/^extern unsigned long long int strtoull (const char *__restrict __nptr,$/;"	p	typeref:typename:__extension__ unsigned long long int	signature:(const char * __restrict __nptr,char ** __restrict __endptr,int __base)
strtoull_l	/usr/include/stdlib.h	/^extern unsigned long long int strtoull_l (const char *__restrict __nptr,$/;"	p	typeref:typename:__extension__ unsigned long long int	signature:(const char * __restrict __nptr,char ** __restrict __endptr,int __base,locale_t __loc)
strtouq	/usr/include/stdlib.h	/^extern unsigned long long int strtouq (const char *__restrict __nptr,$/;"	p	typeref:typename:__extension__ unsigned long long int	signature:(const char * __restrict __nptr,char ** __restrict __endptr,int __base)
substr	/usr/include/c++/10/bits/basic_string.h	/^      substr(size_type __pos = 0, size_type __n = npos) const$/;"	f	class:std::basic_string	typeref:typename:basic_string	access:public	signature:(size_type __pos=0,size_type __n=npos) const
suseconds_t	/usr/include/x86_64-linux-gnu/sys/select.h	/^typedef __suseconds_t suseconds_t;$/;"	t	typeref:typename:__suseconds_t
suseconds_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __suseconds_t suseconds_t;$/;"	t	typeref:typename:__suseconds_t
swap	/usr/include/c++/10/bits/basic_ios.h	/^      swap(basic_ios& __rhs) noexcept$/;"	f	class:std::basic_ios	typeref:typename:void	access:protected	signature:(basic_ios & __rhs)
swap	/usr/include/c++/10/bits/basic_string.h	/^      swap(basic_string& __s) _GLIBCXX_NOEXCEPT;$/;"	p	class:std::basic_string	typeref:typename:void	access:public	signature:(basic_string & __s)
swap	/usr/include/c++/10/bits/basic_string.h	/^    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:void	signature:(basic_string<_CharT,_Traits,_Alloc> & __lhs,basic_string<_CharT,_Traits,_Alloc> & __rhs)
swap	/usr/include/c++/10/bits/exception_ptr.h	/^      swap(exception_ptr&) _GLIBCXX_USE_NOEXCEPT;$/;"	p	class:std::__exception_ptr::exception_ptr	typeref:typename:void	access:public	signature:(exception_ptr &)
swap	/usr/include/c++/10/bits/exception_ptr.h	/^    swap(exception_ptr& __lhs, exception_ptr& __rhs)$/;"	f	namespace:std::__exception_ptr	typeref:typename:void	signature:(exception_ptr & __lhs,exception_ptr & __rhs)
swap	/usr/include/c++/10/bits/move.h	/^    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR typename enable_if<__is_swappable<_Tp>::value>::type	signature:(_Tp (& __a)[_Nm],_Tp (& __b)[_Nm])
swap	/usr/include/c++/10/bits/move.h	/^    swap(_Tp& __a, _Tp& __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,is_move_constructible<_Tp>,is_move_assignable<_Tp>>::value>::type	signature:(_Tp & __a,_Tp & __b)
swap	/usr/include/c++/10/bits/stl_pair.h	/^      swap(pair& __p)$/;"	f	struct:std::pair	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(pair & __p)
swap	/usr/include/c++/10/bits/stl_pair.h	/^    swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR typename enable_if<__and_<__is_swappable<_T1>,__is_swappable<_T2>>::value>::type	signature:(pair<_T1,_T2> & __x,pair<_T1,_T2> & __y)
swap_ranges	/usr/include/c++/10/bits/stl_algobase.h	/^    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator2	signature:(_ForwardIterator1 __first1,_ForwardIterator1 __last1,_ForwardIterator2 __first2)
swprintf	/usr/include/wchar.h	/^extern int swprintf (wchar_t *__restrict __s, size_t __n,$/;"	p	typeref:typename:int	signature:(wchar_t * __restrict __s,size_t __n,const wchar_t * __restrict __format,...)
swscanf	/usr/include/wchar.h	/^#   define swscanf /;"	d
swscanf	/usr/include/wchar.h	/^extern int swscanf (const wchar_t *__restrict __s,$/;"	p	typeref:typename:int	signature:(const wchar_t * __restrict __s,const wchar_t * __restrict __format,...)
sync_with_stdio	/usr/include/c++/10/bits/ios_base.h	/^    sync_with_stdio(bool __sync = true);$/;"	p	class:std::ios_base	typeref:typename:bool	access:public	signature:(bool __sync=true)
system	/usr/include/stdlib.h	/^extern int system (const char *__command) __wur;$/;"	p	typeref:typename:int	signature:(const char * __command)
system_error	/usr/include/c++/10/bits/ios_base.h	/^    struct system_error : std::runtime_error$/;"	s	class:std::ios_base	inherits:std::runtime_error	access:private
table	/usr/include/c++/10/bits/locale_facets.h	/^      table() const throw()$/;"	f	class:std::ctype	typeref:typename:const mask *	access:public	signature:() const
table_size	/usr/include/c++/10/bits/locale_facets.h	/^      static const size_t      table_size = 1 + static_cast<unsigned char>(-1);$/;"	m	class:std::ctype	typeref:typename:const size_t	access:public
tai	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  int tai;			\/* TAI offset (ro) *\/$/;"	m	struct:timex	typeref:typename:int	access:public
tanf	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define tanf /;"	d
tanhf	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define tanhf /;"	d
tanhl	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define tanhl /;"	d
tanl	/usr/include/x86_64-linux-gnu/c++/10/bits/c++config.h	/^# define tanl /;"	d
tempnam	/usr/include/stdio.h	/^extern char *tempnam (const char *__dir, const char *__pfx)$/;"	p	typeref:typename:char *	signature:(const char * __dir,const char * __pfx)
text_file_busy	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      text_file_busy = 				ETXTBSY,$/;"	e	enum:std::errc	access:public
thousands_sep	/usr/include/c++/10/bits/locale_facets.h	/^      thousands_sep() const$/;"	f	class:std::numpunct	typeref:typename:char_type	access:public	signature:() const
thousands_sep	/usr/include/locale.h	/^  char *thousands_sep;		\/* Thousands separator.  *\/$/;"	m	struct:lconv	typeref:typename:char *	access:public
thread_local_storage	/usr/include/x86_64-linux-gnu/c++/10/bits/gthr-default.h	/^static void *thread_local_storage = NULL;$/;"	v	typeref:typename:void *
throw_with_nested	/usr/include/c++/10/bits/nested_exception.h	/^    throw_with_nested(_Tp&& __t)$/;"	f	namespace:std	typeref:typename:void	signature:(_Tp && __t)
tick	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  __syscall_slong_t tick;	\/* (modified) usecs between clock ticks *\/$/;"	m	struct:timex	typeref:typename:__syscall_slong_t	access:public
tie	/usr/include/c++/10/bits/basic_ios.h	/^      tie() const$/;"	f	class:std::basic_ios	typeref:typename:basic_ostream<_CharT,_Traits> *	access:public	signature:() const
tie	/usr/include/c++/10/bits/basic_ios.h	/^      tie(basic_ostream<_CharT, _Traits>* __tiestr)$/;"	f	class:std::basic_ios	typeref:typename:basic_ostream<_CharT,_Traits> *	access:public	signature:(basic_ostream<_CharT,_Traits> * __tiestr)
time	/usr/include/c++/10/bits/locale_classes.h	/^    static const category time		= 1L << 3;$/;"	m	class:std::locale	typeref:typename:const category	access:public
time	/usr/include/time.h	/^extern time_t time (time_t *__timer) __THROW;$/;"	p	typeref:typename:time_t	signature:(time_t * __timer)
time	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  struct timeval time;		\/* (read only, except for ADJ_SETOFFSET) *\/$/;"	m	struct:timex	typeref:struct:timeval	access:public
time_t	/usr/include/x86_64-linux-gnu/bits/types/time_t.h	/^typedef __time_t time_t;$/;"	t	typeref:typename:__time_t
timed_out	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      timed_out = 				ETIMEDOUT,$/;"	e	enum:std::errc	access:public
timegm	/usr/include/time.h	/^extern time_t timegm (struct tm *__tp) __THROW;$/;"	p	typeref:typename:time_t	signature:(struct tm * __tp)
timelocal	/usr/include/time.h	/^extern time_t timelocal (struct tm *__tp) __THROW;$/;"	p	typeref:typename:time_t	signature:(struct tm * __tp)
timer_create	/usr/include/time.h	/^extern int timer_create (clockid_t __clock_id,$/;"	p	typeref:typename:int	signature:(clockid_t __clock_id,struct sigevent * __restrict __evp,timer_t * __restrict __timerid)
timer_delete	/usr/include/time.h	/^extern int timer_delete (timer_t __timerid) __THROW;$/;"	p	typeref:typename:int	signature:(timer_t __timerid)
timer_getoverrun	/usr/include/time.h	/^extern int timer_getoverrun (timer_t __timerid) __THROW;$/;"	p	typeref:typename:int	signature:(timer_t __timerid)
timer_gettime	/usr/include/time.h	/^extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)$/;"	p	typeref:typename:int	signature:(timer_t __timerid,struct itimerspec * __value)
timer_settime	/usr/include/time.h	/^extern int timer_settime (timer_t __timerid, int __flags,$/;"	p	typeref:typename:int	signature:(timer_t __timerid,int __flags,const struct itimerspec * __restrict __value,struct itimerspec * __restrict __ovalue)
timer_t	/usr/include/x86_64-linux-gnu/bits/types/timer_t.h	/^typedef __timer_t timer_t;$/;"	t	typeref:typename:__timer_t
timespec	/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h	/^struct timespec$/;"	s
timespec::tv_nsec	/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h	/^  __syscall_slong_t tv_nsec;	\/* Nanoseconds.  *\/$/;"	m	struct:timespec	typeref:typename:__syscall_slong_t	access:public
timespec::tv_nsec	/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h	/^  long int tv_nsec;  \/* Nanoseconds.  *\/$/;"	m	struct:timespec	typeref:typename:long int	access:public
timespec::tv_sec	/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h	/^  __time_t tv_sec;		\/* Seconds.  *\/$/;"	m	struct:timespec	typeref:typename:__time_t	access:public
timespec_get	/usr/include/time.h	/^extern int timespec_get (struct timespec *__ts, int __base)$/;"	p	typeref:typename:int	signature:(struct timespec * __ts,int __base)
timeval	/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h	/^struct timeval$/;"	s
timeval::tv_sec	/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h	/^  __time_t tv_sec;		\/* Seconds.  *\/$/;"	m	struct:timeval	typeref:typename:__time_t	access:public
timeval::tv_usec	/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h	/^  __suseconds_t tv_usec;	\/* Microseconds.  *\/$/;"	m	struct:timeval	typeref:typename:__suseconds_t	access:public
timex	/usr/include/x86_64-linux-gnu/bits/timex.h	/^struct timex$/;"	s
timex::calcnt	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  __syscall_slong_t calcnt;	\/* calibration intervals (ro) *\/$/;"	m	struct:timex	typeref:typename:__syscall_slong_t	access:public
timex::constant	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  __syscall_slong_t constant;	\/* pll time constant *\/$/;"	m	struct:timex	typeref:typename:__syscall_slong_t	access:public
timex::errcnt	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  __syscall_slong_t errcnt;	\/* calibration errors (ro) *\/$/;"	m	struct:timex	typeref:typename:__syscall_slong_t	access:public
timex::esterror	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  __syscall_slong_t esterror;	\/* estimated error (usec) *\/$/;"	m	struct:timex	typeref:typename:__syscall_slong_t	access:public
timex::freq	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  __syscall_slong_t freq;	\/* frequency offset (scaled ppm) *\/$/;"	m	struct:timex	typeref:typename:__syscall_slong_t	access:public
timex::jitcnt	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  __syscall_slong_t jitcnt;	\/* jitter limit exceeded (ro) *\/$/;"	m	struct:timex	typeref:typename:__syscall_slong_t	access:public
timex::jitter	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  __syscall_slong_t jitter;	\/* pps jitter (us) (ro) *\/$/;"	m	struct:timex	typeref:typename:__syscall_slong_t	access:public
timex::maxerror	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  __syscall_slong_t maxerror;	\/* maximum error (usec) *\/$/;"	m	struct:timex	typeref:typename:__syscall_slong_t	access:public
timex::modes	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  unsigned int modes;		\/* mode selector *\/$/;"	m	struct:timex	typeref:typename:unsigned int	access:public
timex::offset	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  __syscall_slong_t offset;	\/* time offset (usec) *\/$/;"	m	struct:timex	typeref:typename:__syscall_slong_t	access:public
timex::ppsfreq	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  __syscall_slong_t ppsfreq;	\/* pps frequency (scaled ppm) (ro) *\/$/;"	m	struct:timex	typeref:typename:__syscall_slong_t	access:public
timex::precision	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  __syscall_slong_t precision;	\/* clock precision (usec) (ro) *\/$/;"	m	struct:timex	typeref:typename:__syscall_slong_t	access:public
timex::shift	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  int shift;			\/* interval duration (s) (shift) (ro) *\/$/;"	m	struct:timex	typeref:typename:int	access:public
timex::stabil	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  __syscall_slong_t stabil;	\/* pps stability (scaled ppm) (ro) *\/$/;"	m	struct:timex	typeref:typename:__syscall_slong_t	access:public
timex::status	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  int status;			\/* clock command\/status *\/$/;"	m	struct:timex	typeref:typename:int	access:public
timex::stbcnt	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  __syscall_slong_t stbcnt;	\/* stability limit exceeded (ro) *\/$/;"	m	struct:timex	typeref:typename:__syscall_slong_t	access:public
timex::tai	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  int tai;			\/* TAI offset (ro) *\/$/;"	m	struct:timex	typeref:typename:int	access:public
timex::tick	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  __syscall_slong_t tick;	\/* (modified) usecs between clock ticks *\/$/;"	m	struct:timex	typeref:typename:__syscall_slong_t	access:public
timex::time	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  struct timeval time;		\/* (read only, except for ADJ_SETOFFSET) *\/$/;"	m	struct:timex	typeref:struct:timeval	access:public
timex::tolerance	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  __syscall_slong_t tolerance;	\/* clock frequency tolerance (ppm) (ro) *\/$/;"	m	struct:timex	typeref:typename:__syscall_slong_t	access:public
tm	/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^struct tm$/;"	s
tm::__tm_gmtoff	/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  long int __tm_gmtoff;		\/* Seconds east of UTC.  *\/$/;"	m	struct:tm	typeref:typename:long int	access:public
tm::__tm_zone	/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  const char *__tm_zone;	\/* Timezone abbreviation.  *\/$/;"	m	struct:tm	typeref:typename:const char *	access:public
tm::tm_gmtoff	/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  long int tm_gmtoff;		\/* Seconds east of UTC.  *\/$/;"	m	struct:tm	typeref:typename:long int	access:public
tm::tm_hour	/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_hour;			\/* Hours.	[0-23] *\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm::tm_isdst	/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_isdst;			\/* DST.		[-1\/0\/1]*\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm::tm_mday	/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_mday;			\/* Day.		[1-31] *\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm::tm_min	/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_min;			\/* Minutes.	[0-59] *\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm::tm_mon	/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_mon;			\/* Month.	[0-11] *\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm::tm_sec	/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_sec;			\/* Seconds.	[0-60] (1 leap second) *\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm::tm_wday	/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_wday;			\/* Day of week.	[0-6] *\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm::tm_yday	/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_yday;			\/* Days in year.[0-365]	*\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm::tm_year	/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_year;			\/* Year	- 1900.  *\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm::tm_zone	/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  const char *tm_zone;		\/* Timezone abbreviation.  *\/$/;"	m	struct:tm	typeref:typename:const char *	access:public
tm_gmtoff	/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  long int tm_gmtoff;		\/* Seconds east of UTC.  *\/$/;"	m	struct:tm	typeref:typename:long int	access:public
tm_hour	/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_hour;			\/* Hours.	[0-23] *\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm_isdst	/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_isdst;			\/* DST.		[-1\/0\/1]*\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm_mday	/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_mday;			\/* Day.		[1-31] *\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm_min	/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_min;			\/* Minutes.	[0-59] *\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm_mon	/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_mon;			\/* Month.	[0-11] *\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm_sec	/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_sec;			\/* Seconds.	[0-60] (1 leap second) *\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm_wday	/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_wday;			\/* Day of week.	[0-6] *\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm_yday	/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_yday;			\/* Days in year.[0-365]	*\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm_year	/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_year;			\/* Year	- 1900.  *\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm_zone	/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  const char *tm_zone;		\/* Timezone abbreviation.  *\/$/;"	m	struct:tm	typeref:typename:const char *	access:public
tmpfile	/usr/include/stdio.h	/^#  define tmpfile /;"	d
tmpfile	/usr/include/stdio.h	/^extern FILE *tmpfile (void) __wur;$/;"	p	typeref:typename:FILE *	signature:(void)
tmpfile64	/usr/include/stdio.h	/^extern FILE *tmpfile64 (void) __wur;$/;"	p	typeref:typename:FILE *	signature:(void)
tmpnam	/usr/include/stdio.h	/^extern char *tmpnam (char *__s) __THROW __wur;$/;"	p	typeref:typename:char *	signature:(char * __s)
tmpnam_r	/usr/include/stdio.h	/^extern char *tmpnam_r (char *__s) __THROW __wur;$/;"	p	typeref:typename:char *	signature:(char * __s)
to_address	/usr/include/c++/10/bits/ptr_traits.h	/^    to_address(_Tp* __ptr) noexcept$/;"	f	namespace:std	typeref:typename:_Tp *	signature:(_Tp * __ptr)
to_address	/usr/include/c++/10/bits/ptr_traits.h	/^    to_address(const _Ptr& __ptr) noexcept$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Ptr & __ptr)
to_char_type	/usr/include/c++/10/bits/char_traits.h	/^      to_char_type(const int_type& __c) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR char_type	access:public	signature:(const int_type & __c)
to_char_type	/usr/include/c++/10/bits/char_traits.h	/^      to_char_type(const int_type& __c) noexcept$/;"	f	struct:std::char_traits	typeref:typename:char_type	access:public	signature:(const int_type & __c)
to_char_type	/usr/include/c++/10/bits/char_traits.h	/^      to_char_type(const int_type& __c)$/;"	f	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR char_type	access:public	signature:(const int_type & __c)
to_int_type	/usr/include/c++/10/bits/char_traits.h	/^      to_int_type(const char_type& __c) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR int_type	access:public	signature:(const char_type & __c)
to_int_type	/usr/include/c++/10/bits/char_traits.h	/^      to_int_type(const char_type& __c) noexcept$/;"	f	struct:std::char_traits	typeref:typename:int_type	access:public	signature:(const char_type & __c)
to_int_type	/usr/include/c++/10/bits/char_traits.h	/^      to_int_type(const char_type& __c)$/;"	f	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR int_type	access:public	signature:(const char_type & __c)
to_string	/usr/include/c++/10/bits/basic_string.h	/^  to_string(double __val)$/;"	f	namespace:std	typeref:typename:string	signature:(double __val)
to_string	/usr/include/c++/10/bits/basic_string.h	/^  to_string(float __val)$/;"	f	namespace:std	typeref:typename:string	signature:(float __val)
to_string	/usr/include/c++/10/bits/basic_string.h	/^  to_string(int __val)$/;"	f	namespace:std	typeref:typename:string	signature:(int __val)
to_string	/usr/include/c++/10/bits/basic_string.h	/^  to_string(long __val)$/;"	f	namespace:std	typeref:typename:string	signature:(long __val)
to_string	/usr/include/c++/10/bits/basic_string.h	/^  to_string(long double __val)$/;"	f	namespace:std	typeref:typename:string	signature:(long double __val)
to_string	/usr/include/c++/10/bits/basic_string.h	/^  to_string(long long __val)$/;"	f	namespace:std	typeref:typename:string	signature:(long long __val)
to_string	/usr/include/c++/10/bits/basic_string.h	/^  to_string(unsigned __val)$/;"	f	namespace:std	typeref:typename:string	signature:(unsigned __val)
to_string	/usr/include/c++/10/bits/basic_string.h	/^  to_string(unsigned long __val)$/;"	f	namespace:std	typeref:typename:string	signature:(unsigned long __val)
to_string	/usr/include/c++/10/bits/basic_string.h	/^  to_string(unsigned long long __val)$/;"	f	namespace:std	typeref:typename:string	signature:(unsigned long long __val)
to_wstring	/usr/include/c++/10/bits/basic_string.h	/^  to_wstring(double __val)$/;"	f	namespace:std	typeref:typename:wstring	signature:(double __val)
to_wstring	/usr/include/c++/10/bits/basic_string.h	/^  to_wstring(float __val)$/;"	f	namespace:std	typeref:typename:wstring	signature:(float __val)
to_wstring	/usr/include/c++/10/bits/basic_string.h	/^  to_wstring(int __val)$/;"	f	namespace:std	typeref:typename:wstring	signature:(int __val)
to_wstring	/usr/include/c++/10/bits/basic_string.h	/^  to_wstring(long __val)$/;"	f	namespace:std	typeref:typename:wstring	signature:(long __val)
to_wstring	/usr/include/c++/10/bits/basic_string.h	/^  to_wstring(long double __val)$/;"	f	namespace:std	typeref:typename:wstring	signature:(long double __val)
to_wstring	/usr/include/c++/10/bits/basic_string.h	/^  to_wstring(long long __val)$/;"	f	namespace:std	typeref:typename:wstring	signature:(long long __val)
to_wstring	/usr/include/c++/10/bits/basic_string.h	/^  to_wstring(unsigned __val)$/;"	f	namespace:std	typeref:typename:wstring	signature:(unsigned __val)
to_wstring	/usr/include/c++/10/bits/basic_string.h	/^  to_wstring(unsigned long __val)$/;"	f	namespace:std	typeref:typename:wstring	signature:(unsigned long __val)
to_wstring	/usr/include/c++/10/bits/basic_string.h	/^  to_wstring(unsigned long long __val)$/;"	f	namespace:std	typeref:typename:wstring	signature:(unsigned long long __val)
toascii	/usr/include/ctype.h	/^#  define toascii(/;"	d	signature:(c)
toascii	/usr/include/ctype.h	/^extern int toascii (int __c) __THROW;$/;"	p	typeref:typename:int	signature:(int __c)
toascii_l	/usr/include/ctype.h	/^#   define toascii_l(/;"	d	signature:(c,l)
tolerance	/usr/include/x86_64-linux-gnu/bits/timex.h	/^  __syscall_slong_t tolerance;	\/* clock frequency tolerance (ppm) (ro) *\/$/;"	m	struct:timex	typeref:typename:__syscall_slong_t	access:public
tolower	/usr/include/c++/10/bits/locale_facets.h	/^      tolower(char_type __c) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:char_type	access:public	signature:(char_type __c) const
tolower	/usr/include/c++/10/bits/locale_facets.h	/^      tolower(char_type __c) const$/;"	f	class:std::ctype	typeref:typename:char_type	access:public	signature:(char_type __c) const
tolower	/usr/include/c++/10/bits/locale_facets.h	/^      tolower(char_type* __lo, const char_type* __hi) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(char_type * __lo,const char_type * __hi) const
tolower	/usr/include/c++/10/bits/locale_facets.h	/^      tolower(char_type* __lo, const char_type* __hi) const$/;"	f	class:std::ctype	typeref:typename:const char_type *	access:public	signature:(char_type * __lo,const char_type * __hi) const
tolower	/usr/include/c++/10/bits/locale_facets.h	/^    tolower(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:_CharT	signature:(_CharT __c,const locale & __loc)
tolower	/usr/include/c++/10/bits/localefwd.h	/^    tolower(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:_CharT	signature:(_CharT,const locale &)
tolower	/usr/include/ctype.h	/^#  define tolower(/;"	d	signature:(c)
tolower	/usr/include/ctype.h	/^extern int tolower (int __c) __THROW;$/;"	p	typeref:typename:int	signature:(int __c)
tolower_l	/usr/include/ctype.h	/^#  define tolower_l(/;"	d	signature:(c,locale)
tolower_l	/usr/include/ctype.h	/^extern int tolower_l (int __c, locale_t __l) __THROW;$/;"	p	typeref:typename:int	signature:(int __c,locale_t __l)
too_many_files_open	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      too_many_files_open = 			EMFILE,$/;"	e	enum:std::errc	access:public
too_many_files_open_in_system	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      too_many_files_open_in_system = 		ENFILE,$/;"	e	enum:std::errc	access:public
too_many_links	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      too_many_links = 				EMLINK,$/;"	e	enum:std::errc	access:public
too_many_symbolic_link_levels	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      too_many_symbolic_link_levels = 		ELOOP,$/;"	e	enum:std::errc	access:public
toupper	/usr/include/c++/10/bits/locale_facets.h	/^      toupper(char_type *__lo, const char_type* __hi) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(char_type * __lo,const char_type * __hi) const
toupper	/usr/include/c++/10/bits/locale_facets.h	/^      toupper(char_type *__lo, const char_type* __hi) const$/;"	f	class:std::ctype	typeref:typename:const char_type *	access:public	signature:(char_type * __lo,const char_type * __hi) const
toupper	/usr/include/c++/10/bits/locale_facets.h	/^      toupper(char_type __c) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:char_type	access:public	signature:(char_type __c) const
toupper	/usr/include/c++/10/bits/locale_facets.h	/^      toupper(char_type __c) const$/;"	f	class:std::ctype	typeref:typename:char_type	access:public	signature:(char_type __c) const
toupper	/usr/include/c++/10/bits/locale_facets.h	/^    toupper(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:_CharT	signature:(_CharT __c,const locale & __loc)
toupper	/usr/include/c++/10/bits/localefwd.h	/^    toupper(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:_CharT	signature:(_CharT,const locale &)
toupper	/usr/include/ctype.h	/^#  define toupper(/;"	d	signature:(c)
toupper	/usr/include/ctype.h	/^extern int toupper (int __c) __THROW;$/;"	p	typeref:typename:int	signature:(int __c)
toupper_l	/usr/include/ctype.h	/^#  define toupper_l(/;"	d	signature:(c,locale)
toupper_l	/usr/include/ctype.h	/^extern int toupper_l (int __c, locale_t __l) __THROW;$/;"	p	typeref:typename:int	signature:(int __c,locale_t __l)
towctrans	/usr/include/wctype.h	/^extern wint_t towctrans (wint_t __wc, wctrans_t __desc) __THROW;$/;"	p	typeref:typename:wint_t	signature:(wint_t __wc,wctrans_t __desc)
towctrans_l	/usr/include/wctype.h	/^extern wint_t towctrans_l (wint_t __wc, wctrans_t __desc,$/;"	p	typeref:typename:wint_t	signature:(wint_t __wc,wctrans_t __desc,locale_t __locale)
towlower	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^extern wint_t towlower (wint_t __wc) __THROW;$/;"	p	typeref:typename:wint_t	signature:(wint_t __wc)
towlower_l	/usr/include/wctype.h	/^extern wint_t towlower_l (wint_t __wc, locale_t __locale) __THROW;$/;"	p	typeref:typename:wint_t	signature:(wint_t __wc,locale_t __locale)
towupper	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^extern wint_t towupper (wint_t __wc) __THROW;$/;"	p	typeref:typename:wint_t	signature:(wint_t __wc)
towupper_l	/usr/include/wctype.h	/^extern wint_t towupper_l (wint_t __wc, locale_t __locale) __THROW;$/;"	p	typeref:typename:wint_t	signature:(wint_t __wc,locale_t __locale)
traits_type	/usr/include/c++/10/bits/basic_ios.h	/^      typedef _Traits                                traits_type;$/;"	t	class:std::basic_ios	typeref:typename:_Traits	access:public
traits_type	/usr/include/c++/10/bits/basic_string.h	/^      typedef _Traits					traits_type;$/;"	t	class:std::basic_string	typeref:typename:_Traits	access:public
traits_type	/usr/include/c++/10/bits/streambuf_iterator.h	/^      typedef _Traits					traits_type;$/;"	t	class:std::istreambuf_iterator	typeref:typename:_Traits	access:public
traits_type	/usr/include/c++/10/bits/streambuf_iterator.h	/^      typedef _Traits			       traits_type;$/;"	t	class:std::ostreambuf_iterator	typeref:typename:_Traits	access:public
traits_type	/usr/include/c++/10/bits/streambuf_iterator.h	/^      typedef typename __is_iterator_type::traits_type	   traits_type;$/;"	t	function:std::__copy_move_a2	typeref:typename:__is_iterator_type::traits_type
traits_type	/usr/include/c++/10/bits/streambuf_iterator.h	/^      typedef typename __is_iterator_type::traits_type	   traits_type;$/;"	t	function:std::advance	typeref:typename:__is_iterator_type::traits_type
traits_type	/usr/include/c++/10/bits/streambuf_iterator.h	/^      typedef typename __is_iterator_type::traits_type     traits_type;$/;"	t	function:std::find	typeref:typename:__is_iterator_type::traits_type
transform	/usr/include/c++/10/bits/locale_classes.h	/^      transform(const _CharT* __lo, const _CharT* __hi) const$/;"	f	class:std::collate	typeref:typename:string_type	access:public	signature:(const _CharT * __lo,const _CharT * __hi) const
truename	/usr/include/c++/10/bits/locale_facets.h	/^      truename() const$/;"	f	class:std::numpunct	typeref:typename:string_type	access:public	signature:() const
trunc	/usr/include/c++/10/bits/ios_base.h	/^    static const openmode trunc =	_S_trunc;$/;"	m	class:std::ios_base	typeref:typename:const openmode	access:public
ttyslot	/usr/include/stdlib.h	/^extern int ttyslot (void) __THROW;$/;"	p	typeref:typename:int	signature:(void)
tv_nsec	/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h	/^  __syscall_slong_t tv_nsec;	\/* Nanoseconds.  *\/$/;"	m	struct:timespec	typeref:typename:__syscall_slong_t	access:public
tv_nsec	/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h	/^  long int tv_nsec;  \/* Nanoseconds.  *\/$/;"	m	struct:timespec	typeref:typename:long int	access:public
tv_sec	/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h	/^  __time_t tv_sec;		\/* Seconds.  *\/$/;"	m	struct:timespec	typeref:typename:__time_t	access:public
tv_sec	/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h	/^  __time_t tv_sec;		\/* Seconds.  *\/$/;"	m	struct:timeval	typeref:typename:__time_t	access:public
tv_usec	/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h	/^  __suseconds_t tv_usec;	\/* Microseconds.  *\/$/;"	m	struct:timeval	typeref:typename:__suseconds_t	access:public
type	/usr/include/c++/10/bits/alloc_traits.h	/^	  using type = _Func<_Alloc>;$/;"	t	struct:std::allocator_traits::_Ptr	typeref:typename:_Func<_Alloc>	access:public
type	/usr/include/c++/10/bits/alloc_traits.h	/^	  using type = decltype(__test<_Alloc>(0));$/;"	t	struct:std::allocator_traits::__construct_helper	access:public
type	/usr/include/c++/10/bits/alloc_traits.h	/^	  using type = typename pointer_traits<pointer>::template rebind<_Tp>;$/;"	t	struct:std::allocator_traits::_Ptr	typeref:typename:pointer_traits<pointer>::template rebind<_Tp>	access:public
type	/usr/include/c++/10/bits/alloc_traits.h	/^	{ using type = typename _A2::difference_type; };$/;"	t	struct:std::allocator_traits::_Diff	typeref:typename:_A2::difference_type	access:public
type	/usr/include/c++/10/bits/alloc_traits.h	/^	{ using type = typename _A2::size_type; };$/;"	t	struct:std::allocator_traits::_Size	typeref:typename:_A2::size_type	access:public
type	/usr/include/c++/10/bits/alloc_traits.h	/^	{ using type = typename pointer_traits<_PtrT>::difference_type; };$/;"	t	struct:std::allocator_traits::_Diff	typeref:typename:pointer_traits<_PtrT>::difference_type	access:public
type	/usr/include/c++/10/bits/alloc_traits.h	/^      { using type = typename _Tp::template rebind<_Up>::other; };$/;"	t	struct:std::__allocator_traits_base::__rebind	typeref:typename:_Tp::template rebind<_Up>::other	access:public
type	/usr/include/c++/10/bits/iterator_concepts.h	/^	  using type = typename incrementable_traits<_Iter>::difference_type;$/;"	t	struct:std::__iterator_traits::__diff	typeref:typename:incrementable_traits<_Iter>::difference_type	access:public
type	/usr/include/c++/10/bits/iterator_concepts.h	/^	  { using type = decltype(iter_move(std::declval<_Tp>())); };$/;"	t	struct:std::ranges::__cust_imove::_IMove::__result	access:public
type	/usr/include/c++/10/bits/iterator_concepts.h	/^	  { using type = iter_reference_t<_Tp>; };$/;"	t	struct:std::ranges::__cust_imove::_IMove::__result	typeref:typename:iter_reference_t<_Tp>	access:public
type	/usr/include/c++/10/bits/iterator_concepts.h	/^	  { using type = remove_reference_t<iter_reference_t<_Tp>>&&; };$/;"	t	struct:std::ranges::__cust_imove::_IMove::__result	typeref:typename:remove_reference_t<iter_reference_t<_Tp>> &&	access:public
type	/usr/include/c++/10/bits/iterator_concepts.h	/^	{ using type = bidirectional_iterator_tag; };$/;"	t	struct:std::__iterator_traits::__cat	typeref:typename:bidirectional_iterator_tag	access:public
type	/usr/include/c++/10/bits/iterator_concepts.h	/^	{ using type = decltype(std::declval<_Iter&>().operator->()); };$/;"	t	struct:std::__iterator_traits::__ptr	access:public
type	/usr/include/c++/10/bits/iterator_concepts.h	/^	{ using type = forward_iterator_tag; };$/;"	t	struct:std::__iterator_traits::__cat	typeref:typename:forward_iterator_tag	access:public
type	/usr/include/c++/10/bits/iterator_concepts.h	/^	{ using type = input_iterator_tag; };$/;"	t	struct:std::__iterator_traits::__cat	typeref:typename:input_iterator_tag	access:public
type	/usr/include/c++/10/bits/iterator_concepts.h	/^	{ using type = iter_reference_t<_Iter>; };$/;"	t	struct:std::__iterator_traits::__ref	typeref:typename:iter_reference_t<_Iter>	access:public
type	/usr/include/c++/10/bits/iterator_concepts.h	/^	{ using type = random_access_iterator_tag; };$/;"	t	struct:std::__iterator_traits::__cat	typeref:typename:random_access_iterator_tag	access:public
type	/usr/include/c++/10/bits/iterator_concepts.h	/^	{ using type = typename _Iter::iterator_category; };$/;"	t	struct:std::__iterator_traits::__cat	typeref:typename:_Iter::iterator_category	access:public
type	/usr/include/c++/10/bits/iterator_concepts.h	/^	{ using type = typename _Iter::pointer; };$/;"	t	struct:std::__iterator_traits::__ptr	typeref:typename:_Iter::pointer	access:public
type	/usr/include/c++/10/bits/iterator_concepts.h	/^	{ using type = typename _Iter::reference; };$/;"	t	struct:std::__iterator_traits::__ref	typeref:typename:_Iter::reference	access:public
type	/usr/include/c++/10/bits/iterator_concepts.h	/^	{ using type = void; };$/;"	t	struct:std::__iterator_traits::__diff	typeref:typename:void	access:public
type	/usr/include/c++/10/bits/iterator_concepts.h	/^	{ using type = void; };$/;"	t	struct:std::__iterator_traits::__ptr	typeref:typename:void	access:public
type	/usr/include/c++/10/bits/iterator_concepts.h	/^      { using type = _Tp; };$/;"	t	struct:std::__detail::__iter_traits_impl	typeref:typename:_Tp	access:public
type	/usr/include/c++/10/bits/iterator_concepts.h	/^      { using type = iterator_traits<_Iter>; };$/;"	t	struct:std::__detail::__iter_traits_impl	typeref:typename:iterator_traits<_Iter>	access:public
type	/usr/include/c++/10/bits/iterator_concepts.h	/^      { using type = random_access_iterator_tag; };$/;"	t	struct:std::__detail::__iter_concept_impl	typeref:typename:random_access_iterator_tag	access:public
type	/usr/include/c++/10/bits/iterator_concepts.h	/^      { using type = typename __iter_traits<_Iter>::iterator_category; };$/;"	t	struct:std::__detail::__iter_concept_impl	typeref:typename:__iter_traits<_Iter>::iterator_category	access:public
type	/usr/include/c++/10/bits/iterator_concepts.h	/^      { using type = typename __iter_traits<_Iter>::iterator_concept; };$/;"	t	struct:std::__detail::__iter_concept_impl	typeref:typename:__iter_traits<_Iter>::iterator_concept	access:public
type	/usr/include/c++/10/bits/ptr_traits.h	/^	{ using type = typename _Tp::template rebind<_Up>; };$/;"	t	struct:std::pointer_traits::__rebind	typeref:typename:_Tp::template rebind<_Up>	access:public
type	/usr/include/c++/10/bits/ptr_traits.h	/^    { using type = _Template<_Up, _Types...>; };$/;"	t	struct:std::__replace_first_arg	typeref:typename:_Template<_Up,_Types...>	access:public
type	/usr/include/c++/10/bits/ptr_traits.h	/^    { using type = _Tp; };$/;"	t	struct:std::__get_first_arg	typeref:typename:_Tp	access:public
type	/usr/include/c++/10/bits/ptr_traits.h	/^    { using type = __undefined; };$/;"	t	struct:std::__get_first_arg	typeref:typename:__undefined	access:public
type	/usr/include/c++/10/bits/range_access.h	/^      using type = make_signed_t<decltype(__cont.size())>;$/;"	t	function:std::ssize
type	/usr/include/c++/10/bits/stl_iterator.h	/^	  using type = decltype(std::declval<const _CIter&>().operator->());$/;"	t	struct:std::iterator_traits::__ptr	access:public
type	/usr/include/c++/10/bits/stl_iterator.h	/^	  using type = void;$/;"	t	struct:std::iterator_traits::__ptr	typeref:typename:void	access:public
tzset	/usr/include/time.h	/^extern void tzset (void) __THROW;$/;"	p	typeref:typename:void	signature:(void)
u16streampos	/usr/include/c++/10/bits/postypes.h	/^  typedef fpos<mbstate_t> u16streampos;$/;"	t	namespace:std	typeref:typename:fpos<mbstate_t>
u16string	/usr/include/c++/10/bits/stringfwd.h	/^  typedef basic_string<char16_t> u16string; $/;"	t	namespace:std	typeref:typename:basic_string<char16_t>
u32streampos	/usr/include/c++/10/bits/postypes.h	/^  typedef fpos<mbstate_t> u32streampos;$/;"	t	namespace:std	typeref:typename:fpos<mbstate_t>
u32string	/usr/include/c++/10/bits/stringfwd.h	/^  typedef basic_string<char32_t> u32string; $/;"	t	namespace:std	typeref:typename:basic_string<char32_t>
u8streampos	/usr/include/c++/10/bits/postypes.h	/^  typedef fpos<mbstate_t> u8streampos;$/;"	t	namespace:std	typeref:typename:fpos<mbstate_t>
u8string	/usr/include/c++/10/bits/stringfwd.h	/^  typedef basic_string<char8_t> u8string;$/;"	t	namespace:std	typeref:typename:basic_string<char8_t>
u_char	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __u_char u_char;$/;"	t	typeref:typename:__u_char
u_int	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __u_int u_int;$/;"	t	typeref:typename:__u_int
u_int16_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __uint16_t u_int16_t;$/;"	t	typeref:typename:__uint16_t
u_int32_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __uint32_t u_int32_t;$/;"	t	typeref:typename:__uint32_t
u_int64_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __uint64_t u_int64_t;$/;"	t	typeref:typename:__uint64_t
u_int8_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __uint8_t u_int8_t;$/;"	t	typeref:typename:__uint8_t
u_long	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __u_long u_long;$/;"	t	typeref:typename:__u_long
u_quad_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __u_quad_t u_quad_t;$/;"	t	typeref:typename:__u_quad_t
u_short	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __u_short u_short;$/;"	t	typeref:typename:__u_short
uid_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __uid_t uid_t;$/;"	t	typeref:typename:__uid_t
uint	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef unsigned int uint;$/;"	t	typeref:typename:unsigned int
uint16_t	/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h	/^typedef __uint16_t uint16_t;$/;"	t	typeref:typename:__uint16_t
uint32_t	/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h	/^typedef __uint32_t uint32_t;$/;"	t	typeref:typename:__uint32_t
uint64_t	/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h	/^typedef __uint64_t uint64_t;$/;"	t	typeref:typename:__uint64_t
uint8_t	/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h	/^typedef __uint8_t uint8_t;$/;"	t	typeref:typename:__uint8_t
uint_fast16_t	/usr/include/stdint.h	/^typedef unsigned int		uint_fast16_t;$/;"	t	typeref:typename:unsigned int
uint_fast16_t	/usr/include/stdint.h	/^typedef unsigned long int	uint_fast16_t;$/;"	t	typeref:typename:unsigned long int
uint_fast32_t	/usr/include/stdint.h	/^typedef unsigned int		uint_fast32_t;$/;"	t	typeref:typename:unsigned int
uint_fast32_t	/usr/include/stdint.h	/^typedef unsigned long int	uint_fast32_t;$/;"	t	typeref:typename:unsigned long int
uint_fast64_t	/usr/include/stdint.h	/^typedef unsigned long int	uint_fast64_t;$/;"	t	typeref:typename:unsigned long int
uint_fast64_t	/usr/include/stdint.h	/^typedef unsigned long long int	uint_fast64_t;$/;"	t	typeref:typename:unsigned long long int
uint_fast8_t	/usr/include/stdint.h	/^typedef unsigned char		uint_fast8_t;$/;"	t	typeref:typename:unsigned char
uint_least16_t	/usr/include/stdint.h	/^typedef __uint_least16_t uint_least16_t;$/;"	t	typeref:typename:__uint_least16_t
uint_least32_t	/usr/include/stdint.h	/^typedef __uint_least32_t uint_least32_t;$/;"	t	typeref:typename:__uint_least32_t
uint_least64_t	/usr/include/stdint.h	/^typedef __uint_least64_t uint_least64_t;$/;"	t	typeref:typename:__uint_least64_t
uint_least8_t	/usr/include/stdint.h	/^typedef __uint_least8_t uint_least8_t;$/;"	t	typeref:typename:__uint_least8_t
uintmax_t	/usr/include/stdint.h	/^typedef __uintmax_t		uintmax_t;$/;"	t	typeref:typename:__uintmax_t
uintptr_t	/usr/include/stdint.h	/^typedef unsigned int		uintptr_t;$/;"	t	typeref:typename:unsigned int
uintptr_t	/usr/include/stdint.h	/^typedef unsigned long int	uintptr_t;$/;"	t	typeref:typename:unsigned long int
ulong	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef unsigned long int ulong;$/;"	t	typeref:typename:unsigned long int
unary_function	/usr/include/c++/10/bits/stl_function.h	/^    struct unary_function$/;"	s	namespace:std
unary_negate	/usr/include/c++/10/bits/stl_function.h	/^      unary_negate(const _Predicate& __x) : _M_pred(__x) { }$/;"	f	class:std::unary_negate	typeref:typename:_GLIBCXX14_CONSTEXPR	access:public	signature:(const _Predicate & __x)
unary_negate	/usr/include/c++/10/bits/stl_function.h	/^    class unary_negate$/;"	c	namespace:std	inherits:unary_function<typename_Predicate::argument_type,bool>
ungetc	/usr/include/stdio.h	/^extern int ungetc (int __c, FILE *__stream);$/;"	p	typeref:typename:int	signature:(int __c,FILE * __stream)
ungetwc	/usr/include/wchar.h	/^extern wint_t ungetwc (wint_t __wc, __FILE *__stream);$/;"	p	typeref:typename:wint_t	signature:(wint_t __wc,__FILE * __stream)
unitbuf	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags unitbuf =     _S_unitbuf;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
unitbuf	/usr/include/c++/10/bits/ios_base.h	/^  unitbuf(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
unlockpt	/usr/include/stdlib.h	/^extern int unlockpt (int __fd) __THROW;$/;"	p	typeref:typename:int	signature:(int __fd)
unreachable_sentinel	/usr/include/c++/10/bits/iterator_concepts.h	/^  inline constexpr unreachable_sentinel_t unreachable_sentinel{};$/;"	v	namespace:std	typeref:typename:unreachable_sentinel_t
unreachable_sentinel_t	/usr/include/c++/10/bits/iterator_concepts.h	/^  struct unreachable_sentinel_t$/;"	s	namespace:std
unsetenv	/usr/include/stdlib.h	/^extern int unsetenv (const char *__name) __THROW __nonnull ((1));$/;"	p	typeref:typename:int	signature:(const char * __name)
unsetf	/usr/include/c++/10/bits/ios_base.h	/^    unsetf(fmtflags __mask)$/;"	f	class:std::ios_base	typeref:typename:void	access:public	signature:(fmtflags __mask)
unshare	/usr/include/x86_64-linux-gnu/bits/sched.h	/^extern int unshare (int __flags) __THROW;$/;"	p	typeref:typename:int	signature:(int __flags)
upper	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h	/^    static const mask upper    	= _ISupper;$/;"	m	struct:std::ctype_base	typeref:typename:const mask	access:public
uppercase	/usr/include/c++/10/bits/ios_base.h	/^    static const fmtflags uppercase =   _S_uppercase;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
uppercase	/usr/include/c++/10/bits/ios_base.h	/^  uppercase(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
use_facet	/usr/include/c++/10/bits/localefwd.h	/^    use_facet(const locale&);$/;"	p	namespace:std	typeref:typename:const _Facet &	signature:(const locale &)
use_one	src/code1/code1.c	/^void use_one(){$/;"	f	typeref:typename:void	signature:()
use_one	src/code1/code1.h	/^void use_one();$/;"	p	typeref:typename:void	signature:()
use_two	src/code2/code2.c	/^void use_two(){$/;"	f	typeref:typename:void	signature:()
use_two	src/code2/code2.h	/^void use_two();$/;"	p	typeref:typename:void	signature:()
useconds_t	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef __useconds_t useconds_t;$/;"	t	typeref:typename:__useconds_t
uselocale	/usr/include/locale.h	/^extern locale_t uselocale (locale_t __dataset) __THROW;$/;"	p	typeref:typename:locale_t	signature:(locale_t __dataset)
ushort	/usr/include/x86_64-linux-gnu/sys/types.h	/^typedef unsigned short int ushort;$/;"	t	typeref:typename:unsigned short int
va_arg	/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h	/^#define va_arg(/;"	d	signature:(v,l)
va_copy	/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h	/^#define va_copy(/;"	d	signature:(d,s)
va_end	/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h	/^#define va_end(/;"	d	signature:(v)
va_list	/usr/include/stdio.h	/^typedef __gnuc_va_list va_list;$/;"	t	typeref:typename:__gnuc_va_list
va_list	/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h	/^typedef __gnuc_va_list va_list;$/;"	t	typeref:typename:__gnuc_va_list
va_start	/usr/lib/gcc/x86_64-linux-gnu/10/include/stdarg.h	/^#define va_start(/;"	d	signature:(v,l)
valloc	/usr/include/stdlib.h	/^extern void *valloc (size_t __size) __THROW __attribute_malloc__$/;"	p	typeref:typename:void *	signature:(size_t __size)
value	/usr/include/c++/10/backward/binders.h	/^      typename _Operation::first_argument_type value;$/;"	m	class:std::binder1st	typeref:typename:_Operation::first_argument_type	access:protected
value	/usr/include/c++/10/backward/binders.h	/^      typename _Operation::second_argument_type value;$/;"	m	class:std::binder2nd	typeref:typename:_Operation::second_argument_type	access:protected
value	/usr/include/c++/10/bits/alloc_traits.h	/^      = typename enable_if<!__is_allocator<_Alloc>::value, _Alloc>::type;$/;"	t	namespace:std	typeref:typename:enable_if<!__is_allocator<_Alloc>::
value	/usr/include/c++/10/bits/stl_pair.h	/^			    || !is_same<_T2, _U2>::value,$/;"	t	struct:std::pair	typeref:typename:_PCC<!is_same<_T1,_U1>::value||!is_same<_T2,_U2>::	access:public
value_too_large	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      value_too_large = 			EOVERFLOW,$/;"	e	enum:std::errc	access:public
value_type	/usr/include/c++/10/bits/alloc_traits.h	/^      typedef typename _Alloc::value_type value_type;$/;"	t	struct:std::allocator_traits	typeref:typename:_Alloc::value_type	access:public
value_type	/usr/include/c++/10/bits/alloc_traits.h	/^      using value_type = _Tp;$/;"	t	struct:std::allocator_traits	typeref:typename:_Tp	access:public
value_type	/usr/include/c++/10/bits/allocator.h	/^      typedef _Tp        value_type;$/;"	t	class:std::allocator	typeref:typename:_Tp	access:public
value_type	/usr/include/c++/10/bits/allocator.h	/^      typedef _Tp value_type;$/;"	t	class:std::allocator	typeref:typename:_Tp	access:public
value_type	/usr/include/c++/10/bits/allocator.h	/^      typedef void        value_type;$/;"	t	class:std::allocator	typeref:typename:void	access:public
value_type	/usr/include/c++/10/bits/basic_string.h	/^      typedef typename _Traits::char_type		value_type;$/;"	t	class:std::basic_string	typeref:typename:_Traits::char_type	access:public
value_type	/usr/include/c++/10/bits/iterator_concepts.h	/^	  typename indirectly_readable_traits<_Iter>::value_type;$/;"	m	class:std::__detail::indirectly_readable_traits<_Iter>	typeref:meta:typename
value_type	/usr/include/c++/10/bits/iterator_concepts.h	/^	typename _Iter::value_type;$/;"	m	class:std::__detail::_Iter	typeref:meta:typename
value_type	/usr/include/c++/10/bits/iterator_concepts.h	/^      using value_type	      = typename _Iterator::value_type;$/;"	t	struct:std::__iterator_traits	typeref:typename:_Iterator::value_type	access:public
value_type	/usr/include/c++/10/bits/iterator_concepts.h	/^      using value_type	      = void;$/;"	t	struct:std::__iterator_traits	typeref:typename:void	access:public
value_type	/usr/include/c++/10/bits/iterator_concepts.h	/^      using value_type = remove_cvref_t<indirect_result_t<_Proj&, _Iter>>;$/;"	t	struct:std::projected	typeref:typename:remove_cvref_t<indirect_result_t<_Proj &,_Iter>>	access:public
value_type	/usr/include/c++/10/bits/iterator_concepts.h	/^      using value_type$/;"	t	struct:std::__iterator_traits	typeref:typename:indirectly_readable_traits<_Iterator>::value_type	access:public
value_type	/usr/include/c++/10/bits/iterator_concepts.h	/^      { using value_type = remove_cv_t<_Tp>; };$/;"	t	struct:std::__detail::__cond_value_type	typeref:typename:remove_cv_t<_Tp>	access:public
value_type	/usr/include/c++/10/bits/iterator_concepts.h	/^    { using value_type = remove_cv_t<remove_extent_t<_Iter>>; };$/;"	t	struct:std::indirectly_readable_traits	typeref:typename:remove_cv_t<remove_extent_t<_Iter>>	access:public
value_type	/usr/include/c++/10/bits/iterator_concepts.h	/^  template<typename _Tp> requires requires { typename _Tp::value_type; }$/;"	m	class:std::_Tp	typeref:meta:typename
value_type	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef typename __traits_type::value_type  	value_type;$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:__traits_type::value_type	access:public
value_type	/usr/include/c++/10/bits/stl_iterator.h	/^      typedef typename __traits_type::value_type  	value_type;$/;"	t	class:std::move_iterator	typeref:typename:__traits_type::value_type	access:public
value_type	/usr/include/c++/10/bits/stl_iterator.h	/^      using value_type = iter_value_t<_It>;$/;"	t	struct:std::iterator_traits	typeref:typename:iter_value_t<_It>	access:public
value_type	/usr/include/c++/10/bits/stl_iterator.h	/^      using value_type = iter_value_t<_Iterator>;$/;"	t	class:std::move_iterator	typeref:typename:iter_value_t<_Iterator>	access:public
value_type	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef _Tp                         value_type;$/;"	t	struct:std::iterator_traits	typeref:typename:_Tp	access:public
value_type	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef _Tp        value_type;$/;"	t	struct:std::iterator	typeref:typename:_Tp	access:public
value_type	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::value_type        value_type;$/;"	t	struct:std::__iterator_traits	typeref:typename:_Iterator::value_type	access:public
value_type	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::value_type        value_type;$/;"	t	struct:std::iterator_traits	typeref:typename:_Iterator::value_type	access:public
value_type	/usr/include/c++/10/bits/stl_iterator_base_types.h	/^      using value_type	      = remove_cv_t<_Tp>;$/;"	t	struct:std::iterator_traits	typeref:typename:remove_cv_t<_Tp>	access:public
value_type	/usr/include/c++/10/ext/alloc_traits.h	/^    typedef typename _Alloc::value_type             value_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc::value_type	access:public
value_type	/usr/include/c++/10/ext/alloc_traits.h	/^    typedef typename _Base_type::value_type         value_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Base_type::value_type	access:public
value_type	/usr/include/c++/10/ext/new_allocator.h	/^      typedef _Tp        value_type;$/;"	t	class:__gnu_cxx::new_allocator	typeref:typename:_Tp	access:public
vasprintf	/usr/include/stdio.h	/^extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,$/;"	p	typeref:typename:int	signature:(char ** __restrict __ptr,const char * __restrict __f,__gnuc_va_list __arg)
vdprintf	/usr/include/stdio.h	/^extern int vdprintf (int __fd, const char *__restrict __fmt,$/;"	p	typeref:typename:int	signature:(int __fd,const char * __restrict __fmt,__gnuc_va_list __arg)
vfprintf	/usr/include/stdio.h	/^extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,$/;"	p	typeref:typename:int	signature:(FILE * __restrict __s,const char * __restrict __format,__gnuc_va_list __arg)
vfscanf	/usr/include/stdio.h	/^#   define vfscanf /;"	d
vfscanf	/usr/include/stdio.h	/^extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,$/;"	p	typeref:typename:int	signature:(FILE * __restrict __s,const char * __restrict __format,__gnuc_va_list __arg)
vfwprintf	/usr/include/wchar.h	/^extern int vfwprintf (__FILE *__restrict __s,$/;"	p	typeref:typename:int	signature:(__FILE * __restrict __s,const wchar_t * __restrict __format,__gnuc_va_list __arg)
vfwscanf	/usr/include/wchar.h	/^#   define vfwscanf /;"	d
vfwscanf	/usr/include/wchar.h	/^extern int vfwscanf (__FILE *__restrict __s,$/;"	p	typeref:typename:int	signature:(__FILE * __restrict __s,const wchar_t * __restrict __format,__gnuc_va_list __arg)
void_pointer	/usr/include/c++/10/bits/alloc_traits.h	/^      using void_pointer = typename _Ptr<__v_pointer, void>::type;$/;"	t	struct:std::allocator_traits	typeref:typename:_Ptr<__v_pointer,void>::type	access:public
void_pointer	/usr/include/c++/10/bits/alloc_traits.h	/^      using void_pointer = void*;$/;"	t	struct:std::allocator_traits	typeref:typename:void *	access:public
vprintf	/usr/include/stdio.h	/^extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);$/;"	p	typeref:typename:int	signature:(const char * __restrict __format,__gnuc_va_list __arg)
vscanf	/usr/include/stdio.h	/^#   define vscanf /;"	d
vscanf	/usr/include/stdio.h	/^extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)$/;"	p	typeref:typename:int	signature:(const char * __restrict __format,__gnuc_va_list __arg)
vsnprintf	/usr/include/stdio.h	/^extern int vsnprintf (char *__restrict __s, size_t __maxlen,$/;"	p	typeref:typename:int	signature:(char * __restrict __s,size_t __maxlen,const char * __restrict __format,__gnuc_va_list __arg)
vsprintf	/usr/include/stdio.h	/^extern int vsprintf (char *__restrict __s, const char *__restrict __format,$/;"	p	typeref:typename:int	signature:(char * __restrict __s,const char * __restrict __format,__gnuc_va_list __arg)
vsscanf	/usr/include/stdio.h	/^#   define vsscanf /;"	d
vsscanf	/usr/include/stdio.h	/^extern int vsscanf (const char *__restrict __s,$/;"	p	typeref:typename:int	signature:(const char * __restrict __s,const char * __restrict __format,__gnuc_va_list __arg)
vswprintf	/usr/include/wchar.h	/^extern int vswprintf (wchar_t *__restrict __s, size_t __n,$/;"	p	typeref:typename:int	signature:(wchar_t * __restrict __s,size_t __n,const wchar_t * __restrict __format,__gnuc_va_list __arg)
vswscanf	/usr/include/wchar.h	/^#   define vswscanf /;"	d
vswscanf	/usr/include/wchar.h	/^extern int vswscanf (const wchar_t *__restrict __s,$/;"	p	typeref:typename:int	signature:(const wchar_t * __restrict __s,const wchar_t * __restrict __format,__gnuc_va_list __arg)
vwprintf	/usr/include/wchar.h	/^extern int vwprintf (const wchar_t *__restrict __format,$/;"	p	typeref:typename:int	signature:(const wchar_t * __restrict __format,__gnuc_va_list __arg)
vwscanf	/usr/include/wchar.h	/^#   define vwscanf /;"	d
vwscanf	/usr/include/wchar.h	/^extern int vwscanf (const wchar_t *__restrict __format,$/;"	p	typeref:typename:int	signature:(const wchar_t * __restrict __format,__gnuc_va_list __arg)
wcpcpy	/usr/include/wchar.h	/^extern wchar_t *wcpcpy (wchar_t *__restrict __dest,$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __restrict __dest,const wchar_t * __restrict __src)
wcpncpy	/usr/include/wchar.h	/^extern wchar_t *wcpncpy (wchar_t *__restrict __dest,$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __restrict __dest,const wchar_t * __restrict __src,size_t __n)
wcrtomb	/usr/include/wchar.h	/^extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,$/;"	p	typeref:typename:size_t	signature:(char * __restrict __s,wchar_t __wc,mbstate_t * __restrict __ps)
wcscasecmp	/usr/include/wchar.h	/^extern int wcscasecmp (const wchar_t *__s1, const wchar_t *__s2) __THROW;$/;"	p	typeref:typename:int	signature:(const wchar_t * __s1,const wchar_t * __s2)
wcscasecmp_l	/usr/include/wchar.h	/^extern int wcscasecmp_l (const wchar_t *__s1, const wchar_t *__s2,$/;"	p	typeref:typename:int	signature:(const wchar_t * __s1,const wchar_t * __s2,locale_t __loc)
wcscat	/usr/include/wchar.h	/^extern wchar_t *wcscat (wchar_t *__restrict __dest,$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __restrict __dest,const wchar_t * __restrict __src)
wcschr	/usr/include/wchar.h	/^extern "C++" const wchar_t *wcschr (const wchar_t *__wcs, wchar_t __wc)$/;"	p	typeref:typename:const wchar_t *	signature:(const wchar_t * __wcs,wchar_t __wc)
wcschr	/usr/include/wchar.h	/^extern "C++" wchar_t *wcschr (wchar_t *__wcs, wchar_t __wc)$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __wcs,wchar_t __wc)
wcschr	/usr/include/wchar.h	/^extern wchar_t *wcschr (const wchar_t *__wcs, wchar_t __wc)$/;"	p	typeref:typename:wchar_t *	signature:(const wchar_t * __wcs,wchar_t __wc)
wcschrnul	/usr/include/wchar.h	/^extern wchar_t *wcschrnul (const wchar_t *__s, wchar_t __wc)$/;"	p	typeref:typename:wchar_t *	signature:(const wchar_t * __s,wchar_t __wc)
wcscmp	/usr/include/wchar.h	/^extern int wcscmp (const wchar_t *__s1, const wchar_t *__s2)$/;"	p	typeref:typename:int	signature:(const wchar_t * __s1,const wchar_t * __s2)
wcscoll	/usr/include/wchar.h	/^extern int wcscoll (const wchar_t *__s1, const wchar_t *__s2) __THROW;$/;"	p	typeref:typename:int	signature:(const wchar_t * __s1,const wchar_t * __s2)
wcscoll_l	/usr/include/wchar.h	/^extern int wcscoll_l (const wchar_t *__s1, const wchar_t *__s2,$/;"	p	typeref:typename:int	signature:(const wchar_t * __s1,const wchar_t * __s2,locale_t __loc)
wcscpy	/usr/include/wchar.h	/^extern wchar_t *wcscpy (wchar_t *__restrict __dest,$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __restrict __dest,const wchar_t * __restrict __src)
wcscspn	/usr/include/wchar.h	/^extern size_t wcscspn (const wchar_t *__wcs, const wchar_t *__reject)$/;"	p	typeref:typename:size_t	signature:(const wchar_t * __wcs,const wchar_t * __reject)
wcsdup	/usr/include/wchar.h	/^extern wchar_t *wcsdup (const wchar_t *__s) __THROW __attribute_malloc__;$/;"	p	typeref:typename:wchar_t *	signature:(const wchar_t * __s)
wcsftime	/usr/include/wchar.h	/^extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,$/;"	p	typeref:typename:size_t	signature:(wchar_t * __restrict __s,size_t __maxsize,const wchar_t * __restrict __format,const struct tm * __restrict __tp)
wcsftime_l	/usr/include/wchar.h	/^extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,$/;"	p	typeref:typename:size_t	signature:(wchar_t * __restrict __s,size_t __maxsize,const wchar_t * __restrict __format,const struct tm * __restrict __tp,locale_t __loc)
wcslen	/usr/include/wchar.h	/^extern size_t wcslen (const wchar_t *__s) __THROW __attribute_pure__;$/;"	p	typeref:typename:size_t	signature:(const wchar_t * __s)
wcsncasecmp	/usr/include/wchar.h	/^extern int wcsncasecmp (const wchar_t *__s1, const wchar_t *__s2,$/;"	p	typeref:typename:int	signature:(const wchar_t * __s1,const wchar_t * __s2,size_t __n)
wcsncasecmp_l	/usr/include/wchar.h	/^extern int wcsncasecmp_l (const wchar_t *__s1, const wchar_t *__s2,$/;"	p	typeref:typename:int	signature:(const wchar_t * __s1,const wchar_t * __s2,size_t __n,locale_t __loc)
wcsncat	/usr/include/wchar.h	/^extern wchar_t *wcsncat (wchar_t *__restrict __dest,$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __restrict __dest,const wchar_t * __restrict __src,size_t __n)
wcsncmp	/usr/include/wchar.h	/^extern int wcsncmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)$/;"	p	typeref:typename:int	signature:(const wchar_t * __s1,const wchar_t * __s2,size_t __n)
wcsncpy	/usr/include/wchar.h	/^extern wchar_t *wcsncpy (wchar_t *__restrict __dest,$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __restrict __dest,const wchar_t * __restrict __src,size_t __n)
wcsnlen	/usr/include/wchar.h	/^extern size_t wcsnlen (const wchar_t *__s, size_t __maxlen)$/;"	p	typeref:typename:size_t	signature:(const wchar_t * __s,size_t __maxlen)
wcsnrtombs	/usr/include/wchar.h	/^extern size_t wcsnrtombs (char *__restrict __dst,$/;"	p	typeref:typename:size_t	signature:(char * __restrict __dst,const wchar_t ** __restrict __src,size_t __nwc,size_t __len,mbstate_t * __restrict __ps)
wcspbrk	/usr/include/wchar.h	/^extern "C++" const wchar_t *wcspbrk (const wchar_t *__wcs,$/;"	p	typeref:typename:const wchar_t *	signature:(const wchar_t * __wcs,const wchar_t * __accept)
wcspbrk	/usr/include/wchar.h	/^extern "C++" wchar_t *wcspbrk (wchar_t *__wcs, const wchar_t *__accept)$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __wcs,const wchar_t * __accept)
wcspbrk	/usr/include/wchar.h	/^extern wchar_t *wcspbrk (const wchar_t *__wcs, const wchar_t *__accept)$/;"	p	typeref:typename:wchar_t *	signature:(const wchar_t * __wcs,const wchar_t * __accept)
wcsrchr	/usr/include/wchar.h	/^extern "C++" const wchar_t *wcsrchr (const wchar_t *__wcs, wchar_t __wc)$/;"	p	typeref:typename:const wchar_t *	signature:(const wchar_t * __wcs,wchar_t __wc)
wcsrchr	/usr/include/wchar.h	/^extern "C++" wchar_t *wcsrchr (wchar_t *__wcs, wchar_t __wc)$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __wcs,wchar_t __wc)
wcsrchr	/usr/include/wchar.h	/^extern wchar_t *wcsrchr (const wchar_t *__wcs, wchar_t __wc)$/;"	p	typeref:typename:wchar_t *	signature:(const wchar_t * __wcs,wchar_t __wc)
wcsrtombs	/usr/include/wchar.h	/^extern size_t wcsrtombs (char *__restrict __dst,$/;"	p	typeref:typename:size_t	signature:(char * __restrict __dst,const wchar_t ** __restrict __src,size_t __len,mbstate_t * __restrict __ps)
wcsspn	/usr/include/wchar.h	/^extern size_t wcsspn (const wchar_t *__wcs, const wchar_t *__accept)$/;"	p	typeref:typename:size_t	signature:(const wchar_t * __wcs,const wchar_t * __accept)
wcsstr	/usr/include/wchar.h	/^extern "C++" const wchar_t *wcsstr (const wchar_t *__haystack,$/;"	p	typeref:typename:const wchar_t *	signature:(const wchar_t * __haystack,const wchar_t * __needle)
wcsstr	/usr/include/wchar.h	/^extern "C++" wchar_t *wcsstr (wchar_t *__haystack, const wchar_t *__needle)$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __haystack,const wchar_t * __needle)
wcsstr	/usr/include/wchar.h	/^extern wchar_t *wcsstr (const wchar_t *__haystack, const wchar_t *__needle)$/;"	p	typeref:typename:wchar_t *	signature:(const wchar_t * __haystack,const wchar_t * __needle)
wcstod	/usr/include/wchar.h	/^extern double wcstod (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:double	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr)
wcstod_l	/usr/include/wchar.h	/^extern double wcstod_l (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:double	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,locale_t __loc)
wcstof	/usr/include/wchar.h	/^extern float wcstof (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:float	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr)
wcstof128	/usr/include/wchar.h	/^extern _Float128 wcstof128 (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:_Float128	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr)
wcstof128_l	/usr/include/wchar.h	/^extern _Float128 wcstof128_l (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:_Float128	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,locale_t __loc)
wcstof128x	/usr/include/wchar.h	/^extern _Float128x wcstof128x (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:_Float128x	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr)
wcstof128x_l	/usr/include/wchar.h	/^extern _Float128x wcstof128x_l (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:_Float128x	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,locale_t __loc)
wcstof16	/usr/include/wchar.h	/^extern _Float16 wcstof16 (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:_Float16	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr)
wcstof16_l	/usr/include/wchar.h	/^extern _Float16 wcstof16_l (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:_Float16	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,locale_t __loc)
wcstof32	/usr/include/wchar.h	/^extern _Float32 wcstof32 (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:_Float32	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr)
wcstof32_l	/usr/include/wchar.h	/^extern _Float32 wcstof32_l (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:_Float32	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,locale_t __loc)
wcstof32x	/usr/include/wchar.h	/^extern _Float32x wcstof32x (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:_Float32x	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr)
wcstof32x_l	/usr/include/wchar.h	/^extern _Float32x wcstof32x_l (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:_Float32x	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,locale_t __loc)
wcstof64	/usr/include/wchar.h	/^extern _Float64 wcstof64 (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:_Float64	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr)
wcstof64_l	/usr/include/wchar.h	/^extern _Float64 wcstof64_l (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:_Float64	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,locale_t __loc)
wcstof64x	/usr/include/wchar.h	/^extern _Float64x wcstof64x (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:_Float64x	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr)
wcstof64x_l	/usr/include/wchar.h	/^extern _Float64x wcstof64x_l (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:_Float64x	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,locale_t __loc)
wcstof_l	/usr/include/wchar.h	/^extern float wcstof_l (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:float	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,locale_t __loc)
wcstok	/usr/include/wchar.h	/^extern wchar_t *wcstok (wchar_t *__restrict __s,$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __restrict __s,const wchar_t * __restrict __delim,wchar_t ** __restrict __ptr)
wcstol	/usr/include/wchar.h	/^extern long int wcstol (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:long int	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,int __base)
wcstol_l	/usr/include/wchar.h	/^extern long int wcstol_l (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:long int	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,int __base,locale_t __loc)
wcstold	/usr/include/wchar.h	/^extern long double wcstold (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:long double	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr)
wcstold_l	/usr/include/wchar.h	/^extern long double wcstold_l (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:long double	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,locale_t __loc)
wcstoll	/usr/include/wchar.h	/^extern long long int wcstoll (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:__extension__ long long int	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,int __base)
wcstoll_l	/usr/include/wchar.h	/^extern long long int wcstoll_l (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:__extension__ long long int	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,int __base,locale_t __loc)
wcstombs	/usr/include/stdlib.h	/^extern size_t wcstombs (char *__restrict __s,$/;"	p	typeref:typename:size_t	signature:(char * __restrict __s,const wchar_t * __restrict __pwcs,size_t __n)
wcstoq	/usr/include/wchar.h	/^extern long long int wcstoq (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:__extension__ long long int	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,int __base)
wcstoul	/usr/include/wchar.h	/^extern unsigned long int wcstoul (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:unsigned long int	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,int __base)
wcstoul_l	/usr/include/wchar.h	/^extern unsigned long int wcstoul_l (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:unsigned long int	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,int __base,locale_t __loc)
wcstoull	/usr/include/wchar.h	/^extern unsigned long long int wcstoull (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:__extension__ unsigned long long int	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,int __base)
wcstoull_l	/usr/include/wchar.h	/^extern unsigned long long int wcstoull_l (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:__extension__ unsigned long long int	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,int __base,locale_t __loc)
wcstouq	/usr/include/wchar.h	/^extern unsigned long long int wcstouq (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:__extension__ unsigned long long int	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,int __base)
wcswcs	/usr/include/wchar.h	/^extern "C++" const wchar_t *wcswcs (const wchar_t *__haystack,$/;"	p	typeref:typename:const wchar_t *	signature:(const wchar_t * __haystack,const wchar_t * __needle)
wcswcs	/usr/include/wchar.h	/^extern "C++" wchar_t *wcswcs (wchar_t *__haystack, const wchar_t *__needle)$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __haystack,const wchar_t * __needle)
wcswcs	/usr/include/wchar.h	/^extern wchar_t *wcswcs (const wchar_t *__haystack, const wchar_t *__needle)$/;"	p	typeref:typename:wchar_t *	signature:(const wchar_t * __haystack,const wchar_t * __needle)
wcswidth	/usr/include/wchar.h	/^extern int wcswidth (const wchar_t *__s, size_t __n) __THROW;$/;"	p	typeref:typename:int	signature:(const wchar_t * __s,size_t __n)
wcsxfrm	/usr/include/wchar.h	/^extern size_t wcsxfrm (wchar_t *__restrict __s1,$/;"	p	typeref:typename:size_t	signature:(wchar_t * __restrict __s1,const wchar_t * __restrict __s2,size_t __n)
wcsxfrm_l	/usr/include/wchar.h	/^extern size_t wcsxfrm_l (wchar_t *__s1, const wchar_t *__s2,$/;"	p	typeref:typename:size_t	signature:(wchar_t * __s1,const wchar_t * __s2,size_t __n,locale_t __loc)
wctob	/usr/include/wchar.h	/^extern int wctob (wint_t __c) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __c)
wctomb	/usr/include/stdlib.h	/^extern int wctomb (char *__s, wchar_t __wchar) __THROW;$/;"	p	typeref:typename:int	signature:(char * __s,wchar_t __wchar)
wctrans	/usr/include/wctype.h	/^extern wctrans_t wctrans (const char *__property) __THROW;$/;"	p	typeref:typename:wctrans_t	signature:(const char * __property)
wctrans_l	/usr/include/wctype.h	/^extern wctrans_t wctrans_l (const char *__property, locale_t __locale)$/;"	p	typeref:typename:wctrans_t	signature:(const char * __property,locale_t __locale)
wctrans_t	/usr/include/wctype.h	/^typedef const __int32_t *wctrans_t;$/;"	t	typeref:typename:const __int32_t *
wctype	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^extern wctype_t wctype (const char *__property) __THROW;$/;"	p	typeref:typename:wctype_t	signature:(const char * __property)
wctype_l	/usr/include/wctype.h	/^extern wctype_t wctype_l (const char *__property, locale_t __locale)$/;"	p	typeref:typename:wctype_t	signature:(const char * __property,locale_t __locale)
wctype_t	/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^typedef unsigned long int wctype_t;$/;"	t	typeref:typename:unsigned long int
wcwidth	/usr/include/wchar.h	/^extern int wcwidth (wchar_t __c) __THROW;$/;"	p	typeref:typename:int	signature:(wchar_t __c)
wew	src/main.cpp	/^        int wew;$/;"	m	class:Why	typeref:typename:int	file:	access:private
what	/usr/include/c++/10/bits/exception.h	/^    what() const _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_NOTHROW;$/;"	p	class:std::exception	typeref:typename:const char *	access:public	signature:() const
what	/usr/include/c++/10/bits/ios_base.h	/^      what() const throw();$/;"	p	class:std::ios_base::failure	typeref:typename:const char *	access:public	signature:() const
widen	/usr/include/c++/10/bits/basic_ios.h	/^      widen(char __c) const$/;"	f	class:std::basic_ios	typeref:typename:char_type	access:public	signature:(char __c) const
widen	/usr/include/c++/10/bits/locale_facets.h	/^      widen(char __c) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:char_type	access:public	signature:(char __c) const
widen	/usr/include/c++/10/bits/locale_facets.h	/^      widen(char __c) const$/;"	f	class:std::ctype	typeref:typename:char_type	access:public	signature:(char __c) const
widen	/usr/include/c++/10/bits/locale_facets.h	/^      widen(const char* __lo, const char* __hi, char_type* __to) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:const char *	access:public	signature:(const char * __lo,const char * __hi,char_type * __to) const
widen	/usr/include/c++/10/bits/locale_facets.h	/^      widen(const char* __lo, const char* __hi, char_type* __to) const$/;"	f	class:std::ctype	typeref:typename:const char *	access:public	signature:(const char * __lo,const char * __hi,char_type * __to) const
width	/usr/include/c++/10/bits/ios_base.h	/^    width() const$/;"	f	class:std::ios_base	typeref:typename:streamsize	access:public	signature:() const
width	/usr/include/c++/10/bits/ios_base.h	/^    width(streamsize __wide)$/;"	f	class:std::ios_base	typeref:typename:streamsize	access:public	signature:(streamsize __wide)
wint_t	/usr/include/x86_64-linux-gnu/bits/types/wint_t.h	/^typedef __WINT_TYPE__ wint_t;$/;"	t	typeref:typename:__WINT_TYPE__
wint_t	/usr/lib/gcc/x86_64-linux-gnu/10/include/stddef.h	/^typedef __WINT_TYPE__ wint_t;$/;"	t	typeref:typename:__WINT_TYPE__
wmemchr	/usr/include/wchar.h	/^extern "C++" const wchar_t *wmemchr (const wchar_t *__s, wchar_t __c,$/;"	p	typeref:typename:const wchar_t *	signature:(const wchar_t * __s,wchar_t __c,size_t __n)
wmemchr	/usr/include/wchar.h	/^extern "C++" wchar_t *wmemchr (wchar_t *__s, wchar_t __c, size_t __n)$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __s,wchar_t __c,size_t __n)
wmemchr	/usr/include/wchar.h	/^extern wchar_t *wmemchr (const wchar_t *__s, wchar_t __c, size_t __n)$/;"	p	typeref:typename:wchar_t *	signature:(const wchar_t * __s,wchar_t __c,size_t __n)
wmemcmp	/usr/include/wchar.h	/^extern int wmemcmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)$/;"	p	typeref:typename:int	signature:(const wchar_t * __s1,const wchar_t * __s2,size_t __n)
wmemcpy	/usr/include/wchar.h	/^extern wchar_t *wmemcpy (wchar_t *__restrict __s1,$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __restrict __s1,const wchar_t * __restrict __s2,size_t __n)
wmemmove	/usr/include/wchar.h	/^extern wchar_t *wmemmove (wchar_t *__s1, const wchar_t *__s2, size_t __n)$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __s1,const wchar_t * __s2,size_t __n)
wmempcpy	/usr/include/wchar.h	/^extern wchar_t *wmempcpy (wchar_t *__restrict __s1,$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __restrict __s1,const wchar_t * __restrict __s2,size_t __n)
wmemset	/usr/include/wchar.h	/^extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) __THROW;$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __s,wchar_t __c,size_t __n)
woooow	src/main.cpp	/^        void woooow(){};$/;"	f	class:Why	typeref:typename:void	file:	access:public	signature:()
wprintf	/usr/include/wchar.h	/^extern int wprintf (const wchar_t *__restrict __format, ...)$/;"	p	typeref:typename:int	signature:(const wchar_t * __restrict __format,...)
write	/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h	/^  cookie_write_function_t *write;	\/* Write bytes.  *\/$/;"	m	struct:_IO_cookie_io_functions_t	typeref:typename:cookie_write_function_t *	access:public
wrong_protocol_type	/usr/include/x86_64-linux-gnu/c++/10/bits/error_constants.h	/^      wrong_protocol_type = 			EPROTOTYPE$/;"	e	enum:std::errc	access:public
wscanf	/usr/include/wchar.h	/^#   define wscanf /;"	d
wscanf	/usr/include/wchar.h	/^extern int wscanf (const wchar_t *__restrict __format, ...)$/;"	p	typeref:typename:int	signature:(const wchar_t * __restrict __format,...)
wstreampos	/usr/include/c++/10/bits/postypes.h	/^  typedef fpos<mbstate_t> wstreampos;$/;"	t	namespace:std	typeref:typename:fpos<mbstate_t>
wstring	/usr/include/c++/10/bits/stringfwd.h	/^  typedef basic_string<wchar_t> wstring;   $/;"	t	namespace:std	typeref:typename:basic_string<wchar_t>
xalloc	/usr/include/c++/10/bits/ios_base.h	/^    xalloc() throw();$/;"	p	class:std::ios_base	typeref:typename:int	access:public	signature:()
xdigit	/usr/include/x86_64-linux-gnu/c++/10/bits/ctype_base.h	/^    static const mask xdigit 	= _ISxdigit;$/;"	m	struct:std::ctype_base	typeref:typename:const mask	access:public
~Init	/usr/include/c++/10/bits/ios_base.h	/^      ~Init();$/;"	p	class:std::ios_base::Init	access:public	signature:()
~_Impl	/usr/include/c++/10/bits/locale_classes.h	/^   ~_Impl() throw();$/;"	p	class:std::locale::_Impl	access:private	signature:()
~__ctype_abstract_base	/usr/include/c++/10/bits/locale_facets.h	/^      ~__ctype_abstract_base() { }$/;"	f	class:std::__ctype_abstract_base	access:protected	signature:()
~__forced_unwind	/usr/include/c++/10/bits/cxxabi_forced.h	/^    virtual ~__forced_unwind() throw();$/;"	p	class:__cxxabiv1::__forced_unwind	access:private	signature:()
~__hash_enum	/usr/include/c++/10/bits/functional_hash.h	/^      ~__hash_enum();$/;"	p	struct:std::__hash_enum	access:private	signature:()
~__numpunct_cache	/usr/include/c++/10/bits/locale_facets.h	/^      ~__numpunct_cache();$/;"	p	struct:std::__numpunct_cache	access:public	signature:()
~__numpunct_cache	/usr/include/c++/10/bits/locale_facets.h	/^    __numpunct_cache<_CharT>::~__numpunct_cache()$/;"	f	class:std::__numpunct_cache	signature:()
~__pair_base	/usr/include/c++/10/bits/stl_pair.h	/^    ~__pair_base() = default;$/;"	p	class:std::__pair_base	access:private	signature:()
~__poison_hash	/usr/include/c++/10/bits/functional_hash.h	/^      ~__poison_hash();$/;"	p	struct:std::__poison_hash	access:private	signature:()
~__pthread_cleanup_class	/usr/include/pthread.h	/^  ~__pthread_cleanup_class () { if (__do_it) __cancel_routine (__cancel_arg); }$/;"	f	class:__pthread_cleanup_class	access:public	signature:()
~allocator	/usr/include/c++/10/bits/allocator.h	/^      ~allocator() _GLIBCXX_NOTHROW { }$/;"	f	class:std::allocator	access:public	signature:()
~basic_ios	/usr/include/c++/10/bits/basic_ios.h	/^      ~basic_ios() { }$/;"	f	class:std::basic_ios	access:public	signature:()
~basic_string	/usr/include/c++/10/bits/basic_string.h	/^      ~basic_string()$/;"	f	class:std::basic_string	access:public	signature:()
~collate	/usr/include/c++/10/bits/locale_classes.h	/^      ~collate()$/;"	f	class:std::collate	access:protected	signature:()
~collate_byname	/usr/include/c++/10/bits/locale_classes.h	/^      ~collate_byname() { }$/;"	f	class:std::collate_byname	access:protected	signature:()
~common_iterator	/usr/include/c++/10/bits/stl_iterator.h	/^    ~common_iterator()$/;"	f	class:std::common_iterator	access:public	signature:()
~ctype	/usr/include/c++/10/bits/locale_facets.h	/^      ~ctype();$/;"	p	class:std::ctype	access:protected	signature:()
~ctype_byname	/usr/include/c++/10/bits/locale_facets.h	/^      ~ctype_byname() { }$/;"	f	class:std::ctype_byname	access:protected	signature:()
~ctype_byname	/usr/include/c++/10/bits/locale_facets.h	/^      ~ctype_byname();$/;"	p	class:std::ctype_byname	access:protected	signature:()
~exception	/usr/include/c++/10/bits/exception.h	/^    virtual ~exception() _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_NOTHROW;$/;"	p	class:std::exception	access:public	signature:()
~facet	/usr/include/c++/10/bits/locale_classes.h	/^    ~facet();$/;"	p	class:std::locale::facet	access:protected	signature:()
~failure	/usr/include/c++/10/bits/ios_base.h	/^      ~failure() throw();$/;"	p	class:std::ios_base::failure	access:public	signature:()
~fpos	/usr/include/c++/10/bits/postypes.h	/^      ~fpos() = default;$/;"	p	class:std::fpos	access:public	signature:()
~ios_base	/usr/include/c++/10/bits/ios_base.h	/^    virtual ~ios_base();$/;"	p	class:std::ios_base	access:public	signature:()
~istreambuf_iterator	/usr/include/c++/10/bits/streambuf_iterator.h	/^      ~istreambuf_iterator() = default;$/;"	p	class:std::istreambuf_iterator	access:public	signature:()
~locale	/usr/include/c++/10/bits/locale_classes.h	/^    ~locale() throw();$/;"	p	class:std::locale	access:public	signature:()
~nested_exception	/usr/include/c++/10/bits/nested_exception.h	/^    virtual ~nested_exception() noexcept;$/;"	p	class:std::nested_exception	access:public	signature:()
~new_allocator	/usr/include/c++/10/ext/new_allocator.h	/^      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }$/;"	f	class:__gnu_cxx::new_allocator	access:public	signature:()
~num_get	/usr/include/c++/10/bits/locale_facets.h	/^      virtual ~num_get() { }$/;"	f	class:std::num_get	access:protected	signature:()
~num_put	/usr/include/c++/10/bits/locale_facets.h	/^      ~num_put() { }$/;"	f	class:std::num_put	access:protected	signature:()
~numpunct	/usr/include/c++/10/bits/locale_facets.h	/^      ~numpunct();$/;"	p	class:std::numpunct	access:protected	signature:()
~numpunct	/usr/include/c++/10/bits/locale_facets.h	/^    numpunct<char>::~numpunct();$/;"	p	class:std::numpunct	signature:()
~numpunct	/usr/include/c++/10/bits/locale_facets.h	/^    numpunct<wchar_t>::~numpunct();$/;"	p	class:std::numpunct	signature:()
~numpunct_byname	/usr/include/c++/10/bits/locale_facets.h	/^      ~numpunct_byname() { }$/;"	f	class:std::numpunct_byname	access:protected	signature:()
